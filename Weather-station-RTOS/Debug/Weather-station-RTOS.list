
Weather-station-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c990  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013c4  0800cb30  0800cb30  0001cb30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800def4  0800def4  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800def4  0800def4  0001def4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800defc  0800defc  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800defc  0800defc  0001defc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df00  0800df00  0001df00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800df04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005178  2000007c  0800df80  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200051f4  0800df80  000251f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024d1e  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000458b  00000000  00000000  00044dca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019a8  00000000  00000000  00049358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001800  00000000  00000000  0004ad00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5b6  00000000  00000000  0004c500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001eb76  00000000  00000000  00066ab6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ea0d  00000000  00000000  0008562c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00124039  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c80  00000000  00000000  0012408c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cb18 	.word	0x0800cb18

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	0800cb18 	.word	0x0800cb18

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_ldivmod>:
 8000c1c:	b97b      	cbnz	r3, 8000c3e <__aeabi_ldivmod+0x22>
 8000c1e:	b972      	cbnz	r2, 8000c3e <__aeabi_ldivmod+0x22>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bfbe      	ittt	lt
 8000c24:	2000      	movlt	r0, #0
 8000c26:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c2a:	e006      	blt.n	8000c3a <__aeabi_ldivmod+0x1e>
 8000c2c:	bf08      	it	eq
 8000c2e:	2800      	cmpeq	r0, #0
 8000c30:	bf1c      	itt	ne
 8000c32:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c36:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3a:	f000 b9b9 	b.w	8000fb0 <__aeabi_idiv0>
 8000c3e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c42:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c46:	2900      	cmp	r1, #0
 8000c48:	db09      	blt.n	8000c5e <__aeabi_ldivmod+0x42>
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	db1a      	blt.n	8000c84 <__aeabi_ldivmod+0x68>
 8000c4e:	f000 f84d 	bl	8000cec <__udivmoddi4>
 8000c52:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c5a:	b004      	add	sp, #16
 8000c5c:	4770      	bx	lr
 8000c5e:	4240      	negs	r0, r0
 8000c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	db1b      	blt.n	8000ca0 <__aeabi_ldivmod+0x84>
 8000c68:	f000 f840 	bl	8000cec <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	4252      	negs	r2, r2
 8000c7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c82:	4770      	bx	lr
 8000c84:	4252      	negs	r2, r2
 8000c86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c8a:	f000 f82f 	bl	8000cec <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4240      	negs	r0, r0
 8000c9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c9e:	4770      	bx	lr
 8000ca0:	4252      	negs	r2, r2
 8000ca2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca6:	f000 f821 	bl	8000cec <__udivmoddi4>
 8000caa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb2:	b004      	add	sp, #16
 8000cb4:	4252      	negs	r2, r2
 8000cb6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_uldivmod>:
 8000cbc:	b953      	cbnz	r3, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cbe:	b94a      	cbnz	r2, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cc0:	2900      	cmp	r1, #0
 8000cc2:	bf08      	it	eq
 8000cc4:	2800      	cmpeq	r0, #0
 8000cc6:	bf1c      	itt	ne
 8000cc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000ccc:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd0:	f000 b96e 	b.w	8000fb0 <__aeabi_idiv0>
 8000cd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cdc:	f000 f806 	bl	8000cec <__udivmoddi4>
 8000ce0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce8:	b004      	add	sp, #16
 8000cea:	4770      	bx	lr

08000cec <__udivmoddi4>:
 8000cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf0:	9d08      	ldr	r5, [sp, #32]
 8000cf2:	4604      	mov	r4, r0
 8000cf4:	468c      	mov	ip, r1
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f040 8083 	bne.w	8000e02 <__udivmoddi4+0x116>
 8000cfc:	428a      	cmp	r2, r1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	d947      	bls.n	8000d92 <__udivmoddi4+0xa6>
 8000d02:	fab2 f282 	clz	r2, r2
 8000d06:	b142      	cbz	r2, 8000d1a <__udivmoddi4+0x2e>
 8000d08:	f1c2 0020 	rsb	r0, r2, #32
 8000d0c:	fa24 f000 	lsr.w	r0, r4, r0
 8000d10:	4091      	lsls	r1, r2
 8000d12:	4097      	lsls	r7, r2
 8000d14:	ea40 0c01 	orr.w	ip, r0, r1
 8000d18:	4094      	lsls	r4, r2
 8000d1a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d1e:	0c23      	lsrs	r3, r4, #16
 8000d20:	fbbc f6f8 	udiv	r6, ip, r8
 8000d24:	fa1f fe87 	uxth.w	lr, r7
 8000d28:	fb08 c116 	mls	r1, r8, r6, ip
 8000d2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d30:	fb06 f10e 	mul.w	r1, r6, lr
 8000d34:	4299      	cmp	r1, r3
 8000d36:	d909      	bls.n	8000d4c <__udivmoddi4+0x60>
 8000d38:	18fb      	adds	r3, r7, r3
 8000d3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d3e:	f080 8119 	bcs.w	8000f74 <__udivmoddi4+0x288>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 8116 	bls.w	8000f74 <__udivmoddi4+0x288>
 8000d48:	3e02      	subs	r6, #2
 8000d4a:	443b      	add	r3, r7
 8000d4c:	1a5b      	subs	r3, r3, r1
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d54:	fb08 3310 	mls	r3, r8, r0, r3
 8000d58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x8c>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6a:	f080 8105 	bcs.w	8000f78 <__udivmoddi4+0x28c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8102 	bls.w	8000f78 <__udivmoddi4+0x28c>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d7c:	eba4 040e 	sub.w	r4, r4, lr
 8000d80:	2600      	movs	r6, #0
 8000d82:	b11d      	cbz	r5, 8000d8c <__udivmoddi4+0xa0>
 8000d84:	40d4      	lsrs	r4, r2
 8000d86:	2300      	movs	r3, #0
 8000d88:	e9c5 4300 	strd	r4, r3, [r5]
 8000d8c:	4631      	mov	r1, r6
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	b902      	cbnz	r2, 8000d96 <__udivmoddi4+0xaa>
 8000d94:	deff      	udf	#255	; 0xff
 8000d96:	fab2 f282 	clz	r2, r2
 8000d9a:	2a00      	cmp	r2, #0
 8000d9c:	d150      	bne.n	8000e40 <__udivmoddi4+0x154>
 8000d9e:	1bcb      	subs	r3, r1, r7
 8000da0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da4:	fa1f f887 	uxth.w	r8, r7
 8000da8:	2601      	movs	r6, #1
 8000daa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dae:	0c21      	lsrs	r1, r4, #16
 8000db0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000db4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db8:	fb08 f30c 	mul.w	r3, r8, ip
 8000dbc:	428b      	cmp	r3, r1
 8000dbe:	d907      	bls.n	8000dd0 <__udivmoddi4+0xe4>
 8000dc0:	1879      	adds	r1, r7, r1
 8000dc2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0xe2>
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	f200 80e9 	bhi.w	8000fa0 <__udivmoddi4+0x2b4>
 8000dce:	4684      	mov	ip, r0
 8000dd0:	1ac9      	subs	r1, r1, r3
 8000dd2:	b2a3      	uxth	r3, r4
 8000dd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dd8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ddc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000de0:	fb08 f800 	mul.w	r8, r8, r0
 8000de4:	45a0      	cmp	r8, r4
 8000de6:	d907      	bls.n	8000df8 <__udivmoddi4+0x10c>
 8000de8:	193c      	adds	r4, r7, r4
 8000dea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dee:	d202      	bcs.n	8000df6 <__udivmoddi4+0x10a>
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	f200 80d9 	bhi.w	8000fa8 <__udivmoddi4+0x2bc>
 8000df6:	4618      	mov	r0, r3
 8000df8:	eba4 0408 	sub.w	r4, r4, r8
 8000dfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e00:	e7bf      	b.n	8000d82 <__udivmoddi4+0x96>
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d909      	bls.n	8000e1a <__udivmoddi4+0x12e>
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	f000 80b1 	beq.w	8000f6e <__udivmoddi4+0x282>
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e12:	4630      	mov	r0, r6
 8000e14:	4631      	mov	r1, r6
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	fab3 f683 	clz	r6, r3
 8000e1e:	2e00      	cmp	r6, #0
 8000e20:	d14a      	bne.n	8000eb8 <__udivmoddi4+0x1cc>
 8000e22:	428b      	cmp	r3, r1
 8000e24:	d302      	bcc.n	8000e2c <__udivmoddi4+0x140>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	f200 80b8 	bhi.w	8000f9c <__udivmoddi4+0x2b0>
 8000e2c:	1a84      	subs	r4, r0, r2
 8000e2e:	eb61 0103 	sbc.w	r1, r1, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	468c      	mov	ip, r1
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d0a8      	beq.n	8000d8c <__udivmoddi4+0xa0>
 8000e3a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e3e:	e7a5      	b.n	8000d8c <__udivmoddi4+0xa0>
 8000e40:	f1c2 0320 	rsb	r3, r2, #32
 8000e44:	fa20 f603 	lsr.w	r6, r0, r3
 8000e48:	4097      	lsls	r7, r2
 8000e4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000e4e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e52:	40d9      	lsrs	r1, r3
 8000e54:	4330      	orrs	r0, r6
 8000e56:	0c03      	lsrs	r3, r0, #16
 8000e58:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e5c:	fa1f f887 	uxth.w	r8, r7
 8000e60:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e68:	fb06 f108 	mul.w	r1, r6, r8
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	fa04 f402 	lsl.w	r4, r4, r2
 8000e72:	d909      	bls.n	8000e88 <__udivmoddi4+0x19c>
 8000e74:	18fb      	adds	r3, r7, r3
 8000e76:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e7a:	f080 808d 	bcs.w	8000f98 <__udivmoddi4+0x2ac>
 8000e7e:	4299      	cmp	r1, r3
 8000e80:	f240 808a 	bls.w	8000f98 <__udivmoddi4+0x2ac>
 8000e84:	3e02      	subs	r6, #2
 8000e86:	443b      	add	r3, r7
 8000e88:	1a5b      	subs	r3, r3, r1
 8000e8a:	b281      	uxth	r1, r0
 8000e8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb00 f308 	mul.w	r3, r0, r8
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d907      	bls.n	8000eb0 <__udivmoddi4+0x1c4>
 8000ea0:	1879      	adds	r1, r7, r1
 8000ea2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ea6:	d273      	bcs.n	8000f90 <__udivmoddi4+0x2a4>
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	d971      	bls.n	8000f90 <__udivmoddi4+0x2a4>
 8000eac:	3802      	subs	r0, #2
 8000eae:	4439      	add	r1, r7
 8000eb0:	1acb      	subs	r3, r1, r3
 8000eb2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eb6:	e778      	b.n	8000daa <__udivmoddi4+0xbe>
 8000eb8:	f1c6 0c20 	rsb	ip, r6, #32
 8000ebc:	fa03 f406 	lsl.w	r4, r3, r6
 8000ec0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ec4:	431c      	orrs	r4, r3
 8000ec6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000eca:	fa01 f306 	lsl.w	r3, r1, r6
 8000ece:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ed2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ed6:	431f      	orrs	r7, r3
 8000ed8:	0c3b      	lsrs	r3, r7, #16
 8000eda:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ede:	fa1f f884 	uxth.w	r8, r4
 8000ee2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ee6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eea:	fb09 fa08 	mul.w	sl, r9, r8
 8000eee:	458a      	cmp	sl, r1
 8000ef0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ef8:	d908      	bls.n	8000f0c <__udivmoddi4+0x220>
 8000efa:	1861      	adds	r1, r4, r1
 8000efc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f00:	d248      	bcs.n	8000f94 <__udivmoddi4+0x2a8>
 8000f02:	458a      	cmp	sl, r1
 8000f04:	d946      	bls.n	8000f94 <__udivmoddi4+0x2a8>
 8000f06:	f1a9 0902 	sub.w	r9, r9, #2
 8000f0a:	4421      	add	r1, r4
 8000f0c:	eba1 010a 	sub.w	r1, r1, sl
 8000f10:	b2bf      	uxth	r7, r7
 8000f12:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f16:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f1a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f1e:	fb00 f808 	mul.w	r8, r0, r8
 8000f22:	45b8      	cmp	r8, r7
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x24a>
 8000f26:	19e7      	adds	r7, r4, r7
 8000f28:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f2c:	d22e      	bcs.n	8000f8c <__udivmoddi4+0x2a0>
 8000f2e:	45b8      	cmp	r8, r7
 8000f30:	d92c      	bls.n	8000f8c <__udivmoddi4+0x2a0>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4427      	add	r7, r4
 8000f36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f3a:	eba7 0708 	sub.w	r7, r7, r8
 8000f3e:	fba0 8902 	umull	r8, r9, r0, r2
 8000f42:	454f      	cmp	r7, r9
 8000f44:	46c6      	mov	lr, r8
 8000f46:	4649      	mov	r1, r9
 8000f48:	d31a      	bcc.n	8000f80 <__udivmoddi4+0x294>
 8000f4a:	d017      	beq.n	8000f7c <__udivmoddi4+0x290>
 8000f4c:	b15d      	cbz	r5, 8000f66 <__udivmoddi4+0x27a>
 8000f4e:	ebb3 020e 	subs.w	r2, r3, lr
 8000f52:	eb67 0701 	sbc.w	r7, r7, r1
 8000f56:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f5a:	40f2      	lsrs	r2, r6
 8000f5c:	ea4c 0202 	orr.w	r2, ip, r2
 8000f60:	40f7      	lsrs	r7, r6
 8000f62:	e9c5 2700 	strd	r2, r7, [r5]
 8000f66:	2600      	movs	r6, #0
 8000f68:	4631      	mov	r1, r6
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6e:	462e      	mov	r6, r5
 8000f70:	4628      	mov	r0, r5
 8000f72:	e70b      	b.n	8000d8c <__udivmoddi4+0xa0>
 8000f74:	4606      	mov	r6, r0
 8000f76:	e6e9      	b.n	8000d4c <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fd      	b.n	8000d78 <__udivmoddi4+0x8c>
 8000f7c:	4543      	cmp	r3, r8
 8000f7e:	d2e5      	bcs.n	8000f4c <__udivmoddi4+0x260>
 8000f80:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f84:	eb69 0104 	sbc.w	r1, r9, r4
 8000f88:	3801      	subs	r0, #1
 8000f8a:	e7df      	b.n	8000f4c <__udivmoddi4+0x260>
 8000f8c:	4608      	mov	r0, r1
 8000f8e:	e7d2      	b.n	8000f36 <__udivmoddi4+0x24a>
 8000f90:	4660      	mov	r0, ip
 8000f92:	e78d      	b.n	8000eb0 <__udivmoddi4+0x1c4>
 8000f94:	4681      	mov	r9, r0
 8000f96:	e7b9      	b.n	8000f0c <__udivmoddi4+0x220>
 8000f98:	4666      	mov	r6, ip
 8000f9a:	e775      	b.n	8000e88 <__udivmoddi4+0x19c>
 8000f9c:	4630      	mov	r0, r6
 8000f9e:	e74a      	b.n	8000e36 <__udivmoddi4+0x14a>
 8000fa0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa4:	4439      	add	r1, r7
 8000fa6:	e713      	b.n	8000dd0 <__udivmoddi4+0xe4>
 8000fa8:	3802      	subs	r0, #2
 8000faa:	443c      	add	r4, r7
 8000fac:	e724      	b.n	8000df8 <__udivmoddi4+0x10c>
 8000fae:	bf00      	nop

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <bme680_init>:
/*!
 *@brief This API is the entry point.
 *It reads the chip-id and calibration data from the sensor.
 */
int8_t bme680_init(struct bme680_dev *dev)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f001 fa31 	bl	8002424 <null_ptr_check>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8000fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d120      	bne.n	8001010 <bme680_init+0x5c>
		/* Soft reset to restore it to default values*/
		rslt = bme680_soft_reset(dev);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f000 f8f1 	bl	80011b6 <bme680_soft_reset>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME680_OK) {
 8000fd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d117      	bne.n	8001010 <bme680_init+0x5c>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8000fe0:	6879      	ldr	r1, [r7, #4]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	20d0      	movs	r0, #208	; 0xd0
 8000fe8:	f000 f818 	bl	800101c <bme680_get_regs>
 8000fec:	4603      	mov	r3, r0
 8000fee:	73fb      	strb	r3, [r7, #15]
			if (rslt == BME680_OK) {
 8000ff0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d10b      	bne.n	8001010 <bme680_init+0x5c>
				if (dev->chip_id == BME680_CHIP_ID) {
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b61      	cmp	r3, #97	; 0x61
 8000ffe:	d105      	bne.n	800100c <bme680_init+0x58>
					/* Get the Calibration data */
					rslt = get_calib_data(dev);
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f000 fbdf 	bl	80017c4 <get_calib_data>
 8001006:	4603      	mov	r3, r0
 8001008:	73fb      	strb	r3, [r7, #15]
 800100a:	e001      	b.n	8001010 <bme680_init+0x5c>
				} else {
					rslt = BME680_E_DEV_NOT_FOUND;
 800100c:	23fd      	movs	r3, #253	; 0xfd
 800100e:	73fb      	strb	r3, [r7, #15]
				}
			}
		}
	}

	return rslt;
 8001010:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <bme680_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
 800101c:	b590      	push	{r4, r7, lr}
 800101e:	b087      	sub	sp, #28
 8001020:	af00      	add	r7, sp, #0
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	4603      	mov	r3, r0
 8001028:	73fb      	strb	r3, [r7, #15]
 800102a:	4613      	mov	r3, r2
 800102c:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f001 f9f8 	bl	8002424 <null_ptr_check>
 8001034:	4603      	mov	r3, r0
 8001036:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME680_OK) {
 8001038:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d126      	bne.n	800108e <bme680_get_regs+0x72>
		if (dev->intf == BME680_SPI_INTF) {
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	789b      	ldrb	r3, [r3, #2]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d10e      	bne.n	8001066 <bme680_get_regs+0x4a>
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	4618      	mov	r0, r3
 800104e:	f001 f91a 	bl	8002286 <set_mem_page>
 8001052:	4603      	mov	r3, r0
 8001054:	75fb      	strb	r3, [r7, #23]
			if (rslt == BME680_OK)
 8001056:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d103      	bne.n	8001066 <bme680_get_regs+0x4a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001064:	73fb      	strb	r3, [r7, #15]
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	7858      	ldrb	r0, [r3, #1]
 800106e:	89bb      	ldrh	r3, [r7, #12]
 8001070:	7bf9      	ldrb	r1, [r7, #15]
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	47a0      	blx	r4
 8001076:	4603      	mov	r3, r0
 8001078:	461a      	mov	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		if (dev->com_rslt != 0)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <bme680_get_regs+0x72>
			rslt = BME680_E_COM_FAIL;
 800108a:	23fe      	movs	r3, #254	; 0xfe
 800108c:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800108e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001092:	4618      	mov	r0, r3
 8001094:	371c      	adds	r7, #28
 8001096:	46bd      	mov	sp, r7
 8001098:	bd90      	pop	{r4, r7, pc}

0800109a <bme680_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme680_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme680_dev *dev)
{
 800109a:	b5b0      	push	{r4, r5, r7, lr}
 800109c:	b090      	sub	sp, #64	; 0x40
 800109e:	af00      	add	r7, sp, #0
 80010a0:	60f8      	str	r0, [r7, #12]
 80010a2:	60b9      	str	r1, [r7, #8]
 80010a4:	603b      	str	r3, [r7, #0]
 80010a6:	4613      	mov	r3, r2
 80010a8:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	/* Length of the temporary buffer is 2*(length of register)*/
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
 80010ae:	f107 0318 	add.w	r3, r7, #24
 80010b2:	2224      	movs	r2, #36	; 0x24
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f009 f990 	bl	800a3dc <memset>
	uint16_t index;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80010bc:	6838      	ldr	r0, [r7, #0]
 80010be:	f001 f9b1 	bl	8002424 <null_ptr_check>
 80010c2:	4603      	mov	r3, r0
 80010c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (rslt == BME680_OK) {
 80010c8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d16c      	bne.n	80011aa <bme680_set_regs+0x110>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d064      	beq.n	80011a0 <bme680_set_regs+0x106>
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	2b13      	cmp	r3, #19
 80010da:	d861      	bhi.n	80011a0 <bme680_set_regs+0x106>
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
 80010dc:	2300      	movs	r3, #0
 80010de:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80010e0:	e037      	b.n	8001152 <bme680_set_regs+0xb8>
				if (dev->intf == BME680_SPI_INTF) {
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	789b      	ldrb	r3, [r3, #2]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d119      	bne.n	800111e <bme680_set_regs+0x84>
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
 80010ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80010ec:	68fa      	ldr	r2, [r7, #12]
 80010ee:	4413      	add	r3, r2
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	6839      	ldr	r1, [r7, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f001 f8c6 	bl	8002286 <set_mem_page>
 80010fa:	4603      	mov	r3, r0
 80010fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 8001100:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	4413      	add	r3, r2
 8001106:	781a      	ldrb	r2, [r3, #0]
 8001108:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001110:	b2d2      	uxtb	r2, r2
 8001112:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001116:	440b      	add	r3, r1
 8001118:	f803 2c2c 	strb.w	r2, [r3, #-44]
 800111c:	e00a      	b.n	8001134 <bme680_set_regs+0x9a>
				} else {
					tmp_buff[(2 * index)] = reg_addr[index];
 800111e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001120:	68fa      	ldr	r2, [r7, #12]
 8001122:	441a      	add	r2, r3
 8001124:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	7812      	ldrb	r2, [r2, #0]
 800112a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800112e:	440b      	add	r3, r1
 8001130:	f803 2c2c 	strb.w	r2, [r3, #-44]
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
 8001134:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	441a      	add	r2, r3
 800113a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	3301      	adds	r3, #1
 8001140:	7812      	ldrb	r2, [r2, #0]
 8001142:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001146:	440b      	add	r3, r1
 8001148:	f803 2c2c 	strb.w	r2, [r3, #-44]
			for (index = 0; index < len; index++) {
 800114c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800114e:	3301      	adds	r3, #1
 8001150:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	b29b      	uxth	r3, r3
 8001156:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001158:	429a      	cmp	r2, r3
 800115a:	d3c2      	bcc.n	80010e2 <bme680_set_regs+0x48>
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
 800115c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001160:	2b00      	cmp	r3, #0
 8001162:	d121      	bne.n	80011a8 <bme680_set_regs+0x10e>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	7858      	ldrb	r0, [r3, #1]
 800116c:	7d39      	ldrb	r1, [r7, #20]
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	b29b      	uxth	r3, r3
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	b29b      	uxth	r3, r3
 8001176:	3b01      	subs	r3, #1
 8001178:	b29d      	uxth	r5, r3
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	1c5a      	adds	r2, r3, #1
 8001180:	462b      	mov	r3, r5
 8001182:	47a0      	blx	r4
 8001184:	4603      	mov	r3, r0
 8001186:	461a      	mov	r2, r3
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
				if (dev->com_rslt != 0)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 8001194:	2b00      	cmp	r3, #0
 8001196:	d007      	beq.n	80011a8 <bme680_set_regs+0x10e>
					rslt = BME680_E_COM_FAIL;
 8001198:	23fe      	movs	r3, #254	; 0xfe
 800119a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			if (rslt == BME680_OK) {
 800119e:	e003      	b.n	80011a8 <bme680_set_regs+0x10e>
			}
		} else {
			rslt = BME680_E_INVALID_LENGTH;
 80011a0:	23fc      	movs	r3, #252	; 0xfc
 80011a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80011a6:	e000      	b.n	80011aa <bme680_set_regs+0x110>
			if (rslt == BME680_OK) {
 80011a8:	bf00      	nop
		}
	}

	return rslt;
 80011aa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3740      	adds	r7, #64	; 0x40
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bdb0      	pop	{r4, r5, r7, pc}

080011b6 <bme680_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme680_soft_reset(struct bme680_dev *dev)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b084      	sub	sp, #16
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
 80011be:	23e0      	movs	r3, #224	; 0xe0
 80011c0:	73bb      	strb	r3, [r7, #14]
	/* 0xb6 is the soft reset command */
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 80011c2:	23b6      	movs	r3, #182	; 0xb6
 80011c4:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f001 f92c 	bl	8002424 <null_ptr_check>
 80011cc:	4603      	mov	r3, r0
 80011ce:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 80011d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d127      	bne.n	8001228 <bme680_soft_reset+0x72>
		if (dev->intf == BME680_SPI_INTF)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	789b      	ldrb	r3, [r3, #2]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d104      	bne.n	80011ea <bme680_soft_reset+0x34>
			rslt = get_mem_page(dev);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f001 f8b5 	bl	8002350 <get_mem_page>
 80011e6:	4603      	mov	r3, r0
 80011e8:	73fb      	strb	r3, [r7, #15]

		/* Reset the device */
		if (rslt == BME680_OK) {
 80011ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d11a      	bne.n	8001228 <bme680_soft_reset+0x72>
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80011f2:	f107 010d 	add.w	r1, r7, #13
 80011f6:	f107 000e 	add.w	r0, r7, #14
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2201      	movs	r2, #1
 80011fe:	f7ff ff4c 	bl	800109a <bme680_set_regs>
 8001202:	4603      	mov	r3, r0
 8001204:	73fb      	strb	r3, [r7, #15]
			/* Wait for 5ms */
			dev->delay_ms(BME680_RESET_PERIOD);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800120a:	200a      	movs	r0, #10
 800120c:	4798      	blx	r3

			if (rslt == BME680_OK) {
 800120e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d108      	bne.n	8001228 <bme680_soft_reset+0x72>
				/* After reset get the memory page */
				if (dev->intf == BME680_SPI_INTF)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	789b      	ldrb	r3, [r3, #2]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d104      	bne.n	8001228 <bme680_soft_reset+0x72>
					rslt = get_mem_page(dev);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f001 f896 	bl	8002350 <get_mem_page>
 8001224:	4603      	mov	r3, r0
 8001226:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	return rslt;
 8001228:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800122c:	4618      	mov	r0, r3
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <bme680_set_sensor_settings>:
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b088      	sub	sp, #32
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	6039      	str	r1, [r7, #0]
 800123e:	80fb      	strh	r3, [r7, #6]
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	76fb      	strb	r3, [r7, #27]
	uint8_t count = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	77bb      	strb	r3, [r7, #30]
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	2300      	movs	r3, #0
 800124e:	833b      	strh	r3, [r7, #24]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	2300      	movs	r3, #0
 8001256:	823b      	strh	r3, [r7, #16]
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800125e:	777b      	strb	r3, [r7, #29]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001260:	6838      	ldr	r0, [r7, #0]
 8001262:	f001 f8df 	bl	8002424 <null_ptr_check>
 8001266:	4603      	mov	r3, r0
 8001268:	77fb      	strb	r3, [r7, #31]
	if (rslt == BME680_OK) {
 800126a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800126e:	2b00      	cmp	r3, #0
 8001270:	f040 81ac 	bne.w	80015cc <bme680_set_sensor_settings+0x398>
		if (desired_settings & BME680_GAS_MEAS_SEL)
 8001274:	88fb      	ldrh	r3, [r7, #6]
 8001276:	f003 0308 	and.w	r3, r3, #8
 800127a:	2b00      	cmp	r3, #0
 800127c:	d004      	beq.n	8001288 <bme680_set_sensor_settings+0x54>
			rslt = set_gas_config(dev);
 800127e:	6838      	ldr	r0, [r7, #0]
 8001280:	f000 fbcc 	bl	8001a1c <set_gas_config>
 8001284:	4603      	mov	r3, r0
 8001286:	77fb      	strb	r3, [r7, #31]

		dev->power_mode = BME680_SLEEP_MODE;
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	2200      	movs	r2, #0
 800128c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		if (rslt == BME680_OK)
 8001290:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d104      	bne.n	80012a2 <bme680_set_sensor_settings+0x6e>
			rslt = bme680_set_sensor_mode(dev);
 8001298:	6838      	ldr	r0, [r7, #0]
 800129a:	f000 f99d 	bl	80015d8 <bme680_set_sensor_mode>
 800129e:	4603      	mov	r3, r0
 80012a0:	77fb      	strb	r3, [r7, #31]

		/* Selecting the filter */
		if (desired_settings & BME680_FILTER_SEL) {
 80012a2:	88fb      	ldrh	r3, [r7, #6]
 80012a4:	f003 0310 	and.w	r3, r3, #16
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d03f      	beq.n	800132c <bme680_set_sensor_settings+0xf8>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	f103 003b 	add.w	r0, r3, #59	; 0x3b
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	2207      	movs	r2, #7
 80012b6:	2100      	movs	r1, #0
 80012b8:	f001 f879 	bl	80023ae <boundary_check>
 80012bc:	4603      	mov	r3, r0
 80012be:	77fb      	strb	r3, [r7, #31]
			reg_addr = BME680_CONF_ODR_FILT_ADDR;
 80012c0:	2375      	movs	r3, #117	; 0x75
 80012c2:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 80012c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d108      	bne.n	80012de <bme680_set_sensor_settings+0xaa>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80012cc:	f107 011b 	add.w	r1, r7, #27
 80012d0:	7f38      	ldrb	r0, [r7, #28]
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	2201      	movs	r2, #1
 80012d6:	f7ff fea1 	bl	800101c <bme680_get_regs>
 80012da:	4603      	mov	r3, r0
 80012dc:	77fb      	strb	r3, [r7, #31]

			if (desired_settings & BME680_FILTER_SEL)
 80012de:	88fb      	ldrh	r3, [r7, #6]
 80012e0:	f003 0310 	and.w	r3, r3, #16
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d010      	beq.n	800130a <bme680_set_sensor_settings+0xd6>
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 80012e8:	7efb      	ldrb	r3, [r7, #27]
 80012ea:	b25b      	sxtb	r3, r3
 80012ec:	f023 031c 	bic.w	r3, r3, #28
 80012f0:	b25a      	sxtb	r2, r3
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	b25b      	sxtb	r3, r3
 80012fc:	f003 031c 	and.w	r3, r3, #28
 8001300:	b25b      	sxtb	r3, r3
 8001302:	4313      	orrs	r3, r2
 8001304:	b25b      	sxtb	r3, r3
 8001306:	b2db      	uxtb	r3, r3
 8001308:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 800130a:	7fbb      	ldrb	r3, [r7, #30]
 800130c:	f107 0220 	add.w	r2, r7, #32
 8001310:	4413      	add	r3, r2
 8001312:	7f3a      	ldrb	r2, [r7, #28]
 8001314:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 8001318:	7fbb      	ldrb	r3, [r7, #30]
 800131a:	7efa      	ldrb	r2, [r7, #27]
 800131c:	f107 0120 	add.w	r1, r7, #32
 8001320:	440b      	add	r3, r1
 8001322:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 8001326:	7fbb      	ldrb	r3, [r7, #30]
 8001328:	3301      	adds	r3, #1
 800132a:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting heater control for the sensor */
		if (desired_settings & BME680_HCNTRL_SEL) {
 800132c:	88fb      	ldrh	r3, [r7, #6]
 800132e:	f003 0320 	and.w	r3, r3, #32
 8001332:	2b00      	cmp	r3, #0
 8001334:	d039      	beq.n	80013aa <bme680_set_sensor_settings+0x176>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	f103 003d 	add.w	r0, r3, #61	; 0x3d
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	2208      	movs	r2, #8
 8001340:	2100      	movs	r1, #0
 8001342:	f001 f834 	bl	80023ae <boundary_check>
 8001346:	4603      	mov	r3, r0
 8001348:	77fb      	strb	r3, [r7, #31]
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;
 800134a:	2370      	movs	r3, #112	; 0x70
 800134c:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 800134e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d108      	bne.n	8001368 <bme680_set_sensor_settings+0x134>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8001356:	f107 011b 	add.w	r1, r7, #27
 800135a:	7f38      	ldrb	r0, [r7, #28]
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	2201      	movs	r2, #1
 8001360:	f7ff fe5c 	bl	800101c <bme680_get_regs>
 8001364:	4603      	mov	r3, r0
 8001366:	77fb      	strb	r3, [r7, #31]
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 8001368:	7efb      	ldrb	r3, [r7, #27]
 800136a:	b25b      	sxtb	r3, r3
 800136c:	f023 0308 	bic.w	r3, r3, #8
 8001370:	b25a      	sxtb	r2, r3
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001378:	b25b      	sxtb	r3, r3
 800137a:	f003 0308 	and.w	r3, r3, #8
 800137e:	b25b      	sxtb	r3, r3
 8001380:	4313      	orrs	r3, r2
 8001382:	b25b      	sxtb	r3, r3
 8001384:	b2db      	uxtb	r3, r3
 8001386:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 8001388:	7fbb      	ldrb	r3, [r7, #30]
 800138a:	f107 0220 	add.w	r2, r7, #32
 800138e:	4413      	add	r3, r2
 8001390:	7f3a      	ldrb	r2, [r7, #28]
 8001392:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 8001396:	7fbb      	ldrb	r3, [r7, #30]
 8001398:	7efa      	ldrb	r2, [r7, #27]
 800139a:	f107 0120 	add.w	r1, r7, #32
 800139e:	440b      	add	r3, r1
 80013a0:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 80013a4:	7fbb      	ldrb	r3, [r7, #30]
 80013a6:	3301      	adds	r3, #1
 80013a8:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting heater T,P oversampling for the sensor */
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
 80013aa:	88fb      	ldrh	r3, [r7, #6]
 80013ac:	f003 0303 	and.w	r3, r3, #3
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d052      	beq.n	800145a <bme680_set_sensor_settings+0x226>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	f103 0039 	add.w	r0, r3, #57	; 0x39
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	2205      	movs	r2, #5
 80013be:	2100      	movs	r1, #0
 80013c0:	f000 fff5 	bl	80023ae <boundary_check>
 80013c4:	4603      	mov	r3, r0
 80013c6:	77fb      	strb	r3, [r7, #31]
			reg_addr = BME680_CONF_T_P_MODE_ADDR;
 80013c8:	2374      	movs	r3, #116	; 0x74
 80013ca:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 80013cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d108      	bne.n	80013e6 <bme680_set_sensor_settings+0x1b2>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80013d4:	f107 011b 	add.w	r1, r7, #27
 80013d8:	7f38      	ldrb	r0, [r7, #28]
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	2201      	movs	r2, #1
 80013de:	f7ff fe1d 	bl	800101c <bme680_get_regs>
 80013e2:	4603      	mov	r3, r0
 80013e4:	77fb      	strb	r3, [r7, #31]

			if (desired_settings & BME680_OST_SEL)
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d00d      	beq.n	800140c <bme680_set_sensor_settings+0x1d8>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
 80013f0:	7efb      	ldrb	r3, [r7, #27]
 80013f2:	b25b      	sxtb	r3, r3
 80013f4:	f003 031f 	and.w	r3, r3, #31
 80013f8:	b25a      	sxtb	r2, r3
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001400:	015b      	lsls	r3, r3, #5
 8001402:	b25b      	sxtb	r3, r3
 8001404:	4313      	orrs	r3, r2
 8001406:	b25b      	sxtb	r3, r3
 8001408:	b2db      	uxtb	r3, r3
 800140a:	76fb      	strb	r3, [r7, #27]

			if (desired_settings & BME680_OSP_SEL)
 800140c:	88fb      	ldrh	r3, [r7, #6]
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d010      	beq.n	8001438 <bme680_set_sensor_settings+0x204>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
 8001416:	7efb      	ldrb	r3, [r7, #27]
 8001418:	b25b      	sxtb	r3, r3
 800141a:	f023 031c 	bic.w	r3, r3, #28
 800141e:	b25a      	sxtb	r2, r3
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	b25b      	sxtb	r3, r3
 800142a:	f003 031c 	and.w	r3, r3, #28
 800142e:	b25b      	sxtb	r3, r3
 8001430:	4313      	orrs	r3, r2
 8001432:	b25b      	sxtb	r3, r3
 8001434:	b2db      	uxtb	r3, r3
 8001436:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr;
 8001438:	7fbb      	ldrb	r3, [r7, #30]
 800143a:	f107 0220 	add.w	r2, r7, #32
 800143e:	4413      	add	r3, r2
 8001440:	7f3a      	ldrb	r2, [r7, #28]
 8001442:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 8001446:	7fbb      	ldrb	r3, [r7, #30]
 8001448:	7efa      	ldrb	r2, [r7, #27]
 800144a:	f107 0120 	add.w	r1, r7, #32
 800144e:	440b      	add	r3, r1
 8001450:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 8001454:	7fbb      	ldrb	r3, [r7, #30]
 8001456:	3301      	adds	r3, #1
 8001458:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting humidity oversampling for the sensor */
		if (desired_settings & BME680_OSH_SEL) {
 800145a:	88fb      	ldrh	r3, [r7, #6]
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	2b00      	cmp	r3, #0
 8001462:	d039      	beq.n	80014d8 <bme680_set_sensor_settings+0x2a4>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	2205      	movs	r2, #5
 800146e:	2100      	movs	r1, #0
 8001470:	f000 ff9d 	bl	80023ae <boundary_check>
 8001474:	4603      	mov	r3, r0
 8001476:	77fb      	strb	r3, [r7, #31]
			reg_addr = BME680_CONF_OS_H_ADDR;
 8001478:	2372      	movs	r3, #114	; 0x72
 800147a:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 800147c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d108      	bne.n	8001496 <bme680_set_sensor_settings+0x262>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8001484:	f107 011b 	add.w	r1, r7, #27
 8001488:	7f38      	ldrb	r0, [r7, #28]
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	2201      	movs	r2, #1
 800148e:	f7ff fdc5 	bl	800101c <bme680_get_regs>
 8001492:	4603      	mov	r3, r0
 8001494:	77fb      	strb	r3, [r7, #31]
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 8001496:	7efb      	ldrb	r3, [r7, #27]
 8001498:	b25b      	sxtb	r3, r3
 800149a:	f023 0307 	bic.w	r3, r3, #7
 800149e:	b25a      	sxtb	r2, r3
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80014a6:	b25b      	sxtb	r3, r3
 80014a8:	f003 0307 	and.w	r3, r3, #7
 80014ac:	b25b      	sxtb	r3, r3
 80014ae:	4313      	orrs	r3, r2
 80014b0:	b25b      	sxtb	r3, r3
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 80014b6:	7fbb      	ldrb	r3, [r7, #30]
 80014b8:	f107 0220 	add.w	r2, r7, #32
 80014bc:	4413      	add	r3, r2
 80014be:	7f3a      	ldrb	r2, [r7, #28]
 80014c0:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 80014c4:	7fbb      	ldrb	r3, [r7, #30]
 80014c6:	7efa      	ldrb	r2, [r7, #27]
 80014c8:	f107 0120 	add.w	r1, r7, #32
 80014cc:	440b      	add	r3, r1
 80014ce:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 80014d2:	7fbb      	ldrb	r3, [r7, #30]
 80014d4:	3301      	adds	r3, #1
 80014d6:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting the runGas and NB conversion settings for the sensor */
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
 80014d8:	88fb      	ldrh	r3, [r7, #6]
 80014da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d062      	beq.n	80015a8 <bme680_set_sensor_settings+0x374>
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	f103 003e 	add.w	r0, r3, #62	; 0x3e
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	2201      	movs	r2, #1
 80014ec:	2100      	movs	r1, #0
 80014ee:	f000 ff5e 	bl	80023ae <boundary_check>
 80014f2:	4603      	mov	r3, r0
 80014f4:	77fb      	strb	r3, [r7, #31]
				BME680_RUN_GAS_ENABLE, dev);
			if (rslt == BME680_OK) {
 80014f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d109      	bne.n	8001512 <bme680_set_sensor_settings+0x2de>
				/* Validate boundary conditions */
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	220a      	movs	r2, #10
 8001508:	2100      	movs	r1, #0
 800150a:	f000 ff50 	bl	80023ae <boundary_check>
 800150e:	4603      	mov	r3, r0
 8001510:	77fb      	strb	r3, [r7, #31]
					BME680_NBCONV_MAX, dev);
			}

			reg_addr = BME680_CONF_ODR_RUN_GAS_NBC_ADDR;
 8001512:	2371      	movs	r3, #113	; 0x71
 8001514:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 8001516:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d108      	bne.n	8001530 <bme680_set_sensor_settings+0x2fc>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 800151e:	f107 011b 	add.w	r1, r7, #27
 8001522:	7f38      	ldrb	r0, [r7, #28]
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	2201      	movs	r2, #1
 8001528:	f7ff fd78 	bl	800101c <bme680_get_regs>
 800152c:	4603      	mov	r3, r0
 800152e:	77fb      	strb	r3, [r7, #31]

			if (desired_settings & BME680_RUN_GAS_SEL)
 8001530:	88fb      	ldrh	r3, [r7, #6]
 8001532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001536:	2b00      	cmp	r3, #0
 8001538:	d010      	beq.n	800155c <bme680_set_sensor_settings+0x328>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
 800153a:	7efb      	ldrb	r3, [r7, #27]
 800153c:	b25b      	sxtb	r3, r3
 800153e:	f023 0310 	bic.w	r3, r3, #16
 8001542:	b25a      	sxtb	r2, r3
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800154a:	011b      	lsls	r3, r3, #4
 800154c:	b25b      	sxtb	r3, r3
 800154e:	f003 0310 	and.w	r3, r3, #16
 8001552:	b25b      	sxtb	r3, r3
 8001554:	4313      	orrs	r3, r2
 8001556:	b25b      	sxtb	r3, r3
 8001558:	b2db      	uxtb	r3, r3
 800155a:	76fb      	strb	r3, [r7, #27]

			if (desired_settings & BME680_NBCONV_SEL)
 800155c:	88fb      	ldrh	r3, [r7, #6]
 800155e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001562:	2b00      	cmp	r3, #0
 8001564:	d00f      	beq.n	8001586 <bme680_set_sensor_settings+0x352>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
 8001566:	7efb      	ldrb	r3, [r7, #27]
 8001568:	b25b      	sxtb	r3, r3
 800156a:	f023 030f 	bic.w	r3, r3, #15
 800156e:	b25a      	sxtb	r2, r3
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001576:	b25b      	sxtb	r3, r3
 8001578:	f003 030f 	and.w	r3, r3, #15
 800157c:	b25b      	sxtb	r3, r3
 800157e:	4313      	orrs	r3, r2
 8001580:	b25b      	sxtb	r3, r3
 8001582:	b2db      	uxtb	r3, r3
 8001584:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 8001586:	7fbb      	ldrb	r3, [r7, #30]
 8001588:	f107 0220 	add.w	r2, r7, #32
 800158c:	4413      	add	r3, r2
 800158e:	7f3a      	ldrb	r2, [r7, #28]
 8001590:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 8001594:	7fbb      	ldrb	r3, [r7, #30]
 8001596:	7efa      	ldrb	r2, [r7, #27]
 8001598:	f107 0120 	add.w	r1, r7, #32
 800159c:	440b      	add	r3, r1
 800159e:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 80015a2:	7fbb      	ldrb	r3, [r7, #30]
 80015a4:	3301      	adds	r3, #1
 80015a6:	77bb      	strb	r3, [r7, #30]
		}

		if (rslt == BME680_OK)
 80015a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d109      	bne.n	80015c4 <bme680_set_sensor_settings+0x390>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
 80015b0:	7fba      	ldrb	r2, [r7, #30]
 80015b2:	f107 010c 	add.w	r1, r7, #12
 80015b6:	f107 0014 	add.w	r0, r7, #20
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	f7ff fd6d 	bl	800109a <bme680_set_regs>
 80015c0:	4603      	mov	r3, r0
 80015c2:	77fb      	strb	r3, [r7, #31]

		/* Restore previous intended power mode */
		dev->power_mode = intended_power_mode;
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	7f7a      	ldrb	r2, [r7, #29]
 80015c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}

	return rslt;
 80015cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3720      	adds	r7, #32
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <bme680_set_sensor_mode>:

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	73bb      	strb	r3, [r7, #14]
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 80015e4:	2374      	movs	r3, #116	; 0x74
 80015e6:	733b      	strb	r3, [r7, #12]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f000 ff1b 	bl	8002424 <null_ptr_check>
 80015ee:	4603      	mov	r3, r0
 80015f0:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 80015f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d14c      	bne.n	8001694 <bme680_set_sensor_mode+0xbc>
		/* Call repeatedly until in sleep */
		do {
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
 80015fa:	f107 010d 	add.w	r1, r7, #13
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2201      	movs	r2, #1
 8001602:	2074      	movs	r0, #116	; 0x74
 8001604:	f7ff fd0a 	bl	800101c <bme680_get_regs>
 8001608:	4603      	mov	r3, r0
 800160a:	73fb      	strb	r3, [r7, #15]
			if (rslt == BME680_OK) {
 800160c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d119      	bne.n	8001648 <bme680_set_sensor_mode+0x70>
				/* Put to sleep before changing mode */
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
 8001614:	7b7b      	ldrb	r3, [r7, #13]
 8001616:	f003 0303 	and.w	r3, r3, #3
 800161a:	73bb      	strb	r3, [r7, #14]

				if (pow_mode != BME680_SLEEP_MODE) {
 800161c:	7bbb      	ldrb	r3, [r7, #14]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d012      	beq.n	8001648 <bme680_set_sensor_mode+0x70>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 8001622:	7b7b      	ldrb	r3, [r7, #13]
 8001624:	f023 0303 	bic.w	r3, r3, #3
 8001628:	b2db      	uxtb	r3, r3
 800162a:	737b      	strb	r3, [r7, #13]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 800162c:	f107 010d 	add.w	r1, r7, #13
 8001630:	f107 000c 	add.w	r0, r7, #12
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	f7ff fd2f 	bl	800109a <bme680_set_regs>
 800163c:	4603      	mov	r3, r0
 800163e:	73fb      	strb	r3, [r7, #15]
					dev->delay_ms(BME680_POLL_PERIOD_MS);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001644:	200a      	movs	r0, #10
 8001646:	4798      	blx	r3
				}
			}
		} while (pow_mode != BME680_SLEEP_MODE);
 8001648:	7bbb      	ldrb	r3, [r7, #14]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1d5      	bne.n	80015fa <bme680_set_sensor_mode+0x22>

		/* Already in sleep */
		if (dev->power_mode != BME680_SLEEP_MODE) {
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001654:	2b00      	cmp	r3, #0
 8001656:	d01d      	beq.n	8001694 <bme680_set_sensor_mode+0xbc>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
 8001658:	7b7b      	ldrb	r3, [r7, #13]
 800165a:	b25b      	sxtb	r3, r3
 800165c:	f023 0303 	bic.w	r3, r3, #3
 8001660:	b25a      	sxtb	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001668:	b25b      	sxtb	r3, r3
 800166a:	f003 0303 	and.w	r3, r3, #3
 800166e:	b25b      	sxtb	r3, r3
 8001670:	4313      	orrs	r3, r2
 8001672:	b25b      	sxtb	r3, r3
 8001674:	b2db      	uxtb	r3, r3
 8001676:	737b      	strb	r3, [r7, #13]
			if (rslt == BME680_OK)
 8001678:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d109      	bne.n	8001694 <bme680_set_sensor_mode+0xbc>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8001680:	f107 010d 	add.w	r1, r7, #13
 8001684:	f107 000c 	add.w	r0, r7, #12
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2201      	movs	r2, #1
 800168c:	f7ff fd05 	bl	800109a <bme680_set_regs>
 8001690:	4603      	mov	r3, r0
 8001692:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 8001694:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <bme680_get_profile_dur>:

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b087      	sub	sp, #28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80016aa:	4a2e      	ldr	r2, [pc, #184]	; (8001764 <bme680_get_profile_dur+0xc4>)
 80016ac:	f107 0308 	add.w	r3, r7, #8
 80016b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016b4:	6018      	str	r0, [r3, #0]
 80016b6:	3304      	adds	r3, #4
 80016b8:	8019      	strh	r1, [r3, #0]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80016c0:	f107 0218 	add.w	r2, r7, #24
 80016c4:	4413      	add	r3, r2
 80016c6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80016ca:	617b      	str	r3, [r7, #20]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80016d2:	f107 0218 	add.w	r2, r7, #24
 80016d6:	4413      	add	r3, r2
 80016d8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80016dc:	461a      	mov	r2, r3
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	4413      	add	r3, r2
 80016e2:	617b      	str	r3, [r7, #20]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80016ea:	f107 0218 	add.w	r2, r7, #24
 80016ee:	4413      	add	r3, r2
 80016f0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80016f4:	461a      	mov	r2, r3
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	4413      	add	r3, r2
 80016fa:	617b      	str	r3, [r7, #20]

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	f240 72ab 	movw	r2, #1963	; 0x7ab
 8001702:	fb02 f303 	mul.w	r3, r2, r3
 8001706:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	f203 7374 	addw	r3, r3, #1908	; 0x774
 800170e:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	f603 1351 	addw	r3, r3, #2385	; 0x951
 8001716:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800171e:	613b      	str	r3, [r7, #16]
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	4a11      	ldr	r2, [pc, #68]	; (8001768 <bme680_get_profile_dur+0xc8>)
 8001724:	fba2 2303 	umull	r2, r3, r2, r3
 8001728:	099b      	lsrs	r3, r3, #6
 800172a:	613b      	str	r3, [r7, #16]

	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	3301      	adds	r3, #1
 8001730:	613b      	str	r3, [r7, #16]

	*duration = (uint16_t) tph_dur;
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	b29a      	uxth	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	801a      	strh	r2, [r3, #0]

	/* Get the gas duration only when the run gas is enabled */
	if (dev->gas_sett.run_gas) {
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001740:	2b00      	cmp	r3, #0
 8001742:	d008      	beq.n	8001756 <bme680_get_profile_dur+0xb6>
		/* The remaining time should be used for heating */
		*duration += dev->gas_sett.heatr_dur;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	881a      	ldrh	r2, [r3, #0]
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800174e:	4413      	add	r3, r2
 8001750:	b29a      	uxth	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	801a      	strh	r2, [r3, #0]
	}
}
 8001756:	bf00      	nop
 8001758:	371c      	adds	r7, #28
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	0800cb30 	.word	0x0800cb30
 8001768:	10624dd3 	.word	0x10624dd3

0800176c <bme680_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001776:	6838      	ldr	r0, [r7, #0]
 8001778:	f000 fe54 	bl	8002424 <null_ptr_check>
 800177c:	4603      	mov	r3, r0
 800177e:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8001780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d117      	bne.n	80017b8 <bme680_get_sensor_data+0x4c>
		/* Reading the sensor data in forced mode only */
		rslt = read_field_data(data, dev);
 8001788:	6839      	ldr	r1, [r7, #0]
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 fcc1 	bl	8002112 <read_field_data>
 8001790:	4603      	mov	r3, r0
 8001792:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME680_OK) {
 8001794:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d10d      	bne.n	80017b8 <bme680_get_sensor_data+0x4c>
			if (data->status & BME680_NEW_DATA_MSK)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	b25b      	sxtb	r3, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	da04      	bge.n	80017b0 <bme680_get_sensor_data+0x44>
				dev->new_fields = 1;
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	2201      	movs	r2, #1
 80017aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80017ae:	e003      	b.n	80017b8 <bme680_get_sensor_data+0x4c>
			else
				dev->new_fields = 0;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		}
	}

	return rslt;
 80017b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <get_calib_data>:

/*!
 * @brief This internal API is used to read the calibrated data from the sensor.
 */
static int8_t get_calib_data(struct bme680_dev *dev)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08e      	sub	sp, #56	; 0x38
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
 80017cc:	2300      	movs	r3, #0
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	f107 0310 	add.w	r3, r7, #16
 80017d4:	2225      	movs	r2, #37	; 0x25
 80017d6:	2100      	movs	r1, #0
 80017d8:	4618      	mov	r0, r3
 80017da:	f008 fdff 	bl	800a3dc <memset>
	uint8_t temp_var = 0; /* Temporary variable */
 80017de:	2300      	movs	r3, #0
 80017e0:	72fb      	strb	r3, [r7, #11]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 fe1e 	bl	8002424 <null_ptr_check>
 80017e8:	4603      	mov	r3, r0
 80017ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (rslt == BME680_OK) {
 80017ee:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f040 810c 	bne.w	8001a10 <get_calib_data+0x24c>
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
 80017f8:	f107 010c 	add.w	r1, r7, #12
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2219      	movs	r2, #25
 8001800:	2089      	movs	r0, #137	; 0x89
 8001802:	f7ff fc0b 	bl	800101c <bme680_get_regs>
 8001806:	4603      	mov	r3, r0
 8001808:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		/* Append the second half in the same array */
		if (rslt == BME680_OK)
 800180c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001810:	2b00      	cmp	r3, #0
 8001812:	d10b      	bne.n	800182c <get_calib_data+0x68>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
 8001814:	f107 030c 	add.w	r3, r7, #12
 8001818:	f103 0119 	add.w	r1, r3, #25
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2210      	movs	r2, #16
 8001820:	20e1      	movs	r0, #225	; 0xe1
 8001822:	f7ff fbfb 	bl	800101c <bme680_get_regs>
 8001826:	4603      	mov	r3, r0
 8001828:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			, BME680_COEFF_ADDR2_LEN, dev);

		/* Temperature related coefficients */
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
 800182c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001830:	021b      	lsls	r3, r3, #8
 8001832:	b21a      	sxth	r2, r3
 8001834:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001838:	b21b      	sxth	r3, r3
 800183a:	4313      	orrs	r3, r2
 800183c:	b21b      	sxth	r3, r3
 800183e:	b29a      	uxth	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	82da      	strh	r2, [r3, #22]
			coeff_array[BME680_T1_LSB_REG]));
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
 8001844:	7bbb      	ldrb	r3, [r7, #14]
 8001846:	021b      	lsls	r3, r3, #8
 8001848:	b21a      	sxth	r2, r3
 800184a:	7b7b      	ldrb	r3, [r7, #13]
 800184c:	b21b      	sxth	r3, r3
 800184e:	4313      	orrs	r3, r2
 8001850:	b21a      	sxth	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	831a      	strh	r2, [r3, #24]
			coeff_array[BME680_T2_LSB_REG]));
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
 8001856:	7bfb      	ldrb	r3, [r7, #15]
 8001858:	b25a      	sxtb	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	769a      	strb	r2, [r3, #26]

		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
 800185e:	7cbb      	ldrb	r3, [r7, #18]
 8001860:	021b      	lsls	r3, r3, #8
 8001862:	b21a      	sxth	r2, r3
 8001864:	7c7b      	ldrb	r3, [r7, #17]
 8001866:	b21b      	sxth	r3, r3
 8001868:	4313      	orrs	r3, r2
 800186a:	b21b      	sxth	r3, r3
 800186c:	b29a      	uxth	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	839a      	strh	r2, [r3, #28]
			coeff_array[BME680_P1_LSB_REG]));
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
 8001872:	7d3b      	ldrb	r3, [r7, #20]
 8001874:	021b      	lsls	r3, r3, #8
 8001876:	b21a      	sxth	r2, r3
 8001878:	7cfb      	ldrb	r3, [r7, #19]
 800187a:	b21b      	sxth	r3, r3
 800187c:	4313      	orrs	r3, r2
 800187e:	b21a      	sxth	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	83da      	strh	r2, [r3, #30]
			coeff_array[BME680_P2_LSB_REG]));
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
 8001884:	7d7b      	ldrb	r3, [r7, #21]
 8001886:	b25a      	sxtb	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f883 2020 	strb.w	r2, [r3, #32]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
 800188e:	7e3b      	ldrb	r3, [r7, #24]
 8001890:	021b      	lsls	r3, r3, #8
 8001892:	b21a      	sxth	r2, r3
 8001894:	7dfb      	ldrb	r3, [r7, #23]
 8001896:	b21b      	sxth	r3, r3
 8001898:	4313      	orrs	r3, r2
 800189a:	b21a      	sxth	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	845a      	strh	r2, [r3, #34]	; 0x22
			coeff_array[BME680_P4_LSB_REG]));
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
 80018a0:	7ebb      	ldrb	r3, [r7, #26]
 80018a2:	021b      	lsls	r3, r3, #8
 80018a4:	b21a      	sxth	r2, r3
 80018a6:	7e7b      	ldrb	r3, [r7, #25]
 80018a8:	b21b      	sxth	r3, r3
 80018aa:	4313      	orrs	r3, r2
 80018ac:	b21a      	sxth	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	849a      	strh	r2, [r3, #36]	; 0x24
			coeff_array[BME680_P5_LSB_REG]));
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
 80018b2:	7f3b      	ldrb	r3, [r7, #28]
 80018b4:	b25a      	sxtb	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
 80018bc:	7efb      	ldrb	r3, [r7, #27]
 80018be:	b25a      	sxtb	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
 80018c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018ca:	021b      	lsls	r3, r3, #8
 80018cc:	b21a      	sxth	r2, r3
 80018ce:	7ffb      	ldrb	r3, [r7, #31]
 80018d0:	b21b      	sxth	r3, r3
 80018d2:	4313      	orrs	r3, r2
 80018d4:	b21a      	sxth	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	851a      	strh	r2, [r3, #40]	; 0x28
			coeff_array[BME680_P8_LSB_REG]));
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
 80018da:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	b21a      	sxth	r2, r3
 80018e2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80018e6:	b21b      	sxth	r3, r3
 80018e8:	4313      	orrs	r3, r2
 80018ea:	b21a      	sxth	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	855a      	strh	r2, [r3, #42]	; 0x2a
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
 80018f0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80018fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018fe:	011b      	lsls	r3, r3, #4
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
 8001900:	b21a      	sxth	r2, r3
 8001902:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001906:	b21b      	sxth	r3, r3
 8001908:	f003 030f 	and.w	r3, r3, #15
 800190c:	b21b      	sxth	r3, r3
 800190e:	4313      	orrs	r3, r2
 8001910:	b21b      	sxth	r3, r3
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8001912:	b29a      	uxth	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	811a      	strh	r2, [r3, #8]
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8001918:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800191c:	011b      	lsls	r3, r3, #4
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
 800191e:	b21a      	sxth	r2, r3
 8001920:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001924:	091b      	lsrs	r3, r3, #4
 8001926:	b2db      	uxtb	r3, r3
 8001928:	b21b      	sxth	r3, r3
 800192a:	4313      	orrs	r3, r2
 800192c:	b21b      	sxth	r3, r3
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 800192e:	b29a      	uxth	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	815a      	strh	r2, [r3, #10]
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
 8001934:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001938:	b25a      	sxtb	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	731a      	strb	r2, [r3, #12]
		dev->calib.par_h4 = (int8_t) coeff_array[BME680_H4_REG];
 800193e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001942:	b25a      	sxtb	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	735a      	strb	r2, [r3, #13]
		dev->calib.par_h5 = (int8_t) coeff_array[BME680_H5_REG];
 8001948:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800194c:	b25a      	sxtb	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	739a      	strb	r2, [r3, #14]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME680_H6_REG];
 8001952:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	73da      	strb	r2, [r3, #15]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
 800195a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800195e:	b25a      	sxtb	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	741a      	strb	r2, [r3, #16]

		/* Gas heater related coefficients */
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
 8001964:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001968:	b25a      	sxtb	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	745a      	strb	r2, [r3, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
 800196e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001972:	021b      	lsls	r3, r3, #8
 8001974:	b21a      	sxth	r2, r3
 8001976:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800197a:	b21b      	sxth	r3, r3
 800197c:	4313      	orrs	r3, r2
 800197e:	b21a      	sxth	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	825a      	strh	r2, [r3, #18]
			coeff_array[BME680_GH2_LSB_REG]));
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
 8001984:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001988:	b25a      	sxtb	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	751a      	strb	r2, [r3, #20]

		/* Other coefficients */
		if (rslt == BME680_OK) {
 800198e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001992:	2b00      	cmp	r3, #0
 8001994:	d135      	bne.n	8001a02 <get_calib_data+0x23e>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
 8001996:	f107 010b 	add.w	r1, r7, #11
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2201      	movs	r2, #1
 800199e:	2002      	movs	r0, #2
 80019a0:	f7ff fb3c 	bl	800101c <bme680_get_regs>
 80019a4:	4603      	mov	r3, r0
 80019a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 80019aa:	7afb      	ldrb	r3, [r7, #11]
 80019ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	da00      	bge.n	80019b6 <get_calib_data+0x1f2>
 80019b4:	330f      	adds	r3, #15
 80019b6:	111b      	asrs	r3, r3, #4
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			if (rslt == BME680_OK) {
 80019c0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d11c      	bne.n	8001a02 <get_calib_data+0x23e>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
 80019c8:	f107 010b 	add.w	r1, r7, #11
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	2000      	movs	r0, #0
 80019d2:	f7ff fb23 	bl	800101c <bme680_get_regs>
 80019d6:	4603      	mov	r3, r0
 80019d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

				dev->calib.res_heat_val = (int8_t) temp_var;
 80019dc:	7afb      	ldrb	r3, [r7, #11]
 80019de:	b25a      	sxtb	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				if (rslt == BME680_OK)
 80019e6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d109      	bne.n	8001a02 <get_calib_data+0x23e>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
 80019ee:	f107 010b 	add.w	r1, r7, #11
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2201      	movs	r2, #1
 80019f6:	2004      	movs	r0, #4
 80019f8:	f7ff fb10 	bl	800101c <bme680_get_regs>
 80019fc:	4603      	mov	r3, r0
 80019fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			}
		}
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
 8001a02:	7afb      	ldrb	r3, [r7, #11]
 8001a04:	b25b      	sxtb	r3, r3
 8001a06:	111b      	asrs	r3, r3, #4
 8001a08:	b25a      	sxtb	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	}

	return rslt;
 8001a10:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3738      	adds	r7, #56	; 0x38
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <set_gas_config>:

/*!
 * @brief This internal API is used to set the gas configuration of the sensor.
 */
static int8_t set_gas_config(struct bme680_dev *dev)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f000 fcfd 	bl	8002424 <null_ptr_check>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8001a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d132      	bne.n	8001a9c <set_gas_config+0x80>

		uint8_t reg_addr[2] = {0};
 8001a36:	2300      	movs	r3, #0
 8001a38:	81bb      	strh	r3, [r7, #12]
		uint8_t reg_data[2] = {0};
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	813b      	strh	r3, [r7, #8]

		if (dev->power_mode == BME680_FORCED_MODE) {
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d119      	bne.n	8001a7c <set_gas_config+0x60>
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
 8001a48:	235a      	movs	r3, #90	; 0x5a
 8001a4a:	733b      	strb	r3, [r7, #12]
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f000 fabb 	bl	8001fd0 <calc_heater_res>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	723b      	strb	r3, [r7, #8]
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
 8001a5e:	2364      	movs	r3, #100	; 0x64
 8001a60:	737b      	strb	r3, [r7, #13]
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f000 fb2d 	bl	80020c8 <calc_heater_dur>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	727b      	strb	r3, [r7, #9]
			dev->gas_sett.nb_conv = 0;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001a7a:	e001      	b.n	8001a80 <set_gas_config+0x64>
		} else {
			rslt = BME680_W_DEFINE_PWR_MODE;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	73fb      	strb	r3, [r7, #15]
		}
		if (rslt == BME680_OK)
 8001a80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d109      	bne.n	8001a9c <set_gas_config+0x80>
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 8001a88:	f107 0108 	add.w	r1, r7, #8
 8001a8c:	f107 000c 	add.w	r0, r7, #12
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2202      	movs	r2, #2
 8001a94:	f7ff fb01 	bl	800109a <bme680_set_regs>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001a9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <calc_temperature>:

/*!
 * @brief This internal API is used to calculate the temperature value.
 */
static int16_t calc_temperature(uint32_t temp_adc, struct bme680_dev *dev)
{
 8001aa8:	b4b0      	push	{r4, r5, r7}
 8001aaa:	b08b      	sub	sp, #44	; 0x2c
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	10da      	asrs	r2, r3, #3
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	8adb      	ldrh	r3, [r3, #22]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	461a      	mov	r2, r3
 8001ac0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001ac4:	e9c7 2308 	strd	r2, r3, [r7, #32]
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001ace:	b21a      	sxth	r2, r3
 8001ad0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001ad4:	6a39      	ldr	r1, [r7, #32]
 8001ad6:	fb03 f001 	mul.w	r0, r3, r1
 8001ada:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001adc:	fb02 f101 	mul.w	r1, r2, r1
 8001ae0:	1844      	adds	r4, r0, r1
 8001ae2:	6a39      	ldr	r1, [r7, #32]
 8001ae4:	fba1 0102 	umull	r0, r1, r1, r2
 8001ae8:	1863      	adds	r3, r4, r1
 8001aea:	4619      	mov	r1, r3
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	0ac2      	lsrs	r2, r0, #11
 8001af6:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 8001afa:	12cb      	asrs	r3, r1, #11
 8001afc:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 8001b00:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b04:	f04f 0000 	mov.w	r0, #0
 8001b08:	f04f 0100 	mov.w	r1, #0
 8001b0c:	0850      	lsrs	r0, r2, #1
 8001b0e:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 8001b12:	1059      	asrs	r1, r3, #1
 8001b14:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001b18:	f04f 0200 	mov.w	r2, #0
 8001b1c:	f04f 0300 	mov.w	r3, #0
 8001b20:	0862      	lsrs	r2, r4, #1
 8001b22:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8001b26:	106b      	asrs	r3, r5, #1
 8001b28:	fb02 f501 	mul.w	r5, r2, r1
 8001b2c:	fb00 f403 	mul.w	r4, r0, r3
 8001b30:	442c      	add	r4, r5
 8001b32:	fba0 0102 	umull	r0, r1, r0, r2
 8001b36:	1863      	adds	r3, r4, r1
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f04f 0200 	mov.w	r2, #0
 8001b3e:	f04f 0300 	mov.w	r3, #0
 8001b42:	0b02      	lsrs	r2, r0, #12
 8001b44:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8001b48:	130b      	asrs	r3, r1, #12
 8001b4a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	f993 301a 	ldrsb.w	r3, [r3, #26]
 8001b54:	011b      	lsls	r3, r3, #4
 8001b56:	461a      	mov	r2, r3
 8001b58:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001b5c:	6939      	ldr	r1, [r7, #16]
 8001b5e:	fb03 f001 	mul.w	r0, r3, r1
 8001b62:	6979      	ldr	r1, [r7, #20]
 8001b64:	fb02 f101 	mul.w	r1, r2, r1
 8001b68:	1844      	adds	r4, r0, r1
 8001b6a:	6939      	ldr	r1, [r7, #16]
 8001b6c:	fba1 0102 	umull	r0, r1, r1, r2
 8001b70:	1863      	adds	r3, r4, r1
 8001b72:	4619      	mov	r1, r3
 8001b74:	f04f 0200 	mov.w	r2, #0
 8001b78:	f04f 0300 	mov.w	r3, #0
 8001b7c:	0b82      	lsrs	r2, r0, #14
 8001b7e:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8001b82:	138b      	asrs	r3, r1, #14
 8001b84:	e9c7 2304 	strd	r2, r3, [r7, #16]
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	461a      	mov	r2, r3
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	631a      	str	r2, [r3, #48]	; 0x30
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b98:	4613      	mov	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	3380      	adds	r3, #128	; 0x80
 8001ba0:	121b      	asrs	r3, r3, #8
 8001ba2:	81fb      	strh	r3, [r7, #14]

	return calc_temp;
 8001ba4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	372c      	adds	r7, #44	; 0x2c
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bcb0      	pop	{r4, r5, r7}
 8001bb0:	4770      	bx	lr

08001bb2 <calc_pressure>:

/*!
 * @brief This internal API is used to calculate the pressure value.
 */
static uint32_t calc_pressure(uint32_t pres_adc, const struct bme680_dev *dev)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b087      	sub	sp, #28
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
 8001bba:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int32_t var3;
	int32_t pressure_comp;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc0:	105b      	asrs	r3, r3, #1
 8001bc2:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 8001bc6:	613b      	str	r3, [r7, #16]
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	109b      	asrs	r3, r3, #2
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	1092      	asrs	r2, r2, #2
 8001bd0:	fb02 f303 	mul.w	r3, r2, r3
 8001bd4:	12db      	asrs	r3, r3, #11
		(int32_t)dev->calib.par_p6) >> 2;
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	f992 2026 	ldrsb.w	r2, [r2, #38]	; 0x26
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8001bdc:	fb02 f303 	mul.w	r3, r2, r3
 8001be0:	109b      	asrs	r3, r3, #2
 8001be2:	60fb      	str	r3, [r7, #12]
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001bea:	461a      	mov	r2, r3
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	fb03 f302 	mul.w	r3, r3, r2
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	60fb      	str	r3, [r7, #12]
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	109a      	asrs	r2, r3, #2
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001c04:	041b      	lsls	r3, r3, #16
 8001c06:	4413      	add	r3, r2
 8001c08:	60fb      	str	r3, [r7, #12]
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	109b      	asrs	r3, r3, #2
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	1092      	asrs	r2, r2, #2
 8001c12:	fb02 f303 	mul.w	r3, r2, r3
 8001c16:	135b      	asrs	r3, r3, #13
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	f992 2020 	ldrsb.w	r2, [r2, #32]
 8001c1e:	0152      	lsls	r2, r2, #5
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8001c20:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8001c24:	10da      	asrs	r2, r3, #3
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	fb03 f301 	mul.w	r3, r3, r1
 8001c34:	105b      	asrs	r3, r3, #1
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8001c36:	4413      	add	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
	var1 = var1 >> 18;
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	149b      	asrs	r3, r3, #18
 8001c3e:	613b      	str	r3, [r7, #16]
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	8b92      	ldrh	r2, [r2, #28]
 8001c4a:	fb02 f303 	mul.w	r3, r2, r3
 8001c4e:	13db      	asrs	r3, r3, #15
 8001c50:	613b      	str	r3, [r7, #16]
	pressure_comp = 1048576 - pres_adc;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001c58:	617b      	str	r3, [r7, #20]
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	131b      	asrs	r3, r3, #12
 8001c5e:	697a      	ldr	r2, [r7, #20]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	461a      	mov	r2, r3
 8001c64:	f640 4335 	movw	r3, #3125	; 0xc35
 8001c68:	fb03 f302 	mul.w	r3, r3, r2
 8001c6c:	617b      	str	r3, [r7, #20]
	if (pressure_comp >= BME680_MAX_OVERFLOW_VAL)
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c74:	db06      	blt.n	8001c84 <calc_pressure+0xd2>
		pressure_comp = ((pressure_comp / var1) << 1);
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	617b      	str	r3, [r7, #20]
 8001c82:	e005      	b.n	8001c90 <calc_pressure+0xde>
	else
		pressure_comp = ((pressure_comp << 1) / var1);
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	005a      	lsls	r2, r3, #1
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c8e:	617b      	str	r3, [r7, #20]
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001c96:	4619      	mov	r1, r3
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	10db      	asrs	r3, r3, #3
		(pressure_comp >> 3)) >> 13)) >> 12;
 8001c9c:	697a      	ldr	r2, [r7, #20]
 8001c9e:	10d2      	asrs	r2, r2, #3
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8001ca0:	fb02 f303 	mul.w	r3, r2, r3
		(pressure_comp >> 3)) >> 13)) >> 12;
 8001ca4:	135b      	asrs	r3, r3, #13
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8001ca6:	fb03 f301 	mul.w	r3, r3, r1
 8001caa:	131b      	asrs	r3, r3, #12
 8001cac:	613b      	str	r3, [r7, #16]
	var2 = ((int32_t)(pressure_comp >> 2) *
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	109b      	asrs	r3, r3, #2
		(int32_t)dev->calib.par_p8) >> 13;
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	f9b2 2028 	ldrsh.w	r2, [r2, #40]	; 0x28
	var2 = ((int32_t)(pressure_comp >> 2) *
 8001cb8:	fb02 f303 	mul.w	r3, r2, r3
 8001cbc:	135b      	asrs	r3, r3, #13
 8001cbe:	60fb      	str	r3, [r7, #12]
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	121b      	asrs	r3, r3, #8
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	1212      	asrs	r2, r2, #8
 8001cc8:	fb02 f303 	mul.w	r3, r2, r3
		(int32_t)(pressure_comp >> 8) *
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	1212      	asrs	r2, r2, #8
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8001cd0:	fb02 f303 	mul.w	r3, r2, r3
		(int32_t)dev->calib.par_p10) >> 17;
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
		(int32_t)(pressure_comp >> 8) *
 8001cda:	fb02 f303 	mul.w	r3, r2, r3
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8001cde:	145b      	asrs	r3, r3, #17
 8001ce0:	60bb      	str	r3, [r7, #8]

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	441a      	add	r2, r3
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	441a      	add	r2, r3
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	f993 3027 	ldrsb.w	r3, [r3, #39]	; 0x27
 8001cf2:	01db      	lsls	r3, r3, #7
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8001cf4:	4413      	add	r3, r2
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8001cf6:	111b      	asrs	r3, r3, #4
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	617b      	str	r3, [r7, #20]

	return (uint32_t)pressure_comp;
 8001cfe:	697b      	ldr	r3, [r7, #20]

}
 8001d00:	4618      	mov	r0, r3
 8001d02:	371c      	adds	r7, #28
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <calc_humidity>:

/*!
 * @brief This internal API is used to calculate the humidity value.
 */
static uint32_t calc_humidity(uint16_t hum_adc, const struct bme680_dev *dev)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b08b      	sub	sp, #44	; 0x2c
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	6039      	str	r1, [r7, #0]
 8001d16:	80fb      	strh	r3, [r7, #6]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4413      	add	r3, r2
 8001d22:	3380      	adds	r3, #128	; 0x80
 8001d24:	121b      	asrs	r3, r3, #8
 8001d26:	623b      	str	r3, [r7, #32]
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8001d28:	88fa      	ldrh	r2, [r7, #6]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	891b      	ldrh	r3, [r3, #8]
 8001d2e:	011b      	lsls	r3, r3, #4
 8001d30:	1ad2      	subs	r2, r2, r3
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001d38:	4619      	mov	r1, r3
 8001d3a:	6a3b      	ldr	r3, [r7, #32]
 8001d3c:	fb03 f301 	mul.w	r3, r3, r1
 8001d40:	493d      	ldr	r1, [pc, #244]	; (8001e38 <calc_humidity+0x12c>)
 8001d42:	fb81 0103 	smull	r0, r1, r1, r3
 8001d46:	1149      	asrs	r1, r1, #5
 8001d48:	17db      	asrs	r3, r3, #31
 8001d4a:	1acb      	subs	r3, r1, r3
 8001d4c:	105b      	asrs	r3, r3, #1
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	61fb      	str	r3, [r7, #28]
	var2 = ((int32_t) dev->calib.par_h2
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	895b      	ldrh	r3, [r3, #10]
 8001d56:	4618      	mov	r0, r3
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	f993 300d 	ldrsb.w	r3, [r3, #13]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	6a3b      	ldr	r3, [r7, #32]
 8001d62:	fb03 f302 	mul.w	r3, r3, r2
 8001d66:	4a34      	ldr	r2, [pc, #208]	; (8001e38 <calc_humidity+0x12c>)
 8001d68:	fb82 1203 	smull	r1, r2, r2, r3
 8001d6c:	1152      	asrs	r2, r2, #5
 8001d6e:	17db      	asrs	r3, r3, #31
 8001d70:	1ad2      	subs	r2, r2, r3
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8001d78:	4619      	mov	r1, r3
 8001d7a:	6a3b      	ldr	r3, [r7, #32]
 8001d7c:	fb03 f301 	mul.w	r3, r3, r1
 8001d80:	492d      	ldr	r1, [pc, #180]	; (8001e38 <calc_humidity+0x12c>)
 8001d82:	fb81 c103 	smull	ip, r1, r1, r3
 8001d86:	1149      	asrs	r1, r1, #5
 8001d88:	17db      	asrs	r3, r3, #31
 8001d8a:	1acb      	subs	r3, r1, r3
 8001d8c:	6a39      	ldr	r1, [r7, #32]
 8001d8e:	fb01 f303 	mul.w	r3, r1, r3
 8001d92:	119b      	asrs	r3, r3, #6
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 8001d94:	4928      	ldr	r1, [pc, #160]	; (8001e38 <calc_humidity+0x12c>)
 8001d96:	fb81 c103 	smull	ip, r1, r1, r3
 8001d9a:	1149      	asrs	r1, r1, #5
 8001d9c:	17db      	asrs	r3, r3, #31
 8001d9e:	1acb      	subs	r3, r1, r3
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8001da0:	4413      	add	r3, r2
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 8001da2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8001da6:	fb03 f300 	mul.w	r3, r3, r0
	var2 = ((int32_t) dev->calib.par_h2
 8001daa:	129b      	asrs	r3, r3, #10
 8001dac:	61bb      	str	r3, [r7, #24]
	var3 = var1 * var2;
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	fb02 f303 	mul.w	r3, r2, r3
 8001db6:	617b      	str	r3, [r7, #20]
	var4 = (int32_t) dev->calib.par_h6 << 7;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	7bdb      	ldrb	r3, [r3, #15]
 8001dbc:	01db      	lsls	r3, r3, #7
 8001dbe:	613b      	str	r3, [r7, #16]
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	6a3b      	ldr	r3, [r7, #32]
 8001dca:	fb03 f302 	mul.w	r3, r3, r2
 8001dce:	4a1a      	ldr	r2, [pc, #104]	; (8001e38 <calc_humidity+0x12c>)
 8001dd0:	fb82 1203 	smull	r1, r2, r2, r3
 8001dd4:	1152      	asrs	r2, r2, #5
 8001dd6:	17db      	asrs	r3, r3, #31
 8001dd8:	1ad2      	subs	r2, r2, r3
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	4413      	add	r3, r2
 8001dde:	111b      	asrs	r3, r3, #4
 8001de0:	613b      	str	r3, [r7, #16]
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	139b      	asrs	r3, r3, #14
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	1392      	asrs	r2, r2, #14
 8001dea:	fb02 f303 	mul.w	r3, r2, r3
 8001dee:	129b      	asrs	r3, r3, #10
 8001df0:	60fb      	str	r3, [r7, #12]
	var6 = (var4 * var5) >> 1;
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	fb02 f303 	mul.w	r3, r2, r3
 8001dfa:	105b      	asrs	r3, r3, #1
 8001dfc:	60bb      	str	r3, [r7, #8]
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	4413      	add	r3, r2
 8001e04:	129b      	asrs	r3, r3, #10
 8001e06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e0a:	fb02 f303 	mul.w	r3, r2, r3
 8001e0e:	131b      	asrs	r3, r3, #12
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24

	if (calc_hum > 100000) /* Cap at 100%rH */
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	4a09      	ldr	r2, [pc, #36]	; (8001e3c <calc_humidity+0x130>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	dd02      	ble.n	8001e20 <calc_humidity+0x114>
		calc_hum = 100000;
 8001e1a:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <calc_humidity+0x130>)
 8001e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e1e:	e004      	b.n	8001e2a <calc_humidity+0x11e>
	else if (calc_hum < 0)
 8001e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	da01      	bge.n	8001e2a <calc_humidity+0x11e>
		calc_hum = 0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24

	return (uint32_t) calc_hum;
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	372c      	adds	r7, #44	; 0x2c
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	51eb851f 	.word	0x51eb851f
 8001e3c:	000186a0 	.word	0x000186a0

08001e40 <calc_gas_resistance>:

/*!
 * @brief This internal API is used to calculate the Gas Resistance value.
 */
static uint32_t calc_gas_resistance(uint16_t gas_res_adc, uint8_t gas_range, const struct bme680_dev *dev)
{
 8001e40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e44:	b0b0      	sub	sp, #192	; 0xc0
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	4603      	mov	r3, r0
 8001e4a:	61ba      	str	r2, [r7, #24]
 8001e4c:	83fb      	strh	r3, [r7, #30]
 8001e4e:	460b      	mov	r3, r1
 8001e50:	777b      	strb	r3, [r7, #29]
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;
	/**Look up table 1 for the possible gas range values */
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 8001e52:	4b5d      	ldr	r3, [pc, #372]	; (8001fc8 <calc_gas_resistance+0x188>)
 8001e54:	f107 0564 	add.w	r5, r7, #100	; 0x64
 8001e58:	461c      	mov	r4, r3
 8001e5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e66:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e6a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2130303777),
		UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2143188679), UINT32_C(2136746228),
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2147483647) };
	/**Look up table 2 for the possible gas range values */
	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
 8001e6e:	4b57      	ldr	r3, [pc, #348]	; (8001fcc <calc_gas_resistance+0x18c>)
 8001e70:	f107 0524 	add.w	r5, r7, #36	; 0x24
 8001e74:	461c      	mov	r4, r3
 8001e76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e82:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e86:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		UINT32_C(255744255), UINT32_C(127110228), UINT32_C(64000000), UINT32_C(32258064), UINT32_C(16016016),
		UINT32_C(8000000), UINT32_C(4000000), UINT32_C(2000000), UINT32_C(1000000), UINT32_C(500000),
		UINT32_C(250000), UINT32_C(125000) };

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	f993 3036 	ldrsb.w	r3, [r3, #54]	; 0x36
 8001e90:	b25c      	sxtb	r4, r3
 8001e92:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8001e96:	4622      	mov	r2, r4
 8001e98:	462b      	mov	r3, r5
 8001e9a:	f04f 0000 	mov.w	r0, #0
 8001e9e:	f04f 0100 	mov.w	r1, #0
 8001ea2:	0099      	lsls	r1, r3, #2
 8001ea4:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001ea8:	0090      	lsls	r0, r2, #2
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	1911      	adds	r1, r2, r4
 8001eb0:	6139      	str	r1, [r7, #16]
 8001eb2:	416b      	adcs	r3, r5
 8001eb4:	617b      	str	r3, [r7, #20]
 8001eb6:	f240 523c 	movw	r2, #1340	; 0x53c
 8001eba:	f04f 0300 	mov.w	r3, #0
 8001ebe:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001ec2:	4621      	mov	r1, r4
 8001ec4:	eb11 0802 	adds.w	r8, r1, r2
 8001ec8:	4629      	mov	r1, r5
 8001eca:	eb41 0903 	adc.w	r9, r1, r3
		((int64_t) lookupTable1[gas_range])) >> 16;
 8001ece:	7f7b      	ldrb	r3, [r7, #29]
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8001ed6:	4413      	add	r3, r2
 8001ed8:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8001edc:	461a      	mov	r2, r3
 8001ede:	f04f 0300 	mov.w	r3, #0
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8001ee2:	fb02 f009 	mul.w	r0, r2, r9
 8001ee6:	fb08 f103 	mul.w	r1, r8, r3
 8001eea:	1844      	adds	r4, r0, r1
 8001eec:	fba8 0102 	umull	r0, r1, r8, r2
 8001ef0:	1863      	adds	r3, r4, r1
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	f04f 0200 	mov.w	r2, #0
 8001ef8:	f04f 0300 	mov.w	r3, #0
 8001efc:	0c02      	lsrs	r2, r0, #16
 8001efe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001f02:	140b      	asrs	r3, r1, #16
 8001f04:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8001f08:	8bf8      	ldrh	r0, [r7, #30]
 8001f0a:	f04f 0100 	mov.w	r1, #0
 8001f0e:	f04f 0200 	mov.w	r2, #0
 8001f12:	f04f 0300 	mov.w	r3, #0
 8001f16:	03cb      	lsls	r3, r1, #15
 8001f18:	ea43 4350 	orr.w	r3, r3, r0, lsr #17
 8001f1c:	03c2      	lsls	r2, r0, #15
 8001f1e:	f112 4a7f 	adds.w	sl, r2, #4278190080	; 0xff000000
 8001f22:	f143 3bff 	adc.w	fp, r3, #4294967295
 8001f26:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8001f2a:	eb1a 0102 	adds.w	r1, sl, r2
 8001f2e:	60b9      	str	r1, [r7, #8]
 8001f30:	eb4b 0303 	adc.w	r3, fp, r3
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001f3a:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 8001f3e:	7f7b      	ldrb	r3, [r7, #29]
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8001f46:	4413      	add	r3, r2
 8001f48:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	f04f 0300 	mov.w	r3, #0
 8001f52:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001f56:	fb03 f001 	mul.w	r0, r3, r1
 8001f5a:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8001f5e:	fb02 f101 	mul.w	r1, r2, r1
 8001f62:	1844      	adds	r4, r0, r1
 8001f64:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001f68:	fba1 0102 	umull	r0, r1, r1, r2
 8001f6c:	1863      	adds	r3, r4, r1
 8001f6e:	4619      	mov	r1, r3
 8001f70:	f04f 0200 	mov.w	r2, #0
 8001f74:	f04f 0300 	mov.w	r3, #0
 8001f78:	0a42      	lsrs	r2, r0, #9
 8001f7a:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8001f7e:	124b      	asrs	r3, r1, #9
 8001f80:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 8001f84:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	f04f 0300 	mov.w	r3, #0
 8001f90:	0842      	lsrs	r2, r0, #1
 8001f92:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8001f96:	104b      	asrs	r3, r1, #1
 8001f98:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8001f9c:	1814      	adds	r4, r2, r0
 8001f9e:	603c      	str	r4, [r7, #0]
 8001fa0:	414b      	adcs	r3, r1
 8001fa2:	607b      	str	r3, [r7, #4]
 8001fa4:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8001fa8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fac:	f7fe fe36 	bl	8000c1c <__aeabi_ldivmod>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	return calc_gas_res;
 8001fba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	37c0      	adds	r7, #192	; 0xc0
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fc8:	0800cb38 	.word	0x0800cb38
 8001fcc:	0800cb78 	.word	0x0800cb78

08001fd0 <calc_heater_res>:

/*!
 * @brief This internal API is used to calculate the Heat Resistance value.
 */
static uint8_t calc_heater_res(uint16_t temp, const struct bme680_dev *dev)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b08b      	sub	sp, #44	; 0x2c
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	6039      	str	r1, [r7, #0]
 8001fda:	80fb      	strh	r3, [r7, #6]
	int32_t var3;
	int32_t var4;
	int32_t var5;
	int32_t heatr_res_x100;

	if (temp > 400) /* Cap temperature */
 8001fdc:	88fb      	ldrh	r3, [r7, #6]
 8001fde:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001fe2:	d902      	bls.n	8001fea <calc_heater_res+0x1a>
		temp = 400;
 8001fe4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001fe8:	80fb      	strh	r3, [r7, #6]

	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8001ff8:	fb03 f302 	mul.w	r3, r3, r2
 8001ffc:	4a2f      	ldr	r2, [pc, #188]	; (80020bc <calc_heater_res+0xec>)
 8001ffe:	fb82 1203 	smull	r1, r2, r2, r3
 8002002:	1192      	asrs	r2, r2, #6
 8002004:	17db      	asrs	r3, r3, #31
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	021b      	lsls	r3, r3, #8
 800200a:	627b      	str	r3, [r7, #36]	; 0x24
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8002012:	f503 7244 	add.w	r2, r3, #784	; 0x310
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800201c:	f503 3316 	add.w	r3, r3, #153600	; 0x25800
 8002020:	f203 1399 	addw	r3, r3, #409	; 0x199
 8002024:	88f9      	ldrh	r1, [r7, #6]
 8002026:	fb01 f303 	mul.w	r3, r1, r3
 800202a:	4925      	ldr	r1, [pc, #148]	; (80020c0 <calc_heater_res+0xf0>)
 800202c:	fb81 0103 	smull	r0, r1, r1, r3
 8002030:	10c9      	asrs	r1, r1, #3
 8002032:	17db      	asrs	r3, r3, #31
 8002034:	1acb      	subs	r3, r1, r3
 8002036:	f503 1348 	add.w	r3, r3, #3276800	; 0x320000
 800203a:	4921      	ldr	r1, [pc, #132]	; (80020c0 <calc_heater_res+0xf0>)
 800203c:	fb81 0103 	smull	r0, r1, r1, r3
 8002040:	1089      	asrs	r1, r1, #2
 8002042:	17db      	asrs	r3, r3, #31
 8002044:	1acb      	subs	r3, r1, r3
 8002046:	fb03 f302 	mul.w	r3, r3, r2
 800204a:	623b      	str	r3, [r7, #32]
	var3 = var1 + (var2 / 2);
 800204c:	6a3b      	ldr	r3, [r7, #32]
 800204e:	0fda      	lsrs	r2, r3, #31
 8002050:	4413      	add	r3, r2
 8002052:	105b      	asrs	r3, r3, #1
 8002054:	461a      	mov	r2, r3
 8002056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002058:	4413      	add	r3, r2
 800205a:	61fb      	str	r3, [r7, #28]
	var4 = (var3 / (dev->calib.res_heat_range + 4));
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002062:	3304      	adds	r3, #4
 8002064:	69fa      	ldr	r2, [r7, #28]
 8002066:	fb92 f3f3 	sdiv	r3, r2, r3
 800206a:	61bb      	str	r3, [r7, #24]
	var5 = (131 * dev->calib.res_heat_val) + 65536;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	f993 3035 	ldrsb.w	r3, [r3, #53]	; 0x35
 8002072:	461a      	mov	r2, r3
 8002074:	4613      	mov	r3, r2
 8002076:	019b      	lsls	r3, r3, #6
 8002078:	4413      	add	r3, r2
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	4413      	add	r3, r2
 800207e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002082:	617b      	str	r3, [r7, #20]
	heatr_res_x100 = (int32_t) (((var4 / var5) - 250) * 34);
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	fb92 f3f3 	sdiv	r3, r2, r3
 800208c:	f1a3 02fa 	sub.w	r2, r3, #250	; 0xfa
 8002090:	4613      	mov	r3, r2
 8002092:	011b      	lsls	r3, r3, #4
 8002094:	4413      	add	r3, r2
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	613b      	str	r3, [r7, #16]
	heatr_res = (uint8_t) ((heatr_res_x100 + 50) / 100);
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	3332      	adds	r3, #50	; 0x32
 800209e:	4a09      	ldr	r2, [pc, #36]	; (80020c4 <calc_heater_res+0xf4>)
 80020a0:	fb82 1203 	smull	r1, r2, r2, r3
 80020a4:	1152      	asrs	r2, r2, #5
 80020a6:	17db      	asrs	r3, r3, #31
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	73fb      	strb	r3, [r7, #15]

	return heatr_res;
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	372c      	adds	r7, #44	; 0x2c
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	10624dd3 	.word	0x10624dd3
 80020c0:	66666667 	.word	0x66666667
 80020c4:	51eb851f 	.word	0x51eb851f

080020c8 <calc_heater_dur>:

/*!
 * @brief This internal API is used to calculate the Heat duration value.
 */
static uint8_t calc_heater_dur(uint16_t dur)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	80fb      	strh	r3, [r7, #6]
	uint8_t factor = 0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	73fb      	strb	r3, [r7, #15]
	uint8_t durval;

	if (dur >= 0xfc0) {
 80020d6:	88fb      	ldrh	r3, [r7, #6]
 80020d8:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
 80020dc:	d308      	bcc.n	80020f0 <calc_heater_dur+0x28>
		durval = 0xff; /* Max duration*/
 80020de:	23ff      	movs	r3, #255	; 0xff
 80020e0:	73bb      	strb	r3, [r7, #14]
 80020e2:	e00f      	b.n	8002104 <calc_heater_dur+0x3c>
	} else {
		while (dur > 0x3F) {
			dur = dur / 4;
 80020e4:	88fb      	ldrh	r3, [r7, #6]
 80020e6:	089b      	lsrs	r3, r3, #2
 80020e8:	80fb      	strh	r3, [r7, #6]
			factor += 1;
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
 80020ec:	3301      	adds	r3, #1
 80020ee:	73fb      	strb	r3, [r7, #15]
		while (dur > 0x3F) {
 80020f0:	88fb      	ldrh	r3, [r7, #6]
 80020f2:	2b3f      	cmp	r3, #63	; 0x3f
 80020f4:	d8f6      	bhi.n	80020e4 <calc_heater_dur+0x1c>
		}
		durval = (uint8_t) (dur + (factor * 64));
 80020f6:	88fb      	ldrh	r3, [r7, #6]
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	7bfb      	ldrb	r3, [r7, #15]
 80020fc:	019b      	lsls	r3, r3, #6
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	4413      	add	r3, r2
 8002102:	73bb      	strb	r3, [r7, #14]
	}

	return durval;
 8002104:	7bbb      	ldrb	r3, [r7, #14]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <read_field_data>:

/*!
 * @brief This internal API is used to calculate the field data of sensor.
 */
static int8_t read_field_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b08a      	sub	sp, #40	; 0x28
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
 800211a:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
 800211c:	2300      	movs	r3, #0
 800211e:	60bb      	str	r3, [r7, #8]
 8002120:	f107 030c 	add.w	r3, r7, #12
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t gas_range;
	uint32_t adc_temp;
	uint32_t adc_pres;
	uint16_t adc_hum;
	uint16_t adc_gas_res;
	uint8_t tries = 10;
 800212e:	230a      	movs	r3, #10
 8002130:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8002134:	6838      	ldr	r0, [r7, #0]
 8002136:	f000 f975 	bl	8002424 <null_ptr_check>
 800213a:	4603      	mov	r3, r0
 800213c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	do {
		if (rslt == BME680_OK) {
 8002140:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002144:	2b00      	cmp	r3, #0
 8002146:	f040 8087 	bne.w	8002258 <read_field_data+0x146>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 800214a:	f107 0108 	add.w	r1, r7, #8
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	220f      	movs	r2, #15
 8002152:	201d      	movs	r0, #29
 8002154:	f7fe ff62 	bl	800101c <bme680_get_regs>
 8002158:	4603      	mov	r3, r0
 800215a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
 800215e:	7a3b      	ldrb	r3, [r7, #8]
 8002160:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002164:	b2da      	uxtb	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	701a      	strb	r2, [r3, #0]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 800216a:	7a3b      	ldrb	r3, [r7, #8]
 800216c:	f003 030f 	and.w	r3, r3, #15
 8002170:	b2da      	uxtb	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	705a      	strb	r2, [r3, #1]
			data->meas_index = buff[1];
 8002176:	7a7a      	ldrb	r2, [r7, #9]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	709a      	strb	r2, [r3, #2]

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 800217c:	7abb      	ldrb	r3, [r7, #10]
 800217e:	031a      	lsls	r2, r3, #12
 8002180:	7afb      	ldrb	r3, [r7, #11]
 8002182:	011b      	lsls	r3, r3, #4
 8002184:	4313      	orrs	r3, r2
				| ((uint32_t) buff[4] / 16));
 8002186:	7b3a      	ldrb	r2, [r7, #12]
 8002188:	0912      	lsrs	r2, r2, #4
 800218a:	b2d2      	uxtb	r2, r2
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 800218c:	4313      	orrs	r3, r2
 800218e:	623b      	str	r3, [r7, #32]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 8002190:	7b7b      	ldrb	r3, [r7, #13]
 8002192:	031a      	lsls	r2, r3, #12
 8002194:	7bbb      	ldrb	r3, [r7, #14]
 8002196:	011b      	lsls	r3, r3, #4
 8002198:	4313      	orrs	r3, r2
				| ((uint32_t) buff[7] / 16));
 800219a:	7bfa      	ldrb	r2, [r7, #15]
 800219c:	0912      	lsrs	r2, r2, #4
 800219e:	b2d2      	uxtb	r2, r2
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	61fb      	str	r3, [r7, #28]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 80021a4:	7c3b      	ldrb	r3, [r7, #16]
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	021b      	lsls	r3, r3, #8
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	7c7b      	ldrb	r3, [r7, #17]
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	4313      	orrs	r3, r2
 80021b2:	837b      	strh	r3, [r7, #26]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80021b4:	7d7b      	ldrb	r3, [r7, #21]
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	7dbb      	ldrb	r3, [r7, #22]
 80021be:	099b      	lsrs	r3, r3, #6
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	4313      	orrs	r3, r2
 80021c6:	833b      	strh	r3, [r7, #24]
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;
 80021c8:	7dbb      	ldrb	r3, [r7, #22]
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	75fb      	strb	r3, [r7, #23]

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	b25a      	sxtb	r2, r3
 80021d6:	7dbb      	ldrb	r3, [r7, #22]
 80021d8:	b25b      	sxtb	r3, r3
 80021da:	f003 0320 	and.w	r3, r3, #32
 80021de:	b25b      	sxtb	r3, r3
 80021e0:	4313      	orrs	r3, r2
 80021e2:	b25b      	sxtb	r3, r3
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	701a      	strb	r2, [r3, #0]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	b25a      	sxtb	r2, r3
 80021f0:	7dbb      	ldrb	r3, [r7, #22]
 80021f2:	b25b      	sxtb	r3, r3
 80021f4:	f003 0310 	and.w	r3, r3, #16
 80021f8:	b25b      	sxtb	r3, r3
 80021fa:	4313      	orrs	r3, r2
 80021fc:	b25b      	sxtb	r3, r3
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	701a      	strb	r2, [r3, #0]

			if (data->status & BME680_NEW_DATA_MSK) {
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	b25b      	sxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	da20      	bge.n	8002250 <read_field_data+0x13e>
				data->temperature = calc_temperature(adc_temp, dev);
 800220e:	6839      	ldr	r1, [r7, #0]
 8002210:	69f8      	ldr	r0, [r7, #28]
 8002212:	f7ff fc49 	bl	8001aa8 <calc_temperature>
 8002216:	4603      	mov	r3, r0
 8002218:	461a      	mov	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	809a      	strh	r2, [r3, #4]
				data->pressure = calc_pressure(adc_pres, dev);
 800221e:	6839      	ldr	r1, [r7, #0]
 8002220:	6a38      	ldr	r0, [r7, #32]
 8002222:	f7ff fcc6 	bl	8001bb2 <calc_pressure>
 8002226:	4602      	mov	r2, r0
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	609a      	str	r2, [r3, #8]
				data->humidity = calc_humidity(adc_hum, dev);
 800222c:	8b7b      	ldrh	r3, [r7, #26]
 800222e:	6839      	ldr	r1, [r7, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff fd6b 	bl	8001d0c <calc_humidity>
 8002236:	4602      	mov	r2, r0
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	60da      	str	r2, [r3, #12]
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 800223c:	7df9      	ldrb	r1, [r7, #23]
 800223e:	8b3b      	ldrh	r3, [r7, #24]
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff fdfc 	bl	8001e40 <calc_gas_resistance>
 8002248:	4602      	mov	r2, r0
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	611a      	str	r2, [r3, #16]
				break;
 800224e:	e00d      	b.n	800226c <read_field_data+0x15a>
			}
			/* Delay to poll the data */
			dev->delay_ms(BME680_POLL_PERIOD_MS);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002254:	200a      	movs	r0, #10
 8002256:	4798      	blx	r3
		}
		tries--;
 8002258:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800225c:	3b01      	subs	r3, #1
 800225e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	} while (tries);
 8002262:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002266:	2b00      	cmp	r3, #0
 8002268:	f47f af6a 	bne.w	8002140 <read_field_data+0x2e>

	if (!tries)
 800226c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002270:	2b00      	cmp	r3, #0
 8002272:	d102      	bne.n	800227a <read_field_data+0x168>
		rslt = BME680_W_NO_NEW_DATA;
 8002274:	2302      	movs	r3, #2
 8002276:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return rslt;
 800227a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800227e:	4618      	mov	r0, r3
 8002280:	3728      	adds	r7, #40	; 0x28
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <set_mem_page>:

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
 8002286:	b590      	push	{r4, r7, lr}
 8002288:	b085      	sub	sp, #20
 800228a:	af00      	add	r7, sp, #0
 800228c:	4603      	mov	r3, r0
 800228e:	6039      	str	r1, [r7, #0]
 8002290:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
 8002292:	6838      	ldr	r0, [r7, #0]
 8002294:	f000 f8c6 	bl	8002424 <null_ptr_check>
 8002298:	4603      	mov	r3, r0
 800229a:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 800229c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d14f      	bne.n	8002344 <set_mem_page+0xbe>
		if (reg_addr > 0x7f)
 80022a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	da02      	bge.n	80022b2 <set_mem_page+0x2c>
			mem_page = BME680_MEM_PAGE1;
 80022ac:	2300      	movs	r3, #0
 80022ae:	73bb      	strb	r3, [r7, #14]
 80022b0:	e001      	b.n	80022b6 <set_mem_page+0x30>
		else
			mem_page = BME680_MEM_PAGE0;
 80022b2:	2310      	movs	r3, #16
 80022b4:	73bb      	strb	r3, [r7, #14]

		if (mem_page != dev->mem_page) {
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	78db      	ldrb	r3, [r3, #3]
 80022ba:	7bba      	ldrb	r2, [r7, #14]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d041      	beq.n	8002344 <set_mem_page+0xbe>
			dev->mem_page = mem_page;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	7bba      	ldrb	r2, [r7, #14]
 80022c4:	70da      	strb	r2, [r3, #3]

			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	7858      	ldrb	r0, [r3, #1]
 80022ce:	f107 020d 	add.w	r2, r7, #13
 80022d2:	2301      	movs	r3, #1
 80022d4:	21f3      	movs	r1, #243	; 0xf3
 80022d6:	47a0      	blx	r4
 80022d8:	4603      	mov	r3, r0
 80022da:	461a      	mov	r2, r3
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			if (dev->com_rslt != 0)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <set_mem_page+0x6a>
				rslt = BME680_E_COM_FAIL;
 80022ec:	23fe      	movs	r3, #254	; 0xfe
 80022ee:	73fb      	strb	r3, [r7, #15]

			if (rslt == BME680_OK) {
 80022f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d125      	bne.n	8002344 <set_mem_page+0xbe>
				reg = reg & (~BME680_MEM_PAGE_MSK);
 80022f8:	7b7b      	ldrb	r3, [r7, #13]
 80022fa:	f023 0310 	bic.w	r3, r3, #16
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	737b      	strb	r3, [r7, #13]
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	78db      	ldrb	r3, [r3, #3]
 8002306:	b25b      	sxtb	r3, r3
 8002308:	f003 0310 	and.w	r3, r3, #16
 800230c:	b25a      	sxtb	r2, r3
 800230e:	7b7b      	ldrb	r3, [r7, #13]
 8002310:	b25b      	sxtb	r3, r3
 8002312:	4313      	orrs	r3, r2
 8002314:	b25b      	sxtb	r3, r3
 8002316:	b2db      	uxtb	r3, r3
 8002318:	737b      	strb	r3, [r7, #13]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	7858      	ldrb	r0, [r3, #1]
 8002322:	f107 020d 	add.w	r2, r7, #13
 8002326:	2301      	movs	r3, #1
 8002328:	2173      	movs	r1, #115	; 0x73
 800232a:	47a0      	blx	r4
 800232c:	4603      	mov	r3, r0
 800232e:	461a      	mov	r2, r3
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
					&reg, 1);
				if (dev->com_rslt != 0)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <set_mem_page+0xbe>
					rslt = BME680_E_COM_FAIL;
 8002340:	23fe      	movs	r3, #254	; 0xfe
 8002342:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	return rslt;
 8002344:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	bd90      	pop	{r4, r7, pc}

08002350 <get_mem_page>:

/*!
 * @brief This internal API is used to get the memory page based on register address.
 */
static int8_t get_mem_page(struct bme680_dev *dev)
{
 8002350:	b590      	push	{r4, r7, lr}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f863 	bl	8002424 <null_ptr_check>
 800235e:	4603      	mov	r3, r0
 8002360:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8002362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d11b      	bne.n	80023a2 <get_mem_page+0x52>
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	7858      	ldrb	r0, [r3, #1]
 8002372:	f107 020e 	add.w	r2, r7, #14
 8002376:	2301      	movs	r3, #1
 8002378:	21f3      	movs	r1, #243	; 0xf3
 800237a:	47a0      	blx	r4
 800237c:	4603      	mov	r3, r0
 800237e:	461a      	mov	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		if (dev->com_rslt != 0)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 800238c:	2b00      	cmp	r3, #0
 800238e:	d002      	beq.n	8002396 <get_mem_page+0x46>
			rslt = BME680_E_COM_FAIL;
 8002390:	23fe      	movs	r3, #254	; 0xfe
 8002392:	73fb      	strb	r3, [r7, #15]
 8002394:	e005      	b.n	80023a2 <get_mem_page+0x52>
		else
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
 8002396:	7bbb      	ldrb	r3, [r7, #14]
 8002398:	f003 0310 	and.w	r3, r3, #16
 800239c:	b2da      	uxtb	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	70da      	strb	r2, [r3, #3]
	}

	return rslt;
 80023a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3714      	adds	r7, #20
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd90      	pop	{r4, r7, pc}

080023ae <boundary_check>:
/*!
 * @brief This internal API is used to validate the boundary
 * conditions.
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b087      	sub	sp, #28
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	60f8      	str	r0, [r7, #12]
 80023b6:	607b      	str	r3, [r7, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	72fb      	strb	r3, [r7, #11]
 80023bc:	4613      	mov	r3, r2
 80023be:	72bb      	strb	r3, [r7, #10]
	int8_t rslt = BME680_OK;
 80023c0:	2300      	movs	r3, #0
 80023c2:	75fb      	strb	r3, [r7, #23]

	if (value != NULL) {
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d022      	beq.n	8002410 <boundary_check+0x62>
		/* Check if value is below minimum value */
		if (*value < min) {
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	7afa      	ldrb	r2, [r7, #11]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d90b      	bls.n	80023ec <boundary_check+0x3e>
			/* Auto correct the invalid value to minimum value */
			*value = min;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	7afa      	ldrb	r2, [r7, #11]
 80023d8:	701a      	strb	r2, [r3, #0]
			dev->info_msg |= BME680_I_MIN_CORRECTION;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		}
		/* Check if value is above maximum value */
		if (*value > max) {
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	7aba      	ldrb	r2, [r7, #10]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d20e      	bcs.n	8002414 <boundary_check+0x66>
			/* Auto correct the invalid value to maximum value */
			*value = max;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	7aba      	ldrb	r2, [r7, #10]
 80023fa:	701a      	strb	r2, [r3, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002402:	f043 0302 	orr.w	r3, r3, #2
 8002406:	b2da      	uxtb	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800240e:	e001      	b.n	8002414 <boundary_check+0x66>
		}
	} else {
		rslt = BME680_E_NULL_PTR;
 8002410:	23ff      	movs	r3, #255	; 0xff
 8002412:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8002414:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002418:	4618      	mov	r0, r3
 800241a:	371c      	adds	r7, #28
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00b      	beq.n	800244a <null_ptr_check+0x26>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002436:	2b00      	cmp	r3, #0
 8002438:	d007      	beq.n	800244a <null_ptr_check+0x26>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <null_ptr_check+0x26>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002446:	2b00      	cmp	r3, #0
 8002448:	d102      	bne.n	8002450 <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
 800244a:	23ff      	movs	r3, #255	; 0xff
 800244c:	73fb      	strb	r3, [r7, #15]
 800244e:	e001      	b.n	8002454 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME680_OK;
 8002450:	2300      	movs	r3, #0
 8002452:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8002454:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <DEV_SPI_WriteByte>:
******************************************************************************/
#include "DEV_Config.h"

extern SPI_HandleTypeDef hspi4;
void DEV_SPI_WriteByte(UBYTE value)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi4, &value, 1, 1000);
 800246e:	1df9      	adds	r1, r7, #7
 8002470:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002474:	2201      	movs	r2, #1
 8002476:	4803      	ldr	r0, [pc, #12]	; (8002484 <DEV_SPI_WriteByte+0x20>)
 8002478:	f003 fd49 	bl	8005f0e <HAL_SPI_Transmit>
}
 800247c:	bf00      	nop
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	20004ca0 	.word	0x20004ca0

08002488 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_DC_PIN, 0);
 800248c:	2200      	movs	r2, #0
 800248e:	2180      	movs	r1, #128	; 0x80
 8002490:	4808      	ldr	r0, [pc, #32]	; (80024b4 <DEV_Module_Init+0x2c>)
 8002492:	f002 f857 	bl	8004544 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8002496:	2200      	movs	r2, #0
 8002498:	2104      	movs	r1, #4
 800249a:	4807      	ldr	r0, [pc, #28]	; (80024b8 <DEV_Module_Init+0x30>)
 800249c:	f002 f852 	bl	8004544 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 80024a0:	2201      	movs	r2, #1
 80024a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024a6:	4803      	ldr	r0, [pc, #12]	; (80024b4 <DEV_Module_Init+0x2c>)
 80024a8:	f002 f84c 	bl	8004544 <HAL_GPIO_WritePin>
		return 0;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40021000 	.word	0x40021000
 80024b8:	40020400 	.word	0x40020400

080024bc <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	4608      	mov	r0, r1
 80024c6:	4611      	mov	r1, r2
 80024c8:	461a      	mov	r2, r3
 80024ca:	4603      	mov	r3, r0
 80024cc:	817b      	strh	r3, [r7, #10]
 80024ce:	460b      	mov	r3, r1
 80024d0:	813b      	strh	r3, [r7, #8]
 80024d2:	4613      	mov	r3, r2
 80024d4:	80fb      	strh	r3, [r7, #6]
    Paint.Image = NULL;
 80024d6:	4b23      	ldr	r3, [pc, #140]	; (8002564 <Paint_NewImage+0xa8>)
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 80024dc:	4a21      	ldr	r2, [pc, #132]	; (8002564 <Paint_NewImage+0xa8>)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6013      	str	r3, [r2, #0]

    Paint.WidthMemory = Width;
 80024e2:	4a20      	ldr	r2, [pc, #128]	; (8002564 <Paint_NewImage+0xa8>)
 80024e4:	897b      	ldrh	r3, [r7, #10]
 80024e6:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 80024e8:	4a1e      	ldr	r2, [pc, #120]	; (8002564 <Paint_NewImage+0xa8>)
 80024ea:	893b      	ldrh	r3, [r7, #8]
 80024ec:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 80024ee:	4a1d      	ldr	r2, [pc, #116]	; (8002564 <Paint_NewImage+0xa8>)
 80024f0:	8b3b      	ldrh	r3, [r7, #24]
 80024f2:	8193      	strh	r3, [r2, #12]
	Paint.Scale = 2;
 80024f4:	4b1b      	ldr	r3, [pc, #108]	; (8002564 <Paint_NewImage+0xa8>)
 80024f6:	2202      	movs	r2, #2
 80024f8:	82da      	strh	r2, [r3, #22]
		
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 80024fa:	897b      	ldrh	r3, [r7, #10]
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	b29b      	uxth	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d103      	bne.n	800250e <Paint_NewImage+0x52>
 8002506:	897b      	ldrh	r3, [r7, #10]
 8002508:	08db      	lsrs	r3, r3, #3
 800250a:	b29b      	uxth	r3, r3
 800250c:	e004      	b.n	8002518 <Paint_NewImage+0x5c>
 800250e:	897b      	ldrh	r3, [r7, #10]
 8002510:	08db      	lsrs	r3, r3, #3
 8002512:	b29b      	uxth	r3, r3
 8002514:	3301      	adds	r3, #1
 8002516:	b29b      	uxth	r3, r3
 8002518:	4a12      	ldr	r2, [pc, #72]	; (8002564 <Paint_NewImage+0xa8>)
 800251a:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 800251c:	4a11      	ldr	r2, [pc, #68]	; (8002564 <Paint_NewImage+0xa8>)
 800251e:	893b      	ldrh	r3, [r7, #8]
 8002520:	8293      	strh	r3, [r2, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);
   
    Paint.Rotate = Rotate;
 8002522:	4a10      	ldr	r2, [pc, #64]	; (8002564 <Paint_NewImage+0xa8>)
 8002524:	88fb      	ldrh	r3, [r7, #6]
 8002526:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8002528:	4b0e      	ldr	r3, [pc, #56]	; (8002564 <Paint_NewImage+0xa8>)
 800252a:	2200      	movs	r2, #0
 800252c:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 800252e:	88fb      	ldrh	r3, [r7, #6]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d002      	beq.n	800253a <Paint_NewImage+0x7e>
 8002534:	88fb      	ldrh	r3, [r7, #6]
 8002536:	2bb4      	cmp	r3, #180	; 0xb4
 8002538:	d106      	bne.n	8002548 <Paint_NewImage+0x8c>
        Paint.Width = Width;
 800253a:	4a0a      	ldr	r2, [pc, #40]	; (8002564 <Paint_NewImage+0xa8>)
 800253c:	897b      	ldrh	r3, [r7, #10]
 800253e:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8002540:	4a08      	ldr	r2, [pc, #32]	; (8002564 <Paint_NewImage+0xa8>)
 8002542:	893b      	ldrh	r3, [r7, #8]
 8002544:	80d3      	strh	r3, [r2, #6]
 8002546:	e006      	b.n	8002556 <Paint_NewImage+0x9a>
    } else {
        Paint.Width = Height;
 8002548:	4a06      	ldr	r2, [pc, #24]	; (8002564 <Paint_NewImage+0xa8>)
 800254a:	893b      	ldrh	r3, [r7, #8]
 800254c:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 800254e:	4a05      	ldr	r2, [pc, #20]	; (8002564 <Paint_NewImage+0xa8>)
 8002550:	897b      	ldrh	r3, [r7, #10]
 8002552:	80d3      	strh	r3, [r2, #6]
    }
}
 8002554:	bf00      	nop
 8002556:	bf00      	nop
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	200049b8 	.word	0x200049b8

08002568 <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(UBYTE *image)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 8002570:	4a04      	ldr	r2, [pc, #16]	; (8002584 <Paint_SelectImage+0x1c>)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6013      	str	r3, [r2, #0]
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	200049b8 	.word	0x200049b8

08002588 <Paint_SetPixel>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b08a      	sub	sp, #40	; 0x28
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	80fb      	strh	r3, [r7, #6]
 8002592:	460b      	mov	r3, r1
 8002594:	80bb      	strh	r3, [r7, #4]
 8002596:	4613      	mov	r3, r2
 8002598:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 800259a:	4b9f      	ldr	r3, [pc, #636]	; (8002818 <Paint_SetPixel+0x290>)
 800259c:	889b      	ldrh	r3, [r3, #4]
 800259e:	88fa      	ldrh	r2, [r7, #6]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d804      	bhi.n	80025ae <Paint_SetPixel+0x26>
 80025a4:	4b9c      	ldr	r3, [pc, #624]	; (8002818 <Paint_SetPixel+0x290>)
 80025a6:	88db      	ldrh	r3, [r3, #6]
 80025a8:	88ba      	ldrh	r2, [r7, #4]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d903      	bls.n	80025b6 <Paint_SetPixel+0x2e>
        Debug("Exceeding display boundaries\r\n");
 80025ae:	489b      	ldr	r0, [pc, #620]	; (800281c <Paint_SetPixel+0x294>)
 80025b0:	f008 f834 	bl	800a61c <puts>
        return;
 80025b4:	e12d      	b.n	8002812 <Paint_SetPixel+0x28a>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 80025b6:	4b98      	ldr	r3, [pc, #608]	; (8002818 <Paint_SetPixel+0x290>)
 80025b8:	89db      	ldrh	r3, [r3, #14]
 80025ba:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80025be:	d02b      	beq.n	8002618 <Paint_SetPixel+0x90>
 80025c0:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80025c4:	f300 8122 	bgt.w	800280c <Paint_SetPixel+0x284>
 80025c8:	2bb4      	cmp	r3, #180	; 0xb4
 80025ca:	d016      	beq.n	80025fa <Paint_SetPixel+0x72>
 80025cc:	2bb4      	cmp	r3, #180	; 0xb4
 80025ce:	f300 811d 	bgt.w	800280c <Paint_SetPixel+0x284>
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d002      	beq.n	80025dc <Paint_SetPixel+0x54>
 80025d6:	2b5a      	cmp	r3, #90	; 0x5a
 80025d8:	d005      	beq.n	80025e6 <Paint_SetPixel+0x5e>
    case 270:
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
    default:
        return;
 80025da:	e117      	b.n	800280c <Paint_SetPixel+0x284>
        X = Xpoint;
 80025dc:	88fb      	ldrh	r3, [r7, #6]
 80025de:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Ypoint;  
 80025e0:	88bb      	ldrh	r3, [r7, #4]
 80025e2:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 80025e4:	e022      	b.n	800262c <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Ypoint - 1;
 80025e6:	4b8c      	ldr	r3, [pc, #560]	; (8002818 <Paint_SetPixel+0x290>)
 80025e8:	891a      	ldrh	r2, [r3, #8]
 80025ea:	88bb      	ldrh	r3, [r7, #4]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	3b01      	subs	r3, #1
 80025f2:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Xpoint;
 80025f4:	88fb      	ldrh	r3, [r7, #6]
 80025f6:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 80025f8:	e018      	b.n	800262c <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Xpoint - 1;
 80025fa:	4b87      	ldr	r3, [pc, #540]	; (8002818 <Paint_SetPixel+0x290>)
 80025fc:	891a      	ldrh	r2, [r3, #8]
 80025fe:	88fb      	ldrh	r3, [r7, #6]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	b29b      	uxth	r3, r3
 8002604:	3b01      	subs	r3, #1
 8002606:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Ypoint - 1;
 8002608:	4b83      	ldr	r3, [pc, #524]	; (8002818 <Paint_SetPixel+0x290>)
 800260a:	895a      	ldrh	r2, [r3, #10]
 800260c:	88bb      	ldrh	r3, [r7, #4]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	b29b      	uxth	r3, r3
 8002612:	3b01      	subs	r3, #1
 8002614:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8002616:	e009      	b.n	800262c <Paint_SetPixel+0xa4>
        X = Ypoint;
 8002618:	88bb      	ldrh	r3, [r7, #4]
 800261a:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Xpoint - 1;
 800261c:	4b7e      	ldr	r3, [pc, #504]	; (8002818 <Paint_SetPixel+0x290>)
 800261e:	895a      	ldrh	r2, [r3, #10]
 8002620:	88fb      	ldrh	r3, [r7, #6]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	b29b      	uxth	r3, r3
 8002626:	3b01      	subs	r3, #1
 8002628:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800262a:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 800262c:	4b7a      	ldr	r3, [pc, #488]	; (8002818 <Paint_SetPixel+0x290>)
 800262e:	8a1b      	ldrh	r3, [r3, #16]
 8002630:	2b03      	cmp	r3, #3
 8002632:	f200 80ed 	bhi.w	8002810 <Paint_SetPixel+0x288>
 8002636:	a201      	add	r2, pc, #4	; (adr r2, 800263c <Paint_SetPixel+0xb4>)
 8002638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800263c:	0800268b 	.word	0x0800268b
 8002640:	0800264d 	.word	0x0800264d
 8002644:	0800265d 	.word	0x0800265d
 8002648:	0800266d 	.word	0x0800266d
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 800264c:	4b72      	ldr	r3, [pc, #456]	; (8002818 <Paint_SetPixel+0x290>)
 800264e:	891a      	ldrh	r2, [r3, #8]
 8002650:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	b29b      	uxth	r3, r3
 8002656:	3b01      	subs	r3, #1
 8002658:	84fb      	strh	r3, [r7, #38]	; 0x26
        break;
 800265a:	e017      	b.n	800268c <Paint_SetPixel+0x104>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 800265c:	4b6e      	ldr	r3, [pc, #440]	; (8002818 <Paint_SetPixel+0x290>)
 800265e:	895a      	ldrh	r2, [r3, #10]
 8002660:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	b29b      	uxth	r3, r3
 8002666:	3b01      	subs	r3, #1
 8002668:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800266a:	e00f      	b.n	800268c <Paint_SetPixel+0x104>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 800266c:	4b6a      	ldr	r3, [pc, #424]	; (8002818 <Paint_SetPixel+0x290>)
 800266e:	891a      	ldrh	r2, [r3, #8]
 8002670:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	b29b      	uxth	r3, r3
 8002676:	3b01      	subs	r3, #1
 8002678:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Y - 1;
 800267a:	4b67      	ldr	r3, [pc, #412]	; (8002818 <Paint_SetPixel+0x290>)
 800267c:	895a      	ldrh	r2, [r3, #10]
 800267e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	b29b      	uxth	r3, r3
 8002684:	3b01      	subs	r3, #1
 8002686:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8002688:	e000      	b.n	800268c <Paint_SetPixel+0x104>
        break;
 800268a:	bf00      	nop
    default:
        return;
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 800268c:	4b62      	ldr	r3, [pc, #392]	; (8002818 <Paint_SetPixel+0x290>)
 800268e:	891b      	ldrh	r3, [r3, #8]
 8002690:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002692:	429a      	cmp	r2, r3
 8002694:	d804      	bhi.n	80026a0 <Paint_SetPixel+0x118>
 8002696:	4b60      	ldr	r3, [pc, #384]	; (8002818 <Paint_SetPixel+0x290>)
 8002698:	895b      	ldrh	r3, [r3, #10]
 800269a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800269c:	429a      	cmp	r2, r3
 800269e:	d903      	bls.n	80026a8 <Paint_SetPixel+0x120>
        Debug("Exceeding display boundaries\r\n");
 80026a0:	485e      	ldr	r0, [pc, #376]	; (800281c <Paint_SetPixel+0x294>)
 80026a2:	f007 ffbb 	bl	800a61c <puts>
        return;
 80026a6:	e0b4      	b.n	8002812 <Paint_SetPixel+0x28a>
    }
    
    if(Paint.Scale == 2){
 80026a8:	4b5b      	ldr	r3, [pc, #364]	; (8002818 <Paint_SetPixel+0x290>)
 80026aa:	8adb      	ldrh	r3, [r3, #22]
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d139      	bne.n	8002724 <Paint_SetPixel+0x19c>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 80026b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80026b2:	08db      	lsrs	r3, r3, #3
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	4619      	mov	r1, r3
 80026b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80026ba:	4a57      	ldr	r2, [pc, #348]	; (8002818 <Paint_SetPixel+0x290>)
 80026bc:	8a52      	ldrh	r2, [r2, #18]
 80026be:	fb02 f303 	mul.w	r3, r2, r3
 80026c2:	440b      	add	r3, r1
 80026c4:	613b      	str	r3, [r7, #16]
        UBYTE Rdata = Paint.Image[Addr];
 80026c6:	4b54      	ldr	r3, [pc, #336]	; (8002818 <Paint_SetPixel+0x290>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	4413      	add	r3, r2
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	73fb      	strb	r3, [r7, #15]
        if(Color == BLACK)
 80026d2:	887b      	ldrh	r3, [r7, #2]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d113      	bne.n	8002700 <Paint_SetPixel+0x178>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 80026d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	2280      	movs	r2, #128	; 0x80
 80026e0:	fa42 f303 	asr.w	r3, r2, r3
 80026e4:	b25b      	sxtb	r3, r3
 80026e6:	43db      	mvns	r3, r3
 80026e8:	b25a      	sxtb	r2, r3
 80026ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ee:	4013      	ands	r3, r2
 80026f0:	b259      	sxtb	r1, r3
 80026f2:	4b49      	ldr	r3, [pc, #292]	; (8002818 <Paint_SetPixel+0x290>)
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	4413      	add	r3, r2
 80026fa:	b2ca      	uxtb	r2, r1
 80026fc:	701a      	strb	r2, [r3, #0]
 80026fe:	e088      	b.n	8002812 <Paint_SetPixel+0x28a>
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 8002700:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	2280      	movs	r2, #128	; 0x80
 8002708:	fa42 f303 	asr.w	r3, r2, r3
 800270c:	b25a      	sxtb	r2, r3
 800270e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002712:	4313      	orrs	r3, r2
 8002714:	b259      	sxtb	r1, r3
 8002716:	4b40      	ldr	r3, [pc, #256]	; (8002818 <Paint_SetPixel+0x290>)
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	4413      	add	r3, r2
 800271e:	b2ca      	uxtb	r2, r1
 8002720:	701a      	strb	r2, [r3, #0]
 8002722:	e076      	b.n	8002812 <Paint_SetPixel+0x28a>
    }else if(Paint.Scale == 4){
 8002724:	4b3c      	ldr	r3, [pc, #240]	; (8002818 <Paint_SetPixel+0x290>)
 8002726:	8adb      	ldrh	r3, [r3, #22]
 8002728:	2b04      	cmp	r3, #4
 800272a:	d137      	bne.n	800279c <Paint_SetPixel+0x214>
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 800272c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800272e:	089b      	lsrs	r3, r3, #2
 8002730:	b29b      	uxth	r3, r3
 8002732:	4619      	mov	r1, r3
 8002734:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002736:	4a38      	ldr	r2, [pc, #224]	; (8002818 <Paint_SetPixel+0x290>)
 8002738:	8a52      	ldrh	r2, [r2, #18]
 800273a:	fb02 f303 	mul.w	r3, r2, r3
 800273e:	440b      	add	r3, r1
 8002740:	61bb      	str	r3, [r7, #24]
        Color = Color % 4;//Guaranteed color scale is 4  --- 0~3
 8002742:	887b      	ldrh	r3, [r7, #2]
 8002744:	f003 0303 	and.w	r3, r3, #3
 8002748:	807b      	strh	r3, [r7, #2]
        UBYTE Rdata = Paint.Image[Addr];
 800274a:	4b33      	ldr	r3, [pc, #204]	; (8002818 <Paint_SetPixel+0x290>)
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	4413      	add	r3, r2
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	75fb      	strb	r3, [r7, #23]
        
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 8002756:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002758:	f003 0303 	and.w	r3, r3, #3
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	22c0      	movs	r2, #192	; 0xc0
 8002760:	fa42 f303 	asr.w	r3, r2, r3
 8002764:	b25b      	sxtb	r3, r3
 8002766:	43db      	mvns	r3, r3
 8002768:	b25a      	sxtb	r2, r3
 800276a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800276e:	4013      	ands	r3, r2
 8002770:	b25b      	sxtb	r3, r3
 8002772:	75fb      	strb	r3, [r7, #23]
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 8002774:	887b      	ldrh	r3, [r7, #2]
 8002776:	019a      	lsls	r2, r3, #6
 8002778:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	fa42 f303 	asr.w	r3, r2, r3
 8002784:	b25a      	sxtb	r2, r3
 8002786:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800278a:	4313      	orrs	r3, r2
 800278c:	b259      	sxtb	r1, r3
 800278e:	4b22      	ldr	r3, [pc, #136]	; (8002818 <Paint_SetPixel+0x290>)
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	4413      	add	r3, r2
 8002796:	b2ca      	uxtb	r2, r1
 8002798:	701a      	strb	r2, [r3, #0]
 800279a:	e03a      	b.n	8002812 <Paint_SetPixel+0x28a>
    }else if(Paint.Scale == 7){
 800279c:	4b1e      	ldr	r3, [pc, #120]	; (8002818 <Paint_SetPixel+0x290>)
 800279e:	8adb      	ldrh	r3, [r3, #22]
 80027a0:	2b07      	cmp	r3, #7
 80027a2:	d136      	bne.n	8002812 <Paint_SetPixel+0x28a>
		UDOUBLE Addr = X / 2  + Y * Paint.WidthByte;
 80027a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80027a6:	085b      	lsrs	r3, r3, #1
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	4619      	mov	r1, r3
 80027ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80027ae:	4a1a      	ldr	r2, [pc, #104]	; (8002818 <Paint_SetPixel+0x290>)
 80027b0:	8a52      	ldrh	r2, [r2, #18]
 80027b2:	fb02 f303 	mul.w	r3, r2, r3
 80027b6:	440b      	add	r3, r1
 80027b8:	623b      	str	r3, [r7, #32]
		UBYTE Rdata = Paint.Image[Addr];
 80027ba:	4b17      	ldr	r3, [pc, #92]	; (8002818 <Paint_SetPixel+0x290>)
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	6a3b      	ldr	r3, [r7, #32]
 80027c0:	4413      	add	r3, r2
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	77fb      	strb	r3, [r7, #31]
		Rdata = Rdata & (~(0xF0 >> ((X % 2)*4)));//Clear first, then set value
 80027c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	22f0      	movs	r2, #240	; 0xf0
 80027d0:	fa42 f303 	asr.w	r3, r2, r3
 80027d4:	b25b      	sxtb	r3, r3
 80027d6:	43db      	mvns	r3, r3
 80027d8:	b25a      	sxtb	r2, r3
 80027da:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80027de:	4013      	ands	r3, r2
 80027e0:	b25b      	sxtb	r3, r3
 80027e2:	77fb      	strb	r3, [r7, #31]
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 80027e4:	887b      	ldrh	r3, [r7, #2]
 80027e6:	011a      	lsls	r2, r3, #4
 80027e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	fa42 f303 	asr.w	r3, r2, r3
 80027f4:	b25a      	sxtb	r2, r3
 80027f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	b259      	sxtb	r1, r3
 80027fe:	4b06      	ldr	r3, [pc, #24]	; (8002818 <Paint_SetPixel+0x290>)
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	6a3b      	ldr	r3, [r7, #32]
 8002804:	4413      	add	r3, r2
 8002806:	b2ca      	uxtb	r2, r1
 8002808:	701a      	strb	r2, [r3, #0]
 800280a:	e002      	b.n	8002812 <Paint_SetPixel+0x28a>
        return;
 800280c:	bf00      	nop
 800280e:	e000      	b.n	8002812 <Paint_SetPixel+0x28a>
        return;
 8002810:	bf00      	nop
		//printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
		}
}
 8002812:	3728      	adds	r7, #40	; 0x28
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	200049b8 	.word	0x200049b8
 800281c:	0800cce0 	.word	0x0800cce0

08002820 <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{
 8002820:	b480      	push	{r7}
 8002822:	b087      	sub	sp, #28
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	80fb      	strh	r3, [r7, #6]
	if(Paint.Scale == 2 || Paint.Scale == 4){
 800282a:	4b32      	ldr	r3, [pc, #200]	; (80028f4 <Paint_Clear+0xd4>)
 800282c:	8adb      	ldrh	r3, [r3, #22]
 800282e:	2b02      	cmp	r3, #2
 8002830:	d003      	beq.n	800283a <Paint_Clear+0x1a>
 8002832:	4b30      	ldr	r3, [pc, #192]	; (80028f4 <Paint_Clear+0xd4>)
 8002834:	8adb      	ldrh	r3, [r3, #22]
 8002836:	2b04      	cmp	r3, #4
 8002838:	d125      	bne.n	8002886 <Paint_Clear+0x66>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800283a:	2300      	movs	r3, #0
 800283c:	82fb      	strh	r3, [r7, #22]
 800283e:	e01c      	b.n	800287a <Paint_Clear+0x5a>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8002840:	2300      	movs	r3, #0
 8002842:	82bb      	strh	r3, [r7, #20]
 8002844:	e011      	b.n	800286a <Paint_Clear+0x4a>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8002846:	8aba      	ldrh	r2, [r7, #20]
 8002848:	8afb      	ldrh	r3, [r7, #22]
 800284a:	492a      	ldr	r1, [pc, #168]	; (80028f4 <Paint_Clear+0xd4>)
 800284c:	8a49      	ldrh	r1, [r1, #18]
 800284e:	fb01 f303 	mul.w	r3, r1, r3
 8002852:	4413      	add	r3, r2
 8002854:	60bb      	str	r3, [r7, #8]
				Paint.Image[Addr] = Color;
 8002856:	4b27      	ldr	r3, [pc, #156]	; (80028f4 <Paint_Clear+0xd4>)
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	4413      	add	r3, r2
 800285e:	88fa      	ldrh	r2, [r7, #6]
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8002864:	8abb      	ldrh	r3, [r7, #20]
 8002866:	3301      	adds	r3, #1
 8002868:	82bb      	strh	r3, [r7, #20]
 800286a:	4b22      	ldr	r3, [pc, #136]	; (80028f4 <Paint_Clear+0xd4>)
 800286c:	8a5b      	ldrh	r3, [r3, #18]
 800286e:	8aba      	ldrh	r2, [r7, #20]
 8002870:	429a      	cmp	r2, r3
 8002872:	d3e8      	bcc.n	8002846 <Paint_Clear+0x26>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8002874:	8afb      	ldrh	r3, [r7, #22]
 8002876:	3301      	adds	r3, #1
 8002878:	82fb      	strh	r3, [r7, #22]
 800287a:	4b1e      	ldr	r3, [pc, #120]	; (80028f4 <Paint_Clear+0xd4>)
 800287c:	8a9b      	ldrh	r3, [r3, #20]
 800287e:	8afa      	ldrh	r2, [r7, #22]
 8002880:	429a      	cmp	r2, r3
 8002882:	d3dd      	bcc.n	8002840 <Paint_Clear+0x20>
 8002884:	e02f      	b.n	80028e6 <Paint_Clear+0xc6>
			}
		}		
	}else if(Paint.Scale == 7){
 8002886:	4b1b      	ldr	r3, [pc, #108]	; (80028f4 <Paint_Clear+0xd4>)
 8002888:	8adb      	ldrh	r3, [r3, #22]
 800288a:	2b07      	cmp	r3, #7
 800288c:	d12b      	bne.n	80028e6 <Paint_Clear+0xc6>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800288e:	2300      	movs	r3, #0
 8002890:	827b      	strh	r3, [r7, #18]
 8002892:	e022      	b.n	80028da <Paint_Clear+0xba>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8002894:	2300      	movs	r3, #0
 8002896:	823b      	strh	r3, [r7, #16]
 8002898:	e017      	b.n	80028ca <Paint_Clear+0xaa>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 800289a:	8a3a      	ldrh	r2, [r7, #16]
 800289c:	8a7b      	ldrh	r3, [r7, #18]
 800289e:	4915      	ldr	r1, [pc, #84]	; (80028f4 <Paint_Clear+0xd4>)
 80028a0:	8a49      	ldrh	r1, [r1, #18]
 80028a2:	fb01 f303 	mul.w	r3, r1, r3
 80028a6:	4413      	add	r3, r2
 80028a8:	60fb      	str	r3, [r7, #12]
				Paint.Image[Addr] = (Color<<4)|Color;
 80028aa:	88fb      	ldrh	r3, [r7, #6]
 80028ac:	011b      	lsls	r3, r3, #4
 80028ae:	b25a      	sxtb	r2, r3
 80028b0:	88fb      	ldrh	r3, [r7, #6]
 80028b2:	b25b      	sxtb	r3, r3
 80028b4:	4313      	orrs	r3, r2
 80028b6:	b259      	sxtb	r1, r3
 80028b8:	4b0e      	ldr	r3, [pc, #56]	; (80028f4 <Paint_Clear+0xd4>)
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4413      	add	r3, r2
 80028c0:	b2ca      	uxtb	r2, r1
 80028c2:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 80028c4:	8a3b      	ldrh	r3, [r7, #16]
 80028c6:	3301      	adds	r3, #1
 80028c8:	823b      	strh	r3, [r7, #16]
 80028ca:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <Paint_Clear+0xd4>)
 80028cc:	8a5b      	ldrh	r3, [r3, #18]
 80028ce:	8a3a      	ldrh	r2, [r7, #16]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d3e2      	bcc.n	800289a <Paint_Clear+0x7a>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80028d4:	8a7b      	ldrh	r3, [r7, #18]
 80028d6:	3301      	adds	r3, #1
 80028d8:	827b      	strh	r3, [r7, #18]
 80028da:	4b06      	ldr	r3, [pc, #24]	; (80028f4 <Paint_Clear+0xd4>)
 80028dc:	8a9b      	ldrh	r3, [r3, #20]
 80028de:	8a7a      	ldrh	r2, [r7, #18]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d3d7      	bcc.n	8002894 <Paint_Clear+0x74>
			}
		}		
	}
}
 80028e4:	e7ff      	b.n	80028e6 <Paint_Clear+0xc6>
 80028e6:	bf00      	nop
 80028e8:	371c      	adds	r7, #28
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	200049b8 	.word	0x200049b8

080028f8 <Paint_DrawChar>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b088      	sub	sp, #32
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	607b      	str	r3, [r7, #4]
 8002900:	4603      	mov	r3, r0
 8002902:	81fb      	strh	r3, [r7, #14]
 8002904:	460b      	mov	r3, r1
 8002906:	81bb      	strh	r3, [r7, #12]
 8002908:	4613      	mov	r3, r2
 800290a:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 800290c:	4b4c      	ldr	r3, [pc, #304]	; (8002a40 <Paint_DrawChar+0x148>)
 800290e:	889b      	ldrh	r3, [r3, #4]
 8002910:	89fa      	ldrh	r2, [r7, #14]
 8002912:	429a      	cmp	r2, r3
 8002914:	d804      	bhi.n	8002920 <Paint_DrawChar+0x28>
 8002916:	4b4a      	ldr	r3, [pc, #296]	; (8002a40 <Paint_DrawChar+0x148>)
 8002918:	88db      	ldrh	r3, [r3, #6]
 800291a:	89ba      	ldrh	r2, [r7, #12]
 800291c:	429a      	cmp	r2, r3
 800291e:	d903      	bls.n	8002928 <Paint_DrawChar+0x30>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 8002920:	4848      	ldr	r0, [pc, #288]	; (8002a44 <Paint_DrawChar+0x14c>)
 8002922:	f007 fe7b 	bl	800a61c <puts>
        return;
 8002926:	e087      	b.n	8002a38 <Paint_DrawChar+0x140>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8002928:	7afb      	ldrb	r3, [r7, #11]
 800292a:	3b20      	subs	r3, #32
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	88d2      	ldrh	r2, [r2, #6]
 8002930:	fb02 f303 	mul.w	r3, r2, r3
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	8892      	ldrh	r2, [r2, #4]
 8002938:	08d2      	lsrs	r2, r2, #3
 800293a:	b292      	uxth	r2, r2
 800293c:	4611      	mov	r1, r2
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	8892      	ldrh	r2, [r2, #4]
 8002942:	f002 0207 	and.w	r2, r2, #7
 8002946:	b292      	uxth	r2, r2
 8002948:	2a00      	cmp	r2, #0
 800294a:	bf14      	ite	ne
 800294c:	2201      	movne	r2, #1
 800294e:	2200      	moveq	r2, #0
 8002950:	b2d2      	uxtb	r2, r2
 8002952:	440a      	add	r2, r1
 8002954:	fb02 f303 	mul.w	r3, r2, r3
 8002958:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	4413      	add	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 8002964:	2300      	movs	r3, #0
 8002966:	83fb      	strh	r3, [r7, #30]
 8002968:	e061      	b.n	8002a2e <Paint_DrawChar+0x136>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 800296a:	2300      	movs	r3, #0
 800296c:	83bb      	strh	r3, [r7, #28]
 800296e:	e04c      	b.n	8002a0a <Paint_DrawChar+0x112>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8002970:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002972:	2bff      	cmp	r3, #255	; 0xff
 8002974:	d118      	bne.n	80029a8 <Paint_DrawChar+0xb0>
                if (*ptr & (0x80 >> (Column % 8)))
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	4619      	mov	r1, r3
 800297c:	8bbb      	ldrh	r3, [r7, #28]
 800297e:	f003 0307 	and.w	r3, r3, #7
 8002982:	2280      	movs	r2, #128	; 0x80
 8002984:	fa42 f303 	asr.w	r3, r2, r3
 8002988:	400b      	ands	r3, r1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d031      	beq.n	80029f2 <Paint_DrawChar+0xfa>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800298e:	89fa      	ldrh	r2, [r7, #14]
 8002990:	8bbb      	ldrh	r3, [r7, #28]
 8002992:	4413      	add	r3, r2
 8002994:	b298      	uxth	r0, r3
 8002996:	89ba      	ldrh	r2, [r7, #12]
 8002998:	8bfb      	ldrh	r3, [r7, #30]
 800299a:	4413      	add	r3, r2
 800299c:	b29b      	uxth	r3, r3
 800299e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80029a0:	4619      	mov	r1, r3
 80029a2:	f7ff fdf1 	bl	8002588 <Paint_SetPixel>
 80029a6:	e024      	b.n	80029f2 <Paint_DrawChar+0xfa>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	4619      	mov	r1, r3
 80029ae:	8bbb      	ldrh	r3, [r7, #28]
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	2280      	movs	r2, #128	; 0x80
 80029b6:	fa42 f303 	asr.w	r3, r2, r3
 80029ba:	400b      	ands	r3, r1
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00c      	beq.n	80029da <Paint_DrawChar+0xe2>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 80029c0:	89fa      	ldrh	r2, [r7, #14]
 80029c2:	8bbb      	ldrh	r3, [r7, #28]
 80029c4:	4413      	add	r3, r2
 80029c6:	b298      	uxth	r0, r3
 80029c8:	89ba      	ldrh	r2, [r7, #12]
 80029ca:	8bfb      	ldrh	r3, [r7, #30]
 80029cc:	4413      	add	r3, r2
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80029d2:	4619      	mov	r1, r3
 80029d4:	f7ff fdd8 	bl	8002588 <Paint_SetPixel>
 80029d8:	e00b      	b.n	80029f2 <Paint_DrawChar+0xfa>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 80029da:	89fa      	ldrh	r2, [r7, #14]
 80029dc:	8bbb      	ldrh	r3, [r7, #28]
 80029de:	4413      	add	r3, r2
 80029e0:	b298      	uxth	r0, r3
 80029e2:	89ba      	ldrh	r2, [r7, #12]
 80029e4:	8bfb      	ldrh	r3, [r7, #30]
 80029e6:	4413      	add	r3, r2
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80029ec:	4619      	mov	r1, r3
 80029ee:	f7ff fdcb 	bl	8002588 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 80029f2:	8bbb      	ldrh	r3, [r7, #28]
 80029f4:	f003 0307 	and.w	r3, r3, #7
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	2b07      	cmp	r3, #7
 80029fc:	d102      	bne.n	8002a04 <Paint_DrawChar+0x10c>
                ptr++;
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	3301      	adds	r3, #1
 8002a02:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8002a04:	8bbb      	ldrh	r3, [r7, #28]
 8002a06:	3301      	adds	r3, #1
 8002a08:	83bb      	strh	r3, [r7, #28]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	889b      	ldrh	r3, [r3, #4]
 8002a0e:	8bba      	ldrh	r2, [r7, #28]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d3ad      	bcc.n	8002970 <Paint_DrawChar+0x78>
        }// Write a line
        if (Font->Width % 8 != 0)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	889b      	ldrh	r3, [r3, #4]
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d002      	beq.n	8002a28 <Paint_DrawChar+0x130>
            ptr++;
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	3301      	adds	r3, #1
 8002a26:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8002a28:	8bfb      	ldrh	r3, [r7, #30]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	83fb      	strh	r3, [r7, #30]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	88db      	ldrh	r3, [r3, #6]
 8002a32:	8bfa      	ldrh	r2, [r7, #30]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d398      	bcc.n	800296a <Paint_DrawChar+0x72>
    }// Write all
}
 8002a38:	3720      	adds	r7, #32
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	200049b8 	.word	0x200049b8
 8002a44:	0800ce44 	.word	0x0800ce44

08002a48 <Paint_DrawString_EN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b088      	sub	sp, #32
 8002a4c:	af02      	add	r7, sp, #8
 8002a4e:	60ba      	str	r2, [r7, #8]
 8002a50:	607b      	str	r3, [r7, #4]
 8002a52:	4603      	mov	r3, r0
 8002a54:	81fb      	strh	r3, [r7, #14]
 8002a56:	460b      	mov	r3, r1
 8002a58:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 8002a5a:	89fb      	ldrh	r3, [r7, #14]
 8002a5c:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 8002a5e:	89bb      	ldrh	r3, [r7, #12]
 8002a60:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 8002a62:	4b21      	ldr	r3, [pc, #132]	; (8002ae8 <Paint_DrawString_EN+0xa0>)
 8002a64:	889b      	ldrh	r3, [r3, #4]
 8002a66:	89fa      	ldrh	r2, [r7, #14]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d804      	bhi.n	8002a76 <Paint_DrawString_EN+0x2e>
 8002a6c:	4b1e      	ldr	r3, [pc, #120]	; (8002ae8 <Paint_DrawString_EN+0xa0>)
 8002a6e:	88db      	ldrh	r3, [r3, #6]
 8002a70:	89ba      	ldrh	r2, [r7, #12]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d931      	bls.n	8002ada <Paint_DrawString_EN+0x92>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 8002a76:	481d      	ldr	r0, [pc, #116]	; (8002aec <Paint_DrawString_EN+0xa4>)
 8002a78:	f007 fdd0 	bl	800a61c <puts>
        return;
 8002a7c:	e031      	b.n	8002ae2 <Paint_DrawString_EN+0x9a>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 8002a7e:	8afb      	ldrh	r3, [r7, #22]
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	8892      	ldrh	r2, [r2, #4]
 8002a84:	4413      	add	r3, r2
 8002a86:	4a18      	ldr	r2, [pc, #96]	; (8002ae8 <Paint_DrawString_EN+0xa0>)
 8002a88:	8892      	ldrh	r2, [r2, #4]
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	dd06      	ble.n	8002a9c <Paint_DrawString_EN+0x54>
            Xpoint = Xstart;
 8002a8e:	89fb      	ldrh	r3, [r7, #14]
 8002a90:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	88da      	ldrh	r2, [r3, #6]
 8002a96:	8abb      	ldrh	r3, [r7, #20]
 8002a98:	4413      	add	r3, r2
 8002a9a:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 8002a9c:	8abb      	ldrh	r3, [r7, #20]
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	88d2      	ldrh	r2, [r2, #6]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	4a10      	ldr	r2, [pc, #64]	; (8002ae8 <Paint_DrawString_EN+0xa0>)
 8002aa6:	88d2      	ldrh	r2, [r2, #6]
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	dd03      	ble.n	8002ab4 <Paint_DrawString_EN+0x6c>
            Xpoint = Xstart;
 8002aac:	89fb      	ldrh	r3, [r7, #14]
 8002aae:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8002ab0:	89bb      	ldrh	r3, [r7, #12]
 8002ab2:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	781a      	ldrb	r2, [r3, #0]
 8002ab8:	8ab9      	ldrh	r1, [r7, #20]
 8002aba:	8af8      	ldrh	r0, [r7, #22]
 8002abc:	8c3b      	ldrh	r3, [r7, #32]
 8002abe:	9301      	str	r3, [sp, #4]
 8002ac0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f7ff ff17 	bl	80028f8 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	3301      	adds	r3, #1
 8002ace:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	889a      	ldrh	r2, [r3, #4]
 8002ad4:	8afb      	ldrh	r3, [r7, #22]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1cd      	bne.n	8002a7e <Paint_DrawString_EN+0x36>
    }
}
 8002ae2:	3718      	adds	r7, #24
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	200049b8 	.word	0x200049b8
 8002aec:	0800ce84 	.word	0x0800ce84

08002af0 <EPD_2IN13BC_Reset>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
static void EPD_2IN13BC_Reset(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8002af4:	2201      	movs	r2, #1
 8002af6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002afa:	480d      	ldr	r0, [pc, #52]	; (8002b30 <EPD_2IN13BC_Reset+0x40>)
 8002afc:	f001 fd22 	bl	8004544 <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 8002b00:	20c8      	movs	r0, #200	; 0xc8
 8002b02:	f004 f9aa 	bl	8006e5a <osDelay>
    DEV_Digital_Write(EPD_RST_PIN, 0);
 8002b06:	2200      	movs	r2, #0
 8002b08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b0c:	4808      	ldr	r0, [pc, #32]	; (8002b30 <EPD_2IN13BC_Reset+0x40>)
 8002b0e:	f001 fd19 	bl	8004544 <HAL_GPIO_WritePin>
    DEV_Delay_ms(2);
 8002b12:	2002      	movs	r0, #2
 8002b14:	f004 f9a1 	bl	8006e5a <osDelay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b1e:	4804      	ldr	r0, [pc, #16]	; (8002b30 <EPD_2IN13BC_Reset+0x40>)
 8002b20:	f001 fd10 	bl	8004544 <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 8002b24:	20c8      	movs	r0, #200	; 0xc8
 8002b26:	f004 f998 	bl	8006e5a <osDelay>
}
 8002b2a:	bf00      	nop
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40021000 	.word	0x40021000

08002b34 <EPD_2IN13BC_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void EPD_2IN13BC_SendCommand(UBYTE Reg)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2180      	movs	r1, #128	; 0x80
 8002b42:	480a      	ldr	r0, [pc, #40]	; (8002b6c <EPD_2IN13BC_SendCommand+0x38>)
 8002b44:	f001 fcfe 	bl	8004544 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8002b48:	2200      	movs	r2, #0
 8002b4a:	2104      	movs	r1, #4
 8002b4c:	4808      	ldr	r0, [pc, #32]	; (8002b70 <EPD_2IN13BC_SendCommand+0x3c>)
 8002b4e:	f001 fcf9 	bl	8004544 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 8002b52:	79fb      	ldrb	r3, [r7, #7]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff fc85 	bl	8002464 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	2104      	movs	r1, #4
 8002b5e:	4804      	ldr	r0, [pc, #16]	; (8002b70 <EPD_2IN13BC_SendCommand+0x3c>)
 8002b60:	f001 fcf0 	bl	8004544 <HAL_GPIO_WritePin>
}
 8002b64:	bf00      	nop
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	40020400 	.word	0x40020400

08002b74 <EPD_2IN13BC_SendData>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void EPD_2IN13BC_SendData(UBYTE Data)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 1);
 8002b7e:	2201      	movs	r2, #1
 8002b80:	2180      	movs	r1, #128	; 0x80
 8002b82:	480a      	ldr	r0, [pc, #40]	; (8002bac <EPD_2IN13BC_SendData+0x38>)
 8002b84:	f001 fcde 	bl	8004544 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8002b88:	2200      	movs	r2, #0
 8002b8a:	2104      	movs	r1, #4
 8002b8c:	4808      	ldr	r0, [pc, #32]	; (8002bb0 <EPD_2IN13BC_SendData+0x3c>)
 8002b8e:	f001 fcd9 	bl	8004544 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 8002b92:	79fb      	ldrb	r3, [r7, #7]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff fc65 	bl	8002464 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	2104      	movs	r1, #4
 8002b9e:	4804      	ldr	r0, [pc, #16]	; (8002bb0 <EPD_2IN13BC_SendData+0x3c>)
 8002ba0:	f001 fcd0 	bl	8004544 <HAL_GPIO_WritePin>
}
 8002ba4:	bf00      	nop
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	40020400 	.word	0x40020400

08002bb4 <EPD_2IN13BC_ReadBusy>:
/******************************************************************************
function :	Wait until the busy_pin goes LOW
parameter:
******************************************************************************/
void EPD_2IN13BC_ReadBusy(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
    Debug("e-Paper busy\r\n");
 8002bb8:	4808      	ldr	r0, [pc, #32]	; (8002bdc <EPD_2IN13BC_ReadBusy+0x28>)
 8002bba:	f007 fd2f 	bl	800a61c <puts>
    while(DEV_Digital_Read(EPD_BUSY_PIN) == 0) {
 8002bbe:	bf00      	nop
 8002bc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bc4:	4806      	ldr	r0, [pc, #24]	; (8002be0 <EPD_2IN13BC_ReadBusy+0x2c>)
 8002bc6:	f001 fca5 	bl	8004514 <HAL_GPIO_ReadPin>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d0f7      	beq.n	8002bc0 <EPD_2IN13BC_ReadBusy+0xc>
        //DEV_Delay_ms(100);
    }
    Debug("e-Paper busy release\r\n");
 8002bd0:	4804      	ldr	r0, [pc, #16]	; (8002be4 <EPD_2IN13BC_ReadBusy+0x30>)
 8002bd2:	f007 fd23 	bl	800a61c <puts>
}
 8002bd6:	bf00      	nop
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	0800cf10 	.word	0x0800cf10
 8002be0:	40021000 	.word	0x40021000
 8002be4:	0800cf28 	.word	0x0800cf28

08002be8 <EPD_2IN13BC_TurnOnDisplay>:
/******************************************************************************
function :	Turn On Display
parameter:
******************************************************************************/
static void EPD_2IN13BC_TurnOnDisplay(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
    EPD_2IN13BC_SendCommand(0x12);		 //DISPLAY REFRESH
 8002bec:	2012      	movs	r0, #18
 8002bee:	f7ff ffa1 	bl	8002b34 <EPD_2IN13BC_SendCommand>
    //DEV_Delay_ms(10);

    EPD_2IN13BC_ReadBusy();
 8002bf2:	f7ff ffdf 	bl	8002bb4 <EPD_2IN13BC_ReadBusy>
}
 8002bf6:	bf00      	nop
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <EPD_2IN13BC_Init>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
void EPD_2IN13BC_Init(void)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	af00      	add	r7, sp, #0
    EPD_2IN13BC_Reset();
 8002bfe:	f7ff ff77 	bl	8002af0 <EPD_2IN13BC_Reset>

    EPD_2IN13BC_SendCommand(0x06); // BOOSTER_SOFT_START
 8002c02:	2006      	movs	r0, #6
 8002c04:	f7ff ff96 	bl	8002b34 <EPD_2IN13BC_SendCommand>
    EPD_2IN13BC_SendData(0x17);
 8002c08:	2017      	movs	r0, #23
 8002c0a:	f7ff ffb3 	bl	8002b74 <EPD_2IN13BC_SendData>
    EPD_2IN13BC_SendData(0x17);
 8002c0e:	2017      	movs	r0, #23
 8002c10:	f7ff ffb0 	bl	8002b74 <EPD_2IN13BC_SendData>
    EPD_2IN13BC_SendData(0x17);
 8002c14:	2017      	movs	r0, #23
 8002c16:	f7ff ffad 	bl	8002b74 <EPD_2IN13BC_SendData>
	
    EPD_2IN13BC_SendCommand(0x04); // POWER_ON
 8002c1a:	2004      	movs	r0, #4
 8002c1c:	f7ff ff8a 	bl	8002b34 <EPD_2IN13BC_SendCommand>
    EPD_2IN13BC_ReadBusy();
 8002c20:	f7ff ffc8 	bl	8002bb4 <EPD_2IN13BC_ReadBusy>
	
    EPD_2IN13BC_SendCommand(0x00); // PANEL_SETTING
 8002c24:	2000      	movs	r0, #0
 8002c26:	f7ff ff85 	bl	8002b34 <EPD_2IN13BC_SendCommand>
    EPD_2IN13BC_SendData(0x8F);
 8002c2a:	208f      	movs	r0, #143	; 0x8f
 8002c2c:	f7ff ffa2 	bl	8002b74 <EPD_2IN13BC_SendData>
	
    EPD_2IN13BC_SendCommand(0x50); // VCOM_AND_DATA_INTERVAL_SETTING
 8002c30:	2050      	movs	r0, #80	; 0x50
 8002c32:	f7ff ff7f 	bl	8002b34 <EPD_2IN13BC_SendCommand>
    EPD_2IN13BC_SendData(0xF0);
 8002c36:	20f0      	movs	r0, #240	; 0xf0
 8002c38:	f7ff ff9c 	bl	8002b74 <EPD_2IN13BC_SendData>
    EPD_2IN13BC_SendCommand(0x61); // RESOLUTION_SETTING
 8002c3c:	2061      	movs	r0, #97	; 0x61
 8002c3e:	f7ff ff79 	bl	8002b34 <EPD_2IN13BC_SendCommand>
    EPD_2IN13BC_SendData(EPD_2IN13BC_WIDTH); // width: 104
 8002c42:	2068      	movs	r0, #104	; 0x68
 8002c44:	f7ff ff96 	bl	8002b74 <EPD_2IN13BC_SendData>
    EPD_2IN13BC_SendData(EPD_2IN13BC_HEIGHT >> 8); // height: 212
 8002c48:	2000      	movs	r0, #0
 8002c4a:	f7ff ff93 	bl	8002b74 <EPD_2IN13BC_SendData>
    EPD_2IN13BC_SendData(EPD_2IN13BC_HEIGHT & 0xFF);
 8002c4e:	20d4      	movs	r0, #212	; 0xd4
 8002c50:	f7ff ff90 	bl	8002b74 <EPD_2IN13BC_SendData>
}
 8002c54:	bf00      	nop
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <EPD_2IN13BC_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void EPD_2IN13BC_Clear(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
    UWORD Width = (EPD_2IN13BC_WIDTH % 8 == 0)? (EPD_2IN13BC_WIDTH / 8 ): (EPD_2IN13BC_WIDTH / 8 + 1);
 8002c5e:	230d      	movs	r3, #13
 8002c60:	80fb      	strh	r3, [r7, #6]
    UWORD Height = EPD_2IN13BC_HEIGHT;
 8002c62:	23d4      	movs	r3, #212	; 0xd4
 8002c64:	80bb      	strh	r3, [r7, #4]
    
    //send black data
    EPD_2IN13BC_SendCommand(0x10);
 8002c66:	2010      	movs	r0, #16
 8002c68:	f7ff ff64 	bl	8002b34 <EPD_2IN13BC_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	81fb      	strh	r3, [r7, #14]
 8002c70:	e00f      	b.n	8002c92 <EPD_2IN13BC_Clear+0x3a>
        for (UWORD i = 0; i < Width; i++) {
 8002c72:	2300      	movs	r3, #0
 8002c74:	81bb      	strh	r3, [r7, #12]
 8002c76:	e005      	b.n	8002c84 <EPD_2IN13BC_Clear+0x2c>
            EPD_2IN13BC_SendData(0xFF);
 8002c78:	20ff      	movs	r0, #255	; 0xff
 8002c7a:	f7ff ff7b 	bl	8002b74 <EPD_2IN13BC_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8002c7e:	89bb      	ldrh	r3, [r7, #12]
 8002c80:	3301      	adds	r3, #1
 8002c82:	81bb      	strh	r3, [r7, #12]
 8002c84:	89ba      	ldrh	r2, [r7, #12]
 8002c86:	88fb      	ldrh	r3, [r7, #6]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d3f5      	bcc.n	8002c78 <EPD_2IN13BC_Clear+0x20>
    for (UWORD j = 0; j < Height; j++) {
 8002c8c:	89fb      	ldrh	r3, [r7, #14]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	81fb      	strh	r3, [r7, #14]
 8002c92:	89fa      	ldrh	r2, [r7, #14]
 8002c94:	88bb      	ldrh	r3, [r7, #4]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d3eb      	bcc.n	8002c72 <EPD_2IN13BC_Clear+0x1a>
        }
    }
    EPD_2IN13BC_SendCommand(0x92); 
 8002c9a:	2092      	movs	r0, #146	; 0x92
 8002c9c:	f7ff ff4a 	bl	8002b34 <EPD_2IN13BC_SendCommand>

    //send red data
    EPD_2IN13BC_SendCommand(0x13);
 8002ca0:	2013      	movs	r0, #19
 8002ca2:	f7ff ff47 	bl	8002b34 <EPD_2IN13BC_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	817b      	strh	r3, [r7, #10]
 8002caa:	e00f      	b.n	8002ccc <EPD_2IN13BC_Clear+0x74>
        for (UWORD i = 0; i < Width; i++) {
 8002cac:	2300      	movs	r3, #0
 8002cae:	813b      	strh	r3, [r7, #8]
 8002cb0:	e005      	b.n	8002cbe <EPD_2IN13BC_Clear+0x66>
            EPD_2IN13BC_SendData(0xFF);
 8002cb2:	20ff      	movs	r0, #255	; 0xff
 8002cb4:	f7ff ff5e 	bl	8002b74 <EPD_2IN13BC_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8002cb8:	893b      	ldrh	r3, [r7, #8]
 8002cba:	3301      	adds	r3, #1
 8002cbc:	813b      	strh	r3, [r7, #8]
 8002cbe:	893a      	ldrh	r2, [r7, #8]
 8002cc0:	88fb      	ldrh	r3, [r7, #6]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d3f5      	bcc.n	8002cb2 <EPD_2IN13BC_Clear+0x5a>
    for (UWORD j = 0; j < Height; j++) {
 8002cc6:	897b      	ldrh	r3, [r7, #10]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	817b      	strh	r3, [r7, #10]
 8002ccc:	897a      	ldrh	r2, [r7, #10]
 8002cce:	88bb      	ldrh	r3, [r7, #4]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d3eb      	bcc.n	8002cac <EPD_2IN13BC_Clear+0x54>
        }
    }
    EPD_2IN13BC_SendCommand(0x92); 
 8002cd4:	2092      	movs	r0, #146	; 0x92
 8002cd6:	f7ff ff2d 	bl	8002b34 <EPD_2IN13BC_SendCommand>
    
    EPD_2IN13BC_TurnOnDisplay();
 8002cda:	f7ff ff85 	bl	8002be8 <EPD_2IN13BC_TurnOnDisplay>
}
 8002cde:	bf00      	nop
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <EPD_2IN13BC_Display>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void EPD_2IN13BC_Display(const UBYTE *blackimage, const UBYTE *ryimage)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b086      	sub	sp, #24
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
 8002cee:	6039      	str	r1, [r7, #0]
    UWORD Width, Height;
    Width = (EPD_2IN13BC_WIDTH % 8 == 0)? (EPD_2IN13BC_WIDTH / 8 ): (EPD_2IN13BC_WIDTH / 8 + 1);
 8002cf0:	230d      	movs	r3, #13
 8002cf2:	81fb      	strh	r3, [r7, #14]
    Height = EPD_2IN13BC_HEIGHT;
 8002cf4:	23d4      	movs	r3, #212	; 0xd4
 8002cf6:	81bb      	strh	r3, [r7, #12]
    
    EPD_2IN13BC_SendCommand(0x10);
 8002cf8:	2010      	movs	r0, #16
 8002cfa:	f7ff ff1b 	bl	8002b34 <EPD_2IN13BC_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8002cfe:	2300      	movs	r3, #0
 8002d00:	82fb      	strh	r3, [r7, #22]
 8002d02:	e019      	b.n	8002d38 <EPD_2IN13BC_Display+0x52>
        for (UWORD i = 0; i < Width; i++) {
 8002d04:	2300      	movs	r3, #0
 8002d06:	82bb      	strh	r3, [r7, #20]
 8002d08:	e00f      	b.n	8002d2a <EPD_2IN13BC_Display+0x44>
            EPD_2IN13BC_SendData(blackimage[i + j * Width]);
 8002d0a:	8aba      	ldrh	r2, [r7, #20]
 8002d0c:	8afb      	ldrh	r3, [r7, #22]
 8002d0e:	89f9      	ldrh	r1, [r7, #14]
 8002d10:	fb01 f303 	mul.w	r3, r1, r3
 8002d14:	4413      	add	r3, r2
 8002d16:	461a      	mov	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff ff28 	bl	8002b74 <EPD_2IN13BC_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8002d24:	8abb      	ldrh	r3, [r7, #20]
 8002d26:	3301      	adds	r3, #1
 8002d28:	82bb      	strh	r3, [r7, #20]
 8002d2a:	8aba      	ldrh	r2, [r7, #20]
 8002d2c:	89fb      	ldrh	r3, [r7, #14]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d3eb      	bcc.n	8002d0a <EPD_2IN13BC_Display+0x24>
    for (UWORD j = 0; j < Height; j++) {
 8002d32:	8afb      	ldrh	r3, [r7, #22]
 8002d34:	3301      	adds	r3, #1
 8002d36:	82fb      	strh	r3, [r7, #22]
 8002d38:	8afa      	ldrh	r2, [r7, #22]
 8002d3a:	89bb      	ldrh	r3, [r7, #12]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d3e1      	bcc.n	8002d04 <EPD_2IN13BC_Display+0x1e>
        }
    }
    EPD_2IN13BC_SendCommand(0x92); 
 8002d40:	2092      	movs	r0, #146	; 0x92
 8002d42:	f7ff fef7 	bl	8002b34 <EPD_2IN13BC_SendCommand>
    
    EPD_2IN13BC_SendCommand(0x13);
 8002d46:	2013      	movs	r0, #19
 8002d48:	f7ff fef4 	bl	8002b34 <EPD_2IN13BC_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	827b      	strh	r3, [r7, #18]
 8002d50:	e019      	b.n	8002d86 <EPD_2IN13BC_Display+0xa0>
        for (UWORD i = 0; i < Width; i++) {
 8002d52:	2300      	movs	r3, #0
 8002d54:	823b      	strh	r3, [r7, #16]
 8002d56:	e00f      	b.n	8002d78 <EPD_2IN13BC_Display+0x92>
            EPD_2IN13BC_SendData(ryimage[i + j * Width]);
 8002d58:	8a3a      	ldrh	r2, [r7, #16]
 8002d5a:	8a7b      	ldrh	r3, [r7, #18]
 8002d5c:	89f9      	ldrh	r1, [r7, #14]
 8002d5e:	fb01 f303 	mul.w	r3, r1, r3
 8002d62:	4413      	add	r3, r2
 8002d64:	461a      	mov	r2, r3
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	4413      	add	r3, r2
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff ff01 	bl	8002b74 <EPD_2IN13BC_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8002d72:	8a3b      	ldrh	r3, [r7, #16]
 8002d74:	3301      	adds	r3, #1
 8002d76:	823b      	strh	r3, [r7, #16]
 8002d78:	8a3a      	ldrh	r2, [r7, #16]
 8002d7a:	89fb      	ldrh	r3, [r7, #14]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d3eb      	bcc.n	8002d58 <EPD_2IN13BC_Display+0x72>
    for (UWORD j = 0; j < Height; j++) {
 8002d80:	8a7b      	ldrh	r3, [r7, #18]
 8002d82:	3301      	adds	r3, #1
 8002d84:	827b      	strh	r3, [r7, #18]
 8002d86:	8a7a      	ldrh	r2, [r7, #18]
 8002d88:	89bb      	ldrh	r3, [r7, #12]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d3e1      	bcc.n	8002d52 <EPD_2IN13BC_Display+0x6c>
        }
    }
    EPD_2IN13BC_SendCommand(0x92); 
 8002d8e:	2092      	movs	r0, #146	; 0x92
 8002d90:	f7ff fed0 	bl	8002b34 <EPD_2IN13BC_SendCommand>
    
    EPD_2IN13BC_TurnOnDisplay();
 8002d94:	f7ff ff28 	bl	8002be8 <EPD_2IN13BC_TurnOnDisplay>
}
 8002d98:	bf00      	nop
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8002da4:	bf00      	nop
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
	...

08002db0 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8002dba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002dbe:	4803      	ldr	r0, [pc, #12]	; (8002dcc <vApplicationStackOverflowHook+0x1c>)
 8002dc0:	f001 fbd9 	bl	8004576 <HAL_GPIO_TogglePin>

   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8002dc4:	bf00      	nop
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40020c00 	.word	0x40020c00

08002dd0 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8002dd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002dd8:	4802      	ldr	r0, [pc, #8]	; (8002de4 <vApplicationMallocFailedHook+0x14>)
 8002dda:	f001 fbcc 	bl	8004576 <HAL_GPIO_TogglePin>
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8002dde:	bf00      	nop
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	40020c00 	.word	0x40020c00

08002de8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002dec:	f001 f8c6 	bl	8003f7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002df0:	f000 f842 	bl	8002e78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002df4:	f000 f942 	bl	800307c <MX_GPIO_Init>
  MX_SPI1_Init();
 8002df8:	f000 f8d4 	bl	8002fa4 <MX_SPI1_Init>
  MX_SPI4_Init();
 8002dfc:	f000 f908 	bl	8003010 <MX_SPI4_Init>
  MX_I2C3_Init();
 8002e00:	f000 f8a2 	bl	8002f48 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002e04:	f003 fef0 	bl	8006be8 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of myMutex01 */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 8002e08:	4810      	ldr	r0, [pc, #64]	; (8002e4c <main+0x64>)
 8002e0a:	f004 f86e 	bl	8006eea <osMutexNew>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	4a0f      	ldr	r2, [pc, #60]	; (8002e50 <main+0x68>)
 8002e12:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of SensorTask */
  SensorTaskHandle = osThreadNew(StartSensorTask, NULL, &SensorTask_attributes);
 8002e14:	4a0f      	ldr	r2, [pc, #60]	; (8002e54 <main+0x6c>)
 8002e16:	2100      	movs	r1, #0
 8002e18:	480f      	ldr	r0, [pc, #60]	; (8002e58 <main+0x70>)
 8002e1a:	f003 ff2f 	bl	8006c7c <osThreadNew>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	4a0e      	ldr	r2, [pc, #56]	; (8002e5c <main+0x74>)
 8002e22:	6013      	str	r3, [r2, #0]

  /* creation of DisplayTask */
  DisplayTaskHandle = osThreadNew(StartDisplayTask, NULL, &DisplayTask_attributes);
 8002e24:	4a0e      	ldr	r2, [pc, #56]	; (8002e60 <main+0x78>)
 8002e26:	2100      	movs	r1, #0
 8002e28:	480e      	ldr	r0, [pc, #56]	; (8002e64 <main+0x7c>)
 8002e2a:	f003 ff27 	bl	8006c7c <osThreadNew>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	4a0d      	ldr	r2, [pc, #52]	; (8002e68 <main+0x80>)
 8002e32:	6013      	str	r3, [r2, #0]

  /* creation of LedTask */
  LedTaskHandle = osThreadNew(StartLedTask, NULL, &LedTask_attributes);
 8002e34:	4a0d      	ldr	r2, [pc, #52]	; (8002e6c <main+0x84>)
 8002e36:	2100      	movs	r1, #0
 8002e38:	480d      	ldr	r0, [pc, #52]	; (8002e70 <main+0x88>)
 8002e3a:	f003 ff1f 	bl	8006c7c <osThreadNew>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	4a0c      	ldr	r2, [pc, #48]	; (8002e74 <main+0x8c>)
 8002e42:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002e44:	f003 fef4 	bl	8006c30 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002e48:	e7fe      	b.n	8002e48 <main+0x60>
 8002e4a:	bf00      	nop
 8002e4c:	0800dc04 	.word	0x0800dc04
 8002e50:	20004f54 	.word	0x20004f54
 8002e54:	0800db98 	.word	0x0800db98
 8002e58:	080036b5 	.word	0x080036b5
 8002e5c:	200049d0 	.word	0x200049d0
 8002e60:	0800dbbc 	.word	0x0800dbbc
 8002e64:	08003751 	.word	0x08003751
 8002e68:	20004ef8 	.word	0x20004ef8
 8002e6c:	0800dbe0 	.word	0x0800dbe0
 8002e70:	080039b5 	.word	0x080039b5
 8002e74:	20004c98 	.word	0x20004c98

08002e78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b094      	sub	sp, #80	; 0x50
 8002e7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e7e:	f107 0320 	add.w	r3, r7, #32
 8002e82:	2230      	movs	r2, #48	; 0x30
 8002e84:	2100      	movs	r1, #0
 8002e86:	4618      	mov	r0, r3
 8002e88:	f007 faa8 	bl	800a3dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e8c:	f107 030c 	add.w	r3, r7, #12
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	605a      	str	r2, [r3, #4]
 8002e96:	609a      	str	r2, [r3, #8]
 8002e98:	60da      	str	r2, [r3, #12]
 8002e9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	60bb      	str	r3, [r7, #8]
 8002ea0:	4b27      	ldr	r3, [pc, #156]	; (8002f40 <SystemClock_Config+0xc8>)
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	4a26      	ldr	r2, [pc, #152]	; (8002f40 <SystemClock_Config+0xc8>)
 8002ea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eaa:	6413      	str	r3, [r2, #64]	; 0x40
 8002eac:	4b24      	ldr	r3, [pc, #144]	; (8002f40 <SystemClock_Config+0xc8>)
 8002eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb4:	60bb      	str	r3, [r7, #8]
 8002eb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002eb8:	2300      	movs	r3, #0
 8002eba:	607b      	str	r3, [r7, #4]
 8002ebc:	4b21      	ldr	r3, [pc, #132]	; (8002f44 <SystemClock_Config+0xcc>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a20      	ldr	r2, [pc, #128]	; (8002f44 <SystemClock_Config+0xcc>)
 8002ec2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ec6:	6013      	str	r3, [r2, #0]
 8002ec8:	4b1e      	ldr	r3, [pc, #120]	; (8002f44 <SystemClock_Config+0xcc>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002ed0:	607b      	str	r3, [r7, #4]
 8002ed2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ed8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002edc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ede:	2302      	movs	r3, #2
 8002ee0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ee2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002ee8:	2304      	movs	r3, #4
 8002eea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002eec:	23c0      	movs	r3, #192	; 0xc0
 8002eee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002ef0:	2304      	movs	r3, #4
 8002ef2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8002ef4:	2308      	movs	r3, #8
 8002ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ef8:	f107 0320 	add.w	r3, r7, #32
 8002efc:	4618      	mov	r0, r3
 8002efe:	f002 faeb 	bl	80054d8 <HAL_RCC_OscConfig>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002f08:	f000 fd8c 	bl	8003a24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f0c:	230f      	movs	r3, #15
 8002f0e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f10:	2302      	movs	r3, #2
 8002f12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f14:	2300      	movs	r3, #0
 8002f16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002f18:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002f1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002f22:	f107 030c 	add.w	r3, r7, #12
 8002f26:	2103      	movs	r1, #3
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f002 fd4d 	bl	80059c8 <HAL_RCC_ClockConfig>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002f34:	f000 fd76 	bl	8003a24 <Error_Handler>
  }
}
 8002f38:	bf00      	nop
 8002f3a:	3750      	adds	r7, #80	; 0x50
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40023800 	.word	0x40023800
 8002f44:	40007000 	.word	0x40007000

08002f48 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002f4c:	4b12      	ldr	r3, [pc, #72]	; (8002f98 <MX_I2C3_Init+0x50>)
 8002f4e:	4a13      	ldr	r2, [pc, #76]	; (8002f9c <MX_I2C3_Init+0x54>)
 8002f50:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002f52:	4b11      	ldr	r3, [pc, #68]	; (8002f98 <MX_I2C3_Init+0x50>)
 8002f54:	4a12      	ldr	r2, [pc, #72]	; (8002fa0 <MX_I2C3_Init+0x58>)
 8002f56:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f58:	4b0f      	ldr	r3, [pc, #60]	; (8002f98 <MX_I2C3_Init+0x50>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002f5e:	4b0e      	ldr	r3, [pc, #56]	; (8002f98 <MX_I2C3_Init+0x50>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f64:	4b0c      	ldr	r3, [pc, #48]	; (8002f98 <MX_I2C3_Init+0x50>)
 8002f66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f6a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f6c:	4b0a      	ldr	r3, [pc, #40]	; (8002f98 <MX_I2C3_Init+0x50>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002f72:	4b09      	ldr	r3, [pc, #36]	; (8002f98 <MX_I2C3_Init+0x50>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f78:	4b07      	ldr	r3, [pc, #28]	; (8002f98 <MX_I2C3_Init+0x50>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f7e:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <MX_I2C3_Init+0x50>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002f84:	4804      	ldr	r0, [pc, #16]	; (8002f98 <MX_I2C3_Init+0x50>)
 8002f86:	f001 fb11 	bl	80045ac <HAL_I2C_Init>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002f90:	f000 fd48 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002f94:	bf00      	nop
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	200049d4 	.word	0x200049d4
 8002f9c:	40005c00 	.word	0x40005c00
 8002fa0:	000186a0 	.word	0x000186a0

08002fa4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002fa8:	4b17      	ldr	r3, [pc, #92]	; (8003008 <MX_SPI1_Init+0x64>)
 8002faa:	4a18      	ldr	r2, [pc, #96]	; (800300c <MX_SPI1_Init+0x68>)
 8002fac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002fae:	4b16      	ldr	r3, [pc, #88]	; (8003008 <MX_SPI1_Init+0x64>)
 8002fb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002fb4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002fb6:	4b14      	ldr	r3, [pc, #80]	; (8003008 <MX_SPI1_Init+0x64>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002fbc:	4b12      	ldr	r3, [pc, #72]	; (8003008 <MX_SPI1_Init+0x64>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fc2:	4b11      	ldr	r3, [pc, #68]	; (8003008 <MX_SPI1_Init+0x64>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002fc8:	4b0f      	ldr	r3, [pc, #60]	; (8003008 <MX_SPI1_Init+0x64>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002fce:	4b0e      	ldr	r3, [pc, #56]	; (8003008 <MX_SPI1_Init+0x64>)
 8002fd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fd4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fd6:	4b0c      	ldr	r3, [pc, #48]	; (8003008 <MX_SPI1_Init+0x64>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002fdc:	4b0a      	ldr	r3, [pc, #40]	; (8003008 <MX_SPI1_Init+0x64>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002fe2:	4b09      	ldr	r3, [pc, #36]	; (8003008 <MX_SPI1_Init+0x64>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fe8:	4b07      	ldr	r3, [pc, #28]	; (8003008 <MX_SPI1_Init+0x64>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002fee:	4b06      	ldr	r3, [pc, #24]	; (8003008 <MX_SPI1_Init+0x64>)
 8002ff0:	220a      	movs	r2, #10
 8002ff2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ff4:	4804      	ldr	r0, [pc, #16]	; (8003008 <MX_SPI1_Init+0x64>)
 8002ff6:	f002 ff01 	bl	8005dfc <HAL_SPI_Init>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003000:	f000 fd10 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003004:	bf00      	nop
 8003006:	bd80      	pop	{r7, pc}
 8003008:	20004efc 	.word	0x20004efc
 800300c:	40013000 	.word	0x40013000

08003010 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8003014:	4b17      	ldr	r3, [pc, #92]	; (8003074 <MX_SPI4_Init+0x64>)
 8003016:	4a18      	ldr	r2, [pc, #96]	; (8003078 <MX_SPI4_Init+0x68>)
 8003018:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800301a:	4b16      	ldr	r3, [pc, #88]	; (8003074 <MX_SPI4_Init+0x64>)
 800301c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003020:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8003022:	4b14      	ldr	r3, [pc, #80]	; (8003074 <MX_SPI4_Init+0x64>)
 8003024:	2200      	movs	r2, #0
 8003026:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8003028:	4b12      	ldr	r3, [pc, #72]	; (8003074 <MX_SPI4_Init+0x64>)
 800302a:	2200      	movs	r2, #0
 800302c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800302e:	4b11      	ldr	r3, [pc, #68]	; (8003074 <MX_SPI4_Init+0x64>)
 8003030:	2200      	movs	r2, #0
 8003032:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003034:	4b0f      	ldr	r3, [pc, #60]	; (8003074 <MX_SPI4_Init+0x64>)
 8003036:	2200      	movs	r2, #0
 8003038:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800303a:	4b0e      	ldr	r3, [pc, #56]	; (8003074 <MX_SPI4_Init+0x64>)
 800303c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003040:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003042:	4b0c      	ldr	r3, [pc, #48]	; (8003074 <MX_SPI4_Init+0x64>)
 8003044:	2228      	movs	r2, #40	; 0x28
 8003046:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003048:	4b0a      	ldr	r3, [pc, #40]	; (8003074 <MX_SPI4_Init+0x64>)
 800304a:	2200      	movs	r2, #0
 800304c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800304e:	4b09      	ldr	r3, [pc, #36]	; (8003074 <MX_SPI4_Init+0x64>)
 8003050:	2200      	movs	r2, #0
 8003052:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003054:	4b07      	ldr	r3, [pc, #28]	; (8003074 <MX_SPI4_Init+0x64>)
 8003056:	2200      	movs	r2, #0
 8003058:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 800305a:	4b06      	ldr	r3, [pc, #24]	; (8003074 <MX_SPI4_Init+0x64>)
 800305c:	220a      	movs	r2, #10
 800305e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8003060:	4804      	ldr	r0, [pc, #16]	; (8003074 <MX_SPI4_Init+0x64>)
 8003062:	f002 fecb 	bl	8005dfc <HAL_SPI_Init>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d001      	beq.n	8003070 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 800306c:	f000 fcda 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8003070:	bf00      	nop
 8003072:	bd80      	pop	{r7, pc}
 8003074:	20004ca0 	.word	0x20004ca0
 8003078:	40013400 	.word	0x40013400

0800307c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b08c      	sub	sp, #48	; 0x30
 8003080:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003082:	f107 031c 	add.w	r3, r7, #28
 8003086:	2200      	movs	r2, #0
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	605a      	str	r2, [r3, #4]
 800308c:	609a      	str	r2, [r3, #8]
 800308e:	60da      	str	r2, [r3, #12]
 8003090:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	61bb      	str	r3, [r7, #24]
 8003096:	4bad      	ldr	r3, [pc, #692]	; (800334c <MX_GPIO_Init+0x2d0>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309a:	4aac      	ldr	r2, [pc, #688]	; (800334c <MX_GPIO_Init+0x2d0>)
 800309c:	f043 0310 	orr.w	r3, r3, #16
 80030a0:	6313      	str	r3, [r2, #48]	; 0x30
 80030a2:	4baa      	ldr	r3, [pc, #680]	; (800334c <MX_GPIO_Init+0x2d0>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a6:	f003 0310 	and.w	r3, r3, #16
 80030aa:	61bb      	str	r3, [r7, #24]
 80030ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ae:	2300      	movs	r3, #0
 80030b0:	617b      	str	r3, [r7, #20]
 80030b2:	4ba6      	ldr	r3, [pc, #664]	; (800334c <MX_GPIO_Init+0x2d0>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	4aa5      	ldr	r2, [pc, #660]	; (800334c <MX_GPIO_Init+0x2d0>)
 80030b8:	f043 0304 	orr.w	r3, r3, #4
 80030bc:	6313      	str	r3, [r2, #48]	; 0x30
 80030be:	4ba3      	ldr	r3, [pc, #652]	; (800334c <MX_GPIO_Init+0x2d0>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	f003 0304 	and.w	r3, r3, #4
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	613b      	str	r3, [r7, #16]
 80030ce:	4b9f      	ldr	r3, [pc, #636]	; (800334c <MX_GPIO_Init+0x2d0>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	4a9e      	ldr	r2, [pc, #632]	; (800334c <MX_GPIO_Init+0x2d0>)
 80030d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030d8:	6313      	str	r3, [r2, #48]	; 0x30
 80030da:	4b9c      	ldr	r3, [pc, #624]	; (800334c <MX_GPIO_Init+0x2d0>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e2:	613b      	str	r3, [r7, #16]
 80030e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030e6:	2300      	movs	r3, #0
 80030e8:	60fb      	str	r3, [r7, #12]
 80030ea:	4b98      	ldr	r3, [pc, #608]	; (800334c <MX_GPIO_Init+0x2d0>)
 80030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ee:	4a97      	ldr	r2, [pc, #604]	; (800334c <MX_GPIO_Init+0x2d0>)
 80030f0:	f043 0301 	orr.w	r3, r3, #1
 80030f4:	6313      	str	r3, [r2, #48]	; 0x30
 80030f6:	4b95      	ldr	r3, [pc, #596]	; (800334c <MX_GPIO_Init+0x2d0>)
 80030f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003102:	2300      	movs	r3, #0
 8003104:	60bb      	str	r3, [r7, #8]
 8003106:	4b91      	ldr	r3, [pc, #580]	; (800334c <MX_GPIO_Init+0x2d0>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	4a90      	ldr	r2, [pc, #576]	; (800334c <MX_GPIO_Init+0x2d0>)
 800310c:	f043 0302 	orr.w	r3, r3, #2
 8003110:	6313      	str	r3, [r2, #48]	; 0x30
 8003112:	4b8e      	ldr	r3, [pc, #568]	; (800334c <MX_GPIO_Init+0x2d0>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	60bb      	str	r3, [r7, #8]
 800311c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800311e:	2300      	movs	r3, #0
 8003120:	607b      	str	r3, [r7, #4]
 8003122:	4b8a      	ldr	r3, [pc, #552]	; (800334c <MX_GPIO_Init+0x2d0>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003126:	4a89      	ldr	r2, [pc, #548]	; (800334c <MX_GPIO_Init+0x2d0>)
 8003128:	f043 0308 	orr.w	r3, r3, #8
 800312c:	6313      	str	r3, [r2, #48]	; 0x30
 800312e:	4b87      	ldr	r3, [pc, #540]	; (800334c <MX_GPIO_Init+0x2d0>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	f003 0308 	and.w	r3, r3, #8
 8003136:	607b      	str	r3, [r7, #4]
 8003138:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|DataCommand_Pin|RST_Pin, GPIO_PIN_RESET);
 800313a:	2200      	movs	r2, #0
 800313c:	f44f 7122 	mov.w	r1, #648	; 0x288
 8003140:	4883      	ldr	r0, [pc, #524]	; (8003350 <MX_GPIO_Init+0x2d4>)
 8003142:	f001 f9ff 	bl	8004544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8003146:	2201      	movs	r2, #1
 8003148:	2101      	movs	r1, #1
 800314a:	4882      	ldr	r0, [pc, #520]	; (8003354 <MX_GPIO_Init+0x2d8>)
 800314c:	f001 f9fa 	bl	8004544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8003150:	2200      	movs	r2, #0
 8003152:	2104      	movs	r1, #4
 8003154:	4880      	ldr	r0, [pc, #512]	; (8003358 <MX_GPIO_Init+0x2dc>)
 8003156:	f001 f9f5 	bl	8004544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800315a:	2200      	movs	r2, #0
 800315c:	2104      	movs	r1, #4
 800315e:	487f      	ldr	r0, [pc, #508]	; (800335c <MX_GPIO_Init+0x2e0>)
 8003160:	f001 f9f0 	bl	8004544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8003164:	2200      	movs	r2, #0
 8003166:	f24f 0110 	movw	r1, #61456	; 0xf010
 800316a:	487d      	ldr	r0, [pc, #500]	; (8003360 <MX_GPIO_Init+0x2e4>)
 800316c:	f001 f9ea 	bl	8004544 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DATA_Ready_Pin BUSY_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin|BUSY_Pin;
 8003170:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003174:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003176:	2300      	movs	r3, #0
 8003178:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317a:	2300      	movs	r3, #0
 800317c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800317e:	f107 031c 	add.w	r3, r7, #28
 8003182:	4619      	mov	r1, r3
 8003184:	4872      	ldr	r0, [pc, #456]	; (8003350 <MX_GPIO_Init+0x2d4>)
 8003186:	f001 f841 	bl	800420c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin DataCommand_Pin RST_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|DataCommand_Pin|RST_Pin;
 800318a:	f44f 7322 	mov.w	r3, #648	; 0x288
 800318e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003190:	2301      	movs	r3, #1
 8003192:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003194:	2300      	movs	r3, #0
 8003196:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003198:	2300      	movs	r3, #0
 800319a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800319c:	f107 031c 	add.w	r3, r7, #28
 80031a0:	4619      	mov	r1, r3
 80031a2:	486b      	ldr	r0, [pc, #428]	; (8003350 <MX_GPIO_Init+0x2d4>)
 80031a4:	f001 f832 	bl	800420c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80031a8:	2332      	movs	r3, #50	; 0x32
 80031aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80031ac:	4b6d      	ldr	r3, [pc, #436]	; (8003364 <MX_GPIO_Init+0x2e8>)
 80031ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b0:	2300      	movs	r3, #0
 80031b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031b4:	f107 031c 	add.w	r3, r7, #28
 80031b8:	4619      	mov	r1, r3
 80031ba:	4865      	ldr	r0, [pc, #404]	; (8003350 <MX_GPIO_Init+0x2d4>)
 80031bc:	f001 f826 	bl	800420c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80031c0:	2301      	movs	r3, #1
 80031c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031c4:	2301      	movs	r3, #1
 80031c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c8:	2300      	movs	r3, #0
 80031ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031cc:	2300      	movs	r3, #0
 80031ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80031d0:	f107 031c 	add.w	r3, r7, #28
 80031d4:	4619      	mov	r1, r3
 80031d6:	485f      	ldr	r0, [pc, #380]	; (8003354 <MX_GPIO_Init+0x2d8>)
 80031d8:	f001 f818 	bl	800420c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80031dc:	2308      	movs	r3, #8
 80031de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e0:	2302      	movs	r3, #2
 80031e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e4:	2300      	movs	r3, #0
 80031e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e8:	2300      	movs	r3, #0
 80031ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80031ec:	2305      	movs	r3, #5
 80031ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80031f0:	f107 031c 	add.w	r3, r7, #28
 80031f4:	4619      	mov	r1, r3
 80031f6:	4857      	ldr	r0, [pc, #348]	; (8003354 <MX_GPIO_Init+0x2d8>)
 80031f8:	f001 f808 	bl	800420c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80031fc:	2301      	movs	r3, #1
 80031fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003200:	4b58      	ldr	r3, [pc, #352]	; (8003364 <MX_GPIO_Init+0x2e8>)
 8003202:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003204:	2300      	movs	r3, #0
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003208:	f107 031c 	add.w	r3, r7, #28
 800320c:	4619      	mov	r1, r3
 800320e:	4852      	ldr	r0, [pc, #328]	; (8003358 <MX_GPIO_Init+0x2dc>)
 8003210:	f000 fffc 	bl	800420c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8003214:	2304      	movs	r3, #4
 8003216:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003218:	2301      	movs	r3, #1
 800321a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321c:	2300      	movs	r3, #0
 800321e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003220:	2300      	movs	r3, #0
 8003222:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8003224:	f107 031c 	add.w	r3, r7, #28
 8003228:	4619      	mov	r1, r3
 800322a:	484b      	ldr	r0, [pc, #300]	; (8003358 <MX_GPIO_Init+0x2dc>)
 800322c:	f000 ffee 	bl	800420c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8003230:	2310      	movs	r3, #16
 8003232:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003234:	2302      	movs	r3, #2
 8003236:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003238:	2300      	movs	r3, #0
 800323a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800323c:	2300      	movs	r3, #0
 800323e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003240:	2306      	movs	r3, #6
 8003242:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8003244:	f107 031c 	add.w	r3, r7, #28
 8003248:	4619      	mov	r1, r3
 800324a:	4843      	ldr	r0, [pc, #268]	; (8003358 <MX_GPIO_Init+0x2dc>)
 800324c:	f000 ffde 	bl	800420c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8003250:	2304      	movs	r3, #4
 8003252:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003254:	2301      	movs	r3, #1
 8003256:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003258:	2300      	movs	r3, #0
 800325a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800325c:	2300      	movs	r3, #0
 800325e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8003260:	f107 031c 	add.w	r3, r7, #28
 8003264:	4619      	mov	r1, r3
 8003266:	483d      	ldr	r0, [pc, #244]	; (800335c <MX_GPIO_Init+0x2e0>)
 8003268:	f000 ffd0 	bl	800420c <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800326c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003270:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003272:	2302      	movs	r3, #2
 8003274:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003276:	2300      	movs	r3, #0
 8003278:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800327a:	2300      	movs	r3, #0
 800327c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800327e:	2305      	movs	r3, #5
 8003280:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003282:	f107 031c 	add.w	r3, r7, #28
 8003286:	4619      	mov	r1, r3
 8003288:	4834      	ldr	r0, [pc, #208]	; (800335c <MX_GPIO_Init+0x2e0>)
 800328a:	f000 ffbf 	bl	800420c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800328e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8003292:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003294:	2301      	movs	r3, #1
 8003296:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003298:	2300      	movs	r3, #0
 800329a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800329c:	2300      	movs	r3, #0
 800329e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032a0:	f107 031c 	add.w	r3, r7, #28
 80032a4:	4619      	mov	r1, r3
 80032a6:	482e      	ldr	r0, [pc, #184]	; (8003360 <MX_GPIO_Init+0x2e4>)
 80032a8:	f000 ffb0 	bl	800420c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80032ac:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80032b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b2:	2302      	movs	r3, #2
 80032b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b6:	2300      	movs	r3, #0
 80032b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ba:	2300      	movs	r3, #0
 80032bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80032be:	2306      	movs	r3, #6
 80032c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032c2:	f107 031c 	add.w	r3, r7, #28
 80032c6:	4619      	mov	r1, r3
 80032c8:	4822      	ldr	r0, [pc, #136]	; (8003354 <MX_GPIO_Init+0x2d8>)
 80032ca:	f000 ff9f 	bl	800420c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80032ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032d4:	2300      	movs	r3, #0
 80032d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d8:	2300      	movs	r3, #0
 80032da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80032dc:	f107 031c 	add.w	r3, r7, #28
 80032e0:	4619      	mov	r1, r3
 80032e2:	481d      	ldr	r0, [pc, #116]	; (8003358 <MX_GPIO_Init+0x2dc>)
 80032e4:	f000 ff92 	bl	800420c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80032e8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80032ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ee:	2302      	movs	r3, #2
 80032f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f2:	2300      	movs	r3, #0
 80032f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032f6:	2303      	movs	r3, #3
 80032f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80032fa:	230a      	movs	r3, #10
 80032fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032fe:	f107 031c 	add.w	r3, r7, #28
 8003302:	4619      	mov	r1, r3
 8003304:	4814      	ldr	r0, [pc, #80]	; (8003358 <MX_GPIO_Init+0x2dc>)
 8003306:	f000 ff81 	bl	800420c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800330a:	2320      	movs	r3, #32
 800330c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800330e:	2300      	movs	r3, #0
 8003310:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003312:	2300      	movs	r3, #0
 8003314:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003316:	f107 031c 	add.w	r3, r7, #28
 800331a:	4619      	mov	r1, r3
 800331c:	4810      	ldr	r0, [pc, #64]	; (8003360 <MX_GPIO_Init+0x2e4>)
 800331e:	f000 ff75 	bl	800420c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8003322:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003326:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003328:	2312      	movs	r3, #18
 800332a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800332c:	2301      	movs	r3, #1
 800332e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003330:	2300      	movs	r3, #0
 8003332:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003334:	2304      	movs	r3, #4
 8003336:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003338:	f107 031c 	add.w	r3, r7, #28
 800333c:	4619      	mov	r1, r3
 800333e:	4807      	ldr	r0, [pc, #28]	; (800335c <MX_GPIO_Init+0x2e0>)
 8003340:	f000 ff64 	bl	800420c <HAL_GPIO_Init>

}
 8003344:	bf00      	nop
 8003346:	3730      	adds	r7, #48	; 0x30
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40023800 	.word	0x40023800
 8003350:	40021000 	.word	0x40021000
 8003354:	40020800 	.word	0x40020800
 8003358:	40020000 	.word	0x40020000
 800335c:	40020400 	.word	0x40020400
 8003360:	40020c00 	.word	0x40020c00
 8003364:	10120000 	.word	0x10120000

08003368 <set_senosr_struct>:
void set_senosr_struct(struct bme680_dev *gas_sensor, uint8_t type, uint8_t amb_temp)
/*
 * @param type: 1 for SPI, 0 for I2C
 *
 */
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	460b      	mov	r3, r1
 8003372:	70fb      	strb	r3, [r7, #3]
 8003374:	4613      	mov	r3, r2
 8003376:	70bb      	strb	r3, [r7, #2]
	if(type == 1)
 8003378:	78fb      	ldrb	r3, [r7, #3]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d118      	bne.n	80033b0 <set_senosr_struct+0x48>
	{
		HAL_GPIO_WritePin(GPIOA, SPI_CS_Pin, GPIO_PIN_RESET);
 800337e:	2200      	movs	r2, #0
 8003380:	2104      	movs	r1, #4
 8003382:	481b      	ldr	r0, [pc, #108]	; (80033f0 <set_senosr_struct+0x88>)
 8003384:	f001 f8de 	bl	8004544 <HAL_GPIO_WritePin>
		gas_sensor->dev_id = 0;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	705a      	strb	r2, [r3, #1]
		gas_sensor->intf = BME680_SPI_INTF;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	709a      	strb	r2, [r3, #2]
		gas_sensor->read = user_spi_read;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a17      	ldr	r2, [pc, #92]	; (80033f4 <set_senosr_struct+0x8c>)
 8003398:	649a      	str	r2, [r3, #72]	; 0x48
		gas_sensor->write = user_spi_write;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a16      	ldr	r2, [pc, #88]	; (80033f8 <set_senosr_struct+0x90>)
 800339e:	64da      	str	r2, [r3, #76]	; 0x4c
		gas_sensor->delay_ms = user_delay_ms;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a16      	ldr	r2, [pc, #88]	; (80033fc <set_senosr_struct+0x94>)
 80033a4:	651a      	str	r2, [r3, #80]	; 0x50
		gas_sensor->amb_temp = amb_temp;
 80033a6:	f997 2002 	ldrsb.w	r2, [r7, #2]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	711a      	strb	r2, [r3, #4]
		gas_sensor->read = user_i2c_read;
		gas_sensor->write = user_i2c_write;
		gas_sensor->delay_ms = user_delay_ms;
		gas_sensor->amb_temp = amb_temp;
	}
}
 80033ae:	e01a      	b.n	80033e6 <set_senosr_struct+0x7e>
	else if(type == 0)
 80033b0:	78fb      	ldrb	r3, [r7, #3]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d117      	bne.n	80033e6 <set_senosr_struct+0x7e>
		HAL_GPIO_WritePin(GPIOA, SPI_CS_Pin, GPIO_PIN_RESET);
 80033b6:	2200      	movs	r2, #0
 80033b8:	2104      	movs	r1, #4
 80033ba:	480d      	ldr	r0, [pc, #52]	; (80033f0 <set_senosr_struct+0x88>)
 80033bc:	f001 f8c2 	bl	8004544 <HAL_GPIO_WritePin>
		gas_sensor->dev_id = BME680_I2C_ADDR_PRIMARY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2276      	movs	r2, #118	; 0x76
 80033c4:	705a      	strb	r2, [r3, #1]
		gas_sensor->intf = BME680_I2C_INTF;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	709a      	strb	r2, [r3, #2]
		gas_sensor->read = user_i2c_read;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a0c      	ldr	r2, [pc, #48]	; (8003400 <set_senosr_struct+0x98>)
 80033d0:	649a      	str	r2, [r3, #72]	; 0x48
		gas_sensor->write = user_i2c_write;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a0b      	ldr	r2, [pc, #44]	; (8003404 <set_senosr_struct+0x9c>)
 80033d6:	64da      	str	r2, [r3, #76]	; 0x4c
		gas_sensor->delay_ms = user_delay_ms;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a08      	ldr	r2, [pc, #32]	; (80033fc <set_senosr_struct+0x94>)
 80033dc:	651a      	str	r2, [r3, #80]	; 0x50
		gas_sensor->amb_temp = amb_temp;
 80033de:	f997 2002 	ldrsb.w	r2, [r7, #2]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	711a      	strb	r2, [r3, #4]
}
 80033e6:	bf00      	nop
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40020000 	.word	0x40020000
 80033f4:	08003421 	.word	0x08003421
 80033f8:	080034b1 	.word	0x080034b1
 80033fc:	08003409 	.word	0x08003409
 8003400:	08003535 	.word	0x08003535
 8003404:	080035c5 	.word	0x080035c5

08003408 <user_delay_ms>:

void user_delay_ms(uint32_t period)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
    /*
     * Return control or wait,
     * for a period amount of milliseconds
     */
	osDelayUntil(period/portTICK_RATE_MS);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f003 fd3d 	bl	8006e90 <osDelayUntil>
}
 8003416:	bf00      	nop
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
	...

08003420 <user_spi_read>:

int8_t user_spi_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af02      	add	r7, sp, #8
 8003426:	603a      	str	r2, [r7, #0]
 8003428:	461a      	mov	r2, r3
 800342a:	4603      	mov	r3, r0
 800342c:	71fb      	strb	r3, [r7, #7]
 800342e:	460b      	mov	r3, r1
 8003430:	71bb      	strb	r3, [r7, #6]
 8003432:	4613      	mov	r3, r2
 8003434:	80bb      	strh	r3, [r7, #4]
    int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
 8003436:	2300      	movs	r3, #0
 8003438:	73fb      	strb	r3, [r7, #15]
     * | (don't care)   | (reg_data[len - 1]) | LOW         |
     * | (don't care)   | (don't care)        | HIGH        |
     * |----------------+---------------------|-------------|
     */

    GTXBuffer[0] = reg_addr | 0x80;
 800343a:	79bb      	ldrb	r3, [r7, #6]
 800343c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003440:	b2da      	uxtb	r2, r3
 8003442:	4b16      	ldr	r3, [pc, #88]	; (800349c <user_spi_read+0x7c>)
 8003444:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8003446:	2200      	movs	r2, #0
 8003448:	2104      	movs	r1, #4
 800344a:	4815      	ldr	r0, [pc, #84]	; (80034a0 <user_spi_read+0x80>)
 800344c:	f001 f87a 	bl	8004544 <HAL_GPIO_WritePin>
    rslt = HAL_SPI_TransmitReceive(&hspi4, GTXBuffer, GRXBuffer, len+1, 1000);
 8003450:	88bb      	ldrh	r3, [r7, #4]
 8003452:	3301      	adds	r3, #1
 8003454:	b29b      	uxth	r3, r3
 8003456:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800345a:	9200      	str	r2, [sp, #0]
 800345c:	4a11      	ldr	r2, [pc, #68]	; (80034a4 <user_spi_read+0x84>)
 800345e:	490f      	ldr	r1, [pc, #60]	; (800349c <user_spi_read+0x7c>)
 8003460:	4811      	ldr	r0, [pc, #68]	; (80034a8 <user_spi_read+0x88>)
 8003462:	f002 fe90 	bl	8006186 <HAL_SPI_TransmitReceive>
 8003466:	4603      	mov	r3, r0
 8003468:	73fb      	strb	r3, [r7, #15]
    while(hspi4.State == HAL_SPI_STATE_BUSY);
 800346a:	bf00      	nop
 800346c:	4b0e      	ldr	r3, [pc, #56]	; (80034a8 <user_spi_read+0x88>)
 800346e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d0f9      	beq.n	800346c <user_spi_read+0x4c>
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8003478:	2201      	movs	r2, #1
 800347a:	2104      	movs	r1, #4
 800347c:	4808      	ldr	r0, [pc, #32]	; (80034a0 <user_spi_read+0x80>)
 800347e:	f001 f861 	bl	8004544 <HAL_GPIO_WritePin>
    memcpy(reg_data, GRXBuffer+1, len);
 8003482:	490a      	ldr	r1, [pc, #40]	; (80034ac <user_spi_read+0x8c>)
 8003484:	88bb      	ldrh	r3, [r7, #4]
 8003486:	461a      	mov	r2, r3
 8003488:	6838      	ldr	r0, [r7, #0]
 800348a:	f006 ff99 	bl	800a3c0 <memcpy>
    return rslt;
 800348e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	20004cf8 	.word	0x20004cf8
 80034a0:	40020000 	.word	0x40020000
 80034a4:	20004a28 	.word	0x20004a28
 80034a8:	20004ca0 	.word	0x20004ca0
 80034ac:	20004a29 	.word	0x20004a29

080034b0 <user_spi_write>:

int8_t user_spi_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	603a      	str	r2, [r7, #0]
 80034b8:	461a      	mov	r2, r3
 80034ba:	4603      	mov	r3, r0
 80034bc:	71fb      	strb	r3, [r7, #7]
 80034be:	460b      	mov	r3, r1
 80034c0:	71bb      	strb	r3, [r7, #6]
 80034c2:	4613      	mov	r3, r2
 80034c4:	80bb      	strh	r3, [r7, #4]
    int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
 80034c6:	2300      	movs	r3, #0
 80034c8:	73fb      	strb	r3, [r7, #15]
     * | (don't care)        | (don't care) | HIGH        |
     * |---------------------+--------------|-------------|
     *
     */

    GTXBuffer[0] = reg_addr & 0x7F;
 80034ca:	79bb      	ldrb	r3, [r7, #6]
 80034cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034d0:	b2da      	uxtb	r2, r3
 80034d2:	4b14      	ldr	r3, [pc, #80]	; (8003524 <user_spi_write+0x74>)
 80034d4:	701a      	strb	r2, [r3, #0]
    memcpy(&GTXBuffer[1], reg_data, len);
 80034d6:	88bb      	ldrh	r3, [r7, #4]
 80034d8:	461a      	mov	r2, r3
 80034da:	6839      	ldr	r1, [r7, #0]
 80034dc:	4812      	ldr	r0, [pc, #72]	; (8003528 <user_spi_write+0x78>)
 80034de:	f006 ff6f 	bl	800a3c0 <memcpy>

    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80034e2:	2200      	movs	r2, #0
 80034e4:	2104      	movs	r1, #4
 80034e6:	4811      	ldr	r0, [pc, #68]	; (800352c <user_spi_write+0x7c>)
 80034e8:	f001 f82c 	bl	8004544 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi4, GTXBuffer, len+1, 1000);
 80034ec:	88bb      	ldrh	r3, [r7, #4]
 80034ee:	3301      	adds	r3, #1
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034f6:	490b      	ldr	r1, [pc, #44]	; (8003524 <user_spi_write+0x74>)
 80034f8:	480d      	ldr	r0, [pc, #52]	; (8003530 <user_spi_write+0x80>)
 80034fa:	f002 fd08 	bl	8005f0e <HAL_SPI_Transmit>
    while(hspi4.State == HAL_SPI_STATE_BUSY);
 80034fe:	bf00      	nop
 8003500:	4b0b      	ldr	r3, [pc, #44]	; (8003530 <user_spi_write+0x80>)
 8003502:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d0f9      	beq.n	8003500 <user_spi_write+0x50>
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 800350c:	2201      	movs	r2, #1
 800350e:	2104      	movs	r1, #4
 8003510:	4806      	ldr	r0, [pc, #24]	; (800352c <user_spi_write+0x7c>)
 8003512:	f001 f817 	bl	8004544 <HAL_GPIO_WritePin>

    return rslt;
 8003516:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800351a:	4618      	mov	r0, r3
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	20004cf8 	.word	0x20004cf8
 8003528:	20004cf9 	.word	0x20004cf9
 800352c:	40020000 	.word	0x40020000
 8003530:	20004ca0 	.word	0x20004ca0

08003534 <user_i2c_read>:

int8_t user_i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af02      	add	r7, sp, #8
 800353a:	603a      	str	r2, [r7, #0]
 800353c:	461a      	mov	r2, r3
 800353e:	4603      	mov	r3, r0
 8003540:	71fb      	strb	r3, [r7, #7]
 8003542:	460b      	mov	r3, r1
 8003544:	71bb      	strb	r3, [r7, #6]
 8003546:	4613      	mov	r3, r2
 8003548:	80bb      	strh	r3, [r7, #4]
    int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
 800354a:	2300      	movs	r3, #0
 800354c:	73fb      	strb	r3, [r7, #15]
     * | Stop       | -                   |
     * |------------+---------------------|
     */


    rslt = HAL_I2C_Master_Transmit(&hi2c3, dev_id<<1, &reg_addr, 1, 1000);
 800354e:	79fb      	ldrb	r3, [r7, #7]
 8003550:	b29b      	uxth	r3, r3
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	b299      	uxth	r1, r3
 8003556:	1dba      	adds	r2, r7, #6
 8003558:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	2301      	movs	r3, #1
 8003560:	4816      	ldr	r0, [pc, #88]	; (80035bc <user_i2c_read+0x88>)
 8003562:	f001 f967 	bl	8004834 <HAL_I2C_Master_Transmit>
 8003566:	4603      	mov	r3, r0
 8003568:	73fb      	strb	r3, [r7, #15]
    while(hi2c3.State != HAL_I2C_STATE_READY);
 800356a:	bf00      	nop
 800356c:	4b13      	ldr	r3, [pc, #76]	; (80035bc <user_i2c_read+0x88>)
 800356e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b20      	cmp	r3, #32
 8003576:	d1f9      	bne.n	800356c <user_i2c_read+0x38>
    rslt = HAL_I2C_Master_Receive(&hi2c3, dev_id<<1, GRXBuffer, len, 1000);
 8003578:	79fb      	ldrb	r3, [r7, #7]
 800357a:	b29b      	uxth	r3, r3
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	b299      	uxth	r1, r3
 8003580:	88bb      	ldrh	r3, [r7, #4]
 8003582:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003586:	9200      	str	r2, [sp, #0]
 8003588:	4a0d      	ldr	r2, [pc, #52]	; (80035c0 <user_i2c_read+0x8c>)
 800358a:	480c      	ldr	r0, [pc, #48]	; (80035bc <user_i2c_read+0x88>)
 800358c:	f001 fa50 	bl	8004a30 <HAL_I2C_Master_Receive>
 8003590:	4603      	mov	r3, r0
 8003592:	73fb      	strb	r3, [r7, #15]
    while(hi2c3.State != HAL_I2C_STATE_READY);
 8003594:	bf00      	nop
 8003596:	4b09      	ldr	r3, [pc, #36]	; (80035bc <user_i2c_read+0x88>)
 8003598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b20      	cmp	r3, #32
 80035a0:	d1f9      	bne.n	8003596 <user_i2c_read+0x62>
    memcpy(reg_data, GRXBuffer, len);
 80035a2:	88bb      	ldrh	r3, [r7, #4]
 80035a4:	461a      	mov	r2, r3
 80035a6:	4906      	ldr	r1, [pc, #24]	; (80035c0 <user_i2c_read+0x8c>)
 80035a8:	6838      	ldr	r0, [r7, #0]
 80035aa:	f006 ff09 	bl	800a3c0 <memcpy>
    return rslt;
 80035ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	200049d4 	.word	0x200049d4
 80035c0:	20004a28 	.word	0x20004a28

080035c4 <user_i2c_write>:

int8_t user_i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af02      	add	r7, sp, #8
 80035ca:	603a      	str	r2, [r7, #0]
 80035cc:	461a      	mov	r2, r3
 80035ce:	4603      	mov	r3, r0
 80035d0:	71fb      	strb	r3, [r7, #7]
 80035d2:	460b      	mov	r3, r1
 80035d4:	71bb      	strb	r3, [r7, #6]
 80035d6:	4613      	mov	r3, r2
 80035d8:	80bb      	strh	r3, [r7, #4]
    int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
 80035da:	2300      	movs	r3, #0
 80035dc:	73fb      	strb	r3, [r7, #15]
     * |------------+---------------------|
     */



    GTXBuffer[0] = reg_addr;
 80035de:	4a13      	ldr	r2, [pc, #76]	; (800362c <user_i2c_write+0x68>)
 80035e0:	79bb      	ldrb	r3, [r7, #6]
 80035e2:	7013      	strb	r3, [r2, #0]
    memcpy(&GTXBuffer[1], reg_data, len);
 80035e4:	88bb      	ldrh	r3, [r7, #4]
 80035e6:	461a      	mov	r2, r3
 80035e8:	6839      	ldr	r1, [r7, #0]
 80035ea:	4811      	ldr	r0, [pc, #68]	; (8003630 <user_i2c_write+0x6c>)
 80035ec:	f006 fee8 	bl	800a3c0 <memcpy>
    rslt = HAL_I2C_Master_Transmit(&hi2c3, dev_id<<1, GTXBuffer, len+1, 1000);
 80035f0:	79fb      	ldrb	r3, [r7, #7]
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	b299      	uxth	r1, r3
 80035f8:	88bb      	ldrh	r3, [r7, #4]
 80035fa:	3301      	adds	r3, #1
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003602:	9200      	str	r2, [sp, #0]
 8003604:	4a09      	ldr	r2, [pc, #36]	; (800362c <user_i2c_write+0x68>)
 8003606:	480b      	ldr	r0, [pc, #44]	; (8003634 <user_i2c_write+0x70>)
 8003608:	f001 f914 	bl	8004834 <HAL_I2C_Master_Transmit>
 800360c:	4603      	mov	r3, r0
 800360e:	73fb      	strb	r3, [r7, #15]
//    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
//    HAL_SPI_Transmit(&hspi4, GTXBuffer, len+1, 1000);
//    while(hspi4.State == HAL_SPI_STATE_BUSY);
//    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
    while(hi2c3.State != HAL_I2C_STATE_READY);
 8003610:	bf00      	nop
 8003612:	4b08      	ldr	r3, [pc, #32]	; (8003634 <user_i2c_write+0x70>)
 8003614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b20      	cmp	r3, #32
 800361c:	d1f9      	bne.n	8003612 <user_i2c_write+0x4e>

    return rslt;
 800361e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	20004cf8 	.word	0x20004cf8
 8003630:	20004cf9 	.word	0x20004cf9
 8003634:	200049d4 	.word	0x200049d4

08003638 <bme680_start>:

void bme680_start(struct bme680_dev * gas_sensor){
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]

/* You may assign a chip select identifier to be handled later */

/* Set the temperature, pressure and humidity settings */
gas_sensor->tph_sett.os_hum = BME680_OS_2X;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
gas_sensor->tph_sett.os_pres = BME680_OS_4X;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2203      	movs	r2, #3
 800364c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
gas_sensor->tph_sett.os_temp = BME680_OS_8X;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2204      	movs	r2, #4
 8003654:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
gas_sensor->tph_sett.filter = BME680_FILTER_SIZE_3;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2202      	movs	r2, #2
 800365c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
/* Set the remaining gas sensor settings and link the heating profile */
gas_sensor->gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
/* Create a ramp heat waveform in 3 steps */
gas_sensor->gas_sett.heatr_temp = 320; /* degree Celsius */
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800366e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
gas_sensor->gas_sett.heatr_dur = 150; /* milliseconds */
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2296      	movs	r2, #150	; 0x96
 8003676:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

/* Select the power mode */
/* Must be set before writing the sensor configuration */
gas_sensor->power_mode = BME680_FORCED_MODE;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

/* Set the required sensor settings needed */
uint8_t set_required_settings;
set_required_settings = BME680_OST_SEL | BME680_OSP_SEL | BME680_OSH_SEL | BME680_GAS_SENSOR_SEL | BME680_FILTER_SEL;
 8003682:	23df      	movs	r3, #223	; 0xdf
 8003684:	73fb      	strb	r3, [r7, #15]


/* Set the desired sensor configuration */
rslt = bme680_set_sensor_settings(set_required_settings,gas_sensor);
 8003686:	7bfb      	ldrb	r3, [r7, #15]
 8003688:	b29b      	uxth	r3, r3
 800368a:	6879      	ldr	r1, [r7, #4]
 800368c:	4618      	mov	r0, r3
 800368e:	f7fd fdd1 	bl	8001234 <bme680_set_sensor_settings>
 8003692:	4603      	mov	r3, r0
 8003694:	461a      	mov	r2, r3
 8003696:	4b06      	ldr	r3, [pc, #24]	; (80036b0 <bme680_start+0x78>)
 8003698:	701a      	strb	r2, [r3, #0]




/* Set the power mode */
rslt = bme680_set_sensor_mode(gas_sensor);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7fd ff9c 	bl	80015d8 <bme680_set_sensor_mode>
 80036a0:	4603      	mov	r3, r0
 80036a2:	461a      	mov	r2, r3
 80036a4:	4b02      	ldr	r3, [pc, #8]	; (80036b0 <bme680_start+0x78>)
 80036a6:	701a      	strb	r2, [r3, #0]
}
 80036a8:	bf00      	nop
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	20000098 	.word	0x20000098

080036b4 <StartSensorTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSensorTask */
void StartSensorTask(void *argument)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	osStatus_t status;
  set_senosr_struct(&gas_sensor, 0, 20);
 80036bc:	2214      	movs	r2, #20
 80036be:	2100      	movs	r1, #0
 80036c0:	481e      	ldr	r0, [pc, #120]	; (800373c <StartSensorTask+0x88>)
 80036c2:	f7ff fe51 	bl	8003368 <set_senosr_struct>
  //osDelay(500/portTICK_RATE_MS);
  rslt = bme680_init(&gas_sensor);
 80036c6:	481d      	ldr	r0, [pc, #116]	; (800373c <StartSensorTask+0x88>)
 80036c8:	f7fd fc74 	bl	8000fb4 <bme680_init>
 80036cc:	4603      	mov	r3, r0
 80036ce:	461a      	mov	r2, r3
 80036d0:	4b1b      	ldr	r3, [pc, #108]	; (8003740 <StartSensorTask+0x8c>)
 80036d2:	701a      	strb	r2, [r3, #0]
  uint16_t meas_period = 180;
 80036d4:	23b4      	movs	r3, #180	; 0xb4
 80036d6:	81fb      	strh	r3, [r7, #14]
  bme680_get_profile_dur(&meas_period, &gas_sensor);
 80036d8:	f107 030e 	add.w	r3, r7, #14
 80036dc:	4917      	ldr	r1, [pc, #92]	; (800373c <StartSensorTask+0x88>)
 80036de:	4618      	mov	r0, r3
 80036e0:	f7fd ffde 	bl	80016a0 <bme680_get_profile_dur>
  //HAL_Delay(meas_period);
  bme680_start(&gas_sensor);
 80036e4:	4815      	ldr	r0, [pc, #84]	; (800373c <StartSensorTask+0x88>)
 80036e6:	f7ff ffa7 	bl	8003638 <bme680_start>
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 80036ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036ee:	4815      	ldr	r0, [pc, #84]	; (8003744 <StartSensorTask+0x90>)
 80036f0:	f000 ff41 	bl	8004576 <HAL_GPIO_TogglePin>
	  //osDelay(meas_period/portTICK_RATE_MS);
	  //osMutexAcquire(myMutex01Handle, 1000);
	  osMutexAcquire(myMutex01Handle, 100);
 80036f4:	4b14      	ldr	r3, [pc, #80]	; (8003748 <StartSensorTask+0x94>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2164      	movs	r1, #100	; 0x64
 80036fa:	4618      	mov	r0, r3
 80036fc:	f003 fc7b 	bl	8006ff6 <osMutexAcquire>
	  rslt = bme680_get_sensor_data(&gas_sensor_data, &gas_sensor);
 8003700:	490e      	ldr	r1, [pc, #56]	; (800373c <StartSensorTask+0x88>)
 8003702:	4812      	ldr	r0, [pc, #72]	; (800374c <StartSensorTask+0x98>)
 8003704:	f7fe f832 	bl	800176c <bme680_get_sensor_data>
 8003708:	4603      	mov	r3, r0
 800370a:	461a      	mov	r2, r3
 800370c:	4b0c      	ldr	r3, [pc, #48]	; (8003740 <StartSensorTask+0x8c>)
 800370e:	701a      	strb	r2, [r3, #0]
	  if (gas_sensor.power_mode == BME680_FORCED_MODE)
 8003710:	4b0a      	ldr	r3, [pc, #40]	; (800373c <StartSensorTask+0x88>)
 8003712:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003716:	2b01      	cmp	r3, #1
 8003718:	d106      	bne.n	8003728 <StartSensorTask+0x74>
	  {
		  rslt = bme680_set_sensor_mode(&gas_sensor);
 800371a:	4808      	ldr	r0, [pc, #32]	; (800373c <StartSensorTask+0x88>)
 800371c:	f7fd ff5c 	bl	80015d8 <bme680_set_sensor_mode>
 8003720:	4603      	mov	r3, r0
 8003722:	461a      	mov	r2, r3
 8003724:	4b06      	ldr	r3, [pc, #24]	; (8003740 <StartSensorTask+0x8c>)
 8003726:	701a      	strb	r2, [r3, #0]
	  }
	  osMutexRelease(myMutex01Handle);
 8003728:	4b07      	ldr	r3, [pc, #28]	; (8003748 <StartSensorTask+0x94>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4618      	mov	r0, r3
 800372e:	f003 fcad 	bl	800708c <osMutexRelease>
	  //osMutexRelease(myMutex01Handle);
	  vTaskDelay(1000/portTICK_RATE_MS);
 8003732:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003736:	f004 feef 	bl	8008518 <vTaskDelay>
	  HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 800373a:	e7d6      	b.n	80036ea <StartSensorTask+0x36>
 800373c:	20004c3c 	.word	0x20004c3c
 8003740:	20000098 	.word	0x20000098
 8003744:	40020c00 	.word	0x40020c00
 8003748:	20004f54 	.word	0x20004f54
 800374c:	20004c28 	.word	0x20004c28

08003750 <StartDisplayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void *argument)
{
 8003750:	b5b0      	push	{r4, r5, r7, lr}
 8003752:	b08c      	sub	sp, #48	; 0x30
 8003754:	af02      	add	r7, sp, #8
 8003756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
	//DEV_Module_Exit();
//	int i = 0;
	DEV_Module_Init();
 8003758:	f7fe fe96 	bl	8002488 <DEV_Module_Init>
    EPD_2IN13BC_Init();
 800375c:	f7ff fa4d 	bl	8002bfa <EPD_2IN13BC_Init>
    EPD_2IN13BC_Clear();
 8003760:	f7ff fa7a 	bl	8002c58 <EPD_2IN13BC_Clear>
    osDelay(500/portTICK_RATE_MS);
 8003764:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003768:	f003 fb77 	bl	8006e5a <osDelay>

    UWORD Imagesize = ((EPD_2IN13BC_WIDTH % 8 == 0)? (EPD_2IN13BC_WIDTH / 8 ): (EPD_2IN13BC_WIDTH / 8 + 1)) * EPD_2IN13BC_HEIGHT;
 800376c:	f640 23c4 	movw	r3, #2756	; 0xac4
 8003770:	84fb      	strh	r3, [r7, #38]	; 0x26
	if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL)
 8003772:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003774:	4618      	mov	r0, r3
 8003776:	f006 fe1b 	bl	800a3b0 <malloc>
 800377a:	4603      	mov	r3, r0
 800377c:	461a      	mov	r2, r3
 800377e:	4b82      	ldr	r3, [pc, #520]	; (8003988 <StartDisplayTask+0x238>)
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	4b81      	ldr	r3, [pc, #516]	; (8003988 <StartDisplayTask+0x238>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <StartDisplayTask+0x3e>
	{
		Error_Handler();
 800378a:	f000 f94b 	bl	8003a24 <Error_Handler>
	}
	if((RYImage = (UBYTE *)malloc(Imagesize)) == NULL)
 800378e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003790:	4618      	mov	r0, r3
 8003792:	f006 fe0d 	bl	800a3b0 <malloc>
 8003796:	4603      	mov	r3, r0
 8003798:	461a      	mov	r2, r3
 800379a:	4b7c      	ldr	r3, [pc, #496]	; (800398c <StartDisplayTask+0x23c>)
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	4b7b      	ldr	r3, [pc, #492]	; (800398c <StartDisplayTask+0x23c>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <StartDisplayTask+0x5a>
	{
		Error_Handler();
 80037a6:	f000 f93d 	bl	8003a24 <Error_Handler>
	}
	Paint_NewImage(BlackImage, EPD_2IN13BC_WIDTH, EPD_2IN13BC_HEIGHT, 270, WHITE);
 80037aa:	4b77      	ldr	r3, [pc, #476]	; (8003988 <StartDisplayTask+0x238>)
 80037ac:	6818      	ldr	r0, [r3, #0]
 80037ae:	23ff      	movs	r3, #255	; 0xff
 80037b0:	9300      	str	r3, [sp, #0]
 80037b2:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80037b6:	22d4      	movs	r2, #212	; 0xd4
 80037b8:	2168      	movs	r1, #104	; 0x68
 80037ba:	f7fe fe7f 	bl	80024bc <Paint_NewImage>
	Paint_NewImage(RYImage, EPD_2IN13BC_WIDTH, EPD_2IN13BC_HEIGHT, 270, WHITE);
 80037be:	4b73      	ldr	r3, [pc, #460]	; (800398c <StartDisplayTask+0x23c>)
 80037c0:	6818      	ldr	r0, [r3, #0]
 80037c2:	23ff      	movs	r3, #255	; 0xff
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80037ca:	22d4      	movs	r2, #212	; 0xd4
 80037cc:	2168      	movs	r1, #104	; 0x68
 80037ce:	f7fe fe75 	bl	80024bc <Paint_NewImage>
	Paint_SelectImage(BlackImage);
 80037d2:	4b6d      	ldr	r3, [pc, #436]	; (8003988 <StartDisplayTask+0x238>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fe fec6 	bl	8002568 <Paint_SelectImage>
	Paint_Clear(WHITE);
 80037dc:	20ff      	movs	r0, #255	; 0xff
 80037de:	f7ff f81f 	bl	8002820 <Paint_Clear>
	Paint_SelectImage(RYImage);
 80037e2:	4b6a      	ldr	r3, [pc, #424]	; (800398c <StartDisplayTask+0x23c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fe febe 	bl	8002568 <Paint_SelectImage>
	float temp, hum, press = 0;
 80037ec:	f04f 0300 	mov.w	r3, #0
 80037f0:	623b      	str	r3, [r7, #32]
	char buf[10];
//	Paint_Clear(WHITE);
  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(myMutex01Handle, 100);
 80037f2:	4b67      	ldr	r3, [pc, #412]	; (8003990 <StartDisplayTask+0x240>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2164      	movs	r1, #100	; 0x64
 80037f8:	4618      	mov	r0, r3
 80037fa:	f003 fbfc 	bl	8006ff6 <osMutexAcquire>
	  temp = gas_sensor_data.temperature/100.0;
 80037fe:	4b65      	ldr	r3, [pc, #404]	; (8003994 <StartDisplayTask+0x244>)
 8003800:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003804:	4618      	mov	r0, r3
 8003806:	f7fc fe8d 	bl	8000524 <__aeabi_i2d>
 800380a:	f04f 0200 	mov.w	r2, #0
 800380e:	4b62      	ldr	r3, [pc, #392]	; (8003998 <StartDisplayTask+0x248>)
 8003810:	f7fd f81c 	bl	800084c <__aeabi_ddiv>
 8003814:	4602      	mov	r2, r0
 8003816:	460b      	mov	r3, r1
 8003818:	4610      	mov	r0, r2
 800381a:	4619      	mov	r1, r3
 800381c:	f7fd f9ae 	bl	8000b7c <__aeabi_d2f>
 8003820:	4603      	mov	r3, r0
 8003822:	61fb      	str	r3, [r7, #28]
	  hum = gas_sensor_data.humidity/1000.0;
 8003824:	4b5b      	ldr	r3, [pc, #364]	; (8003994 <StartDisplayTask+0x244>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	4618      	mov	r0, r3
 800382a:	f7fc fe6b 	bl	8000504 <__aeabi_ui2d>
 800382e:	f04f 0200 	mov.w	r2, #0
 8003832:	4b5a      	ldr	r3, [pc, #360]	; (800399c <StartDisplayTask+0x24c>)
 8003834:	f7fd f80a 	bl	800084c <__aeabi_ddiv>
 8003838:	4602      	mov	r2, r0
 800383a:	460b      	mov	r3, r1
 800383c:	4610      	mov	r0, r2
 800383e:	4619      	mov	r1, r3
 8003840:	f7fd f99c 	bl	8000b7c <__aeabi_d2f>
 8003844:	4603      	mov	r3, r0
 8003846:	61bb      	str	r3, [r7, #24]
	  press = gas_sensor_data.pressure/100.0;
 8003848:	4b52      	ldr	r3, [pc, #328]	; (8003994 <StartDisplayTask+0x244>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	4618      	mov	r0, r3
 800384e:	f7fc fe59 	bl	8000504 <__aeabi_ui2d>
 8003852:	f04f 0200 	mov.w	r2, #0
 8003856:	4b50      	ldr	r3, [pc, #320]	; (8003998 <StartDisplayTask+0x248>)
 8003858:	f7fc fff8 	bl	800084c <__aeabi_ddiv>
 800385c:	4602      	mov	r2, r0
 800385e:	460b      	mov	r3, r1
 8003860:	4610      	mov	r0, r2
 8003862:	4619      	mov	r1, r3
 8003864:	f7fd f98a 	bl	8000b7c <__aeabi_d2f>
 8003868:	4603      	mov	r3, r0
 800386a:	623b      	str	r3, [r7, #32]
	  osMutexRelease(myMutex01Handle);
 800386c:	4b48      	ldr	r3, [pc, #288]	; (8003990 <StartDisplayTask+0x240>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4618      	mov	r0, r3
 8003872:	f003 fc0b 	bl	800708c <osMutexRelease>

//	  i++;
	  Paint_SelectImage(BlackImage);
 8003876:	4b44      	ldr	r3, [pc, #272]	; (8003988 <StartDisplayTask+0x238>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4618      	mov	r0, r3
 800387c:	f7fe fe74 	bl	8002568 <Paint_SelectImage>
	  Paint_Clear(WHITE);
 8003880:	20ff      	movs	r0, #255	; 0xff
 8003882:	f7fe ffcd 	bl	8002820 <Paint_Clear>
	  Paint_DrawString_EN(5, 5, "Temperatura: ", &Font16, WHITE, BLACK);
 8003886:	2300      	movs	r3, #0
 8003888:	9301      	str	r3, [sp, #4]
 800388a:	23ff      	movs	r3, #255	; 0xff
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	4b44      	ldr	r3, [pc, #272]	; (80039a0 <StartDisplayTask+0x250>)
 8003890:	4a44      	ldr	r2, [pc, #272]	; (80039a4 <StartDisplayTask+0x254>)
 8003892:	2105      	movs	r1, #5
 8003894:	2005      	movs	r0, #5
 8003896:	f7ff f8d7 	bl	8002a48 <Paint_DrawString_EN>

	  Paint_DrawString_EN(5, 25, "Wilgotnosc: ", &Font16, WHITE, BLACK);
 800389a:	2300      	movs	r3, #0
 800389c:	9301      	str	r3, [sp, #4]
 800389e:	23ff      	movs	r3, #255	; 0xff
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	4b3f      	ldr	r3, [pc, #252]	; (80039a0 <StartDisplayTask+0x250>)
 80038a4:	4a40      	ldr	r2, [pc, #256]	; (80039a8 <StartDisplayTask+0x258>)
 80038a6:	2119      	movs	r1, #25
 80038a8:	2005      	movs	r0, #5
 80038aa:	f7ff f8cd 	bl	8002a48 <Paint_DrawString_EN>

	  Paint_DrawString_EN(5, 45, "Cisnienie: ", &Font16, WHITE, BLACK);
 80038ae:	2300      	movs	r3, #0
 80038b0:	9301      	str	r3, [sp, #4]
 80038b2:	23ff      	movs	r3, #255	; 0xff
 80038b4:	9300      	str	r3, [sp, #0]
 80038b6:	4b3a      	ldr	r3, [pc, #232]	; (80039a0 <StartDisplayTask+0x250>)
 80038b8:	4a3c      	ldr	r2, [pc, #240]	; (80039ac <StartDisplayTask+0x25c>)
 80038ba:	212d      	movs	r1, #45	; 0x2d
 80038bc:	2005      	movs	r0, #5
 80038be:	f7ff f8c3 	bl	8002a48 <Paint_DrawString_EN>

	  Paint_SelectImage(RYImage);
 80038c2:	4b32      	ldr	r3, [pc, #200]	; (800398c <StartDisplayTask+0x23c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7fe fe4e 	bl	8002568 <Paint_SelectImage>
	  Paint_Clear(WHITE);
 80038cc:	20ff      	movs	r0, #255	; 0xff
 80038ce:	f7fe ffa7 	bl	8002820 <Paint_Clear>
//	  Paint_DrawNum(160, 5, 1, &Font16, WHITE, RED);
	  gcvt(temp, 4, buf);
 80038d2:	69f8      	ldr	r0, [r7, #28]
 80038d4:	f7fc fe38 	bl	8000548 <__aeabi_f2d>
 80038d8:	4604      	mov	r4, r0
 80038da:	460d      	mov	r5, r1
 80038dc:	f107 030c 	add.w	r3, r7, #12
 80038e0:	4619      	mov	r1, r3
 80038e2:	2004      	movs	r0, #4
 80038e4:	ec45 4b10 	vmov	d0, r4, r5
 80038e8:	f006 fd14 	bl	800a314 <gcvt>
	  Paint_DrawString_EN(140, 5, buf, &Font16, WHITE, RED);
 80038ec:	f107 020c 	add.w	r2, r7, #12
 80038f0:	2300      	movs	r3, #0
 80038f2:	9301      	str	r3, [sp, #4]
 80038f4:	23ff      	movs	r3, #255	; 0xff
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	4b29      	ldr	r3, [pc, #164]	; (80039a0 <StartDisplayTask+0x250>)
 80038fa:	2105      	movs	r1, #5
 80038fc:	208c      	movs	r0, #140	; 0x8c
 80038fe:	f7ff f8a3 	bl	8002a48 <Paint_DrawString_EN>
	  gcvt(hum, 4, buf);
 8003902:	69b8      	ldr	r0, [r7, #24]
 8003904:	f7fc fe20 	bl	8000548 <__aeabi_f2d>
 8003908:	4604      	mov	r4, r0
 800390a:	460d      	mov	r5, r1
 800390c:	f107 030c 	add.w	r3, r7, #12
 8003910:	4619      	mov	r1, r3
 8003912:	2004      	movs	r0, #4
 8003914:	ec45 4b10 	vmov	d0, r4, r5
 8003918:	f006 fcfc 	bl	800a314 <gcvt>
	  Paint_DrawString_EN(140, 25, buf, &Font16, WHITE, RED);
 800391c:	f107 020c 	add.w	r2, r7, #12
 8003920:	2300      	movs	r3, #0
 8003922:	9301      	str	r3, [sp, #4]
 8003924:	23ff      	movs	r3, #255	; 0xff
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	4b1d      	ldr	r3, [pc, #116]	; (80039a0 <StartDisplayTask+0x250>)
 800392a:	2119      	movs	r1, #25
 800392c:	208c      	movs	r0, #140	; 0x8c
 800392e:	f7ff f88b 	bl	8002a48 <Paint_DrawString_EN>
	  gcvt(press, 4, buf);
 8003932:	6a38      	ldr	r0, [r7, #32]
 8003934:	f7fc fe08 	bl	8000548 <__aeabi_f2d>
 8003938:	4604      	mov	r4, r0
 800393a:	460d      	mov	r5, r1
 800393c:	f107 030c 	add.w	r3, r7, #12
 8003940:	4619      	mov	r1, r3
 8003942:	2004      	movs	r0, #4
 8003944:	ec45 4b10 	vmov	d0, r4, r5
 8003948:	f006 fce4 	bl	800a314 <gcvt>
	  Paint_DrawString_EN(140, 45, buf, &Font16, WHITE, RED);
 800394c:	f107 020c 	add.w	r2, r7, #12
 8003950:	2300      	movs	r3, #0
 8003952:	9301      	str	r3, [sp, #4]
 8003954:	23ff      	movs	r3, #255	; 0xff
 8003956:	9300      	str	r3, [sp, #0]
 8003958:	4b11      	ldr	r3, [pc, #68]	; (80039a0 <StartDisplayTask+0x250>)
 800395a:	212d      	movs	r1, #45	; 0x2d
 800395c:	208c      	movs	r0, #140	; 0x8c
 800395e:	f7ff f873 	bl	8002a48 <Paint_DrawString_EN>

	  EPD_2IN13BC_Display(BlackImage, RYImage);
 8003962:	4b09      	ldr	r3, [pc, #36]	; (8003988 <StartDisplayTask+0x238>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a09      	ldr	r2, [pc, #36]	; (800398c <StartDisplayTask+0x23c>)
 8003968:	6812      	ldr	r2, [r2, #0]
 800396a:	4611      	mov	r1, r2
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff f9ba 	bl	8002ce6 <EPD_2IN13BC_Display>

//	  //EPD_2in13bc_test();
//	  //DEV_Module_Exit();
	  HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 8003972:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003976:	480e      	ldr	r0, [pc, #56]	; (80039b0 <StartDisplayTask+0x260>)
 8003978:	f000 fdfd 	bl	8004576 <HAL_GPIO_TogglePin>
	  vTaskDelay(30000/portTICK_RATE_MS);
 800397c:	f247 5030 	movw	r0, #30000	; 0x7530
 8003980:	f004 fdca 	bl	8008518 <vTaskDelay>
  {
 8003984:	e735      	b.n	80037f2 <StartDisplayTask+0xa2>
 8003986:	bf00      	nop
 8003988:	20004c9c 	.word	0x20004c9c
 800398c:	20004c94 	.word	0x20004c94
 8003990:	20004f54 	.word	0x20004f54
 8003994:	20004c28 	.word	0x20004c28
 8003998:	40590000 	.word	0x40590000
 800399c:	408f4000 	.word	0x408f4000
 80039a0:	20000000 	.word	0x20000000
 80039a4:	0800cf74 	.word	0x0800cf74
 80039a8:	0800cf84 	.word	0x0800cf84
 80039ac:	0800cf94 	.word	0x0800cf94
 80039b0:	40020c00 	.word	0x40020c00

080039b4 <StartLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLedTask */
void StartLedTask(void *argument)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLedTask */
	osThreadState_t a, b;
  /* Infinite loop */
  for(;;)
  {
	a = osThreadGetState(SensorTaskHandle);
 80039bc:	4b0e      	ldr	r3, [pc, #56]	; (80039f8 <StartLedTask+0x44>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f003 f9ed 	bl	8006da0 <osThreadGetState>
 80039c6:	60f8      	str	r0, [r7, #12]
	if(a == osThreadTerminated)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2b04      	cmp	r3, #4
 80039cc:	d104      	bne.n	80039d8 <StartLedTask+0x24>
	{
		osThreadResume(SensorTaskHandle);
 80039ce:	4b0a      	ldr	r3, [pc, #40]	; (80039f8 <StartLedTask+0x44>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f003 fa20 	bl	8006e18 <osThreadResume>
	}
	b = osThreadGetState(DisplayTaskHandle);
 80039d8:	4b08      	ldr	r3, [pc, #32]	; (80039fc <StartLedTask+0x48>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4618      	mov	r0, r3
 80039de:	f003 f9df 	bl	8006da0 <osThreadGetState>
 80039e2:	60b8      	str	r0, [r7, #8]
    HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80039e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039e8:	4805      	ldr	r0, [pc, #20]	; (8003a00 <StartLedTask+0x4c>)
 80039ea:	f000 fdc4 	bl	8004576 <HAL_GPIO_TogglePin>
    vTaskDelay(0);
 80039ee:	2000      	movs	r0, #0
 80039f0:	f004 fd92 	bl	8008518 <vTaskDelay>
	a = osThreadGetState(SensorTaskHandle);
 80039f4:	e7e2      	b.n	80039bc <StartLedTask+0x8>
 80039f6:	bf00      	nop
 80039f8:	200049d0 	.word	0x200049d0
 80039fc:	20004ef8 	.word	0x20004ef8
 8003a00:	40020c00 	.word	0x40020c00

08003a04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a14:	d101      	bne.n	8003a1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003a16:	f000 fad3 	bl	8003fc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003a1a:	bf00      	nop
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a28:	b672      	cpsid	i
}
 8003a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8003a2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003a30:	4803      	ldr	r0, [pc, #12]	; (8003a40 <Error_Handler+0x1c>)
 8003a32:	f000 fda0 	bl	8004576 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8003a36:	2064      	movs	r0, #100	; 0x64
 8003a38:	f000 fae2 	bl	8004000 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8003a3c:	e7f6      	b.n	8003a2c <Error_Handler+0x8>
 8003a3e:	bf00      	nop
 8003a40:	40020c00 	.word	0x40020c00

08003a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	607b      	str	r3, [r7, #4]
 8003a4e:	4b12      	ldr	r3, [pc, #72]	; (8003a98 <HAL_MspInit+0x54>)
 8003a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a52:	4a11      	ldr	r2, [pc, #68]	; (8003a98 <HAL_MspInit+0x54>)
 8003a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a58:	6453      	str	r3, [r2, #68]	; 0x44
 8003a5a:	4b0f      	ldr	r3, [pc, #60]	; (8003a98 <HAL_MspInit+0x54>)
 8003a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a62:	607b      	str	r3, [r7, #4]
 8003a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a66:	2300      	movs	r3, #0
 8003a68:	603b      	str	r3, [r7, #0]
 8003a6a:	4b0b      	ldr	r3, [pc, #44]	; (8003a98 <HAL_MspInit+0x54>)
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6e:	4a0a      	ldr	r2, [pc, #40]	; (8003a98 <HAL_MspInit+0x54>)
 8003a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a74:	6413      	str	r3, [r2, #64]	; 0x40
 8003a76:	4b08      	ldr	r3, [pc, #32]	; (8003a98 <HAL_MspInit+0x54>)
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a7e:	603b      	str	r3, [r7, #0]
 8003a80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a82:	2200      	movs	r2, #0
 8003a84:	210f      	movs	r1, #15
 8003a86:	f06f 0001 	mvn.w	r0, #1
 8003a8a:	f000 fb95 	bl	80041b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a8e:	bf00      	nop
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	40023800 	.word	0x40023800

08003a9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b08a      	sub	sp, #40	; 0x28
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aa4:	f107 0314 	add.w	r3, r7, #20
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]
 8003aac:	605a      	str	r2, [r3, #4]
 8003aae:	609a      	str	r2, [r3, #8]
 8003ab0:	60da      	str	r2, [r3, #12]
 8003ab2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a29      	ldr	r2, [pc, #164]	; (8003b60 <HAL_I2C_MspInit+0xc4>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d14b      	bne.n	8003b56 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003abe:	2300      	movs	r3, #0
 8003ac0:	613b      	str	r3, [r7, #16]
 8003ac2:	4b28      	ldr	r3, [pc, #160]	; (8003b64 <HAL_I2C_MspInit+0xc8>)
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac6:	4a27      	ldr	r2, [pc, #156]	; (8003b64 <HAL_I2C_MspInit+0xc8>)
 8003ac8:	f043 0304 	orr.w	r3, r3, #4
 8003acc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ace:	4b25      	ldr	r3, [pc, #148]	; (8003b64 <HAL_I2C_MspInit+0xc8>)
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad2:	f003 0304 	and.w	r3, r3, #4
 8003ad6:	613b      	str	r3, [r7, #16]
 8003ad8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ada:	2300      	movs	r3, #0
 8003adc:	60fb      	str	r3, [r7, #12]
 8003ade:	4b21      	ldr	r3, [pc, #132]	; (8003b64 <HAL_I2C_MspInit+0xc8>)
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae2:	4a20      	ldr	r2, [pc, #128]	; (8003b64 <HAL_I2C_MspInit+0xc8>)
 8003ae4:	f043 0301 	orr.w	r3, r3, #1
 8003ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8003aea:	4b1e      	ldr	r3, [pc, #120]	; (8003b64 <HAL_I2C_MspInit+0xc8>)
 8003aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003af6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003afa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003afc:	2312      	movs	r3, #18
 8003afe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b00:	2301      	movs	r3, #1
 8003b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b04:	2303      	movs	r3, #3
 8003b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003b08:	2304      	movs	r3, #4
 8003b0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b0c:	f107 0314 	add.w	r3, r7, #20
 8003b10:	4619      	mov	r1, r3
 8003b12:	4815      	ldr	r0, [pc, #84]	; (8003b68 <HAL_I2C_MspInit+0xcc>)
 8003b14:	f000 fb7a 	bl	800420c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003b18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b1e:	2312      	movs	r3, #18
 8003b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b22:	2301      	movs	r3, #1
 8003b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b26:	2303      	movs	r3, #3
 8003b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003b2a:	2304      	movs	r3, #4
 8003b2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b2e:	f107 0314 	add.w	r3, r7, #20
 8003b32:	4619      	mov	r1, r3
 8003b34:	480d      	ldr	r0, [pc, #52]	; (8003b6c <HAL_I2C_MspInit+0xd0>)
 8003b36:	f000 fb69 	bl	800420c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60bb      	str	r3, [r7, #8]
 8003b3e:	4b09      	ldr	r3, [pc, #36]	; (8003b64 <HAL_I2C_MspInit+0xc8>)
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	4a08      	ldr	r2, [pc, #32]	; (8003b64 <HAL_I2C_MspInit+0xc8>)
 8003b44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b48:	6413      	str	r3, [r2, #64]	; 0x40
 8003b4a:	4b06      	ldr	r3, [pc, #24]	; (8003b64 <HAL_I2C_MspInit+0xc8>)
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b52:	60bb      	str	r3, [r7, #8]
 8003b54:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003b56:	bf00      	nop
 8003b58:	3728      	adds	r7, #40	; 0x28
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	40005c00 	.word	0x40005c00
 8003b64:	40023800 	.word	0x40023800
 8003b68:	40020800 	.word	0x40020800
 8003b6c:	40020000 	.word	0x40020000

08003b70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b08c      	sub	sp, #48	; 0x30
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b78:	f107 031c 	add.w	r3, r7, #28
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	605a      	str	r2, [r3, #4]
 8003b82:	609a      	str	r2, [r3, #8]
 8003b84:	60da      	str	r2, [r3, #12]
 8003b86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a32      	ldr	r2, [pc, #200]	; (8003c58 <HAL_SPI_MspInit+0xe8>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d12c      	bne.n	8003bec <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003b92:	2300      	movs	r3, #0
 8003b94:	61bb      	str	r3, [r7, #24]
 8003b96:	4b31      	ldr	r3, [pc, #196]	; (8003c5c <HAL_SPI_MspInit+0xec>)
 8003b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9a:	4a30      	ldr	r2, [pc, #192]	; (8003c5c <HAL_SPI_MspInit+0xec>)
 8003b9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ba2:	4b2e      	ldr	r3, [pc, #184]	; (8003c5c <HAL_SPI_MspInit+0xec>)
 8003ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003baa:	61bb      	str	r3, [r7, #24]
 8003bac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bae:	2300      	movs	r3, #0
 8003bb0:	617b      	str	r3, [r7, #20]
 8003bb2:	4b2a      	ldr	r3, [pc, #168]	; (8003c5c <HAL_SPI_MspInit+0xec>)
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb6:	4a29      	ldr	r2, [pc, #164]	; (8003c5c <HAL_SPI_MspInit+0xec>)
 8003bb8:	f043 0301 	orr.w	r3, r3, #1
 8003bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8003bbe:	4b27      	ldr	r3, [pc, #156]	; (8003c5c <HAL_SPI_MspInit+0xec>)
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8003bca:	23e0      	movs	r3, #224	; 0xe0
 8003bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bce:	2302      	movs	r3, #2
 8003bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003bda:	2305      	movs	r3, #5
 8003bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bde:	f107 031c 	add.w	r3, r7, #28
 8003be2:	4619      	mov	r1, r3
 8003be4:	481e      	ldr	r0, [pc, #120]	; (8003c60 <HAL_SPI_MspInit+0xf0>)
 8003be6:	f000 fb11 	bl	800420c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8003bea:	e031      	b.n	8003c50 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI4)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a1c      	ldr	r2, [pc, #112]	; (8003c64 <HAL_SPI_MspInit+0xf4>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d12c      	bne.n	8003c50 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	613b      	str	r3, [r7, #16]
 8003bfa:	4b18      	ldr	r3, [pc, #96]	; (8003c5c <HAL_SPI_MspInit+0xec>)
 8003bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfe:	4a17      	ldr	r2, [pc, #92]	; (8003c5c <HAL_SPI_MspInit+0xec>)
 8003c00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c04:	6453      	str	r3, [r2, #68]	; 0x44
 8003c06:	4b15      	ldr	r3, [pc, #84]	; (8003c5c <HAL_SPI_MspInit+0xec>)
 8003c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c0e:	613b      	str	r3, [r7, #16]
 8003c10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c12:	2300      	movs	r3, #0
 8003c14:	60fb      	str	r3, [r7, #12]
 8003c16:	4b11      	ldr	r3, [pc, #68]	; (8003c5c <HAL_SPI_MspInit+0xec>)
 8003c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1a:	4a10      	ldr	r2, [pc, #64]	; (8003c5c <HAL_SPI_MspInit+0xec>)
 8003c1c:	f043 0310 	orr.w	r3, r3, #16
 8003c20:	6313      	str	r3, [r2, #48]	; 0x30
 8003c22:	4b0e      	ldr	r3, [pc, #56]	; (8003c5c <HAL_SPI_MspInit+0xec>)
 8003c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c26:	f003 0310 	and.w	r3, r3, #16
 8003c2a:	60fb      	str	r3, [r7, #12]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_12;
 8003c2e:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8003c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c34:	2302      	movs	r3, #2
 8003c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003c40:	2305      	movs	r3, #5
 8003c42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c44:	f107 031c 	add.w	r3, r7, #28
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4807      	ldr	r0, [pc, #28]	; (8003c68 <HAL_SPI_MspInit+0xf8>)
 8003c4c:	f000 fade 	bl	800420c <HAL_GPIO_Init>
}
 8003c50:	bf00      	nop
 8003c52:	3730      	adds	r7, #48	; 0x30
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	40013000 	.word	0x40013000
 8003c5c:	40023800 	.word	0x40023800
 8003c60:	40020000 	.word	0x40020000
 8003c64:	40013400 	.word	0x40013400
 8003c68:	40021000 	.word	0x40021000

08003c6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b08c      	sub	sp, #48	; 0x30
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003c74:	2300      	movs	r3, #0
 8003c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	6879      	ldr	r1, [r7, #4]
 8003c80:	201c      	movs	r0, #28
 8003c82:	f000 fa99 	bl	80041b8 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003c86:	201c      	movs	r0, #28
 8003c88:	f000 fab2 	bl	80041f0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	60fb      	str	r3, [r7, #12]
 8003c90:	4b20      	ldr	r3, [pc, #128]	; (8003d14 <HAL_InitTick+0xa8>)
 8003c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c94:	4a1f      	ldr	r2, [pc, #124]	; (8003d14 <HAL_InitTick+0xa8>)
 8003c96:	f043 0301 	orr.w	r3, r3, #1
 8003c9a:	6413      	str	r3, [r2, #64]	; 0x40
 8003c9c:	4b1d      	ldr	r3, [pc, #116]	; (8003d14 <HAL_InitTick+0xa8>)
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003ca8:	f107 0210 	add.w	r2, r7, #16
 8003cac:	f107 0314 	add.w	r3, r7, #20
 8003cb0:	4611      	mov	r1, r2
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f002 f870 	bl	8005d98 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003cb8:	f002 f85a 	bl	8005d70 <HAL_RCC_GetPCLK1Freq>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc4:	4a14      	ldr	r2, [pc, #80]	; (8003d18 <HAL_InitTick+0xac>)
 8003cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cca:	0c9b      	lsrs	r3, r3, #18
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8003cd0:	4b12      	ldr	r3, [pc, #72]	; (8003d1c <HAL_InitTick+0xb0>)
 8003cd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003cd6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8003cd8:	4b10      	ldr	r3, [pc, #64]	; (8003d1c <HAL_InitTick+0xb0>)
 8003cda:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003cde:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8003ce0:	4a0e      	ldr	r2, [pc, #56]	; (8003d1c <HAL_InitTick+0xb0>)
 8003ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce4:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8003ce6:	4b0d      	ldr	r3, [pc, #52]	; (8003d1c <HAL_InitTick+0xb0>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cec:	4b0b      	ldr	r3, [pc, #44]	; (8003d1c <HAL_InitTick+0xb0>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8003cf2:	480a      	ldr	r0, [pc, #40]	; (8003d1c <HAL_InitTick+0xb0>)
 8003cf4:	f002 fcb4 	bl	8006660 <HAL_TIM_Base_Init>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d104      	bne.n	8003d08 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8003cfe:	4807      	ldr	r0, [pc, #28]	; (8003d1c <HAL_InitTick+0xb0>)
 8003d00:	f002 fd08 	bl	8006714 <HAL_TIM_Base_Start_IT>
 8003d04:	4603      	mov	r3, r0
 8003d06:	e000      	b.n	8003d0a <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3730      	adds	r7, #48	; 0x30
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	40023800 	.word	0x40023800
 8003d18:	431bde83 	.word	0x431bde83
 8003d1c:	20005158 	.word	0x20005158

08003d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d24:	e7fe      	b.n	8003d24 <NMI_Handler+0x4>
	...

08003d28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8003d2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d30:	4803      	ldr	r0, [pc, #12]	; (8003d40 <HardFault_Handler+0x18>)
 8003d32:	f000 fc20 	bl	8004576 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8003d36:	2064      	movs	r0, #100	; 0x64
 8003d38:	f000 f962 	bl	8004000 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8003d3c:	e7f6      	b.n	8003d2c <HardFault_Handler+0x4>
 8003d3e:	bf00      	nop
 8003d40:	40020c00 	.word	0x40020c00

08003d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d48:	e7fe      	b.n	8003d48 <MemManage_Handler+0x4>

08003d4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d4e:	e7fe      	b.n	8003d4e <BusFault_Handler+0x4>

08003d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d54:	e7fe      	b.n	8003d54 <UsageFault_Handler+0x4>

08003d56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d56:	b480      	push	{r7}
 8003d58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d5a:	bf00      	nop
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003d68:	4802      	ldr	r0, [pc, #8]	; (8003d74 <TIM2_IRQHandler+0x10>)
 8003d6a:	f002 fd35 	bl	80067d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003d6e:	bf00      	nop
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	20005158 	.word	0x20005158

08003d78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	af00      	add	r7, sp, #0
	return 1;
 8003d7c:	2301      	movs	r3, #1
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <_kill>:

int _kill(int pid, int sig)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003d92:	f006 fae3 	bl	800a35c <__errno>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2216      	movs	r2, #22
 8003d9a:	601a      	str	r2, [r3, #0]
	return -1;
 8003d9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3708      	adds	r7, #8
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <_exit>:

void _exit (int status)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003db0:	f04f 31ff 	mov.w	r1, #4294967295
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f7ff ffe7 	bl	8003d88 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003dba:	e7fe      	b.n	8003dba <_exit+0x12>

08003dbc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dc8:	2300      	movs	r3, #0
 8003dca:	617b      	str	r3, [r7, #20]
 8003dcc:	e00a      	b.n	8003de4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003dce:	f3af 8000 	nop.w
 8003dd2:	4601      	mov	r1, r0
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	60ba      	str	r2, [r7, #8]
 8003dda:	b2ca      	uxtb	r2, r1
 8003ddc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	3301      	adds	r3, #1
 8003de2:	617b      	str	r3, [r7, #20]
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	dbf0      	blt.n	8003dce <_read+0x12>
	}

return len;
 8003dec:	687b      	ldr	r3, [r7, #4]
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3718      	adds	r7, #24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b086      	sub	sp, #24
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	60f8      	str	r0, [r7, #12]
 8003dfe:	60b9      	str	r1, [r7, #8]
 8003e00:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e02:	2300      	movs	r3, #0
 8003e04:	617b      	str	r3, [r7, #20]
 8003e06:	e009      	b.n	8003e1c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	1c5a      	adds	r2, r3, #1
 8003e0c:	60ba      	str	r2, [r7, #8]
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	617b      	str	r3, [r7, #20]
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	dbf1      	blt.n	8003e08 <_write+0x12>
	}
	return len;
 8003e24:	687b      	ldr	r3, [r7, #4]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3718      	adds	r7, #24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <_close>:

int _close(int file)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
	return -1;
 8003e36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b083      	sub	sp, #12
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
 8003e4e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e56:	605a      	str	r2, [r3, #4]
	return 0;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <_isatty>:

int _isatty(int file)
{
 8003e66:	b480      	push	{r7}
 8003e68:	b083      	sub	sp, #12
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
	return 1;
 8003e6e:	2301      	movs	r3, #1
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
	return 0;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3714      	adds	r7, #20
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
	...

08003e98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ea0:	4a14      	ldr	r2, [pc, #80]	; (8003ef4 <_sbrk+0x5c>)
 8003ea2:	4b15      	ldr	r3, [pc, #84]	; (8003ef8 <_sbrk+0x60>)
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003eac:	4b13      	ldr	r3, [pc, #76]	; (8003efc <_sbrk+0x64>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d102      	bne.n	8003eba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003eb4:	4b11      	ldr	r3, [pc, #68]	; (8003efc <_sbrk+0x64>)
 8003eb6:	4a12      	ldr	r2, [pc, #72]	; (8003f00 <_sbrk+0x68>)
 8003eb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003eba:	4b10      	ldr	r3, [pc, #64]	; (8003efc <_sbrk+0x64>)
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d207      	bcs.n	8003ed8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ec8:	f006 fa48 	bl	800a35c <__errno>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	220c      	movs	r2, #12
 8003ed0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ed6:	e009      	b.n	8003eec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ed8:	4b08      	ldr	r3, [pc, #32]	; (8003efc <_sbrk+0x64>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ede:	4b07      	ldr	r3, [pc, #28]	; (8003efc <_sbrk+0x64>)
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	4a05      	ldr	r2, [pc, #20]	; (8003efc <_sbrk+0x64>)
 8003ee8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003eea:	68fb      	ldr	r3, [r7, #12]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3718      	adds	r7, #24
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	20020000 	.word	0x20020000
 8003ef8:	00000400 	.word	0x00000400
 8003efc:	2000009c 	.word	0x2000009c
 8003f00:	200051f8 	.word	0x200051f8

08003f04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f08:	4b06      	ldr	r3, [pc, #24]	; (8003f24 <SystemInit+0x20>)
 8003f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0e:	4a05      	ldr	r2, [pc, #20]	; (8003f24 <SystemInit+0x20>)
 8003f10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f18:	bf00      	nop
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	e000ed00 	.word	0xe000ed00

08003f28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003f28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003f2c:	480d      	ldr	r0, [pc, #52]	; (8003f64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003f2e:	490e      	ldr	r1, [pc, #56]	; (8003f68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003f30:	4a0e      	ldr	r2, [pc, #56]	; (8003f6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003f32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f34:	e002      	b.n	8003f3c <LoopCopyDataInit>

08003f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f3a:	3304      	adds	r3, #4

08003f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f40:	d3f9      	bcc.n	8003f36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f42:	4a0b      	ldr	r2, [pc, #44]	; (8003f70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003f44:	4c0b      	ldr	r4, [pc, #44]	; (8003f74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f48:	e001      	b.n	8003f4e <LoopFillZerobss>

08003f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f4c:	3204      	adds	r2, #4

08003f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f50:	d3fb      	bcc.n	8003f4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003f52:	f7ff ffd7 	bl	8003f04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f56:	f006 fa07 	bl	800a368 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f5a:	f7fe ff45 	bl	8002de8 <main>
  bx  lr    
 8003f5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003f60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003f64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f68:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8003f6c:	0800df04 	.word	0x0800df04
  ldr r2, =_sbss
 8003f70:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8003f74:	200051f4 	.word	0x200051f4

08003f78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f78:	e7fe      	b.n	8003f78 <ADC_IRQHandler>
	...

08003f7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f80:	4b0e      	ldr	r3, [pc, #56]	; (8003fbc <HAL_Init+0x40>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a0d      	ldr	r2, [pc, #52]	; (8003fbc <HAL_Init+0x40>)
 8003f86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f8c:	4b0b      	ldr	r3, [pc, #44]	; (8003fbc <HAL_Init+0x40>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a0a      	ldr	r2, [pc, #40]	; (8003fbc <HAL_Init+0x40>)
 8003f92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f98:	4b08      	ldr	r3, [pc, #32]	; (8003fbc <HAL_Init+0x40>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a07      	ldr	r2, [pc, #28]	; (8003fbc <HAL_Init+0x40>)
 8003f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fa4:	2003      	movs	r0, #3
 8003fa6:	f000 f8fc 	bl	80041a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003faa:	2000      	movs	r0, #0
 8003fac:	f7ff fe5e 	bl	8003c6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003fb0:	f7ff fd48 	bl	8003a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	40023c00 	.word	0x40023c00

08003fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003fc4:	4b06      	ldr	r3, [pc, #24]	; (8003fe0 <HAL_IncTick+0x20>)
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	461a      	mov	r2, r3
 8003fca:	4b06      	ldr	r3, [pc, #24]	; (8003fe4 <HAL_IncTick+0x24>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4413      	add	r3, r2
 8003fd0:	4a04      	ldr	r2, [pc, #16]	; (8003fe4 <HAL_IncTick+0x24>)
 8003fd2:	6013      	str	r3, [r2, #0]
}
 8003fd4:	bf00      	nop
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	20000010 	.word	0x20000010
 8003fe4:	200051a0 	.word	0x200051a0

08003fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
  return uwTick;
 8003fec:	4b03      	ldr	r3, [pc, #12]	; (8003ffc <HAL_GetTick+0x14>)
 8003fee:	681b      	ldr	r3, [r3, #0]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	200051a0 	.word	0x200051a0

08004000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004008:	f7ff ffee 	bl	8003fe8 <HAL_GetTick>
 800400c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004018:	d005      	beq.n	8004026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800401a:	4b0a      	ldr	r3, [pc, #40]	; (8004044 <HAL_Delay+0x44>)
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	461a      	mov	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	4413      	add	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004026:	bf00      	nop
 8004028:	f7ff ffde 	bl	8003fe8 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	429a      	cmp	r2, r3
 8004036:	d8f7      	bhi.n	8004028 <HAL_Delay+0x28>
  {
  }
}
 8004038:	bf00      	nop
 800403a:	bf00      	nop
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	20000010 	.word	0x20000010

08004048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f003 0307 	and.w	r3, r3, #7
 8004056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004058:	4b0c      	ldr	r3, [pc, #48]	; (800408c <__NVIC_SetPriorityGrouping+0x44>)
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004064:	4013      	ands	r3, r2
 8004066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004070:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800407a:	4a04      	ldr	r2, [pc, #16]	; (800408c <__NVIC_SetPriorityGrouping+0x44>)
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	60d3      	str	r3, [r2, #12]
}
 8004080:	bf00      	nop
 8004082:	3714      	adds	r7, #20
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	e000ed00 	.word	0xe000ed00

08004090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004094:	4b04      	ldr	r3, [pc, #16]	; (80040a8 <__NVIC_GetPriorityGrouping+0x18>)
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	0a1b      	lsrs	r3, r3, #8
 800409a:	f003 0307 	and.w	r3, r3, #7
}
 800409e:	4618      	mov	r0, r3
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	e000ed00 	.word	0xe000ed00

080040ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	4603      	mov	r3, r0
 80040b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	db0b      	blt.n	80040d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040be:	79fb      	ldrb	r3, [r7, #7]
 80040c0:	f003 021f 	and.w	r2, r3, #31
 80040c4:	4907      	ldr	r1, [pc, #28]	; (80040e4 <__NVIC_EnableIRQ+0x38>)
 80040c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ca:	095b      	lsrs	r3, r3, #5
 80040cc:	2001      	movs	r0, #1
 80040ce:	fa00 f202 	lsl.w	r2, r0, r2
 80040d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	e000e100 	.word	0xe000e100

080040e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	4603      	mov	r3, r0
 80040f0:	6039      	str	r1, [r7, #0]
 80040f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	db0a      	blt.n	8004112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	b2da      	uxtb	r2, r3
 8004100:	490c      	ldr	r1, [pc, #48]	; (8004134 <__NVIC_SetPriority+0x4c>)
 8004102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004106:	0112      	lsls	r2, r2, #4
 8004108:	b2d2      	uxtb	r2, r2
 800410a:	440b      	add	r3, r1
 800410c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004110:	e00a      	b.n	8004128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	b2da      	uxtb	r2, r3
 8004116:	4908      	ldr	r1, [pc, #32]	; (8004138 <__NVIC_SetPriority+0x50>)
 8004118:	79fb      	ldrb	r3, [r7, #7]
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	3b04      	subs	r3, #4
 8004120:	0112      	lsls	r2, r2, #4
 8004122:	b2d2      	uxtb	r2, r2
 8004124:	440b      	add	r3, r1
 8004126:	761a      	strb	r2, [r3, #24]
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr
 8004134:	e000e100 	.word	0xe000e100
 8004138:	e000ed00 	.word	0xe000ed00

0800413c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800413c:	b480      	push	{r7}
 800413e:	b089      	sub	sp, #36	; 0x24
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f003 0307 	and.w	r3, r3, #7
 800414e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	f1c3 0307 	rsb	r3, r3, #7
 8004156:	2b04      	cmp	r3, #4
 8004158:	bf28      	it	cs
 800415a:	2304      	movcs	r3, #4
 800415c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	3304      	adds	r3, #4
 8004162:	2b06      	cmp	r3, #6
 8004164:	d902      	bls.n	800416c <NVIC_EncodePriority+0x30>
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	3b03      	subs	r3, #3
 800416a:	e000      	b.n	800416e <NVIC_EncodePriority+0x32>
 800416c:	2300      	movs	r3, #0
 800416e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004170:	f04f 32ff 	mov.w	r2, #4294967295
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	fa02 f303 	lsl.w	r3, r2, r3
 800417a:	43da      	mvns	r2, r3
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	401a      	ands	r2, r3
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004184:	f04f 31ff 	mov.w	r1, #4294967295
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	fa01 f303 	lsl.w	r3, r1, r3
 800418e:	43d9      	mvns	r1, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004194:	4313      	orrs	r3, r2
         );
}
 8004196:	4618      	mov	r0, r3
 8004198:	3724      	adds	r7, #36	; 0x24
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b082      	sub	sp, #8
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7ff ff4c 	bl	8004048 <__NVIC_SetPriorityGrouping>
}
 80041b0:	bf00      	nop
 80041b2:	3708      	adds	r7, #8
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	4603      	mov	r3, r0
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
 80041c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80041c6:	2300      	movs	r3, #0
 80041c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80041ca:	f7ff ff61 	bl	8004090 <__NVIC_GetPriorityGrouping>
 80041ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	68b9      	ldr	r1, [r7, #8]
 80041d4:	6978      	ldr	r0, [r7, #20]
 80041d6:	f7ff ffb1 	bl	800413c <NVIC_EncodePriority>
 80041da:	4602      	mov	r2, r0
 80041dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041e0:	4611      	mov	r1, r2
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7ff ff80 	bl	80040e8 <__NVIC_SetPriority>
}
 80041e8:	bf00      	nop
 80041ea:	3718      	adds	r7, #24
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	4603      	mov	r3, r0
 80041f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041fe:	4618      	mov	r0, r3
 8004200:	f7ff ff54 	bl	80040ac <__NVIC_EnableIRQ>
}
 8004204:	bf00      	nop
 8004206:	3708      	adds	r7, #8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800420c:	b480      	push	{r7}
 800420e:	b089      	sub	sp, #36	; 0x24
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004216:	2300      	movs	r3, #0
 8004218:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800421a:	2300      	movs	r3, #0
 800421c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800421e:	2300      	movs	r3, #0
 8004220:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004222:	2300      	movs	r3, #0
 8004224:	61fb      	str	r3, [r7, #28]
 8004226:	e159      	b.n	80044dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004228:	2201      	movs	r2, #1
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	fa02 f303 	lsl.w	r3, r2, r3
 8004230:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	4013      	ands	r3, r2
 800423a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	429a      	cmp	r2, r3
 8004242:	f040 8148 	bne.w	80044d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f003 0303 	and.w	r3, r3, #3
 800424e:	2b01      	cmp	r3, #1
 8004250:	d005      	beq.n	800425e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800425a:	2b02      	cmp	r3, #2
 800425c:	d130      	bne.n	80042c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	005b      	lsls	r3, r3, #1
 8004268:	2203      	movs	r2, #3
 800426a:	fa02 f303 	lsl.w	r3, r2, r3
 800426e:	43db      	mvns	r3, r3
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	4013      	ands	r3, r2
 8004274:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	68da      	ldr	r2, [r3, #12]
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	005b      	lsls	r3, r3, #1
 800427e:	fa02 f303 	lsl.w	r3, r2, r3
 8004282:	69ba      	ldr	r2, [r7, #24]
 8004284:	4313      	orrs	r3, r2
 8004286:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004294:	2201      	movs	r2, #1
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	fa02 f303 	lsl.w	r3, r2, r3
 800429c:	43db      	mvns	r3, r3
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	4013      	ands	r3, r2
 80042a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	091b      	lsrs	r3, r3, #4
 80042aa:	f003 0201 	and.w	r2, r3, #1
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	fa02 f303 	lsl.w	r3, r2, r3
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f003 0303 	and.w	r3, r3, #3
 80042c8:	2b03      	cmp	r3, #3
 80042ca:	d017      	beq.n	80042fc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	2203      	movs	r2, #3
 80042d8:	fa02 f303 	lsl.w	r3, r2, r3
 80042dc:	43db      	mvns	r3, r3
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	4013      	ands	r3, r2
 80042e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	689a      	ldr	r2, [r3, #8]
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	005b      	lsls	r3, r3, #1
 80042ec:	fa02 f303 	lsl.w	r3, r2, r3
 80042f0:	69ba      	ldr	r2, [r7, #24]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f003 0303 	and.w	r3, r3, #3
 8004304:	2b02      	cmp	r3, #2
 8004306:	d123      	bne.n	8004350 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	08da      	lsrs	r2, r3, #3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	3208      	adds	r2, #8
 8004310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004314:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	f003 0307 	and.w	r3, r3, #7
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	220f      	movs	r2, #15
 8004320:	fa02 f303 	lsl.w	r3, r2, r3
 8004324:	43db      	mvns	r3, r3
 8004326:	69ba      	ldr	r2, [r7, #24]
 8004328:	4013      	ands	r3, r2
 800432a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	691a      	ldr	r2, [r3, #16]
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	f003 0307 	and.w	r3, r3, #7
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	fa02 f303 	lsl.w	r3, r2, r3
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	4313      	orrs	r3, r2
 8004340:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	08da      	lsrs	r2, r3, #3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	3208      	adds	r2, #8
 800434a:	69b9      	ldr	r1, [r7, #24]
 800434c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	2203      	movs	r2, #3
 800435c:	fa02 f303 	lsl.w	r3, r2, r3
 8004360:	43db      	mvns	r3, r3
 8004362:	69ba      	ldr	r2, [r7, #24]
 8004364:	4013      	ands	r3, r2
 8004366:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f003 0203 	and.w	r2, r3, #3
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	fa02 f303 	lsl.w	r3, r2, r3
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	4313      	orrs	r3, r2
 800437c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	69ba      	ldr	r2, [r7, #24]
 8004382:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800438c:	2b00      	cmp	r3, #0
 800438e:	f000 80a2 	beq.w	80044d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004392:	2300      	movs	r3, #0
 8004394:	60fb      	str	r3, [r7, #12]
 8004396:	4b57      	ldr	r3, [pc, #348]	; (80044f4 <HAL_GPIO_Init+0x2e8>)
 8004398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439a:	4a56      	ldr	r2, [pc, #344]	; (80044f4 <HAL_GPIO_Init+0x2e8>)
 800439c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043a0:	6453      	str	r3, [r2, #68]	; 0x44
 80043a2:	4b54      	ldr	r3, [pc, #336]	; (80044f4 <HAL_GPIO_Init+0x2e8>)
 80043a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043aa:	60fb      	str	r3, [r7, #12]
 80043ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043ae:	4a52      	ldr	r2, [pc, #328]	; (80044f8 <HAL_GPIO_Init+0x2ec>)
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	089b      	lsrs	r3, r3, #2
 80043b4:	3302      	adds	r3, #2
 80043b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	f003 0303 	and.w	r3, r3, #3
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	220f      	movs	r2, #15
 80043c6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ca:	43db      	mvns	r3, r3
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	4013      	ands	r3, r2
 80043d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a49      	ldr	r2, [pc, #292]	; (80044fc <HAL_GPIO_Init+0x2f0>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d019      	beq.n	800440e <HAL_GPIO_Init+0x202>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a48      	ldr	r2, [pc, #288]	; (8004500 <HAL_GPIO_Init+0x2f4>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d013      	beq.n	800440a <HAL_GPIO_Init+0x1fe>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a47      	ldr	r2, [pc, #284]	; (8004504 <HAL_GPIO_Init+0x2f8>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d00d      	beq.n	8004406 <HAL_GPIO_Init+0x1fa>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a46      	ldr	r2, [pc, #280]	; (8004508 <HAL_GPIO_Init+0x2fc>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d007      	beq.n	8004402 <HAL_GPIO_Init+0x1f6>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a45      	ldr	r2, [pc, #276]	; (800450c <HAL_GPIO_Init+0x300>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d101      	bne.n	80043fe <HAL_GPIO_Init+0x1f2>
 80043fa:	2304      	movs	r3, #4
 80043fc:	e008      	b.n	8004410 <HAL_GPIO_Init+0x204>
 80043fe:	2307      	movs	r3, #7
 8004400:	e006      	b.n	8004410 <HAL_GPIO_Init+0x204>
 8004402:	2303      	movs	r3, #3
 8004404:	e004      	b.n	8004410 <HAL_GPIO_Init+0x204>
 8004406:	2302      	movs	r3, #2
 8004408:	e002      	b.n	8004410 <HAL_GPIO_Init+0x204>
 800440a:	2301      	movs	r3, #1
 800440c:	e000      	b.n	8004410 <HAL_GPIO_Init+0x204>
 800440e:	2300      	movs	r3, #0
 8004410:	69fa      	ldr	r2, [r7, #28]
 8004412:	f002 0203 	and.w	r2, r2, #3
 8004416:	0092      	lsls	r2, r2, #2
 8004418:	4093      	lsls	r3, r2
 800441a:	69ba      	ldr	r2, [r7, #24]
 800441c:	4313      	orrs	r3, r2
 800441e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004420:	4935      	ldr	r1, [pc, #212]	; (80044f8 <HAL_GPIO_Init+0x2ec>)
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	089b      	lsrs	r3, r3, #2
 8004426:	3302      	adds	r3, #2
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800442e:	4b38      	ldr	r3, [pc, #224]	; (8004510 <HAL_GPIO_Init+0x304>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	43db      	mvns	r3, r3
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	4013      	ands	r3, r2
 800443c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d003      	beq.n	8004452 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	4313      	orrs	r3, r2
 8004450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004452:	4a2f      	ldr	r2, [pc, #188]	; (8004510 <HAL_GPIO_Init+0x304>)
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004458:	4b2d      	ldr	r3, [pc, #180]	; (8004510 <HAL_GPIO_Init+0x304>)
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	43db      	mvns	r3, r3
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	4013      	ands	r3, r2
 8004466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d003      	beq.n	800447c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	4313      	orrs	r3, r2
 800447a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800447c:	4a24      	ldr	r2, [pc, #144]	; (8004510 <HAL_GPIO_Init+0x304>)
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004482:	4b23      	ldr	r3, [pc, #140]	; (8004510 <HAL_GPIO_Init+0x304>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	43db      	mvns	r3, r3
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	4013      	ands	r3, r2
 8004490:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044a6:	4a1a      	ldr	r2, [pc, #104]	; (8004510 <HAL_GPIO_Init+0x304>)
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044ac:	4b18      	ldr	r3, [pc, #96]	; (8004510 <HAL_GPIO_Init+0x304>)
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	43db      	mvns	r3, r3
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	4013      	ands	r3, r2
 80044ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d003      	beq.n	80044d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044d0:	4a0f      	ldr	r2, [pc, #60]	; (8004510 <HAL_GPIO_Init+0x304>)
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	3301      	adds	r3, #1
 80044da:	61fb      	str	r3, [r7, #28]
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	2b0f      	cmp	r3, #15
 80044e0:	f67f aea2 	bls.w	8004228 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044e4:	bf00      	nop
 80044e6:	bf00      	nop
 80044e8:	3724      	adds	r7, #36	; 0x24
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	40023800 	.word	0x40023800
 80044f8:	40013800 	.word	0x40013800
 80044fc:	40020000 	.word	0x40020000
 8004500:	40020400 	.word	0x40020400
 8004504:	40020800 	.word	0x40020800
 8004508:	40020c00 	.word	0x40020c00
 800450c:	40021000 	.word	0x40021000
 8004510:	40013c00 	.word	0x40013c00

08004514 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	460b      	mov	r3, r1
 800451e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	691a      	ldr	r2, [r3, #16]
 8004524:	887b      	ldrh	r3, [r7, #2]
 8004526:	4013      	ands	r3, r2
 8004528:	2b00      	cmp	r3, #0
 800452a:	d002      	beq.n	8004532 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800452c:	2301      	movs	r3, #1
 800452e:	73fb      	strb	r3, [r7, #15]
 8004530:	e001      	b.n	8004536 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004532:	2300      	movs	r3, #0
 8004534:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004536:	7bfb      	ldrb	r3, [r7, #15]
}
 8004538:	4618      	mov	r0, r3
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	460b      	mov	r3, r1
 800454e:	807b      	strh	r3, [r7, #2]
 8004550:	4613      	mov	r3, r2
 8004552:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004554:	787b      	ldrb	r3, [r7, #1]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800455a:	887a      	ldrh	r2, [r7, #2]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004560:	e003      	b.n	800456a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004562:	887b      	ldrh	r3, [r7, #2]
 8004564:	041a      	lsls	r2, r3, #16
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	619a      	str	r2, [r3, #24]
}
 800456a:	bf00      	nop
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004576:	b480      	push	{r7}
 8004578:	b085      	sub	sp, #20
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
 800457e:	460b      	mov	r3, r1
 8004580:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004588:	887a      	ldrh	r2, [r7, #2]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	4013      	ands	r3, r2
 800458e:	041a      	lsls	r2, r3, #16
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	43d9      	mvns	r1, r3
 8004594:	887b      	ldrh	r3, [r7, #2]
 8004596:	400b      	ands	r3, r1
 8004598:	431a      	orrs	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	619a      	str	r2, [r3, #24]
}
 800459e:	bf00      	nop
 80045a0:	3714      	adds	r7, #20
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
	...

080045ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e12b      	b.n	8004816 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d106      	bne.n	80045d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f7ff fa62 	bl	8003a9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2224      	movs	r2, #36	; 0x24
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 0201 	bic.w	r2, r2, #1
 80045ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800460e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004610:	f001 fbae 	bl	8005d70 <HAL_RCC_GetPCLK1Freq>
 8004614:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	4a81      	ldr	r2, [pc, #516]	; (8004820 <HAL_I2C_Init+0x274>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d807      	bhi.n	8004630 <HAL_I2C_Init+0x84>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	4a80      	ldr	r2, [pc, #512]	; (8004824 <HAL_I2C_Init+0x278>)
 8004624:	4293      	cmp	r3, r2
 8004626:	bf94      	ite	ls
 8004628:	2301      	movls	r3, #1
 800462a:	2300      	movhi	r3, #0
 800462c:	b2db      	uxtb	r3, r3
 800462e:	e006      	b.n	800463e <HAL_I2C_Init+0x92>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	4a7d      	ldr	r2, [pc, #500]	; (8004828 <HAL_I2C_Init+0x27c>)
 8004634:	4293      	cmp	r3, r2
 8004636:	bf94      	ite	ls
 8004638:	2301      	movls	r3, #1
 800463a:	2300      	movhi	r3, #0
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e0e7      	b.n	8004816 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	4a78      	ldr	r2, [pc, #480]	; (800482c <HAL_I2C_Init+0x280>)
 800464a:	fba2 2303 	umull	r2, r3, r2, r3
 800464e:	0c9b      	lsrs	r3, r3, #18
 8004650:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	430a      	orrs	r2, r1
 8004664:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	4a6a      	ldr	r2, [pc, #424]	; (8004820 <HAL_I2C_Init+0x274>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d802      	bhi.n	8004680 <HAL_I2C_Init+0xd4>
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	3301      	adds	r3, #1
 800467e:	e009      	b.n	8004694 <HAL_I2C_Init+0xe8>
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004686:	fb02 f303 	mul.w	r3, r2, r3
 800468a:	4a69      	ldr	r2, [pc, #420]	; (8004830 <HAL_I2C_Init+0x284>)
 800468c:	fba2 2303 	umull	r2, r3, r2, r3
 8004690:	099b      	lsrs	r3, r3, #6
 8004692:	3301      	adds	r3, #1
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	6812      	ldr	r2, [r2, #0]
 8004698:	430b      	orrs	r3, r1
 800469a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80046a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	495c      	ldr	r1, [pc, #368]	; (8004820 <HAL_I2C_Init+0x274>)
 80046b0:	428b      	cmp	r3, r1
 80046b2:	d819      	bhi.n	80046e8 <HAL_I2C_Init+0x13c>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	1e59      	subs	r1, r3, #1
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	fbb1 f3f3 	udiv	r3, r1, r3
 80046c2:	1c59      	adds	r1, r3, #1
 80046c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80046c8:	400b      	ands	r3, r1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00a      	beq.n	80046e4 <HAL_I2C_Init+0x138>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	1e59      	subs	r1, r3, #1
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	005b      	lsls	r3, r3, #1
 80046d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80046dc:	3301      	adds	r3, #1
 80046de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046e2:	e051      	b.n	8004788 <HAL_I2C_Init+0x1dc>
 80046e4:	2304      	movs	r3, #4
 80046e6:	e04f      	b.n	8004788 <HAL_I2C_Init+0x1dc>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d111      	bne.n	8004714 <HAL_I2C_Init+0x168>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	1e58      	subs	r0, r3, #1
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6859      	ldr	r1, [r3, #4]
 80046f8:	460b      	mov	r3, r1
 80046fa:	005b      	lsls	r3, r3, #1
 80046fc:	440b      	add	r3, r1
 80046fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004702:	3301      	adds	r3, #1
 8004704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004708:	2b00      	cmp	r3, #0
 800470a:	bf0c      	ite	eq
 800470c:	2301      	moveq	r3, #1
 800470e:	2300      	movne	r3, #0
 8004710:	b2db      	uxtb	r3, r3
 8004712:	e012      	b.n	800473a <HAL_I2C_Init+0x18e>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	1e58      	subs	r0, r3, #1
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6859      	ldr	r1, [r3, #4]
 800471c:	460b      	mov	r3, r1
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	440b      	add	r3, r1
 8004722:	0099      	lsls	r1, r3, #2
 8004724:	440b      	add	r3, r1
 8004726:	fbb0 f3f3 	udiv	r3, r0, r3
 800472a:	3301      	adds	r3, #1
 800472c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004730:	2b00      	cmp	r3, #0
 8004732:	bf0c      	ite	eq
 8004734:	2301      	moveq	r3, #1
 8004736:	2300      	movne	r3, #0
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <HAL_I2C_Init+0x196>
 800473e:	2301      	movs	r3, #1
 8004740:	e022      	b.n	8004788 <HAL_I2C_Init+0x1dc>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10e      	bne.n	8004768 <HAL_I2C_Init+0x1bc>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	1e58      	subs	r0, r3, #1
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6859      	ldr	r1, [r3, #4]
 8004752:	460b      	mov	r3, r1
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	440b      	add	r3, r1
 8004758:	fbb0 f3f3 	udiv	r3, r0, r3
 800475c:	3301      	adds	r3, #1
 800475e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004766:	e00f      	b.n	8004788 <HAL_I2C_Init+0x1dc>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	1e58      	subs	r0, r3, #1
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6859      	ldr	r1, [r3, #4]
 8004770:	460b      	mov	r3, r1
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	440b      	add	r3, r1
 8004776:	0099      	lsls	r1, r3, #2
 8004778:	440b      	add	r3, r1
 800477a:	fbb0 f3f3 	udiv	r3, r0, r3
 800477e:	3301      	adds	r3, #1
 8004780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004784:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004788:	6879      	ldr	r1, [r7, #4]
 800478a:	6809      	ldr	r1, [r1, #0]
 800478c:	4313      	orrs	r3, r2
 800478e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	69da      	ldr	r2, [r3, #28]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	431a      	orrs	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80047b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	6911      	ldr	r1, [r2, #16]
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	68d2      	ldr	r2, [r2, #12]
 80047c2:	4311      	orrs	r1, r2
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	6812      	ldr	r2, [r2, #0]
 80047c8:	430b      	orrs	r3, r1
 80047ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	695a      	ldr	r2, [r3, #20]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	431a      	orrs	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	430a      	orrs	r2, r1
 80047e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 0201 	orr.w	r2, r2, #1
 80047f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2220      	movs	r2, #32
 8004802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3710      	adds	r7, #16
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	000186a0 	.word	0x000186a0
 8004824:	001e847f 	.word	0x001e847f
 8004828:	003d08ff 	.word	0x003d08ff
 800482c:	431bde83 	.word	0x431bde83
 8004830:	10624dd3 	.word	0x10624dd3

08004834 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b088      	sub	sp, #32
 8004838:	af02      	add	r7, sp, #8
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	607a      	str	r2, [r7, #4]
 800483e:	461a      	mov	r2, r3
 8004840:	460b      	mov	r3, r1
 8004842:	817b      	strh	r3, [r7, #10]
 8004844:	4613      	mov	r3, r2
 8004846:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004848:	f7ff fbce 	bl	8003fe8 <HAL_GetTick>
 800484c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b20      	cmp	r3, #32
 8004858:	f040 80e0 	bne.w	8004a1c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	2319      	movs	r3, #25
 8004862:	2201      	movs	r2, #1
 8004864:	4970      	ldr	r1, [pc, #448]	; (8004a28 <HAL_I2C_Master_Transmit+0x1f4>)
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f000 fc58 	bl	800511c <I2C_WaitOnFlagUntilTimeout>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004872:	2302      	movs	r3, #2
 8004874:	e0d3      	b.n	8004a1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800487c:	2b01      	cmp	r3, #1
 800487e:	d101      	bne.n	8004884 <HAL_I2C_Master_Transmit+0x50>
 8004880:	2302      	movs	r3, #2
 8004882:	e0cc      	b.n	8004a1e <HAL_I2C_Master_Transmit+0x1ea>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b01      	cmp	r3, #1
 8004898:	d007      	beq.n	80048aa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f042 0201 	orr.w	r2, r2, #1
 80048a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2221      	movs	r2, #33	; 0x21
 80048be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2210      	movs	r2, #16
 80048c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	893a      	ldrh	r2, [r7, #8]
 80048da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e0:	b29a      	uxth	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	4a50      	ldr	r2, [pc, #320]	; (8004a2c <HAL_I2C_Master_Transmit+0x1f8>)
 80048ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80048ec:	8979      	ldrh	r1, [r7, #10]
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	6a3a      	ldr	r2, [r7, #32]
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f000 fac2 	bl	8004e7c <I2C_MasterRequestWrite>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d001      	beq.n	8004902 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e08d      	b.n	8004a1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004902:	2300      	movs	r3, #0
 8004904:	613b      	str	r3, [r7, #16]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	695b      	ldr	r3, [r3, #20]
 800490c:	613b      	str	r3, [r7, #16]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	613b      	str	r3, [r7, #16]
 8004916:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004918:	e066      	b.n	80049e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	6a39      	ldr	r1, [r7, #32]
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f000 fcd2 	bl	80052c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00d      	beq.n	8004946 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492e:	2b04      	cmp	r3, #4
 8004930:	d107      	bne.n	8004942 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004940:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e06b      	b.n	8004a1e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	781a      	ldrb	r2, [r3, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004956:	1c5a      	adds	r2, r3, #1
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004960:	b29b      	uxth	r3, r3
 8004962:	3b01      	subs	r3, #1
 8004964:	b29a      	uxth	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800496e:	3b01      	subs	r3, #1
 8004970:	b29a      	uxth	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	695b      	ldr	r3, [r3, #20]
 800497c:	f003 0304 	and.w	r3, r3, #4
 8004980:	2b04      	cmp	r3, #4
 8004982:	d11b      	bne.n	80049bc <HAL_I2C_Master_Transmit+0x188>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004988:	2b00      	cmp	r3, #0
 800498a:	d017      	beq.n	80049bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004990:	781a      	ldrb	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	1c5a      	adds	r2, r3, #1
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	3b01      	subs	r3, #1
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049b4:	3b01      	subs	r3, #1
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	6a39      	ldr	r1, [r7, #32]
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f000 fcc2 	bl	800534a <I2C_WaitOnBTFFlagUntilTimeout>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00d      	beq.n	80049e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d0:	2b04      	cmp	r3, #4
 80049d2:	d107      	bne.n	80049e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e01a      	b.n	8004a1e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d194      	bne.n	800491a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2220      	movs	r2, #32
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	e000      	b.n	8004a1e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004a1c:	2302      	movs	r3, #2
  }
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3718      	adds	r7, #24
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	00100002 	.word	0x00100002
 8004a2c:	ffff0000 	.word	0xffff0000

08004a30 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b08c      	sub	sp, #48	; 0x30
 8004a34:	af02      	add	r7, sp, #8
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	607a      	str	r2, [r7, #4]
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	817b      	strh	r3, [r7, #10]
 8004a40:	4613      	mov	r3, r2
 8004a42:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a44:	f7ff fad0 	bl	8003fe8 <HAL_GetTick>
 8004a48:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b20      	cmp	r3, #32
 8004a54:	f040 820b 	bne.w	8004e6e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	9300      	str	r3, [sp, #0]
 8004a5c:	2319      	movs	r3, #25
 8004a5e:	2201      	movs	r2, #1
 8004a60:	497c      	ldr	r1, [pc, #496]	; (8004c54 <HAL_I2C_Master_Receive+0x224>)
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f000 fb5a 	bl	800511c <I2C_WaitOnFlagUntilTimeout>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004a6e:	2302      	movs	r3, #2
 8004a70:	e1fe      	b.n	8004e70 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d101      	bne.n	8004a80 <HAL_I2C_Master_Receive+0x50>
 8004a7c:	2302      	movs	r3, #2
 8004a7e:	e1f7      	b.n	8004e70 <HAL_I2C_Master_Receive+0x440>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d007      	beq.n	8004aa6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f042 0201 	orr.w	r2, r2, #1
 8004aa4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ab4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2222      	movs	r2, #34	; 0x22
 8004aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2210      	movs	r2, #16
 8004ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	893a      	ldrh	r2, [r7, #8]
 8004ad6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	4a5c      	ldr	r2, [pc, #368]	; (8004c58 <HAL_I2C_Master_Receive+0x228>)
 8004ae6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004ae8:	8979      	ldrh	r1, [r7, #10]
 8004aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f000 fa46 	bl	8004f80 <I2C_MasterRequestRead>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d001      	beq.n	8004afe <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e1b8      	b.n	8004e70 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d113      	bne.n	8004b2e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b06:	2300      	movs	r3, #0
 8004b08:	623b      	str	r3, [r7, #32]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	695b      	ldr	r3, [r3, #20]
 8004b10:	623b      	str	r3, [r7, #32]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	623b      	str	r3, [r7, #32]
 8004b1a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b2a:	601a      	str	r2, [r3, #0]
 8004b2c:	e18c      	b.n	8004e48 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d11b      	bne.n	8004b6e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b46:	2300      	movs	r3, #0
 8004b48:	61fb      	str	r3, [r7, #28]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	61fb      	str	r3, [r7, #28]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	61fb      	str	r3, [r7, #28]
 8004b5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	e16c      	b.n	8004e48 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d11b      	bne.n	8004bae <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b84:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b96:	2300      	movs	r3, #0
 8004b98:	61bb      	str	r3, [r7, #24]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	61bb      	str	r3, [r7, #24]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	61bb      	str	r3, [r7, #24]
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	e14c      	b.n	8004e48 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004bbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	617b      	str	r3, [r7, #20]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	695b      	ldr	r3, [r3, #20]
 8004bc8:	617b      	str	r3, [r7, #20]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	617b      	str	r3, [r7, #20]
 8004bd2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004bd4:	e138      	b.n	8004e48 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bda:	2b03      	cmp	r3, #3
 8004bdc:	f200 80f1 	bhi.w	8004dc2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d123      	bne.n	8004c30 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f000 fbed 	bl	80053cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d001      	beq.n	8004bfc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e139      	b.n	8004e70 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	691a      	ldr	r2, [r3, #16]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c06:	b2d2      	uxtb	r2, r2
 8004c08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0e:	1c5a      	adds	r2, r3, #1
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	3b01      	subs	r3, #1
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c2e:	e10b      	b.n	8004e48 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d14e      	bne.n	8004cd6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3e:	2200      	movs	r2, #0
 8004c40:	4906      	ldr	r1, [pc, #24]	; (8004c5c <HAL_I2C_Master_Receive+0x22c>)
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f000 fa6a 	bl	800511c <I2C_WaitOnFlagUntilTimeout>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d008      	beq.n	8004c60 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e10e      	b.n	8004e70 <HAL_I2C_Master_Receive+0x440>
 8004c52:	bf00      	nop
 8004c54:	00100002 	.word	0x00100002
 8004c58:	ffff0000 	.word	0xffff0000
 8004c5c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	691a      	ldr	r2, [r3, #16]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7a:	b2d2      	uxtb	r2, r2
 8004c7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c82:	1c5a      	adds	r2, r3, #1
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	691a      	ldr	r2, [r3, #16]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	b2d2      	uxtb	r2, r2
 8004cae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb4:	1c5a      	adds	r2, r3, #1
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cd4:	e0b8      	b.n	8004e48 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cdc:	2200      	movs	r2, #0
 8004cde:	4966      	ldr	r1, [pc, #408]	; (8004e78 <HAL_I2C_Master_Receive+0x448>)
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f000 fa1b 	bl	800511c <I2C_WaitOnFlagUntilTimeout>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d001      	beq.n	8004cf0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e0bf      	b.n	8004e70 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	691a      	ldr	r2, [r3, #16]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0a:	b2d2      	uxtb	r2, r2
 8004d0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d12:	1c5a      	adds	r2, r3, #1
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d34:	9300      	str	r3, [sp, #0]
 8004d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d38:	2200      	movs	r2, #0
 8004d3a:	494f      	ldr	r1, [pc, #316]	; (8004e78 <HAL_I2C_Master_Receive+0x448>)
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f000 f9ed 	bl	800511c <I2C_WaitOnFlagUntilTimeout>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e091      	b.n	8004e70 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	691a      	ldr	r2, [r3, #16]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d66:	b2d2      	uxtb	r2, r2
 8004d68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6e:	1c5a      	adds	r2, r3, #1
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	3b01      	subs	r3, #1
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	691a      	ldr	r2, [r3, #16]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	b2d2      	uxtb	r2, r2
 8004d9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da0:	1c5a      	adds	r2, r3, #1
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004daa:	3b01      	subs	r3, #1
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	3b01      	subs	r3, #1
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004dc0:	e042      	b.n	8004e48 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f000 fb00 	bl	80053cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e04c      	b.n	8004e70 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	691a      	ldr	r2, [r3, #16]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de0:	b2d2      	uxtb	r2, r2
 8004de2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de8:	1c5a      	adds	r2, r3, #1
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df2:	3b01      	subs	r3, #1
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	3b01      	subs	r3, #1
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	f003 0304 	and.w	r3, r3, #4
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	d118      	bne.n	8004e48 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	691a      	ldr	r2, [r3, #16]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e20:	b2d2      	uxtb	r2, r2
 8004e22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e28:	1c5a      	adds	r2, r3, #1
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e32:	3b01      	subs	r3, #1
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	3b01      	subs	r3, #1
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f47f aec2 	bne.w	8004bd6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2220      	movs	r2, #32
 8004e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	e000      	b.n	8004e70 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004e6e:	2302      	movs	r3, #2
  }
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3728      	adds	r7, #40	; 0x28
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	00010004 	.word	0x00010004

08004e7c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b088      	sub	sp, #32
 8004e80:	af02      	add	r7, sp, #8
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	607a      	str	r2, [r7, #4]
 8004e86:	603b      	str	r3, [r7, #0]
 8004e88:	460b      	mov	r3, r1
 8004e8a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e90:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	2b08      	cmp	r3, #8
 8004e96:	d006      	beq.n	8004ea6 <I2C_MasterRequestWrite+0x2a>
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d003      	beq.n	8004ea6 <I2C_MasterRequestWrite+0x2a>
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ea4:	d108      	bne.n	8004eb8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004eb4:	601a      	str	r2, [r3, #0]
 8004eb6:	e00b      	b.n	8004ed0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ebc:	2b12      	cmp	r3, #18
 8004ebe:	d107      	bne.n	8004ed0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ece:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	9300      	str	r3, [sp, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f000 f91d 	bl	800511c <I2C_WaitOnFlagUntilTimeout>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00d      	beq.n	8004f04 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ef6:	d103      	bne.n	8004f00 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004efe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e035      	b.n	8004f70 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f0c:	d108      	bne.n	8004f20 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f0e:	897b      	ldrh	r3, [r7, #10]
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	461a      	mov	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f1c:	611a      	str	r2, [r3, #16]
 8004f1e:	e01b      	b.n	8004f58 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004f20:	897b      	ldrh	r3, [r7, #10]
 8004f22:	11db      	asrs	r3, r3, #7
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	f003 0306 	and.w	r3, r3, #6
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	f063 030f 	orn	r3, r3, #15
 8004f30:	b2da      	uxtb	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	490e      	ldr	r1, [pc, #56]	; (8004f78 <I2C_MasterRequestWrite+0xfc>)
 8004f3e:	68f8      	ldr	r0, [r7, #12]
 8004f40:	f000 f943 	bl	80051ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d001      	beq.n	8004f4e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e010      	b.n	8004f70 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004f4e:	897b      	ldrh	r3, [r7, #10]
 8004f50:	b2da      	uxtb	r2, r3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	4907      	ldr	r1, [pc, #28]	; (8004f7c <I2C_MasterRequestWrite+0x100>)
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f000 f933 	bl	80051ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d001      	beq.n	8004f6e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e000      	b.n	8004f70 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3718      	adds	r7, #24
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	00010008 	.word	0x00010008
 8004f7c:	00010002 	.word	0x00010002

08004f80 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b088      	sub	sp, #32
 8004f84:	af02      	add	r7, sp, #8
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	607a      	str	r2, [r7, #4]
 8004f8a:	603b      	str	r3, [r7, #0]
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f94:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004fa4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	2b08      	cmp	r3, #8
 8004faa:	d006      	beq.n	8004fba <I2C_MasterRequestRead+0x3a>
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d003      	beq.n	8004fba <I2C_MasterRequestRead+0x3a>
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004fb8:	d108      	bne.n	8004fcc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fc8:	601a      	str	r2, [r3, #0]
 8004fca:	e00b      	b.n	8004fe4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd0:	2b11      	cmp	r3, #17
 8004fd2:	d107      	bne.n	8004fe4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fe2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	9300      	str	r3, [sp, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	f000 f893 	bl	800511c <I2C_WaitOnFlagUntilTimeout>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00d      	beq.n	8005018 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800500a:	d103      	bne.n	8005014 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005012:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e079      	b.n	800510c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005020:	d108      	bne.n	8005034 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005022:	897b      	ldrh	r3, [r7, #10]
 8005024:	b2db      	uxtb	r3, r3
 8005026:	f043 0301 	orr.w	r3, r3, #1
 800502a:	b2da      	uxtb	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	611a      	str	r2, [r3, #16]
 8005032:	e05f      	b.n	80050f4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005034:	897b      	ldrh	r3, [r7, #10]
 8005036:	11db      	asrs	r3, r3, #7
 8005038:	b2db      	uxtb	r3, r3
 800503a:	f003 0306 	and.w	r3, r3, #6
 800503e:	b2db      	uxtb	r3, r3
 8005040:	f063 030f 	orn	r3, r3, #15
 8005044:	b2da      	uxtb	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	4930      	ldr	r1, [pc, #192]	; (8005114 <I2C_MasterRequestRead+0x194>)
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f000 f8b9 	bl	80051ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e054      	b.n	800510c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005062:	897b      	ldrh	r3, [r7, #10]
 8005064:	b2da      	uxtb	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	4929      	ldr	r1, [pc, #164]	; (8005118 <I2C_MasterRequestRead+0x198>)
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f000 f8a9 	bl	80051ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d001      	beq.n	8005082 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e044      	b.n	800510c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005082:	2300      	movs	r3, #0
 8005084:	613b      	str	r3, [r7, #16]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	613b      	str	r3, [r7, #16]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	613b      	str	r3, [r7, #16]
 8005096:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050a6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	9300      	str	r3, [sp, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050b4:	68f8      	ldr	r0, [r7, #12]
 80050b6:	f000 f831 	bl	800511c <I2C_WaitOnFlagUntilTimeout>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00d      	beq.n	80050dc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ce:	d103      	bne.n	80050d8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050d6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e017      	b.n	800510c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80050dc:	897b      	ldrh	r3, [r7, #10]
 80050de:	11db      	asrs	r3, r3, #7
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	f003 0306 	and.w	r3, r3, #6
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	f063 030e 	orn	r3, r3, #14
 80050ec:	b2da      	uxtb	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	4907      	ldr	r1, [pc, #28]	; (8005118 <I2C_MasterRequestRead+0x198>)
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f000 f865 	bl	80051ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d001      	beq.n	800510a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e000      	b.n	800510c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3718      	adds	r7, #24
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	00010008 	.word	0x00010008
 8005118:	00010002 	.word	0x00010002

0800511c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	603b      	str	r3, [r7, #0]
 8005128:	4613      	mov	r3, r2
 800512a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800512c:	e025      	b.n	800517a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005134:	d021      	beq.n	800517a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005136:	f7fe ff57 	bl	8003fe8 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	683a      	ldr	r2, [r7, #0]
 8005142:	429a      	cmp	r2, r3
 8005144:	d302      	bcc.n	800514c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d116      	bne.n	800517a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2220      	movs	r2, #32
 8005156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005166:	f043 0220 	orr.w	r2, r3, #32
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e023      	b.n	80051c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	0c1b      	lsrs	r3, r3, #16
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b01      	cmp	r3, #1
 8005182:	d10d      	bne.n	80051a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	43da      	mvns	r2, r3
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	4013      	ands	r3, r2
 8005190:	b29b      	uxth	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	bf0c      	ite	eq
 8005196:	2301      	moveq	r3, #1
 8005198:	2300      	movne	r3, #0
 800519a:	b2db      	uxtb	r3, r3
 800519c:	461a      	mov	r2, r3
 800519e:	e00c      	b.n	80051ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	43da      	mvns	r2, r3
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	4013      	ands	r3, r2
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	bf0c      	ite	eq
 80051b2:	2301      	moveq	r3, #1
 80051b4:	2300      	movne	r3, #0
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	461a      	mov	r2, r3
 80051ba:	79fb      	ldrb	r3, [r7, #7]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d0b6      	beq.n	800512e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b084      	sub	sp, #16
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	60f8      	str	r0, [r7, #12]
 80051d2:	60b9      	str	r1, [r7, #8]
 80051d4:	607a      	str	r2, [r7, #4]
 80051d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051d8:	e051      	b.n	800527e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	695b      	ldr	r3, [r3, #20]
 80051e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051e8:	d123      	bne.n	8005232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005202:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2220      	movs	r2, #32
 800520e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	f043 0204 	orr.w	r2, r3, #4
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e046      	b.n	80052c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005238:	d021      	beq.n	800527e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800523a:	f7fe fed5 	bl	8003fe8 <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	429a      	cmp	r2, r3
 8005248:	d302      	bcc.n	8005250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d116      	bne.n	800527e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2220      	movs	r2, #32
 800525a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526a:	f043 0220 	orr.w	r2, r3, #32
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e020      	b.n	80052c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	0c1b      	lsrs	r3, r3, #16
 8005282:	b2db      	uxtb	r3, r3
 8005284:	2b01      	cmp	r3, #1
 8005286:	d10c      	bne.n	80052a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	43da      	mvns	r2, r3
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	4013      	ands	r3, r2
 8005294:	b29b      	uxth	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	bf14      	ite	ne
 800529a:	2301      	movne	r3, #1
 800529c:	2300      	moveq	r3, #0
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	e00b      	b.n	80052ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	43da      	mvns	r2, r3
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	4013      	ands	r3, r2
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	bf14      	ite	ne
 80052b4:	2301      	movne	r3, #1
 80052b6:	2300      	moveq	r3, #0
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d18d      	bne.n	80051da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3710      	adds	r7, #16
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052d4:	e02d      	b.n	8005332 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	f000 f8ce 	bl	8005478 <I2C_IsAcknowledgeFailed>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e02d      	b.n	8005342 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ec:	d021      	beq.n	8005332 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ee:	f7fe fe7b 	bl	8003fe8 <HAL_GetTick>
 80052f2:	4602      	mov	r2, r0
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d302      	bcc.n	8005304 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d116      	bne.n	8005332 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2220      	movs	r2, #32
 800530e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531e:	f043 0220 	orr.w	r2, r3, #32
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e007      	b.n	8005342 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800533c:	2b80      	cmp	r3, #128	; 0x80
 800533e:	d1ca      	bne.n	80052d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800534a:	b580      	push	{r7, lr}
 800534c:	b084      	sub	sp, #16
 800534e:	af00      	add	r7, sp, #0
 8005350:	60f8      	str	r0, [r7, #12]
 8005352:	60b9      	str	r1, [r7, #8]
 8005354:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005356:	e02d      	b.n	80053b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f000 f88d 	bl	8005478 <I2C_IsAcknowledgeFailed>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e02d      	b.n	80053c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800536e:	d021      	beq.n	80053b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005370:	f7fe fe3a 	bl	8003fe8 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	429a      	cmp	r2, r3
 800537e:	d302      	bcc.n	8005386 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d116      	bne.n	80053b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2220      	movs	r2, #32
 8005390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a0:	f043 0220 	orr.w	r2, r3, #32
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e007      	b.n	80053c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	f003 0304 	and.w	r3, r3, #4
 80053be:	2b04      	cmp	r3, #4
 80053c0:	d1ca      	bne.n	8005358 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053d8:	e042      	b.n	8005460 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	695b      	ldr	r3, [r3, #20]
 80053e0:	f003 0310 	and.w	r3, r3, #16
 80053e4:	2b10      	cmp	r3, #16
 80053e6:	d119      	bne.n	800541c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f06f 0210 	mvn.w	r2, #16
 80053f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2220      	movs	r2, #32
 80053fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e029      	b.n	8005470 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800541c:	f7fe fde4 	bl	8003fe8 <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	429a      	cmp	r2, r3
 800542a:	d302      	bcc.n	8005432 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d116      	bne.n	8005460 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2220      	movs	r2, #32
 800543c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544c:	f043 0220 	orr.w	r2, r3, #32
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e007      	b.n	8005470 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800546a:	2b40      	cmp	r3, #64	; 0x40
 800546c:	d1b5      	bne.n	80053da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800548a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800548e:	d11b      	bne.n	80054c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005498:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2220      	movs	r2, #32
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b4:	f043 0204 	orr.w	r2, r3, #4
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e000      	b.n	80054ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
	...

080054d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b086      	sub	sp, #24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e264      	b.n	80059b4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0301 	and.w	r3, r3, #1
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d075      	beq.n	80055e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054f6:	4ba3      	ldr	r3, [pc, #652]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f003 030c 	and.w	r3, r3, #12
 80054fe:	2b04      	cmp	r3, #4
 8005500:	d00c      	beq.n	800551c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005502:	4ba0      	ldr	r3, [pc, #640]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800550a:	2b08      	cmp	r3, #8
 800550c:	d112      	bne.n	8005534 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800550e:	4b9d      	ldr	r3, [pc, #628]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005516:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800551a:	d10b      	bne.n	8005534 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800551c:	4b99      	ldr	r3, [pc, #612]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d05b      	beq.n	80055e0 <HAL_RCC_OscConfig+0x108>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d157      	bne.n	80055e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e23f      	b.n	80059b4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800553c:	d106      	bne.n	800554c <HAL_RCC_OscConfig+0x74>
 800553e:	4b91      	ldr	r3, [pc, #580]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a90      	ldr	r2, [pc, #576]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 8005544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005548:	6013      	str	r3, [r2, #0]
 800554a:	e01d      	b.n	8005588 <HAL_RCC_OscConfig+0xb0>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005554:	d10c      	bne.n	8005570 <HAL_RCC_OscConfig+0x98>
 8005556:	4b8b      	ldr	r3, [pc, #556]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a8a      	ldr	r2, [pc, #552]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 800555c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005560:	6013      	str	r3, [r2, #0]
 8005562:	4b88      	ldr	r3, [pc, #544]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a87      	ldr	r2, [pc, #540]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 8005568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800556c:	6013      	str	r3, [r2, #0]
 800556e:	e00b      	b.n	8005588 <HAL_RCC_OscConfig+0xb0>
 8005570:	4b84      	ldr	r3, [pc, #528]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a83      	ldr	r2, [pc, #524]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 8005576:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800557a:	6013      	str	r3, [r2, #0]
 800557c:	4b81      	ldr	r3, [pc, #516]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a80      	ldr	r2, [pc, #512]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 8005582:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005586:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d013      	beq.n	80055b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005590:	f7fe fd2a 	bl	8003fe8 <HAL_GetTick>
 8005594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005596:	e008      	b.n	80055aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005598:	f7fe fd26 	bl	8003fe8 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	2b64      	cmp	r3, #100	; 0x64
 80055a4:	d901      	bls.n	80055aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e204      	b.n	80059b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055aa:	4b76      	ldr	r3, [pc, #472]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d0f0      	beq.n	8005598 <HAL_RCC_OscConfig+0xc0>
 80055b6:	e014      	b.n	80055e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055b8:	f7fe fd16 	bl	8003fe8 <HAL_GetTick>
 80055bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055be:	e008      	b.n	80055d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055c0:	f7fe fd12 	bl	8003fe8 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	2b64      	cmp	r3, #100	; 0x64
 80055cc:	d901      	bls.n	80055d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e1f0      	b.n	80059b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055d2:	4b6c      	ldr	r3, [pc, #432]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d1f0      	bne.n	80055c0 <HAL_RCC_OscConfig+0xe8>
 80055de:	e000      	b.n	80055e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d063      	beq.n	80056b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055ee:	4b65      	ldr	r3, [pc, #404]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f003 030c 	and.w	r3, r3, #12
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00b      	beq.n	8005612 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055fa:	4b62      	ldr	r3, [pc, #392]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005602:	2b08      	cmp	r3, #8
 8005604:	d11c      	bne.n	8005640 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005606:	4b5f      	ldr	r3, [pc, #380]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d116      	bne.n	8005640 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005612:	4b5c      	ldr	r3, [pc, #368]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0302 	and.w	r3, r3, #2
 800561a:	2b00      	cmp	r3, #0
 800561c:	d005      	beq.n	800562a <HAL_RCC_OscConfig+0x152>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d001      	beq.n	800562a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e1c4      	b.n	80059b4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800562a:	4b56      	ldr	r3, [pc, #344]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	00db      	lsls	r3, r3, #3
 8005638:	4952      	ldr	r1, [pc, #328]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 800563a:	4313      	orrs	r3, r2
 800563c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800563e:	e03a      	b.n	80056b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d020      	beq.n	800568a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005648:	4b4f      	ldr	r3, [pc, #316]	; (8005788 <HAL_RCC_OscConfig+0x2b0>)
 800564a:	2201      	movs	r2, #1
 800564c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800564e:	f7fe fccb 	bl	8003fe8 <HAL_GetTick>
 8005652:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005654:	e008      	b.n	8005668 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005656:	f7fe fcc7 	bl	8003fe8 <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	2b02      	cmp	r3, #2
 8005662:	d901      	bls.n	8005668 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	e1a5      	b.n	80059b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005668:	4b46      	ldr	r3, [pc, #280]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0302 	and.w	r3, r3, #2
 8005670:	2b00      	cmp	r3, #0
 8005672:	d0f0      	beq.n	8005656 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005674:	4b43      	ldr	r3, [pc, #268]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	00db      	lsls	r3, r3, #3
 8005682:	4940      	ldr	r1, [pc, #256]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 8005684:	4313      	orrs	r3, r2
 8005686:	600b      	str	r3, [r1, #0]
 8005688:	e015      	b.n	80056b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800568a:	4b3f      	ldr	r3, [pc, #252]	; (8005788 <HAL_RCC_OscConfig+0x2b0>)
 800568c:	2200      	movs	r2, #0
 800568e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005690:	f7fe fcaa 	bl	8003fe8 <HAL_GetTick>
 8005694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005696:	e008      	b.n	80056aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005698:	f7fe fca6 	bl	8003fe8 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d901      	bls.n	80056aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e184      	b.n	80059b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056aa:	4b36      	ldr	r3, [pc, #216]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0302 	and.w	r3, r3, #2
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1f0      	bne.n	8005698 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0308 	and.w	r3, r3, #8
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d030      	beq.n	8005724 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d016      	beq.n	80056f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056ca:	4b30      	ldr	r3, [pc, #192]	; (800578c <HAL_RCC_OscConfig+0x2b4>)
 80056cc:	2201      	movs	r2, #1
 80056ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056d0:	f7fe fc8a 	bl	8003fe8 <HAL_GetTick>
 80056d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056d6:	e008      	b.n	80056ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056d8:	f7fe fc86 	bl	8003fe8 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d901      	bls.n	80056ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e164      	b.n	80059b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056ea:	4b26      	ldr	r3, [pc, #152]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 80056ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056ee:	f003 0302 	and.w	r3, r3, #2
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d0f0      	beq.n	80056d8 <HAL_RCC_OscConfig+0x200>
 80056f6:	e015      	b.n	8005724 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056f8:	4b24      	ldr	r3, [pc, #144]	; (800578c <HAL_RCC_OscConfig+0x2b4>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056fe:	f7fe fc73 	bl	8003fe8 <HAL_GetTick>
 8005702:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005704:	e008      	b.n	8005718 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005706:	f7fe fc6f 	bl	8003fe8 <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	2b02      	cmp	r3, #2
 8005712:	d901      	bls.n	8005718 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e14d      	b.n	80059b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005718:	4b1a      	ldr	r3, [pc, #104]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 800571a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800571c:	f003 0302 	and.w	r3, r3, #2
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1f0      	bne.n	8005706 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0304 	and.w	r3, r3, #4
 800572c:	2b00      	cmp	r3, #0
 800572e:	f000 80a0 	beq.w	8005872 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005732:	2300      	movs	r3, #0
 8005734:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005736:	4b13      	ldr	r3, [pc, #76]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 8005738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10f      	bne.n	8005762 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005742:	2300      	movs	r3, #0
 8005744:	60bb      	str	r3, [r7, #8]
 8005746:	4b0f      	ldr	r3, [pc, #60]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 8005748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574a:	4a0e      	ldr	r2, [pc, #56]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 800574c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005750:	6413      	str	r3, [r2, #64]	; 0x40
 8005752:	4b0c      	ldr	r3, [pc, #48]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 8005754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800575a:	60bb      	str	r3, [r7, #8]
 800575c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800575e:	2301      	movs	r3, #1
 8005760:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005762:	4b0b      	ldr	r3, [pc, #44]	; (8005790 <HAL_RCC_OscConfig+0x2b8>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800576a:	2b00      	cmp	r3, #0
 800576c:	d121      	bne.n	80057b2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800576e:	4b08      	ldr	r3, [pc, #32]	; (8005790 <HAL_RCC_OscConfig+0x2b8>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a07      	ldr	r2, [pc, #28]	; (8005790 <HAL_RCC_OscConfig+0x2b8>)
 8005774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005778:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800577a:	f7fe fc35 	bl	8003fe8 <HAL_GetTick>
 800577e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005780:	e011      	b.n	80057a6 <HAL_RCC_OscConfig+0x2ce>
 8005782:	bf00      	nop
 8005784:	40023800 	.word	0x40023800
 8005788:	42470000 	.word	0x42470000
 800578c:	42470e80 	.word	0x42470e80
 8005790:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005794:	f7fe fc28 	bl	8003fe8 <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d901      	bls.n	80057a6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e106      	b.n	80059b4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057a6:	4b85      	ldr	r3, [pc, #532]	; (80059bc <HAL_RCC_OscConfig+0x4e4>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d0f0      	beq.n	8005794 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d106      	bne.n	80057c8 <HAL_RCC_OscConfig+0x2f0>
 80057ba:	4b81      	ldr	r3, [pc, #516]	; (80059c0 <HAL_RCC_OscConfig+0x4e8>)
 80057bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057be:	4a80      	ldr	r2, [pc, #512]	; (80059c0 <HAL_RCC_OscConfig+0x4e8>)
 80057c0:	f043 0301 	orr.w	r3, r3, #1
 80057c4:	6713      	str	r3, [r2, #112]	; 0x70
 80057c6:	e01c      	b.n	8005802 <HAL_RCC_OscConfig+0x32a>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	2b05      	cmp	r3, #5
 80057ce:	d10c      	bne.n	80057ea <HAL_RCC_OscConfig+0x312>
 80057d0:	4b7b      	ldr	r3, [pc, #492]	; (80059c0 <HAL_RCC_OscConfig+0x4e8>)
 80057d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d4:	4a7a      	ldr	r2, [pc, #488]	; (80059c0 <HAL_RCC_OscConfig+0x4e8>)
 80057d6:	f043 0304 	orr.w	r3, r3, #4
 80057da:	6713      	str	r3, [r2, #112]	; 0x70
 80057dc:	4b78      	ldr	r3, [pc, #480]	; (80059c0 <HAL_RCC_OscConfig+0x4e8>)
 80057de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e0:	4a77      	ldr	r2, [pc, #476]	; (80059c0 <HAL_RCC_OscConfig+0x4e8>)
 80057e2:	f043 0301 	orr.w	r3, r3, #1
 80057e6:	6713      	str	r3, [r2, #112]	; 0x70
 80057e8:	e00b      	b.n	8005802 <HAL_RCC_OscConfig+0x32a>
 80057ea:	4b75      	ldr	r3, [pc, #468]	; (80059c0 <HAL_RCC_OscConfig+0x4e8>)
 80057ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ee:	4a74      	ldr	r2, [pc, #464]	; (80059c0 <HAL_RCC_OscConfig+0x4e8>)
 80057f0:	f023 0301 	bic.w	r3, r3, #1
 80057f4:	6713      	str	r3, [r2, #112]	; 0x70
 80057f6:	4b72      	ldr	r3, [pc, #456]	; (80059c0 <HAL_RCC_OscConfig+0x4e8>)
 80057f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057fa:	4a71      	ldr	r2, [pc, #452]	; (80059c0 <HAL_RCC_OscConfig+0x4e8>)
 80057fc:	f023 0304 	bic.w	r3, r3, #4
 8005800:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d015      	beq.n	8005836 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800580a:	f7fe fbed 	bl	8003fe8 <HAL_GetTick>
 800580e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005810:	e00a      	b.n	8005828 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005812:	f7fe fbe9 	bl	8003fe8 <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005820:	4293      	cmp	r3, r2
 8005822:	d901      	bls.n	8005828 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e0c5      	b.n	80059b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005828:	4b65      	ldr	r3, [pc, #404]	; (80059c0 <HAL_RCC_OscConfig+0x4e8>)
 800582a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800582c:	f003 0302 	and.w	r3, r3, #2
 8005830:	2b00      	cmp	r3, #0
 8005832:	d0ee      	beq.n	8005812 <HAL_RCC_OscConfig+0x33a>
 8005834:	e014      	b.n	8005860 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005836:	f7fe fbd7 	bl	8003fe8 <HAL_GetTick>
 800583a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800583c:	e00a      	b.n	8005854 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800583e:	f7fe fbd3 	bl	8003fe8 <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	f241 3288 	movw	r2, #5000	; 0x1388
 800584c:	4293      	cmp	r3, r2
 800584e:	d901      	bls.n	8005854 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005850:	2303      	movs	r3, #3
 8005852:	e0af      	b.n	80059b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005854:	4b5a      	ldr	r3, [pc, #360]	; (80059c0 <HAL_RCC_OscConfig+0x4e8>)
 8005856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005858:	f003 0302 	and.w	r3, r3, #2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1ee      	bne.n	800583e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005860:	7dfb      	ldrb	r3, [r7, #23]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d105      	bne.n	8005872 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005866:	4b56      	ldr	r3, [pc, #344]	; (80059c0 <HAL_RCC_OscConfig+0x4e8>)
 8005868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586a:	4a55      	ldr	r2, [pc, #340]	; (80059c0 <HAL_RCC_OscConfig+0x4e8>)
 800586c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005870:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	2b00      	cmp	r3, #0
 8005878:	f000 809b 	beq.w	80059b2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800587c:	4b50      	ldr	r3, [pc, #320]	; (80059c0 <HAL_RCC_OscConfig+0x4e8>)
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f003 030c 	and.w	r3, r3, #12
 8005884:	2b08      	cmp	r3, #8
 8005886:	d05c      	beq.n	8005942 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	2b02      	cmp	r3, #2
 800588e:	d141      	bne.n	8005914 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005890:	4b4c      	ldr	r3, [pc, #304]	; (80059c4 <HAL_RCC_OscConfig+0x4ec>)
 8005892:	2200      	movs	r2, #0
 8005894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005896:	f7fe fba7 	bl	8003fe8 <HAL_GetTick>
 800589a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800589c:	e008      	b.n	80058b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800589e:	f7fe fba3 	bl	8003fe8 <HAL_GetTick>
 80058a2:	4602      	mov	r2, r0
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d901      	bls.n	80058b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e081      	b.n	80059b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058b0:	4b43      	ldr	r3, [pc, #268]	; (80059c0 <HAL_RCC_OscConfig+0x4e8>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1f0      	bne.n	800589e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	69da      	ldr	r2, [r3, #28]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a1b      	ldr	r3, [r3, #32]
 80058c4:	431a      	orrs	r2, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	019b      	lsls	r3, r3, #6
 80058cc:	431a      	orrs	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d2:	085b      	lsrs	r3, r3, #1
 80058d4:	3b01      	subs	r3, #1
 80058d6:	041b      	lsls	r3, r3, #16
 80058d8:	431a      	orrs	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058de:	061b      	lsls	r3, r3, #24
 80058e0:	4937      	ldr	r1, [pc, #220]	; (80059c0 <HAL_RCC_OscConfig+0x4e8>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058e6:	4b37      	ldr	r3, [pc, #220]	; (80059c4 <HAL_RCC_OscConfig+0x4ec>)
 80058e8:	2201      	movs	r2, #1
 80058ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ec:	f7fe fb7c 	bl	8003fe8 <HAL_GetTick>
 80058f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058f2:	e008      	b.n	8005906 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058f4:	f7fe fb78 	bl	8003fe8 <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d901      	bls.n	8005906 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e056      	b.n	80059b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005906:	4b2e      	ldr	r3, [pc, #184]	; (80059c0 <HAL_RCC_OscConfig+0x4e8>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d0f0      	beq.n	80058f4 <HAL_RCC_OscConfig+0x41c>
 8005912:	e04e      	b.n	80059b2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005914:	4b2b      	ldr	r3, [pc, #172]	; (80059c4 <HAL_RCC_OscConfig+0x4ec>)
 8005916:	2200      	movs	r2, #0
 8005918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800591a:	f7fe fb65 	bl	8003fe8 <HAL_GetTick>
 800591e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005920:	e008      	b.n	8005934 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005922:	f7fe fb61 	bl	8003fe8 <HAL_GetTick>
 8005926:	4602      	mov	r2, r0
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	2b02      	cmp	r3, #2
 800592e:	d901      	bls.n	8005934 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e03f      	b.n	80059b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005934:	4b22      	ldr	r3, [pc, #136]	; (80059c0 <HAL_RCC_OscConfig+0x4e8>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1f0      	bne.n	8005922 <HAL_RCC_OscConfig+0x44a>
 8005940:	e037      	b.n	80059b2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d101      	bne.n	800594e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e032      	b.n	80059b4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800594e:	4b1c      	ldr	r3, [pc, #112]	; (80059c0 <HAL_RCC_OscConfig+0x4e8>)
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d028      	beq.n	80059ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005966:	429a      	cmp	r2, r3
 8005968:	d121      	bne.n	80059ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005974:	429a      	cmp	r2, r3
 8005976:	d11a      	bne.n	80059ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800597e:	4013      	ands	r3, r2
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005984:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005986:	4293      	cmp	r3, r2
 8005988:	d111      	bne.n	80059ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005994:	085b      	lsrs	r3, r3, #1
 8005996:	3b01      	subs	r3, #1
 8005998:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800599a:	429a      	cmp	r2, r3
 800599c:	d107      	bne.n	80059ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d001      	beq.n	80059b2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e000      	b.n	80059b4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3718      	adds	r7, #24
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	40007000 	.word	0x40007000
 80059c0:	40023800 	.word	0x40023800
 80059c4:	42470060 	.word	0x42470060

080059c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d101      	bne.n	80059dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e0cc      	b.n	8005b76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059dc:	4b68      	ldr	r3, [pc, #416]	; (8005b80 <HAL_RCC_ClockConfig+0x1b8>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0307 	and.w	r3, r3, #7
 80059e4:	683a      	ldr	r2, [r7, #0]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d90c      	bls.n	8005a04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059ea:	4b65      	ldr	r3, [pc, #404]	; (8005b80 <HAL_RCC_ClockConfig+0x1b8>)
 80059ec:	683a      	ldr	r2, [r7, #0]
 80059ee:	b2d2      	uxtb	r2, r2
 80059f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059f2:	4b63      	ldr	r3, [pc, #396]	; (8005b80 <HAL_RCC_ClockConfig+0x1b8>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0307 	and.w	r3, r3, #7
 80059fa:	683a      	ldr	r2, [r7, #0]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d001      	beq.n	8005a04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e0b8      	b.n	8005b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0302 	and.w	r3, r3, #2
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d020      	beq.n	8005a52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0304 	and.w	r3, r3, #4
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d005      	beq.n	8005a28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a1c:	4b59      	ldr	r3, [pc, #356]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	4a58      	ldr	r2, [pc, #352]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005a22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0308 	and.w	r3, r3, #8
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d005      	beq.n	8005a40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a34:	4b53      	ldr	r3, [pc, #332]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	4a52      	ldr	r2, [pc, #328]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a40:	4b50      	ldr	r3, [pc, #320]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	494d      	ldr	r1, [pc, #308]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0301 	and.w	r3, r3, #1
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d044      	beq.n	8005ae8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d107      	bne.n	8005a76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a66:	4b47      	ldr	r3, [pc, #284]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d119      	bne.n	8005aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e07f      	b.n	8005b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d003      	beq.n	8005a86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a82:	2b03      	cmp	r3, #3
 8005a84:	d107      	bne.n	8005a96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a86:	4b3f      	ldr	r3, [pc, #252]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d109      	bne.n	8005aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e06f      	b.n	8005b76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a96:	4b3b      	ldr	r3, [pc, #236]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0302 	and.w	r3, r3, #2
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d101      	bne.n	8005aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e067      	b.n	8005b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005aa6:	4b37      	ldr	r3, [pc, #220]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f023 0203 	bic.w	r2, r3, #3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	4934      	ldr	r1, [pc, #208]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ab8:	f7fe fa96 	bl	8003fe8 <HAL_GetTick>
 8005abc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005abe:	e00a      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ac0:	f7fe fa92 	bl	8003fe8 <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d901      	bls.n	8005ad6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e04f      	b.n	8005b76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ad6:	4b2b      	ldr	r3, [pc, #172]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f003 020c 	and.w	r2, r3, #12
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d1eb      	bne.n	8005ac0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ae8:	4b25      	ldr	r3, [pc, #148]	; (8005b80 <HAL_RCC_ClockConfig+0x1b8>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0307 	and.w	r3, r3, #7
 8005af0:	683a      	ldr	r2, [r7, #0]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d20c      	bcs.n	8005b10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005af6:	4b22      	ldr	r3, [pc, #136]	; (8005b80 <HAL_RCC_ClockConfig+0x1b8>)
 8005af8:	683a      	ldr	r2, [r7, #0]
 8005afa:	b2d2      	uxtb	r2, r2
 8005afc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005afe:	4b20      	ldr	r3, [pc, #128]	; (8005b80 <HAL_RCC_ClockConfig+0x1b8>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0307 	and.w	r3, r3, #7
 8005b06:	683a      	ldr	r2, [r7, #0]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d001      	beq.n	8005b10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e032      	b.n	8005b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 0304 	and.w	r3, r3, #4
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d008      	beq.n	8005b2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b1c:	4b19      	ldr	r3, [pc, #100]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	4916      	ldr	r1, [pc, #88]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 0308 	and.w	r3, r3, #8
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d009      	beq.n	8005b4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b3a:	4b12      	ldr	r3, [pc, #72]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	00db      	lsls	r3, r3, #3
 8005b48:	490e      	ldr	r1, [pc, #56]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b4e:	f000 f821 	bl	8005b94 <HAL_RCC_GetSysClockFreq>
 8005b52:	4602      	mov	r2, r0
 8005b54:	4b0b      	ldr	r3, [pc, #44]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	091b      	lsrs	r3, r3, #4
 8005b5a:	f003 030f 	and.w	r3, r3, #15
 8005b5e:	490a      	ldr	r1, [pc, #40]	; (8005b88 <HAL_RCC_ClockConfig+0x1c0>)
 8005b60:	5ccb      	ldrb	r3, [r1, r3]
 8005b62:	fa22 f303 	lsr.w	r3, r2, r3
 8005b66:	4a09      	ldr	r2, [pc, #36]	; (8005b8c <HAL_RCC_ClockConfig+0x1c4>)
 8005b68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b6a:	4b09      	ldr	r3, [pc, #36]	; (8005b90 <HAL_RCC_ClockConfig+0x1c8>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7fe f87c 	bl	8003c6c <HAL_InitTick>

  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	40023c00 	.word	0x40023c00
 8005b84:	40023800 	.word	0x40023800
 8005b88:	0800dc14 	.word	0x0800dc14
 8005b8c:	20000008 	.word	0x20000008
 8005b90:	2000000c 	.word	0x2000000c

08005b94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b94:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005b98:	b084      	sub	sp, #16
 8005b9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	607b      	str	r3, [r7, #4]
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	60fb      	str	r3, [r7, #12]
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bac:	4b67      	ldr	r3, [pc, #412]	; (8005d4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f003 030c 	and.w	r3, r3, #12
 8005bb4:	2b08      	cmp	r3, #8
 8005bb6:	d00d      	beq.n	8005bd4 <HAL_RCC_GetSysClockFreq+0x40>
 8005bb8:	2b08      	cmp	r3, #8
 8005bba:	f200 80bd 	bhi.w	8005d38 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d002      	beq.n	8005bc8 <HAL_RCC_GetSysClockFreq+0x34>
 8005bc2:	2b04      	cmp	r3, #4
 8005bc4:	d003      	beq.n	8005bce <HAL_RCC_GetSysClockFreq+0x3a>
 8005bc6:	e0b7      	b.n	8005d38 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005bc8:	4b61      	ldr	r3, [pc, #388]	; (8005d50 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005bca:	60bb      	str	r3, [r7, #8]
       break;
 8005bcc:	e0b7      	b.n	8005d3e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005bce:	4b61      	ldr	r3, [pc, #388]	; (8005d54 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005bd0:	60bb      	str	r3, [r7, #8]
      break;
 8005bd2:	e0b4      	b.n	8005d3e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005bd4:	4b5d      	ldr	r3, [pc, #372]	; (8005d4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bdc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005bde:	4b5b      	ldr	r3, [pc, #364]	; (8005d4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d04d      	beq.n	8005c86 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bea:	4b58      	ldr	r3, [pc, #352]	; (8005d4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	099b      	lsrs	r3, r3, #6
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	f04f 0300 	mov.w	r3, #0
 8005bf6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005bfa:	f04f 0100 	mov.w	r1, #0
 8005bfe:	ea02 0800 	and.w	r8, r2, r0
 8005c02:	ea03 0901 	and.w	r9, r3, r1
 8005c06:	4640      	mov	r0, r8
 8005c08:	4649      	mov	r1, r9
 8005c0a:	f04f 0200 	mov.w	r2, #0
 8005c0e:	f04f 0300 	mov.w	r3, #0
 8005c12:	014b      	lsls	r3, r1, #5
 8005c14:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005c18:	0142      	lsls	r2, r0, #5
 8005c1a:	4610      	mov	r0, r2
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	ebb0 0008 	subs.w	r0, r0, r8
 8005c22:	eb61 0109 	sbc.w	r1, r1, r9
 8005c26:	f04f 0200 	mov.w	r2, #0
 8005c2a:	f04f 0300 	mov.w	r3, #0
 8005c2e:	018b      	lsls	r3, r1, #6
 8005c30:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005c34:	0182      	lsls	r2, r0, #6
 8005c36:	1a12      	subs	r2, r2, r0
 8005c38:	eb63 0301 	sbc.w	r3, r3, r1
 8005c3c:	f04f 0000 	mov.w	r0, #0
 8005c40:	f04f 0100 	mov.w	r1, #0
 8005c44:	00d9      	lsls	r1, r3, #3
 8005c46:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c4a:	00d0      	lsls	r0, r2, #3
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	460b      	mov	r3, r1
 8005c50:	eb12 0208 	adds.w	r2, r2, r8
 8005c54:	eb43 0309 	adc.w	r3, r3, r9
 8005c58:	f04f 0000 	mov.w	r0, #0
 8005c5c:	f04f 0100 	mov.w	r1, #0
 8005c60:	0259      	lsls	r1, r3, #9
 8005c62:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005c66:	0250      	lsls	r0, r2, #9
 8005c68:	4602      	mov	r2, r0
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	4610      	mov	r0, r2
 8005c6e:	4619      	mov	r1, r3
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	461a      	mov	r2, r3
 8005c74:	f04f 0300 	mov.w	r3, #0
 8005c78:	f7fb f820 	bl	8000cbc <__aeabi_uldivmod>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	460b      	mov	r3, r1
 8005c80:	4613      	mov	r3, r2
 8005c82:	60fb      	str	r3, [r7, #12]
 8005c84:	e04a      	b.n	8005d1c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c86:	4b31      	ldr	r3, [pc, #196]	; (8005d4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	099b      	lsrs	r3, r3, #6
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	f04f 0300 	mov.w	r3, #0
 8005c92:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005c96:	f04f 0100 	mov.w	r1, #0
 8005c9a:	ea02 0400 	and.w	r4, r2, r0
 8005c9e:	ea03 0501 	and.w	r5, r3, r1
 8005ca2:	4620      	mov	r0, r4
 8005ca4:	4629      	mov	r1, r5
 8005ca6:	f04f 0200 	mov.w	r2, #0
 8005caa:	f04f 0300 	mov.w	r3, #0
 8005cae:	014b      	lsls	r3, r1, #5
 8005cb0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005cb4:	0142      	lsls	r2, r0, #5
 8005cb6:	4610      	mov	r0, r2
 8005cb8:	4619      	mov	r1, r3
 8005cba:	1b00      	subs	r0, r0, r4
 8005cbc:	eb61 0105 	sbc.w	r1, r1, r5
 8005cc0:	f04f 0200 	mov.w	r2, #0
 8005cc4:	f04f 0300 	mov.w	r3, #0
 8005cc8:	018b      	lsls	r3, r1, #6
 8005cca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005cce:	0182      	lsls	r2, r0, #6
 8005cd0:	1a12      	subs	r2, r2, r0
 8005cd2:	eb63 0301 	sbc.w	r3, r3, r1
 8005cd6:	f04f 0000 	mov.w	r0, #0
 8005cda:	f04f 0100 	mov.w	r1, #0
 8005cde:	00d9      	lsls	r1, r3, #3
 8005ce0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ce4:	00d0      	lsls	r0, r2, #3
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	460b      	mov	r3, r1
 8005cea:	1912      	adds	r2, r2, r4
 8005cec:	eb45 0303 	adc.w	r3, r5, r3
 8005cf0:	f04f 0000 	mov.w	r0, #0
 8005cf4:	f04f 0100 	mov.w	r1, #0
 8005cf8:	0299      	lsls	r1, r3, #10
 8005cfa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005cfe:	0290      	lsls	r0, r2, #10
 8005d00:	4602      	mov	r2, r0
 8005d02:	460b      	mov	r3, r1
 8005d04:	4610      	mov	r0, r2
 8005d06:	4619      	mov	r1, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	f04f 0300 	mov.w	r3, #0
 8005d10:	f7fa ffd4 	bl	8000cbc <__aeabi_uldivmod>
 8005d14:	4602      	mov	r2, r0
 8005d16:	460b      	mov	r3, r1
 8005d18:	4613      	mov	r3, r2
 8005d1a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d1c:	4b0b      	ldr	r3, [pc, #44]	; (8005d4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	0c1b      	lsrs	r3, r3, #16
 8005d22:	f003 0303 	and.w	r3, r3, #3
 8005d26:	3301      	adds	r3, #1
 8005d28:	005b      	lsls	r3, r3, #1
 8005d2a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d34:	60bb      	str	r3, [r7, #8]
      break;
 8005d36:	e002      	b.n	8005d3e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d38:	4b05      	ldr	r3, [pc, #20]	; (8005d50 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005d3a:	60bb      	str	r3, [r7, #8]
      break;
 8005d3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d3e:	68bb      	ldr	r3, [r7, #8]
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005d4a:	bf00      	nop
 8005d4c:	40023800 	.word	0x40023800
 8005d50:	00f42400 	.word	0x00f42400
 8005d54:	007a1200 	.word	0x007a1200

08005d58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d5c:	4b03      	ldr	r3, [pc, #12]	; (8005d6c <HAL_RCC_GetHCLKFreq+0x14>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	20000008 	.word	0x20000008

08005d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d74:	f7ff fff0 	bl	8005d58 <HAL_RCC_GetHCLKFreq>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	4b05      	ldr	r3, [pc, #20]	; (8005d90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	0a9b      	lsrs	r3, r3, #10
 8005d80:	f003 0307 	and.w	r3, r3, #7
 8005d84:	4903      	ldr	r1, [pc, #12]	; (8005d94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d86:	5ccb      	ldrb	r3, [r1, r3]
 8005d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	40023800 	.word	0x40023800
 8005d94:	0800dc24 	.word	0x0800dc24

08005d98 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	220f      	movs	r2, #15
 8005da6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005da8:	4b12      	ldr	r3, [pc, #72]	; (8005df4 <HAL_RCC_GetClockConfig+0x5c>)
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f003 0203 	and.w	r2, r3, #3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005db4:	4b0f      	ldr	r3, [pc, #60]	; (8005df4 <HAL_RCC_GetClockConfig+0x5c>)
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005dc0:	4b0c      	ldr	r3, [pc, #48]	; (8005df4 <HAL_RCC_GetClockConfig+0x5c>)
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005dcc:	4b09      	ldr	r3, [pc, #36]	; (8005df4 <HAL_RCC_GetClockConfig+0x5c>)
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	08db      	lsrs	r3, r3, #3
 8005dd2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005dda:	4b07      	ldr	r3, [pc, #28]	; (8005df8 <HAL_RCC_GetClockConfig+0x60>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0207 	and.w	r2, r3, #7
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	601a      	str	r2, [r3, #0]
}
 8005de6:	bf00      	nop
 8005de8:	370c      	adds	r7, #12
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	40023800 	.word	0x40023800
 8005df8:	40023c00 	.word	0x40023c00

08005dfc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d101      	bne.n	8005e0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e07b      	b.n	8005f06 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d108      	bne.n	8005e28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e1e:	d009      	beq.n	8005e34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	61da      	str	r2, [r3, #28]
 8005e26:	e005      	b.n	8005e34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d106      	bne.n	8005e54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f7fd fe8e 	bl	8003b70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2202      	movs	r2, #2
 8005e58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e6a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005e7c:	431a      	orrs	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e86:	431a      	orrs	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	f003 0302 	and.w	r3, r3, #2
 8005e90:	431a      	orrs	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	f003 0301 	and.w	r3, r3, #1
 8005e9a:	431a      	orrs	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	699b      	ldr	r3, [r3, #24]
 8005ea0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ea4:	431a      	orrs	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	69db      	ldr	r3, [r3, #28]
 8005eaa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005eae:	431a      	orrs	r2, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a1b      	ldr	r3, [r3, #32]
 8005eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eb8:	ea42 0103 	orr.w	r1, r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	430a      	orrs	r2, r1
 8005eca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	699b      	ldr	r3, [r3, #24]
 8005ed0:	0c1b      	lsrs	r3, r3, #16
 8005ed2:	f003 0104 	and.w	r1, r3, #4
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eda:	f003 0210 	and.w	r2, r3, #16
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	69da      	ldr	r2, [r3, #28]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ef4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3708      	adds	r7, #8
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b088      	sub	sp, #32
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	60f8      	str	r0, [r7, #12]
 8005f16:	60b9      	str	r1, [r7, #8]
 8005f18:	603b      	str	r3, [r7, #0]
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d101      	bne.n	8005f30 <HAL_SPI_Transmit+0x22>
 8005f2c:	2302      	movs	r3, #2
 8005f2e:	e126      	b.n	800617e <HAL_SPI_Transmit+0x270>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f38:	f7fe f856 	bl	8003fe8 <HAL_GetTick>
 8005f3c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005f3e:	88fb      	ldrh	r3, [r7, #6]
 8005f40:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d002      	beq.n	8005f54 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005f4e:	2302      	movs	r3, #2
 8005f50:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f52:	e10b      	b.n	800616c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d002      	beq.n	8005f60 <HAL_SPI_Transmit+0x52>
 8005f5a:	88fb      	ldrh	r3, [r7, #6]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d102      	bne.n	8005f66 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f64:	e102      	b.n	800616c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2203      	movs	r2, #3
 8005f6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2200      	movs	r2, #0
 8005f72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	68ba      	ldr	r2, [r7, #8]
 8005f78:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	88fa      	ldrh	r2, [r7, #6]
 8005f7e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	88fa      	ldrh	r2, [r7, #6]
 8005f84:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fac:	d10f      	bne.n	8005fce <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fbc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fcc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd8:	2b40      	cmp	r3, #64	; 0x40
 8005fda:	d007      	beq.n	8005fec <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ff4:	d14b      	bne.n	800608e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d002      	beq.n	8006004 <HAL_SPI_Transmit+0xf6>
 8005ffe:	8afb      	ldrh	r3, [r7, #22]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d13e      	bne.n	8006082 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006008:	881a      	ldrh	r2, [r3, #0]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006014:	1c9a      	adds	r2, r3, #2
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800601e:	b29b      	uxth	r3, r3
 8006020:	3b01      	subs	r3, #1
 8006022:	b29a      	uxth	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006028:	e02b      	b.n	8006082 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	f003 0302 	and.w	r3, r3, #2
 8006034:	2b02      	cmp	r3, #2
 8006036:	d112      	bne.n	800605e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800603c:	881a      	ldrh	r2, [r3, #0]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006048:	1c9a      	adds	r2, r3, #2
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006052:	b29b      	uxth	r3, r3
 8006054:	3b01      	subs	r3, #1
 8006056:	b29a      	uxth	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	86da      	strh	r2, [r3, #54]	; 0x36
 800605c:	e011      	b.n	8006082 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800605e:	f7fd ffc3 	bl	8003fe8 <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	683a      	ldr	r2, [r7, #0]
 800606a:	429a      	cmp	r2, r3
 800606c:	d803      	bhi.n	8006076 <HAL_SPI_Transmit+0x168>
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006074:	d102      	bne.n	800607c <HAL_SPI_Transmit+0x16e>
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d102      	bne.n	8006082 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006080:	e074      	b.n	800616c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006086:	b29b      	uxth	r3, r3
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1ce      	bne.n	800602a <HAL_SPI_Transmit+0x11c>
 800608c:	e04c      	b.n	8006128 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d002      	beq.n	800609c <HAL_SPI_Transmit+0x18e>
 8006096:	8afb      	ldrh	r3, [r7, #22]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d140      	bne.n	800611e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	330c      	adds	r3, #12
 80060a6:	7812      	ldrb	r2, [r2, #0]
 80060a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ae:	1c5a      	adds	r2, r3, #1
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	3b01      	subs	r3, #1
 80060bc:	b29a      	uxth	r2, r3
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80060c2:	e02c      	b.n	800611e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	f003 0302 	and.w	r3, r3, #2
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d113      	bne.n	80060fa <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	330c      	adds	r3, #12
 80060dc:	7812      	ldrb	r2, [r2, #0]
 80060de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e4:	1c5a      	adds	r2, r3, #1
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	3b01      	subs	r3, #1
 80060f2:	b29a      	uxth	r2, r3
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	86da      	strh	r2, [r3, #54]	; 0x36
 80060f8:	e011      	b.n	800611e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060fa:	f7fd ff75 	bl	8003fe8 <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	683a      	ldr	r2, [r7, #0]
 8006106:	429a      	cmp	r2, r3
 8006108:	d803      	bhi.n	8006112 <HAL_SPI_Transmit+0x204>
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006110:	d102      	bne.n	8006118 <HAL_SPI_Transmit+0x20a>
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d102      	bne.n	800611e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800611c:	e026      	b.n	800616c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006122:	b29b      	uxth	r3, r3
 8006124:	2b00      	cmp	r3, #0
 8006126:	d1cd      	bne.n	80060c4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006128:	69ba      	ldr	r2, [r7, #24]
 800612a:	6839      	ldr	r1, [r7, #0]
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f000 fa55 	bl	80065dc <SPI_EndRxTxTransaction>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d002      	beq.n	800613e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2220      	movs	r2, #32
 800613c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d10a      	bne.n	800615c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006146:	2300      	movs	r3, #0
 8006148:	613b      	str	r3, [r7, #16]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	613b      	str	r3, [r7, #16]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	613b      	str	r3, [r7, #16]
 800615a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006160:	2b00      	cmp	r3, #0
 8006162:	d002      	beq.n	800616a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	77fb      	strb	r3, [r7, #31]
 8006168:	e000      	b.n	800616c <HAL_SPI_Transmit+0x25e>
  }

error:
 800616a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800617c:	7ffb      	ldrb	r3, [r7, #31]
}
 800617e:	4618      	mov	r0, r3
 8006180:	3720      	adds	r7, #32
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006186:	b580      	push	{r7, lr}
 8006188:	b08c      	sub	sp, #48	; 0x30
 800618a:	af00      	add	r7, sp, #0
 800618c:	60f8      	str	r0, [r7, #12]
 800618e:	60b9      	str	r1, [r7, #8]
 8006190:	607a      	str	r2, [r7, #4]
 8006192:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006194:	2301      	movs	r3, #1
 8006196:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006198:	2300      	movs	r3, #0
 800619a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d101      	bne.n	80061ac <HAL_SPI_TransmitReceive+0x26>
 80061a8:	2302      	movs	r3, #2
 80061aa:	e18a      	b.n	80064c2 <HAL_SPI_TransmitReceive+0x33c>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061b4:	f7fd ff18 	bl	8003fe8 <HAL_GetTick>
 80061b8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80061ca:	887b      	ldrh	r3, [r7, #2]
 80061cc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80061ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d00f      	beq.n	80061f6 <HAL_SPI_TransmitReceive+0x70>
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061dc:	d107      	bne.n	80061ee <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d103      	bne.n	80061ee <HAL_SPI_TransmitReceive+0x68>
 80061e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061ea:	2b04      	cmp	r3, #4
 80061ec:	d003      	beq.n	80061f6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80061ee:	2302      	movs	r3, #2
 80061f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80061f4:	e15b      	b.n	80064ae <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d005      	beq.n	8006208 <HAL_SPI_TransmitReceive+0x82>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d002      	beq.n	8006208 <HAL_SPI_TransmitReceive+0x82>
 8006202:	887b      	ldrh	r3, [r7, #2]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d103      	bne.n	8006210 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800620e:	e14e      	b.n	80064ae <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006216:	b2db      	uxtb	r3, r3
 8006218:	2b04      	cmp	r3, #4
 800621a:	d003      	beq.n	8006224 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2205      	movs	r2, #5
 8006220:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	887a      	ldrh	r2, [r7, #2]
 8006234:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	887a      	ldrh	r2, [r7, #2]
 800623a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	887a      	ldrh	r2, [r7, #2]
 8006246:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	887a      	ldrh	r2, [r7, #2]
 800624c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006264:	2b40      	cmp	r3, #64	; 0x40
 8006266:	d007      	beq.n	8006278 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006276:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006280:	d178      	bne.n	8006374 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d002      	beq.n	8006290 <HAL_SPI_TransmitReceive+0x10a>
 800628a:	8b7b      	ldrh	r3, [r7, #26]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d166      	bne.n	800635e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006294:	881a      	ldrh	r2, [r3, #0]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a0:	1c9a      	adds	r2, r3, #2
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	3b01      	subs	r3, #1
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062b4:	e053      	b.n	800635e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f003 0302 	and.w	r3, r3, #2
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d11b      	bne.n	80062fc <HAL_SPI_TransmitReceive+0x176>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d016      	beq.n	80062fc <HAL_SPI_TransmitReceive+0x176>
 80062ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d113      	bne.n	80062fc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d8:	881a      	ldrh	r2, [r3, #0]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e4:	1c9a      	adds	r2, r3, #2
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	3b01      	subs	r3, #1
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80062f8:	2300      	movs	r3, #0
 80062fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	f003 0301 	and.w	r3, r3, #1
 8006306:	2b01      	cmp	r3, #1
 8006308:	d119      	bne.n	800633e <HAL_SPI_TransmitReceive+0x1b8>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800630e:	b29b      	uxth	r3, r3
 8006310:	2b00      	cmp	r3, #0
 8006312:	d014      	beq.n	800633e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	68da      	ldr	r2, [r3, #12]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631e:	b292      	uxth	r2, r2
 8006320:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006326:	1c9a      	adds	r2, r3, #2
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006330:	b29b      	uxth	r3, r3
 8006332:	3b01      	subs	r3, #1
 8006334:	b29a      	uxth	r2, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800633a:	2301      	movs	r3, #1
 800633c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800633e:	f7fd fe53 	bl	8003fe8 <HAL_GetTick>
 8006342:	4602      	mov	r2, r0
 8006344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800634a:	429a      	cmp	r2, r3
 800634c:	d807      	bhi.n	800635e <HAL_SPI_TransmitReceive+0x1d8>
 800634e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006354:	d003      	beq.n	800635e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800635c:	e0a7      	b.n	80064ae <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006362:	b29b      	uxth	r3, r3
 8006364:	2b00      	cmp	r3, #0
 8006366:	d1a6      	bne.n	80062b6 <HAL_SPI_TransmitReceive+0x130>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800636c:	b29b      	uxth	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1a1      	bne.n	80062b6 <HAL_SPI_TransmitReceive+0x130>
 8006372:	e07c      	b.n	800646e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d002      	beq.n	8006382 <HAL_SPI_TransmitReceive+0x1fc>
 800637c:	8b7b      	ldrh	r3, [r7, #26]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d16b      	bne.n	800645a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	330c      	adds	r3, #12
 800638c:	7812      	ldrb	r2, [r2, #0]
 800638e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006394:	1c5a      	adds	r2, r3, #1
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800639e:	b29b      	uxth	r3, r3
 80063a0:	3b01      	subs	r3, #1
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063a8:	e057      	b.n	800645a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	f003 0302 	and.w	r3, r3, #2
 80063b4:	2b02      	cmp	r3, #2
 80063b6:	d11c      	bne.n	80063f2 <HAL_SPI_TransmitReceive+0x26c>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063bc:	b29b      	uxth	r3, r3
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d017      	beq.n	80063f2 <HAL_SPI_TransmitReceive+0x26c>
 80063c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d114      	bne.n	80063f2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	330c      	adds	r3, #12
 80063d2:	7812      	ldrb	r2, [r2, #0]
 80063d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063da:	1c5a      	adds	r2, r3, #1
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	3b01      	subs	r3, #1
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80063ee:	2300      	movs	r3, #0
 80063f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	f003 0301 	and.w	r3, r3, #1
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d119      	bne.n	8006434 <HAL_SPI_TransmitReceive+0x2ae>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006404:	b29b      	uxth	r3, r3
 8006406:	2b00      	cmp	r3, #0
 8006408:	d014      	beq.n	8006434 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68da      	ldr	r2, [r3, #12]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006414:	b2d2      	uxtb	r2, r2
 8006416:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641c:	1c5a      	adds	r2, r3, #1
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006426:	b29b      	uxth	r3, r3
 8006428:	3b01      	subs	r3, #1
 800642a:	b29a      	uxth	r2, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006430:	2301      	movs	r3, #1
 8006432:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006434:	f7fd fdd8 	bl	8003fe8 <HAL_GetTick>
 8006438:	4602      	mov	r2, r0
 800643a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006440:	429a      	cmp	r2, r3
 8006442:	d803      	bhi.n	800644c <HAL_SPI_TransmitReceive+0x2c6>
 8006444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800644a:	d102      	bne.n	8006452 <HAL_SPI_TransmitReceive+0x2cc>
 800644c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800644e:	2b00      	cmp	r3, #0
 8006450:	d103      	bne.n	800645a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006458:	e029      	b.n	80064ae <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800645e:	b29b      	uxth	r3, r3
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1a2      	bne.n	80063aa <HAL_SPI_TransmitReceive+0x224>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006468:	b29b      	uxth	r3, r3
 800646a:	2b00      	cmp	r3, #0
 800646c:	d19d      	bne.n	80063aa <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800646e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006470:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006472:	68f8      	ldr	r0, [r7, #12]
 8006474:	f000 f8b2 	bl	80065dc <SPI_EndRxTxTransaction>
 8006478:	4603      	mov	r3, r0
 800647a:	2b00      	cmp	r3, #0
 800647c:	d006      	beq.n	800648c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2220      	movs	r2, #32
 8006488:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800648a:	e010      	b.n	80064ae <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d10b      	bne.n	80064ac <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006494:	2300      	movs	r3, #0
 8006496:	617b      	str	r3, [r7, #20]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	617b      	str	r3, [r7, #20]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	617b      	str	r3, [r7, #20]
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	e000      	b.n	80064ae <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80064ac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2201      	movs	r2, #1
 80064b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80064be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3730      	adds	r7, #48	; 0x30
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
	...

080064cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b088      	sub	sp, #32
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	603b      	str	r3, [r7, #0]
 80064d8:	4613      	mov	r3, r2
 80064da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80064dc:	f7fd fd84 	bl	8003fe8 <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e4:	1a9b      	subs	r3, r3, r2
 80064e6:	683a      	ldr	r2, [r7, #0]
 80064e8:	4413      	add	r3, r2
 80064ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80064ec:	f7fd fd7c 	bl	8003fe8 <HAL_GetTick>
 80064f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80064f2:	4b39      	ldr	r3, [pc, #228]	; (80065d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	015b      	lsls	r3, r3, #5
 80064f8:	0d1b      	lsrs	r3, r3, #20
 80064fa:	69fa      	ldr	r2, [r7, #28]
 80064fc:	fb02 f303 	mul.w	r3, r2, r3
 8006500:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006502:	e054      	b.n	80065ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800650a:	d050      	beq.n	80065ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800650c:	f7fd fd6c 	bl	8003fe8 <HAL_GetTick>
 8006510:	4602      	mov	r2, r0
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	69fa      	ldr	r2, [r7, #28]
 8006518:	429a      	cmp	r2, r3
 800651a:	d902      	bls.n	8006522 <SPI_WaitFlagStateUntilTimeout+0x56>
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d13d      	bne.n	800659e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	685a      	ldr	r2, [r3, #4]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006530:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800653a:	d111      	bne.n	8006560 <SPI_WaitFlagStateUntilTimeout+0x94>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006544:	d004      	beq.n	8006550 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800654e:	d107      	bne.n	8006560 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800655e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006564:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006568:	d10f      	bne.n	800658a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006578:	601a      	str	r2, [r3, #0]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006588:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2201      	movs	r2, #1
 800658e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e017      	b.n	80065ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d101      	bne.n	80065a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80065a4:	2300      	movs	r3, #0
 80065a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	3b01      	subs	r3, #1
 80065ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	689a      	ldr	r2, [r3, #8]
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	4013      	ands	r3, r2
 80065b8:	68ba      	ldr	r2, [r7, #8]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	bf0c      	ite	eq
 80065be:	2301      	moveq	r3, #1
 80065c0:	2300      	movne	r3, #0
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	461a      	mov	r2, r3
 80065c6:	79fb      	ldrb	r3, [r7, #7]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d19b      	bne.n	8006504 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3720      	adds	r7, #32
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	20000008 	.word	0x20000008

080065dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b088      	sub	sp, #32
 80065e0:	af02      	add	r7, sp, #8
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80065e8:	4b1b      	ldr	r3, [pc, #108]	; (8006658 <SPI_EndRxTxTransaction+0x7c>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a1b      	ldr	r2, [pc, #108]	; (800665c <SPI_EndRxTxTransaction+0x80>)
 80065ee:	fba2 2303 	umull	r2, r3, r2, r3
 80065f2:	0d5b      	lsrs	r3, r3, #21
 80065f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80065f8:	fb02 f303 	mul.w	r3, r2, r3
 80065fc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006606:	d112      	bne.n	800662e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	9300      	str	r3, [sp, #0]
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	2200      	movs	r2, #0
 8006610:	2180      	movs	r1, #128	; 0x80
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f7ff ff5a 	bl	80064cc <SPI_WaitFlagStateUntilTimeout>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d016      	beq.n	800664c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006622:	f043 0220 	orr.w	r2, r3, #32
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e00f      	b.n	800664e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00a      	beq.n	800664a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	3b01      	subs	r3, #1
 8006638:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006644:	2b80      	cmp	r3, #128	; 0x80
 8006646:	d0f2      	beq.n	800662e <SPI_EndRxTxTransaction+0x52>
 8006648:	e000      	b.n	800664c <SPI_EndRxTxTransaction+0x70>
        break;
 800664a:	bf00      	nop
  }

  return HAL_OK;
 800664c:	2300      	movs	r3, #0
}
 800664e:	4618      	mov	r0, r3
 8006650:	3718      	adds	r7, #24
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	20000008 	.word	0x20000008
 800665c:	165e9f81 	.word	0x165e9f81

08006660 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d101      	bne.n	8006672 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e041      	b.n	80066f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006678:	b2db      	uxtb	r3, r3
 800667a:	2b00      	cmp	r3, #0
 800667c:	d106      	bne.n	800668c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f839 	bl	80066fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2202      	movs	r2, #2
 8006690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	3304      	adds	r3, #4
 800669c:	4619      	mov	r1, r3
 800669e:	4610      	mov	r0, r2
 80066a0:	f000 f9ca 	bl	8006a38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3708      	adds	r7, #8
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}

080066fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80066fe:	b480      	push	{r7}
 8006700:	b083      	sub	sp, #12
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006706:	bf00      	nop
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
	...

08006714 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006722:	b2db      	uxtb	r3, r3
 8006724:	2b01      	cmp	r3, #1
 8006726:	d001      	beq.n	800672c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e044      	b.n	80067b6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2202      	movs	r2, #2
 8006730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68da      	ldr	r2, [r3, #12]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f042 0201 	orr.w	r2, r2, #1
 8006742:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a1e      	ldr	r2, [pc, #120]	; (80067c4 <HAL_TIM_Base_Start_IT+0xb0>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d018      	beq.n	8006780 <HAL_TIM_Base_Start_IT+0x6c>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006756:	d013      	beq.n	8006780 <HAL_TIM_Base_Start_IT+0x6c>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a1a      	ldr	r2, [pc, #104]	; (80067c8 <HAL_TIM_Base_Start_IT+0xb4>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d00e      	beq.n	8006780 <HAL_TIM_Base_Start_IT+0x6c>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a19      	ldr	r2, [pc, #100]	; (80067cc <HAL_TIM_Base_Start_IT+0xb8>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d009      	beq.n	8006780 <HAL_TIM_Base_Start_IT+0x6c>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a17      	ldr	r2, [pc, #92]	; (80067d0 <HAL_TIM_Base_Start_IT+0xbc>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d004      	beq.n	8006780 <HAL_TIM_Base_Start_IT+0x6c>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a16      	ldr	r2, [pc, #88]	; (80067d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d111      	bne.n	80067a4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	f003 0307 	and.w	r3, r3, #7
 800678a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2b06      	cmp	r3, #6
 8006790:	d010      	beq.n	80067b4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f042 0201 	orr.w	r2, r2, #1
 80067a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067a2:	e007      	b.n	80067b4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f042 0201 	orr.w	r2, r2, #1
 80067b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3714      	adds	r7, #20
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop
 80067c4:	40010000 	.word	0x40010000
 80067c8:	40000400 	.word	0x40000400
 80067cc:	40000800 	.word	0x40000800
 80067d0:	40000c00 	.word	0x40000c00
 80067d4:	40014000 	.word	0x40014000

080067d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	f003 0302 	and.w	r3, r3, #2
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d122      	bne.n	8006834 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	f003 0302 	and.w	r3, r3, #2
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d11b      	bne.n	8006834 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f06f 0202 	mvn.w	r2, #2
 8006804:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2201      	movs	r2, #1
 800680a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	f003 0303 	and.w	r3, r3, #3
 8006816:	2b00      	cmp	r3, #0
 8006818:	d003      	beq.n	8006822 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 f8ee 	bl	80069fc <HAL_TIM_IC_CaptureCallback>
 8006820:	e005      	b.n	800682e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 f8e0 	bl	80069e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 f8f1 	bl	8006a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	f003 0304 	and.w	r3, r3, #4
 800683e:	2b04      	cmp	r3, #4
 8006840:	d122      	bne.n	8006888 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	f003 0304 	and.w	r3, r3, #4
 800684c:	2b04      	cmp	r3, #4
 800684e:	d11b      	bne.n	8006888 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f06f 0204 	mvn.w	r2, #4
 8006858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2202      	movs	r2, #2
 800685e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	699b      	ldr	r3, [r3, #24]
 8006866:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800686a:	2b00      	cmp	r3, #0
 800686c:	d003      	beq.n	8006876 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 f8c4 	bl	80069fc <HAL_TIM_IC_CaptureCallback>
 8006874:	e005      	b.n	8006882 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 f8b6 	bl	80069e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 f8c7 	bl	8006a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	f003 0308 	and.w	r3, r3, #8
 8006892:	2b08      	cmp	r3, #8
 8006894:	d122      	bne.n	80068dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	f003 0308 	and.w	r3, r3, #8
 80068a0:	2b08      	cmp	r3, #8
 80068a2:	d11b      	bne.n	80068dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f06f 0208 	mvn.w	r2, #8
 80068ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2204      	movs	r2, #4
 80068b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	69db      	ldr	r3, [r3, #28]
 80068ba:	f003 0303 	and.w	r3, r3, #3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d003      	beq.n	80068ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 f89a 	bl	80069fc <HAL_TIM_IC_CaptureCallback>
 80068c8:	e005      	b.n	80068d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 f88c 	bl	80069e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 f89d 	bl	8006a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	f003 0310 	and.w	r3, r3, #16
 80068e6:	2b10      	cmp	r3, #16
 80068e8:	d122      	bne.n	8006930 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	f003 0310 	and.w	r3, r3, #16
 80068f4:	2b10      	cmp	r3, #16
 80068f6:	d11b      	bne.n	8006930 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f06f 0210 	mvn.w	r2, #16
 8006900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2208      	movs	r2, #8
 8006906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	69db      	ldr	r3, [r3, #28]
 800690e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006912:	2b00      	cmp	r3, #0
 8006914:	d003      	beq.n	800691e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f870 	bl	80069fc <HAL_TIM_IC_CaptureCallback>
 800691c:	e005      	b.n	800692a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 f862 	bl	80069e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 f873 	bl	8006a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	2b01      	cmp	r3, #1
 800693c:	d10e      	bne.n	800695c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	f003 0301 	and.w	r3, r3, #1
 8006948:	2b01      	cmp	r3, #1
 800694a:	d107      	bne.n	800695c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f06f 0201 	mvn.w	r2, #1
 8006954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f7fd f854 	bl	8003a04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006966:	2b80      	cmp	r3, #128	; 0x80
 8006968:	d10e      	bne.n	8006988 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006974:	2b80      	cmp	r3, #128	; 0x80
 8006976:	d107      	bne.n	8006988 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 f8e2 	bl	8006b4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006992:	2b40      	cmp	r3, #64	; 0x40
 8006994:	d10e      	bne.n	80069b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a0:	2b40      	cmp	r3, #64	; 0x40
 80069a2:	d107      	bne.n	80069b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80069ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 f838 	bl	8006a24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	f003 0320 	and.w	r3, r3, #32
 80069be:	2b20      	cmp	r3, #32
 80069c0:	d10e      	bne.n	80069e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	f003 0320 	and.w	r3, r3, #32
 80069cc:	2b20      	cmp	r3, #32
 80069ce:	d107      	bne.n	80069e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f06f 0220 	mvn.w	r2, #32
 80069d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 f8ac 	bl	8006b38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069e0:	bf00      	nop
 80069e2:	3708      	adds	r7, #8
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069f0:	bf00      	nop
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a04:	bf00      	nop
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a18:	bf00      	nop
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a2c:	bf00      	nop
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b085      	sub	sp, #20
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a34      	ldr	r2, [pc, #208]	; (8006b1c <TIM_Base_SetConfig+0xe4>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d00f      	beq.n	8006a70 <TIM_Base_SetConfig+0x38>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a56:	d00b      	beq.n	8006a70 <TIM_Base_SetConfig+0x38>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a31      	ldr	r2, [pc, #196]	; (8006b20 <TIM_Base_SetConfig+0xe8>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d007      	beq.n	8006a70 <TIM_Base_SetConfig+0x38>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a30      	ldr	r2, [pc, #192]	; (8006b24 <TIM_Base_SetConfig+0xec>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d003      	beq.n	8006a70 <TIM_Base_SetConfig+0x38>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a2f      	ldr	r2, [pc, #188]	; (8006b28 <TIM_Base_SetConfig+0xf0>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d108      	bne.n	8006a82 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a25      	ldr	r2, [pc, #148]	; (8006b1c <TIM_Base_SetConfig+0xe4>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d01b      	beq.n	8006ac2 <TIM_Base_SetConfig+0x8a>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a90:	d017      	beq.n	8006ac2 <TIM_Base_SetConfig+0x8a>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a22      	ldr	r2, [pc, #136]	; (8006b20 <TIM_Base_SetConfig+0xe8>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d013      	beq.n	8006ac2 <TIM_Base_SetConfig+0x8a>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a21      	ldr	r2, [pc, #132]	; (8006b24 <TIM_Base_SetConfig+0xec>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d00f      	beq.n	8006ac2 <TIM_Base_SetConfig+0x8a>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4a20      	ldr	r2, [pc, #128]	; (8006b28 <TIM_Base_SetConfig+0xf0>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d00b      	beq.n	8006ac2 <TIM_Base_SetConfig+0x8a>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4a1f      	ldr	r2, [pc, #124]	; (8006b2c <TIM_Base_SetConfig+0xf4>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d007      	beq.n	8006ac2 <TIM_Base_SetConfig+0x8a>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a1e      	ldr	r2, [pc, #120]	; (8006b30 <TIM_Base_SetConfig+0xf8>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d003      	beq.n	8006ac2 <TIM_Base_SetConfig+0x8a>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a1d      	ldr	r2, [pc, #116]	; (8006b34 <TIM_Base_SetConfig+0xfc>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d108      	bne.n	8006ad4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ac8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	68fa      	ldr	r2, [r7, #12]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	695b      	ldr	r3, [r3, #20]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	689a      	ldr	r2, [r3, #8]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4a08      	ldr	r2, [pc, #32]	; (8006b1c <TIM_Base_SetConfig+0xe4>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d103      	bne.n	8006b08 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	691a      	ldr	r2, [r3, #16]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	615a      	str	r2, [r3, #20]
}
 8006b0e:	bf00      	nop
 8006b10:	3714      	adds	r7, #20
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	40010000 	.word	0x40010000
 8006b20:	40000400 	.word	0x40000400
 8006b24:	40000800 	.word	0x40000800
 8006b28:	40000c00 	.word	0x40000c00
 8006b2c:	40014000 	.word	0x40014000
 8006b30:	40014400 	.word	0x40014400
 8006b34:	40014800 	.word	0x40014800

08006b38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b40:	bf00      	nop
 8006b42:	370c      	adds	r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b54:	bf00      	nop
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <__NVIC_SetPriority>:
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	4603      	mov	r3, r0
 8006b68:	6039      	str	r1, [r7, #0]
 8006b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	db0a      	blt.n	8006b8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	b2da      	uxtb	r2, r3
 8006b78:	490c      	ldr	r1, [pc, #48]	; (8006bac <__NVIC_SetPriority+0x4c>)
 8006b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b7e:	0112      	lsls	r2, r2, #4
 8006b80:	b2d2      	uxtb	r2, r2
 8006b82:	440b      	add	r3, r1
 8006b84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006b88:	e00a      	b.n	8006ba0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	b2da      	uxtb	r2, r3
 8006b8e:	4908      	ldr	r1, [pc, #32]	; (8006bb0 <__NVIC_SetPriority+0x50>)
 8006b90:	79fb      	ldrb	r3, [r7, #7]
 8006b92:	f003 030f 	and.w	r3, r3, #15
 8006b96:	3b04      	subs	r3, #4
 8006b98:	0112      	lsls	r2, r2, #4
 8006b9a:	b2d2      	uxtb	r2, r2
 8006b9c:	440b      	add	r3, r1
 8006b9e:	761a      	strb	r2, [r3, #24]
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr
 8006bac:	e000e100 	.word	0xe000e100
 8006bb0:	e000ed00 	.word	0xe000ed00

08006bb4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006bb8:	4b05      	ldr	r3, [pc, #20]	; (8006bd0 <SysTick_Handler+0x1c>)
 8006bba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006bbc:	f002 fa3e 	bl	800903c <xTaskGetSchedulerState>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d001      	beq.n	8006bca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006bc6:	f003 f927 	bl	8009e18 <xPortSysTickHandler>
  }
}
 8006bca:	bf00      	nop
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	e000e010 	.word	0xe000e010

08006bd4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006bd8:	2100      	movs	r1, #0
 8006bda:	f06f 0004 	mvn.w	r0, #4
 8006bde:	f7ff ffbf 	bl	8006b60 <__NVIC_SetPriority>
#endif
}
 8006be2:	bf00      	nop
 8006be4:	bd80      	pop	{r7, pc}
	...

08006be8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bee:	f3ef 8305 	mrs	r3, IPSR
 8006bf2:	603b      	str	r3, [r7, #0]
  return(result);
 8006bf4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d003      	beq.n	8006c02 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006bfa:	f06f 0305 	mvn.w	r3, #5
 8006bfe:	607b      	str	r3, [r7, #4]
 8006c00:	e00c      	b.n	8006c1c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006c02:	4b0a      	ldr	r3, [pc, #40]	; (8006c2c <osKernelInitialize+0x44>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d105      	bne.n	8006c16 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006c0a:	4b08      	ldr	r3, [pc, #32]	; (8006c2c <osKernelInitialize+0x44>)
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006c10:	2300      	movs	r3, #0
 8006c12:	607b      	str	r3, [r7, #4]
 8006c14:	e002      	b.n	8006c1c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006c16:	f04f 33ff 	mov.w	r3, #4294967295
 8006c1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006c1c:	687b      	ldr	r3, [r7, #4]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	370c      	adds	r7, #12
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	200000a0 	.word	0x200000a0

08006c30 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c36:	f3ef 8305 	mrs	r3, IPSR
 8006c3a:	603b      	str	r3, [r7, #0]
  return(result);
 8006c3c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d003      	beq.n	8006c4a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006c42:	f06f 0305 	mvn.w	r3, #5
 8006c46:	607b      	str	r3, [r7, #4]
 8006c48:	e010      	b.n	8006c6c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006c4a:	4b0b      	ldr	r3, [pc, #44]	; (8006c78 <osKernelStart+0x48>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d109      	bne.n	8006c66 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006c52:	f7ff ffbf 	bl	8006bd4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006c56:	4b08      	ldr	r3, [pc, #32]	; (8006c78 <osKernelStart+0x48>)
 8006c58:	2202      	movs	r2, #2
 8006c5a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006c5c:	f001 fd86 	bl	800876c <vTaskStartScheduler>
      stat = osOK;
 8006c60:	2300      	movs	r3, #0
 8006c62:	607b      	str	r3, [r7, #4]
 8006c64:	e002      	b.n	8006c6c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006c66:	f04f 33ff 	mov.w	r3, #4294967295
 8006c6a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006c6c:	687b      	ldr	r3, [r7, #4]
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3708      	adds	r7, #8
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	200000a0 	.word	0x200000a0

08006c7c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b08e      	sub	sp, #56	; 0x38
 8006c80:	af04      	add	r7, sp, #16
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c8c:	f3ef 8305 	mrs	r3, IPSR
 8006c90:	617b      	str	r3, [r7, #20]
  return(result);
 8006c92:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d17e      	bne.n	8006d96 <osThreadNew+0x11a>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d07b      	beq.n	8006d96 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006c9e:	2380      	movs	r3, #128	; 0x80
 8006ca0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006ca2:	2318      	movs	r3, #24
 8006ca4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006caa:	f04f 33ff 	mov.w	r3, #4294967295
 8006cae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d045      	beq.n	8006d42 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d002      	beq.n	8006cc4 <osThreadNew+0x48>
        name = attr->name;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	699b      	ldr	r3, [r3, #24]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d002      	beq.n	8006cd2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	699b      	ldr	r3, [r3, #24]
 8006cd0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d008      	beq.n	8006cea <osThreadNew+0x6e>
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	2b38      	cmp	r3, #56	; 0x38
 8006cdc:	d805      	bhi.n	8006cea <osThreadNew+0x6e>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	f003 0301 	and.w	r3, r3, #1
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d001      	beq.n	8006cee <osThreadNew+0x72>
        return (NULL);
 8006cea:	2300      	movs	r3, #0
 8006cec:	e054      	b.n	8006d98 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	695b      	ldr	r3, [r3, #20]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d003      	beq.n	8006cfe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	695b      	ldr	r3, [r3, #20]
 8006cfa:	089b      	lsrs	r3, r3, #2
 8006cfc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00e      	beq.n	8006d24 <osThreadNew+0xa8>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	2b5b      	cmp	r3, #91	; 0x5b
 8006d0c:	d90a      	bls.n	8006d24 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d006      	beq.n	8006d24 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	695b      	ldr	r3, [r3, #20]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d002      	beq.n	8006d24 <osThreadNew+0xa8>
        mem = 1;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	61bb      	str	r3, [r7, #24]
 8006d22:	e010      	b.n	8006d46 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d10c      	bne.n	8006d46 <osThreadNew+0xca>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d108      	bne.n	8006d46 <osThreadNew+0xca>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d104      	bne.n	8006d46 <osThreadNew+0xca>
          mem = 0;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	61bb      	str	r3, [r7, #24]
 8006d40:	e001      	b.n	8006d46 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006d42:	2300      	movs	r3, #0
 8006d44:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d110      	bne.n	8006d6e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006d54:	9202      	str	r2, [sp, #8]
 8006d56:	9301      	str	r3, [sp, #4]
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	9300      	str	r3, [sp, #0]
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	6a3a      	ldr	r2, [r7, #32]
 8006d60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d62:	68f8      	ldr	r0, [r7, #12]
 8006d64:	f001 f9b8 	bl	80080d8 <xTaskCreateStatic>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	613b      	str	r3, [r7, #16]
 8006d6c:	e013      	b.n	8006d96 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d110      	bne.n	8006d96 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006d74:	6a3b      	ldr	r3, [r7, #32]
 8006d76:	b29a      	uxth	r2, r3
 8006d78:	f107 0310 	add.w	r3, r7, #16
 8006d7c:	9301      	str	r3, [sp, #4]
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	9300      	str	r3, [sp, #0]
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f001 fa03 	bl	8008192 <xTaskCreate>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d001      	beq.n	8006d96 <osThreadNew+0x11a>
            hTask = NULL;
 8006d92:	2300      	movs	r3, #0
 8006d94:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006d96:	693b      	ldr	r3, [r7, #16]
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3728      	adds	r7, #40	; 0x28
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <osThreadGetState>:
  id = (osThreadId_t)xTaskGetCurrentTaskHandle();

  return (id);
}

osThreadState_t osThreadGetState (osThreadId_t thread_id) {
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b086      	sub	sp, #24
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dac:	f3ef 8305 	mrs	r3, IPSR
 8006db0:	60fb      	str	r3, [r7, #12]
  return(result);
 8006db2:	68fb      	ldr	r3, [r7, #12]
  osThreadState_t state;

  if (IS_IRQ() || (hTask == NULL)) {
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d102      	bne.n	8006dbe <osThreadGetState+0x1e>
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d103      	bne.n	8006dc6 <osThreadGetState+0x26>
    state = osThreadError;
 8006dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8006dc2:	617b      	str	r3, [r7, #20]
 8006dc4:	e022      	b.n	8006e0c <osThreadGetState+0x6c>
  }
  else {
    switch (eTaskGetState (hTask)) {
 8006dc6:	6938      	ldr	r0, [r7, #16]
 8006dc8:	f001 fbda 	bl	8008580 <eTaskGetState>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b04      	cmp	r3, #4
 8006dd0:	d818      	bhi.n	8006e04 <osThreadGetState+0x64>
 8006dd2:	a201      	add	r2, pc, #4	; (adr r2, 8006dd8 <osThreadGetState+0x38>)
 8006dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd8:	08006ded 	.word	0x08006ded
 8006ddc:	08006df3 	.word	0x08006df3
 8006de0:	08006df9 	.word	0x08006df9
 8006de4:	08006df9 	.word	0x08006df9
 8006de8:	08006dff 	.word	0x08006dff
      case eRunning:   state = osThreadRunning;    break;
 8006dec:	2302      	movs	r3, #2
 8006dee:	617b      	str	r3, [r7, #20]
 8006df0:	e00c      	b.n	8006e0c <osThreadGetState+0x6c>
      case eReady:     state = osThreadReady;      break;
 8006df2:	2301      	movs	r3, #1
 8006df4:	617b      	str	r3, [r7, #20]
 8006df6:	e009      	b.n	8006e0c <osThreadGetState+0x6c>
      case eBlocked:
      case eSuspended: state = osThreadBlocked;    break;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	617b      	str	r3, [r7, #20]
 8006dfc:	e006      	b.n	8006e0c <osThreadGetState+0x6c>
      case eDeleted:   state = osThreadTerminated; break;
 8006dfe:	2304      	movs	r3, #4
 8006e00:	617b      	str	r3, [r7, #20]
 8006e02:	e003      	b.n	8006e0c <osThreadGetState+0x6c>
      case eInvalid:
      default:         state = osThreadError;      break;
 8006e04:	f04f 33ff 	mov.w	r3, #4294967295
 8006e08:	617b      	str	r3, [r7, #20]
 8006e0a:	bf00      	nop
    }
  }

  return (state);
 8006e0c:	697b      	ldr	r3, [r7, #20]
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3718      	adds	r7, #24
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop

08006e18 <osThreadResume>:
  }

  return (stat);
}

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b086      	sub	sp, #24
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e24:	f3ef 8305 	mrs	r3, IPSR
 8006e28:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d003      	beq.n	8006e38 <osThreadResume+0x20>
    stat = osErrorISR;
 8006e30:	f06f 0305 	mvn.w	r3, #5
 8006e34:	617b      	str	r3, [r7, #20]
 8006e36:	e00b      	b.n	8006e50 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d103      	bne.n	8006e46 <osThreadResume+0x2e>
    stat = osErrorParameter;
 8006e3e:	f06f 0303 	mvn.w	r3, #3
 8006e42:	617b      	str	r3, [r7, #20]
 8006e44:	e004      	b.n	8006e50 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 8006e46:	2300      	movs	r3, #0
 8006e48:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8006e4a:	6938      	ldr	r0, [r7, #16]
 8006e4c:	f001 fc30 	bl	80086b0 <vTaskResume>
  }

  return (stat);
 8006e50:	697b      	ldr	r3, [r7, #20]
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3718      	adds	r7, #24
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}

08006e5a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006e5a:	b580      	push	{r7, lr}
 8006e5c:	b084      	sub	sp, #16
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e62:	f3ef 8305 	mrs	r3, IPSR
 8006e66:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e68:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d003      	beq.n	8006e76 <osDelay+0x1c>
    stat = osErrorISR;
 8006e6e:	f06f 0305 	mvn.w	r3, #5
 8006e72:	60fb      	str	r3, [r7, #12]
 8006e74:	e007      	b.n	8006e86 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006e76:	2300      	movs	r3, #0
 8006e78:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d002      	beq.n	8006e86 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f001 fb49 	bl	8008518 <vTaskDelay>
    }
  }

  return (stat);
 8006e86:	68fb      	ldr	r3, [r7, #12]
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3710      	adds	r7, #16
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b086      	sub	sp, #24
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e98:	f3ef 8305 	mrs	r3, IPSR
 8006e9c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d003      	beq.n	8006eac <osDelayUntil+0x1c>
    stat = osErrorISR;
 8006ea4:	f06f 0305 	mvn.w	r3, #5
 8006ea8:	617b      	str	r3, [r7, #20]
 8006eaa:	e019      	b.n	8006ee0 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8006eac:	2300      	movs	r3, #0
 8006eae:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8006eb0:	f001 fd6e 	bl	8008990 <xTaskGetTickCount>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d009      	beq.n	8006eda <osDelayUntil+0x4a>
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	db06      	blt.n	8006eda <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8006ecc:	f107 0308 	add.w	r3, r7, #8
 8006ed0:	6939      	ldr	r1, [r7, #16]
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f001 faa2 	bl	800841c <vTaskDelayUntil>
 8006ed8:	e002      	b.n	8006ee0 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8006eda:	f06f 0303 	mvn.w	r3, #3
 8006ede:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006ee0:	697b      	ldr	r3, [r7, #20]
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3718      	adds	r7, #24
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}

08006eea <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b088      	sub	sp, #32
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ef6:	f3ef 8305 	mrs	r3, IPSR
 8006efa:	60bb      	str	r3, [r7, #8]
  return(result);
 8006efc:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d174      	bne.n	8006fec <osMutexNew+0x102>
    if (attr != NULL) {
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d003      	beq.n	8006f10 <osMutexNew+0x26>
      type = attr->attr_bits;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	61bb      	str	r3, [r7, #24]
 8006f0e:	e001      	b.n	8006f14 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8006f10:	2300      	movs	r3, #0
 8006f12:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	f003 0301 	and.w	r3, r3, #1
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d002      	beq.n	8006f24 <osMutexNew+0x3a>
      rmtx = 1U;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	617b      	str	r3, [r7, #20]
 8006f22:	e001      	b.n	8006f28 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8006f24:	2300      	movs	r3, #0
 8006f26:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	f003 0308 	and.w	r3, r3, #8
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d15c      	bne.n	8006fec <osMutexNew+0x102>
      mem = -1;
 8006f32:	f04f 33ff 	mov.w	r3, #4294967295
 8006f36:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d015      	beq.n	8006f6a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d006      	beq.n	8006f54 <osMutexNew+0x6a>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	2b4f      	cmp	r3, #79	; 0x4f
 8006f4c:	d902      	bls.n	8006f54 <osMutexNew+0x6a>
          mem = 1;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	613b      	str	r3, [r7, #16]
 8006f52:	e00c      	b.n	8006f6e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d108      	bne.n	8006f6e <osMutexNew+0x84>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d104      	bne.n	8006f6e <osMutexNew+0x84>
            mem = 0;
 8006f64:	2300      	movs	r3, #0
 8006f66:	613b      	str	r3, [r7, #16]
 8006f68:	e001      	b.n	8006f6e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d112      	bne.n	8006f9a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d007      	beq.n	8006f8a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	4619      	mov	r1, r3
 8006f80:	2004      	movs	r0, #4
 8006f82:	f000 fb18 	bl	80075b6 <xQueueCreateMutexStatic>
 8006f86:	61f8      	str	r0, [r7, #28]
 8006f88:	e016      	b.n	8006fb8 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	4619      	mov	r1, r3
 8006f90:	2001      	movs	r0, #1
 8006f92:	f000 fb10 	bl	80075b6 <xQueueCreateMutexStatic>
 8006f96:	61f8      	str	r0, [r7, #28]
 8006f98:	e00e      	b.n	8006fb8 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d10b      	bne.n	8006fb8 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d004      	beq.n	8006fb0 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006fa6:	2004      	movs	r0, #4
 8006fa8:	f000 faed 	bl	8007586 <xQueueCreateMutex>
 8006fac:	61f8      	str	r0, [r7, #28]
 8006fae:	e003      	b.n	8006fb8 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8006fb0:	2001      	movs	r0, #1
 8006fb2:	f000 fae8 	bl	8007586 <xQueueCreateMutex>
 8006fb6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00c      	beq.n	8006fd8 <osMutexNew+0xee>
        if (attr != NULL) {
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d003      	beq.n	8006fcc <osMutexNew+0xe2>
          name = attr->name;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	60fb      	str	r3, [r7, #12]
 8006fca:	e001      	b.n	8006fd0 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8006fd0:	68f9      	ldr	r1, [r7, #12]
 8006fd2:	69f8      	ldr	r0, [r7, #28]
 8006fd4:	f001 f822 	bl	800801c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d006      	beq.n	8006fec <osMutexNew+0x102>
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d003      	beq.n	8006fec <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	f043 0301 	orr.w	r3, r3, #1
 8006fea:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006fec:	69fb      	ldr	r3, [r7, #28]
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3720      	adds	r7, #32
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b086      	sub	sp, #24
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
 8006ffe:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f023 0301 	bic.w	r3, r3, #1
 8007006:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f003 0301 	and.w	r3, r3, #1
 800700e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007010:	2300      	movs	r3, #0
 8007012:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007014:	f3ef 8305 	mrs	r3, IPSR
 8007018:	60bb      	str	r3, [r7, #8]
  return(result);
 800701a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800701c:	2b00      	cmp	r3, #0
 800701e:	d003      	beq.n	8007028 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8007020:	f06f 0305 	mvn.w	r3, #5
 8007024:	617b      	str	r3, [r7, #20]
 8007026:	e02c      	b.n	8007082 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d103      	bne.n	8007036 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800702e:	f06f 0303 	mvn.w	r3, #3
 8007032:	617b      	str	r3, [r7, #20]
 8007034:	e025      	b.n	8007082 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d011      	beq.n	8007060 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800703c:	6839      	ldr	r1, [r7, #0]
 800703e:	6938      	ldr	r0, [r7, #16]
 8007040:	f000 fb08 	bl	8007654 <xQueueTakeMutexRecursive>
 8007044:	4603      	mov	r3, r0
 8007046:	2b01      	cmp	r3, #1
 8007048:	d01b      	beq.n	8007082 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d003      	beq.n	8007058 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8007050:	f06f 0301 	mvn.w	r3, #1
 8007054:	617b      	str	r3, [r7, #20]
 8007056:	e014      	b.n	8007082 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007058:	f06f 0302 	mvn.w	r3, #2
 800705c:	617b      	str	r3, [r7, #20]
 800705e:	e010      	b.n	8007082 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8007060:	6839      	ldr	r1, [r7, #0]
 8007062:	6938      	ldr	r0, [r7, #16]
 8007064:	f000 fda6 	bl	8007bb4 <xQueueSemaphoreTake>
 8007068:	4603      	mov	r3, r0
 800706a:	2b01      	cmp	r3, #1
 800706c:	d009      	beq.n	8007082 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d003      	beq.n	800707c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8007074:	f06f 0301 	mvn.w	r3, #1
 8007078:	617b      	str	r3, [r7, #20]
 800707a:	e002      	b.n	8007082 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800707c:	f06f 0302 	mvn.w	r3, #2
 8007080:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8007082:	697b      	ldr	r3, [r7, #20]
}
 8007084:	4618      	mov	r0, r3
 8007086:	3718      	adds	r7, #24
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800708c:	b580      	push	{r7, lr}
 800708e:	b086      	sub	sp, #24
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f023 0301 	bic.w	r3, r3, #1
 800709a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80070a4:	2300      	movs	r3, #0
 80070a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070a8:	f3ef 8305 	mrs	r3, IPSR
 80070ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80070ae:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d003      	beq.n	80070bc <osMutexRelease+0x30>
    stat = osErrorISR;
 80070b4:	f06f 0305 	mvn.w	r3, #5
 80070b8:	617b      	str	r3, [r7, #20]
 80070ba:	e01f      	b.n	80070fc <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d103      	bne.n	80070ca <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80070c2:	f06f 0303 	mvn.w	r3, #3
 80070c6:	617b      	str	r3, [r7, #20]
 80070c8:	e018      	b.n	80070fc <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d009      	beq.n	80070e4 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80070d0:	6938      	ldr	r0, [r7, #16]
 80070d2:	f000 fa8b 	bl	80075ec <xQueueGiveMutexRecursive>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d00f      	beq.n	80070fc <osMutexRelease+0x70>
        stat = osErrorResource;
 80070dc:	f06f 0302 	mvn.w	r3, #2
 80070e0:	617b      	str	r3, [r7, #20]
 80070e2:	e00b      	b.n	80070fc <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80070e4:	2300      	movs	r3, #0
 80070e6:	2200      	movs	r2, #0
 80070e8:	2100      	movs	r1, #0
 80070ea:	6938      	ldr	r0, [r7, #16]
 80070ec:	f000 fae8 	bl	80076c0 <xQueueGenericSend>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d002      	beq.n	80070fc <osMutexRelease+0x70>
        stat = osErrorResource;
 80070f6:	f06f 0302 	mvn.w	r3, #2
 80070fa:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80070fc:	697b      	ldr	r3, [r7, #20]
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3718      	adds	r7, #24
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
	...

08007108 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007108:	b480      	push	{r7}
 800710a:	b085      	sub	sp, #20
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	4a07      	ldr	r2, [pc, #28]	; (8007134 <vApplicationGetIdleTaskMemory+0x2c>)
 8007118:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	4a06      	ldr	r2, [pc, #24]	; (8007138 <vApplicationGetIdleTaskMemory+0x30>)
 800711e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2280      	movs	r2, #128	; 0x80
 8007124:	601a      	str	r2, [r3, #0]
}
 8007126:	bf00      	nop
 8007128:	3714      	adds	r7, #20
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	200000a4 	.word	0x200000a4
 8007138:	20000100 	.word	0x20000100

0800713c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800713c:	b480      	push	{r7}
 800713e:	b085      	sub	sp, #20
 8007140:	af00      	add	r7, sp, #0
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	60b9      	str	r1, [r7, #8]
 8007146:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	4a07      	ldr	r2, [pc, #28]	; (8007168 <vApplicationGetTimerTaskMemory+0x2c>)
 800714c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	4a06      	ldr	r2, [pc, #24]	; (800716c <vApplicationGetTimerTaskMemory+0x30>)
 8007152:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f44f 7280 	mov.w	r2, #256	; 0x100
 800715a:	601a      	str	r2, [r3, #0]
}
 800715c:	bf00      	nop
 800715e:	3714      	adds	r7, #20
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr
 8007168:	20000300 	.word	0x20000300
 800716c:	2000035c 	.word	0x2000035c

08007170 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f103 0208 	add.w	r2, r3, #8
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f04f 32ff 	mov.w	r2, #4294967295
 8007188:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f103 0208 	add.w	r2, r3, #8
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f103 0208 	add.w	r2, r3, #8
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80071a4:	bf00      	nop
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80071be:	bf00      	nop
 80071c0:	370c      	adds	r7, #12
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr

080071ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071ca:	b480      	push	{r7}
 80071cc:	b085      	sub	sp, #20
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
 80071d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	68fa      	ldr	r2, [r7, #12]
 80071de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	689a      	ldr	r2, [r3, #8]
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	683a      	ldr	r2, [r7, #0]
 80071ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	683a      	ldr	r2, [r7, #0]
 80071f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	1c5a      	adds	r2, r3, #1
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	601a      	str	r2, [r3, #0]
}
 8007206:	bf00      	nop
 8007208:	3714      	adds	r7, #20
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr

08007212 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007212:	b480      	push	{r7}
 8007214:	b085      	sub	sp, #20
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
 800721a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007228:	d103      	bne.n	8007232 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	60fb      	str	r3, [r7, #12]
 8007230:	e00c      	b.n	800724c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	3308      	adds	r3, #8
 8007236:	60fb      	str	r3, [r7, #12]
 8007238:	e002      	b.n	8007240 <vListInsert+0x2e>
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	60fb      	str	r3, [r7, #12]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68ba      	ldr	r2, [r7, #8]
 8007248:	429a      	cmp	r2, r3
 800724a:	d2f6      	bcs.n	800723a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	685a      	ldr	r2, [r3, #4]
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	683a      	ldr	r2, [r7, #0]
 800725a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	683a      	ldr	r2, [r7, #0]
 8007266:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	1c5a      	adds	r2, r3, #1
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	601a      	str	r2, [r3, #0]
}
 8007278:	bf00      	nop
 800727a:	3714      	adds	r7, #20
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007284:	b480      	push	{r7}
 8007286:	b085      	sub	sp, #20
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	6892      	ldr	r2, [r2, #8]
 800729a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	6852      	ldr	r2, [r2, #4]
 80072a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d103      	bne.n	80072b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	689a      	ldr	r2, [r3, #8]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	1e5a      	subs	r2, r3, #1
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3714      	adds	r7, #20
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d10a      	bne.n	8007302 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80072ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f0:	f383 8811 	msr	BASEPRI, r3
 80072f4:	f3bf 8f6f 	isb	sy
 80072f8:	f3bf 8f4f 	dsb	sy
 80072fc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80072fe:	bf00      	nop
 8007300:	e7fe      	b.n	8007300 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007302:	f002 fcf7 	bl	8009cf4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800730e:	68f9      	ldr	r1, [r7, #12]
 8007310:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007312:	fb01 f303 	mul.w	r3, r1, r3
 8007316:	441a      	add	r2, r3
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2200      	movs	r2, #0
 8007320:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007332:	3b01      	subs	r3, #1
 8007334:	68f9      	ldr	r1, [r7, #12]
 8007336:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007338:	fb01 f303 	mul.w	r3, r1, r3
 800733c:	441a      	add	r2, r3
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	22ff      	movs	r2, #255	; 0xff
 8007346:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	22ff      	movs	r2, #255	; 0xff
 800734e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d114      	bne.n	8007382 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	691b      	ldr	r3, [r3, #16]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d01a      	beq.n	8007396 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	3310      	adds	r3, #16
 8007364:	4618      	mov	r0, r3
 8007366:	f001 fc99 	bl	8008c9c <xTaskRemoveFromEventList>
 800736a:	4603      	mov	r3, r0
 800736c:	2b00      	cmp	r3, #0
 800736e:	d012      	beq.n	8007396 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007370:	4b0c      	ldr	r3, [pc, #48]	; (80073a4 <xQueueGenericReset+0xcc>)
 8007372:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007376:	601a      	str	r2, [r3, #0]
 8007378:	f3bf 8f4f 	dsb	sy
 800737c:	f3bf 8f6f 	isb	sy
 8007380:	e009      	b.n	8007396 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	3310      	adds	r3, #16
 8007386:	4618      	mov	r0, r3
 8007388:	f7ff fef2 	bl	8007170 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	3324      	adds	r3, #36	; 0x24
 8007390:	4618      	mov	r0, r3
 8007392:	f7ff feed 	bl	8007170 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007396:	f002 fcdd 	bl	8009d54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800739a:	2301      	movs	r3, #1
}
 800739c:	4618      	mov	r0, r3
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	e000ed04 	.word	0xe000ed04

080073a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b08e      	sub	sp, #56	; 0x38
 80073ac:	af02      	add	r7, sp, #8
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	60b9      	str	r1, [r7, #8]
 80073b2:	607a      	str	r2, [r7, #4]
 80073b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d10a      	bne.n	80073d2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80073bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c0:	f383 8811 	msr	BASEPRI, r3
 80073c4:	f3bf 8f6f 	isb	sy
 80073c8:	f3bf 8f4f 	dsb	sy
 80073cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80073ce:	bf00      	nop
 80073d0:	e7fe      	b.n	80073d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d10a      	bne.n	80073ee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80073d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073dc:	f383 8811 	msr	BASEPRI, r3
 80073e0:	f3bf 8f6f 	isb	sy
 80073e4:	f3bf 8f4f 	dsb	sy
 80073e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80073ea:	bf00      	nop
 80073ec:	e7fe      	b.n	80073ec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d002      	beq.n	80073fa <xQueueGenericCreateStatic+0x52>
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d001      	beq.n	80073fe <xQueueGenericCreateStatic+0x56>
 80073fa:	2301      	movs	r3, #1
 80073fc:	e000      	b.n	8007400 <xQueueGenericCreateStatic+0x58>
 80073fe:	2300      	movs	r3, #0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d10a      	bne.n	800741a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007408:	f383 8811 	msr	BASEPRI, r3
 800740c:	f3bf 8f6f 	isb	sy
 8007410:	f3bf 8f4f 	dsb	sy
 8007414:	623b      	str	r3, [r7, #32]
}
 8007416:	bf00      	nop
 8007418:	e7fe      	b.n	8007418 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d102      	bne.n	8007426 <xQueueGenericCreateStatic+0x7e>
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d101      	bne.n	800742a <xQueueGenericCreateStatic+0x82>
 8007426:	2301      	movs	r3, #1
 8007428:	e000      	b.n	800742c <xQueueGenericCreateStatic+0x84>
 800742a:	2300      	movs	r3, #0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d10a      	bne.n	8007446 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	61fb      	str	r3, [r7, #28]
}
 8007442:	bf00      	nop
 8007444:	e7fe      	b.n	8007444 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007446:	2350      	movs	r3, #80	; 0x50
 8007448:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	2b50      	cmp	r3, #80	; 0x50
 800744e:	d00a      	beq.n	8007466 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007454:	f383 8811 	msr	BASEPRI, r3
 8007458:	f3bf 8f6f 	isb	sy
 800745c:	f3bf 8f4f 	dsb	sy
 8007460:	61bb      	str	r3, [r7, #24]
}
 8007462:	bf00      	nop
 8007464:	e7fe      	b.n	8007464 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007466:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800746c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00d      	beq.n	800748e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007474:	2201      	movs	r2, #1
 8007476:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800747a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800747e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007480:	9300      	str	r3, [sp, #0]
 8007482:	4613      	mov	r3, r2
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	68b9      	ldr	r1, [r7, #8]
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f000 f83f 	bl	800750c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800748e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007490:	4618      	mov	r0, r3
 8007492:	3730      	adds	r7, #48	; 0x30
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007498:	b580      	push	{r7, lr}
 800749a:	b08a      	sub	sp, #40	; 0x28
 800749c:	af02      	add	r7, sp, #8
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	4613      	mov	r3, r2
 80074a4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d10a      	bne.n	80074c2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80074ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b0:	f383 8811 	msr	BASEPRI, r3
 80074b4:	f3bf 8f6f 	isb	sy
 80074b8:	f3bf 8f4f 	dsb	sy
 80074bc:	613b      	str	r3, [r7, #16]
}
 80074be:	bf00      	nop
 80074c0:	e7fe      	b.n	80074c0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	68ba      	ldr	r2, [r7, #8]
 80074c6:	fb02 f303 	mul.w	r3, r2, r3
 80074ca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	3350      	adds	r3, #80	; 0x50
 80074d0:	4618      	mov	r0, r3
 80074d2:	f002 fd31 	bl	8009f38 <pvPortMalloc>
 80074d6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80074d8:	69bb      	ldr	r3, [r7, #24]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d011      	beq.n	8007502 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	3350      	adds	r3, #80	; 0x50
 80074e6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80074f0:	79fa      	ldrb	r2, [r7, #7]
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	9300      	str	r3, [sp, #0]
 80074f6:	4613      	mov	r3, r2
 80074f8:	697a      	ldr	r2, [r7, #20]
 80074fa:	68b9      	ldr	r1, [r7, #8]
 80074fc:	68f8      	ldr	r0, [r7, #12]
 80074fe:	f000 f805 	bl	800750c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007502:	69bb      	ldr	r3, [r7, #24]
	}
 8007504:	4618      	mov	r0, r3
 8007506:	3720      	adds	r7, #32
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	607a      	str	r2, [r7, #4]
 8007518:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d103      	bne.n	8007528 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	69ba      	ldr	r2, [r7, #24]
 8007524:	601a      	str	r2, [r3, #0]
 8007526:	e002      	b.n	800752e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	68fa      	ldr	r2, [r7, #12]
 8007532:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	68ba      	ldr	r2, [r7, #8]
 8007538:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800753a:	2101      	movs	r1, #1
 800753c:	69b8      	ldr	r0, [r7, #24]
 800753e:	f7ff fecb 	bl	80072d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	78fa      	ldrb	r2, [r7, #3]
 8007546:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800754a:	bf00      	nop
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007552:	b580      	push	{r7, lr}
 8007554:	b082      	sub	sp, #8
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d00e      	beq.n	800757e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007572:	2300      	movs	r3, #0
 8007574:	2200      	movs	r2, #0
 8007576:	2100      	movs	r1, #0
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 f8a1 	bl	80076c0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800757e:	bf00      	nop
 8007580:	3708      	adds	r7, #8
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007586:	b580      	push	{r7, lr}
 8007588:	b086      	sub	sp, #24
 800758a:	af00      	add	r7, sp, #0
 800758c:	4603      	mov	r3, r0
 800758e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007590:	2301      	movs	r3, #1
 8007592:	617b      	str	r3, [r7, #20]
 8007594:	2300      	movs	r3, #0
 8007596:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007598:	79fb      	ldrb	r3, [r7, #7]
 800759a:	461a      	mov	r2, r3
 800759c:	6939      	ldr	r1, [r7, #16]
 800759e:	6978      	ldr	r0, [r7, #20]
 80075a0:	f7ff ff7a 	bl	8007498 <xQueueGenericCreate>
 80075a4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f7ff ffd3 	bl	8007552 <prvInitialiseMutex>

		return xNewQueue;
 80075ac:	68fb      	ldr	r3, [r7, #12]
	}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3718      	adds	r7, #24
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b088      	sub	sp, #32
 80075ba:	af02      	add	r7, sp, #8
 80075bc:	4603      	mov	r3, r0
 80075be:	6039      	str	r1, [r7, #0]
 80075c0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80075c2:	2301      	movs	r3, #1
 80075c4:	617b      	str	r3, [r7, #20]
 80075c6:	2300      	movs	r3, #0
 80075c8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80075ca:	79fb      	ldrb	r3, [r7, #7]
 80075cc:	9300      	str	r3, [sp, #0]
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	2200      	movs	r2, #0
 80075d2:	6939      	ldr	r1, [r7, #16]
 80075d4:	6978      	ldr	r0, [r7, #20]
 80075d6:	f7ff fee7 	bl	80073a8 <xQueueGenericCreateStatic>
 80075da:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80075dc:	68f8      	ldr	r0, [r7, #12]
 80075de:	f7ff ffb8 	bl	8007552 <prvInitialiseMutex>

		return xNewQueue;
 80075e2:	68fb      	ldr	r3, [r7, #12]
	}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3718      	adds	r7, #24
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80075ec:	b590      	push	{r4, r7, lr}
 80075ee:	b087      	sub	sp, #28
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d10a      	bne.n	8007614 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80075fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007602:	f383 8811 	msr	BASEPRI, r3
 8007606:	f3bf 8f6f 	isb	sy
 800760a:	f3bf 8f4f 	dsb	sy
 800760e:	60fb      	str	r3, [r7, #12]
}
 8007610:	bf00      	nop
 8007612:	e7fe      	b.n	8007612 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	689c      	ldr	r4, [r3, #8]
 8007618:	f001 fd00 	bl	800901c <xTaskGetCurrentTaskHandle>
 800761c:	4603      	mov	r3, r0
 800761e:	429c      	cmp	r4, r3
 8007620:	d111      	bne.n	8007646 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	1e5a      	subs	r2, r3, #1
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d105      	bne.n	8007640 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007634:	2300      	movs	r3, #0
 8007636:	2200      	movs	r2, #0
 8007638:	2100      	movs	r1, #0
 800763a:	6938      	ldr	r0, [r7, #16]
 800763c:	f000 f840 	bl	80076c0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007640:	2301      	movs	r3, #1
 8007642:	617b      	str	r3, [r7, #20]
 8007644:	e001      	b.n	800764a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007646:	2300      	movs	r3, #0
 8007648:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800764a:	697b      	ldr	r3, [r7, #20]
	}
 800764c:	4618      	mov	r0, r3
 800764e:	371c      	adds	r7, #28
 8007650:	46bd      	mov	sp, r7
 8007652:	bd90      	pop	{r4, r7, pc}

08007654 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007654:	b590      	push	{r4, r7, lr}
 8007656:	b087      	sub	sp, #28
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d10a      	bne.n	800767e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8007668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766c:	f383 8811 	msr	BASEPRI, r3
 8007670:	f3bf 8f6f 	isb	sy
 8007674:	f3bf 8f4f 	dsb	sy
 8007678:	60fb      	str	r3, [r7, #12]
}
 800767a:	bf00      	nop
 800767c:	e7fe      	b.n	800767c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	689c      	ldr	r4, [r3, #8]
 8007682:	f001 fccb 	bl	800901c <xTaskGetCurrentTaskHandle>
 8007686:	4603      	mov	r3, r0
 8007688:	429c      	cmp	r4, r3
 800768a:	d107      	bne.n	800769c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	1c5a      	adds	r2, r3, #1
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007696:	2301      	movs	r3, #1
 8007698:	617b      	str	r3, [r7, #20]
 800769a:	e00c      	b.n	80076b6 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800769c:	6839      	ldr	r1, [r7, #0]
 800769e:	6938      	ldr	r0, [r7, #16]
 80076a0:	f000 fa88 	bl	8007bb4 <xQueueSemaphoreTake>
 80076a4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d004      	beq.n	80076b6 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	1c5a      	adds	r2, r3, #1
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80076b6:	697b      	ldr	r3, [r7, #20]
	}
 80076b8:	4618      	mov	r0, r3
 80076ba:	371c      	adds	r7, #28
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd90      	pop	{r4, r7, pc}

080076c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b08e      	sub	sp, #56	; 0x38
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	607a      	str	r2, [r7, #4]
 80076cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80076ce:	2300      	movs	r3, #0
 80076d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80076d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d10a      	bne.n	80076f2 <xQueueGenericSend+0x32>
	__asm volatile
 80076dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e0:	f383 8811 	msr	BASEPRI, r3
 80076e4:	f3bf 8f6f 	isb	sy
 80076e8:	f3bf 8f4f 	dsb	sy
 80076ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80076ee:	bf00      	nop
 80076f0:	e7fe      	b.n	80076f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d103      	bne.n	8007700 <xQueueGenericSend+0x40>
 80076f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d101      	bne.n	8007704 <xQueueGenericSend+0x44>
 8007700:	2301      	movs	r3, #1
 8007702:	e000      	b.n	8007706 <xQueueGenericSend+0x46>
 8007704:	2300      	movs	r3, #0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d10a      	bne.n	8007720 <xQueueGenericSend+0x60>
	__asm volatile
 800770a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770e:	f383 8811 	msr	BASEPRI, r3
 8007712:	f3bf 8f6f 	isb	sy
 8007716:	f3bf 8f4f 	dsb	sy
 800771a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800771c:	bf00      	nop
 800771e:	e7fe      	b.n	800771e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	2b02      	cmp	r3, #2
 8007724:	d103      	bne.n	800772e <xQueueGenericSend+0x6e>
 8007726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800772a:	2b01      	cmp	r3, #1
 800772c:	d101      	bne.n	8007732 <xQueueGenericSend+0x72>
 800772e:	2301      	movs	r3, #1
 8007730:	e000      	b.n	8007734 <xQueueGenericSend+0x74>
 8007732:	2300      	movs	r3, #0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d10a      	bne.n	800774e <xQueueGenericSend+0x8e>
	__asm volatile
 8007738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800773c:	f383 8811 	msr	BASEPRI, r3
 8007740:	f3bf 8f6f 	isb	sy
 8007744:	f3bf 8f4f 	dsb	sy
 8007748:	623b      	str	r3, [r7, #32]
}
 800774a:	bf00      	nop
 800774c:	e7fe      	b.n	800774c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800774e:	f001 fc75 	bl	800903c <xTaskGetSchedulerState>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d102      	bne.n	800775e <xQueueGenericSend+0x9e>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d101      	bne.n	8007762 <xQueueGenericSend+0xa2>
 800775e:	2301      	movs	r3, #1
 8007760:	e000      	b.n	8007764 <xQueueGenericSend+0xa4>
 8007762:	2300      	movs	r3, #0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d10a      	bne.n	800777e <xQueueGenericSend+0xbe>
	__asm volatile
 8007768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776c:	f383 8811 	msr	BASEPRI, r3
 8007770:	f3bf 8f6f 	isb	sy
 8007774:	f3bf 8f4f 	dsb	sy
 8007778:	61fb      	str	r3, [r7, #28]
}
 800777a:	bf00      	nop
 800777c:	e7fe      	b.n	800777c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800777e:	f002 fab9 	bl	8009cf4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007784:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800778a:	429a      	cmp	r2, r3
 800778c:	d302      	bcc.n	8007794 <xQueueGenericSend+0xd4>
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	2b02      	cmp	r3, #2
 8007792:	d129      	bne.n	80077e8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007794:	683a      	ldr	r2, [r7, #0]
 8007796:	68b9      	ldr	r1, [r7, #8]
 8007798:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800779a:	f000 fb2f 	bl	8007dfc <prvCopyDataToQueue>
 800779e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d010      	beq.n	80077ca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077aa:	3324      	adds	r3, #36	; 0x24
 80077ac:	4618      	mov	r0, r3
 80077ae:	f001 fa75 	bl	8008c9c <xTaskRemoveFromEventList>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d013      	beq.n	80077e0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80077b8:	4b3f      	ldr	r3, [pc, #252]	; (80078b8 <xQueueGenericSend+0x1f8>)
 80077ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077be:	601a      	str	r2, [r3, #0]
 80077c0:	f3bf 8f4f 	dsb	sy
 80077c4:	f3bf 8f6f 	isb	sy
 80077c8:	e00a      	b.n	80077e0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80077ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d007      	beq.n	80077e0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80077d0:	4b39      	ldr	r3, [pc, #228]	; (80078b8 <xQueueGenericSend+0x1f8>)
 80077d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077d6:	601a      	str	r2, [r3, #0]
 80077d8:	f3bf 8f4f 	dsb	sy
 80077dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80077e0:	f002 fab8 	bl	8009d54 <vPortExitCritical>
				return pdPASS;
 80077e4:	2301      	movs	r3, #1
 80077e6:	e063      	b.n	80078b0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d103      	bne.n	80077f6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80077ee:	f002 fab1 	bl	8009d54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80077f2:	2300      	movs	r3, #0
 80077f4:	e05c      	b.n	80078b0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80077f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d106      	bne.n	800780a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80077fc:	f107 0314 	add.w	r3, r7, #20
 8007800:	4618      	mov	r0, r3
 8007802:	f001 faaf 	bl	8008d64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007806:	2301      	movs	r3, #1
 8007808:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800780a:	f002 faa3 	bl	8009d54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800780e:	f001 f813 	bl	8008838 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007812:	f002 fa6f 	bl	8009cf4 <vPortEnterCritical>
 8007816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007818:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800781c:	b25b      	sxtb	r3, r3
 800781e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007822:	d103      	bne.n	800782c <xQueueGenericSend+0x16c>
 8007824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007826:	2200      	movs	r2, #0
 8007828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800782c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007832:	b25b      	sxtb	r3, r3
 8007834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007838:	d103      	bne.n	8007842 <xQueueGenericSend+0x182>
 800783a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783c:	2200      	movs	r2, #0
 800783e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007842:	f002 fa87 	bl	8009d54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007846:	1d3a      	adds	r2, r7, #4
 8007848:	f107 0314 	add.w	r3, r7, #20
 800784c:	4611      	mov	r1, r2
 800784e:	4618      	mov	r0, r3
 8007850:	f001 fa9e 	bl	8008d90 <xTaskCheckForTimeOut>
 8007854:	4603      	mov	r3, r0
 8007856:	2b00      	cmp	r3, #0
 8007858:	d124      	bne.n	80078a4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800785a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800785c:	f000 fbc6 	bl	8007fec <prvIsQueueFull>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d018      	beq.n	8007898 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007868:	3310      	adds	r3, #16
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	4611      	mov	r1, r2
 800786e:	4618      	mov	r0, r3
 8007870:	f001 f9c4 	bl	8008bfc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007874:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007876:	f000 fb51 	bl	8007f1c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800787a:	f000 ffeb 	bl	8008854 <xTaskResumeAll>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	f47f af7c 	bne.w	800777e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007886:	4b0c      	ldr	r3, [pc, #48]	; (80078b8 <xQueueGenericSend+0x1f8>)
 8007888:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800788c:	601a      	str	r2, [r3, #0]
 800788e:	f3bf 8f4f 	dsb	sy
 8007892:	f3bf 8f6f 	isb	sy
 8007896:	e772      	b.n	800777e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007898:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800789a:	f000 fb3f 	bl	8007f1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800789e:	f000 ffd9 	bl	8008854 <xTaskResumeAll>
 80078a2:	e76c      	b.n	800777e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80078a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078a6:	f000 fb39 	bl	8007f1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80078aa:	f000 ffd3 	bl	8008854 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80078ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3738      	adds	r7, #56	; 0x38
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	e000ed04 	.word	0xe000ed04

080078bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b090      	sub	sp, #64	; 0x40
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
 80078c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80078ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d10a      	bne.n	80078ea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80078d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d8:	f383 8811 	msr	BASEPRI, r3
 80078dc:	f3bf 8f6f 	isb	sy
 80078e0:	f3bf 8f4f 	dsb	sy
 80078e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80078e6:	bf00      	nop
 80078e8:	e7fe      	b.n	80078e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d103      	bne.n	80078f8 <xQueueGenericSendFromISR+0x3c>
 80078f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d101      	bne.n	80078fc <xQueueGenericSendFromISR+0x40>
 80078f8:	2301      	movs	r3, #1
 80078fa:	e000      	b.n	80078fe <xQueueGenericSendFromISR+0x42>
 80078fc:	2300      	movs	r3, #0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d10a      	bne.n	8007918 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007906:	f383 8811 	msr	BASEPRI, r3
 800790a:	f3bf 8f6f 	isb	sy
 800790e:	f3bf 8f4f 	dsb	sy
 8007912:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007914:	bf00      	nop
 8007916:	e7fe      	b.n	8007916 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	2b02      	cmp	r3, #2
 800791c:	d103      	bne.n	8007926 <xQueueGenericSendFromISR+0x6a>
 800791e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007922:	2b01      	cmp	r3, #1
 8007924:	d101      	bne.n	800792a <xQueueGenericSendFromISR+0x6e>
 8007926:	2301      	movs	r3, #1
 8007928:	e000      	b.n	800792c <xQueueGenericSendFromISR+0x70>
 800792a:	2300      	movs	r3, #0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d10a      	bne.n	8007946 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007934:	f383 8811 	msr	BASEPRI, r3
 8007938:	f3bf 8f6f 	isb	sy
 800793c:	f3bf 8f4f 	dsb	sy
 8007940:	623b      	str	r3, [r7, #32]
}
 8007942:	bf00      	nop
 8007944:	e7fe      	b.n	8007944 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007946:	f002 fab7 	bl	8009eb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800794a:	f3ef 8211 	mrs	r2, BASEPRI
 800794e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007952:	f383 8811 	msr	BASEPRI, r3
 8007956:	f3bf 8f6f 	isb	sy
 800795a:	f3bf 8f4f 	dsb	sy
 800795e:	61fa      	str	r2, [r7, #28]
 8007960:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007962:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007964:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007968:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800796a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800796c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800796e:	429a      	cmp	r2, r3
 8007970:	d302      	bcc.n	8007978 <xQueueGenericSendFromISR+0xbc>
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	2b02      	cmp	r3, #2
 8007976:	d12f      	bne.n	80079d8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800797a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800797e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007986:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007988:	683a      	ldr	r2, [r7, #0]
 800798a:	68b9      	ldr	r1, [r7, #8]
 800798c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800798e:	f000 fa35 	bl	8007dfc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007992:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800799a:	d112      	bne.n	80079c2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800799c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800799e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d016      	beq.n	80079d2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a6:	3324      	adds	r3, #36	; 0x24
 80079a8:	4618      	mov	r0, r3
 80079aa:	f001 f977 	bl	8008c9c <xTaskRemoveFromEventList>
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00e      	beq.n	80079d2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d00b      	beq.n	80079d2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2201      	movs	r2, #1
 80079be:	601a      	str	r2, [r3, #0]
 80079c0:	e007      	b.n	80079d2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80079c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80079c6:	3301      	adds	r3, #1
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	b25a      	sxtb	r2, r3
 80079cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80079d2:	2301      	movs	r3, #1
 80079d4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80079d6:	e001      	b.n	80079dc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80079d8:	2300      	movs	r3, #0
 80079da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079de:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80079e6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80079e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3740      	adds	r7, #64	; 0x40
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
	...

080079f4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b08c      	sub	sp, #48	; 0x30
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	60b9      	str	r1, [r7, #8]
 80079fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007a00:	2300      	movs	r3, #0
 8007a02:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d10a      	bne.n	8007a24 <xQueueReceive+0x30>
	__asm volatile
 8007a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a12:	f383 8811 	msr	BASEPRI, r3
 8007a16:	f3bf 8f6f 	isb	sy
 8007a1a:	f3bf 8f4f 	dsb	sy
 8007a1e:	623b      	str	r3, [r7, #32]
}
 8007a20:	bf00      	nop
 8007a22:	e7fe      	b.n	8007a22 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d103      	bne.n	8007a32 <xQueueReceive+0x3e>
 8007a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d101      	bne.n	8007a36 <xQueueReceive+0x42>
 8007a32:	2301      	movs	r3, #1
 8007a34:	e000      	b.n	8007a38 <xQueueReceive+0x44>
 8007a36:	2300      	movs	r3, #0
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d10a      	bne.n	8007a52 <xQueueReceive+0x5e>
	__asm volatile
 8007a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a40:	f383 8811 	msr	BASEPRI, r3
 8007a44:	f3bf 8f6f 	isb	sy
 8007a48:	f3bf 8f4f 	dsb	sy
 8007a4c:	61fb      	str	r3, [r7, #28]
}
 8007a4e:	bf00      	nop
 8007a50:	e7fe      	b.n	8007a50 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a52:	f001 faf3 	bl	800903c <xTaskGetSchedulerState>
 8007a56:	4603      	mov	r3, r0
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d102      	bne.n	8007a62 <xQueueReceive+0x6e>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d101      	bne.n	8007a66 <xQueueReceive+0x72>
 8007a62:	2301      	movs	r3, #1
 8007a64:	e000      	b.n	8007a68 <xQueueReceive+0x74>
 8007a66:	2300      	movs	r3, #0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d10a      	bne.n	8007a82 <xQueueReceive+0x8e>
	__asm volatile
 8007a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a70:	f383 8811 	msr	BASEPRI, r3
 8007a74:	f3bf 8f6f 	isb	sy
 8007a78:	f3bf 8f4f 	dsb	sy
 8007a7c:	61bb      	str	r3, [r7, #24]
}
 8007a7e:	bf00      	nop
 8007a80:	e7fe      	b.n	8007a80 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a82:	f002 f937 	bl	8009cf4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a8a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d01f      	beq.n	8007ad2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007a92:	68b9      	ldr	r1, [r7, #8]
 8007a94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a96:	f000 fa1b 	bl	8007ed0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9c:	1e5a      	subs	r2, r3, #1
 8007a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa4:	691b      	ldr	r3, [r3, #16]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d00f      	beq.n	8007aca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aac:	3310      	adds	r3, #16
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f001 f8f4 	bl	8008c9c <xTaskRemoveFromEventList>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d007      	beq.n	8007aca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007aba:	4b3d      	ldr	r3, [pc, #244]	; (8007bb0 <xQueueReceive+0x1bc>)
 8007abc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ac0:	601a      	str	r2, [r3, #0]
 8007ac2:	f3bf 8f4f 	dsb	sy
 8007ac6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007aca:	f002 f943 	bl	8009d54 <vPortExitCritical>
				return pdPASS;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e069      	b.n	8007ba6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d103      	bne.n	8007ae0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ad8:	f002 f93c 	bl	8009d54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007adc:	2300      	movs	r3, #0
 8007ade:	e062      	b.n	8007ba6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d106      	bne.n	8007af4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ae6:	f107 0310 	add.w	r3, r7, #16
 8007aea:	4618      	mov	r0, r3
 8007aec:	f001 f93a 	bl	8008d64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007af0:	2301      	movs	r3, #1
 8007af2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007af4:	f002 f92e 	bl	8009d54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007af8:	f000 fe9e 	bl	8008838 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007afc:	f002 f8fa 	bl	8009cf4 <vPortEnterCritical>
 8007b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b06:	b25b      	sxtb	r3, r3
 8007b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b0c:	d103      	bne.n	8007b16 <xQueueReceive+0x122>
 8007b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b1c:	b25b      	sxtb	r3, r3
 8007b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b22:	d103      	bne.n	8007b2c <xQueueReceive+0x138>
 8007b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b26:	2200      	movs	r2, #0
 8007b28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b2c:	f002 f912 	bl	8009d54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b30:	1d3a      	adds	r2, r7, #4
 8007b32:	f107 0310 	add.w	r3, r7, #16
 8007b36:	4611      	mov	r1, r2
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f001 f929 	bl	8008d90 <xTaskCheckForTimeOut>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d123      	bne.n	8007b8c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b46:	f000 fa3b 	bl	8007fc0 <prvIsQueueEmpty>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d017      	beq.n	8007b80 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b52:	3324      	adds	r3, #36	; 0x24
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	4611      	mov	r1, r2
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f001 f84f 	bl	8008bfc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007b5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b60:	f000 f9dc 	bl	8007f1c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007b64:	f000 fe76 	bl	8008854 <xTaskResumeAll>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d189      	bne.n	8007a82 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007b6e:	4b10      	ldr	r3, [pc, #64]	; (8007bb0 <xQueueReceive+0x1bc>)
 8007b70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b74:	601a      	str	r2, [r3, #0]
 8007b76:	f3bf 8f4f 	dsb	sy
 8007b7a:	f3bf 8f6f 	isb	sy
 8007b7e:	e780      	b.n	8007a82 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007b80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b82:	f000 f9cb 	bl	8007f1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b86:	f000 fe65 	bl	8008854 <xTaskResumeAll>
 8007b8a:	e77a      	b.n	8007a82 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007b8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b8e:	f000 f9c5 	bl	8007f1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b92:	f000 fe5f 	bl	8008854 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b98:	f000 fa12 	bl	8007fc0 <prvIsQueueEmpty>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f43f af6f 	beq.w	8007a82 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007ba4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3730      	adds	r7, #48	; 0x30
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	e000ed04 	.word	0xe000ed04

08007bb4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b08e      	sub	sp, #56	; 0x38
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d10a      	bne.n	8007be6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd4:	f383 8811 	msr	BASEPRI, r3
 8007bd8:	f3bf 8f6f 	isb	sy
 8007bdc:	f3bf 8f4f 	dsb	sy
 8007be0:	623b      	str	r3, [r7, #32]
}
 8007be2:	bf00      	nop
 8007be4:	e7fe      	b.n	8007be4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00a      	beq.n	8007c04 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf2:	f383 8811 	msr	BASEPRI, r3
 8007bf6:	f3bf 8f6f 	isb	sy
 8007bfa:	f3bf 8f4f 	dsb	sy
 8007bfe:	61fb      	str	r3, [r7, #28]
}
 8007c00:	bf00      	nop
 8007c02:	e7fe      	b.n	8007c02 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c04:	f001 fa1a 	bl	800903c <xTaskGetSchedulerState>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d102      	bne.n	8007c14 <xQueueSemaphoreTake+0x60>
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d101      	bne.n	8007c18 <xQueueSemaphoreTake+0x64>
 8007c14:	2301      	movs	r3, #1
 8007c16:	e000      	b.n	8007c1a <xQueueSemaphoreTake+0x66>
 8007c18:	2300      	movs	r3, #0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d10a      	bne.n	8007c34 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c22:	f383 8811 	msr	BASEPRI, r3
 8007c26:	f3bf 8f6f 	isb	sy
 8007c2a:	f3bf 8f4f 	dsb	sy
 8007c2e:	61bb      	str	r3, [r7, #24]
}
 8007c30:	bf00      	nop
 8007c32:	e7fe      	b.n	8007c32 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c34:	f002 f85e 	bl	8009cf4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c3c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d024      	beq.n	8007c8e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c46:	1e5a      	subs	r2, r3, #1
 8007c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c4a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d104      	bne.n	8007c5e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007c54:	f001 fb68 	bl	8009328 <pvTaskIncrementMutexHeldCount>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c5c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c60:	691b      	ldr	r3, [r3, #16]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d00f      	beq.n	8007c86 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c68:	3310      	adds	r3, #16
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f001 f816 	bl	8008c9c <xTaskRemoveFromEventList>
 8007c70:	4603      	mov	r3, r0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d007      	beq.n	8007c86 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007c76:	4b54      	ldr	r3, [pc, #336]	; (8007dc8 <xQueueSemaphoreTake+0x214>)
 8007c78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c7c:	601a      	str	r2, [r3, #0]
 8007c7e:	f3bf 8f4f 	dsb	sy
 8007c82:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007c86:	f002 f865 	bl	8009d54 <vPortExitCritical>
				return pdPASS;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e097      	b.n	8007dbe <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d111      	bne.n	8007cb8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00a      	beq.n	8007cb0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9e:	f383 8811 	msr	BASEPRI, r3
 8007ca2:	f3bf 8f6f 	isb	sy
 8007ca6:	f3bf 8f4f 	dsb	sy
 8007caa:	617b      	str	r3, [r7, #20]
}
 8007cac:	bf00      	nop
 8007cae:	e7fe      	b.n	8007cae <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007cb0:	f002 f850 	bl	8009d54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	e082      	b.n	8007dbe <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d106      	bne.n	8007ccc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007cbe:	f107 030c 	add.w	r3, r7, #12
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f001 f84e 	bl	8008d64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ccc:	f002 f842 	bl	8009d54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007cd0:	f000 fdb2 	bl	8008838 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007cd4:	f002 f80e 	bl	8009cf4 <vPortEnterCritical>
 8007cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007cde:	b25b      	sxtb	r3, r3
 8007ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ce4:	d103      	bne.n	8007cee <xQueueSemaphoreTake+0x13a>
 8007ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007cf4:	b25b      	sxtb	r3, r3
 8007cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cfa:	d103      	bne.n	8007d04 <xQueueSemaphoreTake+0x150>
 8007cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d04:	f002 f826 	bl	8009d54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d08:	463a      	mov	r2, r7
 8007d0a:	f107 030c 	add.w	r3, r7, #12
 8007d0e:	4611      	mov	r1, r2
 8007d10:	4618      	mov	r0, r3
 8007d12:	f001 f83d 	bl	8008d90 <xTaskCheckForTimeOut>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d132      	bne.n	8007d82 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d1e:	f000 f94f 	bl	8007fc0 <prvIsQueueEmpty>
 8007d22:	4603      	mov	r3, r0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d026      	beq.n	8007d76 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d109      	bne.n	8007d44 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007d30:	f001 ffe0 	bl	8009cf4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f001 f99d 	bl	8009078 <xTaskPriorityInherit>
 8007d3e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007d40:	f002 f808 	bl	8009d54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d46:	3324      	adds	r3, #36	; 0x24
 8007d48:	683a      	ldr	r2, [r7, #0]
 8007d4a:	4611      	mov	r1, r2
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f000 ff55 	bl	8008bfc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007d52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d54:	f000 f8e2 	bl	8007f1c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007d58:	f000 fd7c 	bl	8008854 <xTaskResumeAll>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	f47f af68 	bne.w	8007c34 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007d64:	4b18      	ldr	r3, [pc, #96]	; (8007dc8 <xQueueSemaphoreTake+0x214>)
 8007d66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d6a:	601a      	str	r2, [r3, #0]
 8007d6c:	f3bf 8f4f 	dsb	sy
 8007d70:	f3bf 8f6f 	isb	sy
 8007d74:	e75e      	b.n	8007c34 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007d76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d78:	f000 f8d0 	bl	8007f1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d7c:	f000 fd6a 	bl	8008854 <xTaskResumeAll>
 8007d80:	e758      	b.n	8007c34 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007d82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d84:	f000 f8ca 	bl	8007f1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d88:	f000 fd64 	bl	8008854 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d8e:	f000 f917 	bl	8007fc0 <prvIsQueueEmpty>
 8007d92:	4603      	mov	r3, r0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	f43f af4d 	beq.w	8007c34 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d00d      	beq.n	8007dbc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007da0:	f001 ffa8 	bl	8009cf4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007da4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007da6:	f000 f811 	bl	8007dcc <prvGetDisinheritPriorityAfterTimeout>
 8007daa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007db2:	4618      	mov	r0, r3
 8007db4:	f001 fa36 	bl	8009224 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007db8:	f001 ffcc 	bl	8009d54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007dbc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3738      	adds	r7, #56	; 0x38
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	e000ed04 	.word	0xe000ed04

08007dcc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007dcc:	b480      	push	{r7}
 8007dce:	b085      	sub	sp, #20
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d006      	beq.n	8007dea <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007de6:	60fb      	str	r3, [r7, #12]
 8007de8:	e001      	b.n	8007dee <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007dea:	2300      	movs	r3, #0
 8007dec:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007dee:	68fb      	ldr	r3, [r7, #12]
	}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3714      	adds	r7, #20
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b086      	sub	sp, #24
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e10:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d10d      	bne.n	8007e36 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d14d      	bne.n	8007ebe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	4618      	mov	r0, r3
 8007e28:	f001 f98e 	bl	8009148 <xTaskPriorityDisinherit>
 8007e2c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2200      	movs	r2, #0
 8007e32:	609a      	str	r2, [r3, #8]
 8007e34:	e043      	b.n	8007ebe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d119      	bne.n	8007e70 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6858      	ldr	r0, [r3, #4]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e44:	461a      	mov	r2, r3
 8007e46:	68b9      	ldr	r1, [r7, #8]
 8007e48:	f002 faba 	bl	800a3c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	685a      	ldr	r2, [r3, #4]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e54:	441a      	add	r2, r3
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	685a      	ldr	r2, [r3, #4]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d32b      	bcc.n	8007ebe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	605a      	str	r2, [r3, #4]
 8007e6e:	e026      	b.n	8007ebe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	68d8      	ldr	r0, [r3, #12]
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e78:	461a      	mov	r2, r3
 8007e7a:	68b9      	ldr	r1, [r7, #8]
 8007e7c:	f002 faa0 	bl	800a3c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	68da      	ldr	r2, [r3, #12]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e88:	425b      	negs	r3, r3
 8007e8a:	441a      	add	r2, r3
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	68da      	ldr	r2, [r3, #12]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d207      	bcs.n	8007eac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	689a      	ldr	r2, [r3, #8]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea4:	425b      	negs	r3, r3
 8007ea6:	441a      	add	r2, r3
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2b02      	cmp	r3, #2
 8007eb0:	d105      	bne.n	8007ebe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d002      	beq.n	8007ebe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	1c5a      	adds	r2, r3, #1
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007ec6:	697b      	ldr	r3, [r7, #20]
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3718      	adds	r7, #24
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d018      	beq.n	8007f14 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	68da      	ldr	r2, [r3, #12]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eea:	441a      	add	r2, r3
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	68da      	ldr	r2, [r3, #12]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d303      	bcc.n	8007f04 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	68d9      	ldr	r1, [r3, #12]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	6838      	ldr	r0, [r7, #0]
 8007f10:	f002 fa56 	bl	800a3c0 <memcpy>
	}
}
 8007f14:	bf00      	nop
 8007f16:	3708      	adds	r7, #8
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007f24:	f001 fee6 	bl	8009cf4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f2e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f30:	e011      	b.n	8007f56 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d012      	beq.n	8007f60 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	3324      	adds	r3, #36	; 0x24
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f000 feac 	bl	8008c9c <xTaskRemoveFromEventList>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d001      	beq.n	8007f4e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007f4a:	f000 ff83 	bl	8008e54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007f4e:	7bfb      	ldrb	r3, [r7, #15]
 8007f50:	3b01      	subs	r3, #1
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	dce9      	bgt.n	8007f32 <prvUnlockQueue+0x16>
 8007f5e:	e000      	b.n	8007f62 <prvUnlockQueue+0x46>
					break;
 8007f60:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	22ff      	movs	r2, #255	; 0xff
 8007f66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007f6a:	f001 fef3 	bl	8009d54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007f6e:	f001 fec1 	bl	8009cf4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f78:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f7a:	e011      	b.n	8007fa0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	691b      	ldr	r3, [r3, #16]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d012      	beq.n	8007faa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	3310      	adds	r3, #16
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f000 fe87 	bl	8008c9c <xTaskRemoveFromEventList>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d001      	beq.n	8007f98 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007f94:	f000 ff5e 	bl	8008e54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007f98:	7bbb      	ldrb	r3, [r7, #14]
 8007f9a:	3b01      	subs	r3, #1
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007fa0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	dce9      	bgt.n	8007f7c <prvUnlockQueue+0x60>
 8007fa8:	e000      	b.n	8007fac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007faa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	22ff      	movs	r2, #255	; 0xff
 8007fb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007fb4:	f001 fece 	bl	8009d54 <vPortExitCritical>
}
 8007fb8:	bf00      	nop
 8007fba:	3710      	adds	r7, #16
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007fc8:	f001 fe94 	bl	8009cf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d102      	bne.n	8007fda <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	60fb      	str	r3, [r7, #12]
 8007fd8:	e001      	b.n	8007fde <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007fde:	f001 feb9 	bl	8009d54 <vPortExitCritical>

	return xReturn;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3710      	adds	r7, #16
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ff4:	f001 fe7e 	bl	8009cf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008000:	429a      	cmp	r2, r3
 8008002:	d102      	bne.n	800800a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008004:	2301      	movs	r3, #1
 8008006:	60fb      	str	r3, [r7, #12]
 8008008:	e001      	b.n	800800e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800800a:	2300      	movs	r3, #0
 800800c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800800e:	f001 fea1 	bl	8009d54 <vPortExitCritical>

	return xReturn;
 8008012:	68fb      	ldr	r3, [r7, #12]
}
 8008014:	4618      	mov	r0, r3
 8008016:	3710      	adds	r7, #16
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800801c:	b480      	push	{r7}
 800801e:	b085      	sub	sp, #20
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008026:	2300      	movs	r3, #0
 8008028:	60fb      	str	r3, [r7, #12]
 800802a:	e014      	b.n	8008056 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800802c:	4a0f      	ldr	r2, [pc, #60]	; (800806c <vQueueAddToRegistry+0x50>)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d10b      	bne.n	8008050 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008038:	490c      	ldr	r1, [pc, #48]	; (800806c <vQueueAddToRegistry+0x50>)
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	683a      	ldr	r2, [r7, #0]
 800803e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008042:	4a0a      	ldr	r2, [pc, #40]	; (800806c <vQueueAddToRegistry+0x50>)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	00db      	lsls	r3, r3, #3
 8008048:	4413      	add	r3, r2
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800804e:	e006      	b.n	800805e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	3301      	adds	r3, #1
 8008054:	60fb      	str	r3, [r7, #12]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2b07      	cmp	r3, #7
 800805a:	d9e7      	bls.n	800802c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800805c:	bf00      	nop
 800805e:	bf00      	nop
 8008060:	3714      	adds	r7, #20
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	200051a4 	.word	0x200051a4

08008070 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008070:	b580      	push	{r7, lr}
 8008072:	b086      	sub	sp, #24
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008080:	f001 fe38 	bl	8009cf4 <vPortEnterCritical>
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800808a:	b25b      	sxtb	r3, r3
 800808c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008090:	d103      	bne.n	800809a <vQueueWaitForMessageRestricted+0x2a>
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	2200      	movs	r2, #0
 8008096:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080a0:	b25b      	sxtb	r3, r3
 80080a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080a6:	d103      	bne.n	80080b0 <vQueueWaitForMessageRestricted+0x40>
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080b0:	f001 fe50 	bl	8009d54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d106      	bne.n	80080ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	3324      	adds	r3, #36	; 0x24
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	68b9      	ldr	r1, [r7, #8]
 80080c4:	4618      	mov	r0, r3
 80080c6:	f000 fdbd 	bl	8008c44 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80080ca:	6978      	ldr	r0, [r7, #20]
 80080cc:	f7ff ff26 	bl	8007f1c <prvUnlockQueue>
	}
 80080d0:	bf00      	nop
 80080d2:	3718      	adds	r7, #24
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b08e      	sub	sp, #56	; 0x38
 80080dc:	af04      	add	r7, sp, #16
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	60b9      	str	r1, [r7, #8]
 80080e2:	607a      	str	r2, [r7, #4]
 80080e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80080e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d10a      	bne.n	8008102 <xTaskCreateStatic+0x2a>
	__asm volatile
 80080ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f0:	f383 8811 	msr	BASEPRI, r3
 80080f4:	f3bf 8f6f 	isb	sy
 80080f8:	f3bf 8f4f 	dsb	sy
 80080fc:	623b      	str	r3, [r7, #32]
}
 80080fe:	bf00      	nop
 8008100:	e7fe      	b.n	8008100 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008104:	2b00      	cmp	r3, #0
 8008106:	d10a      	bne.n	800811e <xTaskCreateStatic+0x46>
	__asm volatile
 8008108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810c:	f383 8811 	msr	BASEPRI, r3
 8008110:	f3bf 8f6f 	isb	sy
 8008114:	f3bf 8f4f 	dsb	sy
 8008118:	61fb      	str	r3, [r7, #28]
}
 800811a:	bf00      	nop
 800811c:	e7fe      	b.n	800811c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800811e:	235c      	movs	r3, #92	; 0x5c
 8008120:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	2b5c      	cmp	r3, #92	; 0x5c
 8008126:	d00a      	beq.n	800813e <xTaskCreateStatic+0x66>
	__asm volatile
 8008128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800812c:	f383 8811 	msr	BASEPRI, r3
 8008130:	f3bf 8f6f 	isb	sy
 8008134:	f3bf 8f4f 	dsb	sy
 8008138:	61bb      	str	r3, [r7, #24]
}
 800813a:	bf00      	nop
 800813c:	e7fe      	b.n	800813c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800813e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008142:	2b00      	cmp	r3, #0
 8008144:	d01e      	beq.n	8008184 <xTaskCreateStatic+0xac>
 8008146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008148:	2b00      	cmp	r3, #0
 800814a:	d01b      	beq.n	8008184 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800814c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800814e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008152:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008154:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008158:	2202      	movs	r2, #2
 800815a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800815e:	2300      	movs	r3, #0
 8008160:	9303      	str	r3, [sp, #12]
 8008162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008164:	9302      	str	r3, [sp, #8]
 8008166:	f107 0314 	add.w	r3, r7, #20
 800816a:	9301      	str	r3, [sp, #4]
 800816c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816e:	9300      	str	r3, [sp, #0]
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	68b9      	ldr	r1, [r7, #8]
 8008176:	68f8      	ldr	r0, [r7, #12]
 8008178:	f000 f850 	bl	800821c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800817c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800817e:	f000 f8dd 	bl	800833c <prvAddNewTaskToReadyList>
 8008182:	e001      	b.n	8008188 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008184:	2300      	movs	r3, #0
 8008186:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008188:	697b      	ldr	r3, [r7, #20]
	}
 800818a:	4618      	mov	r0, r3
 800818c:	3728      	adds	r7, #40	; 0x28
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}

08008192 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008192:	b580      	push	{r7, lr}
 8008194:	b08c      	sub	sp, #48	; 0x30
 8008196:	af04      	add	r7, sp, #16
 8008198:	60f8      	str	r0, [r7, #12]
 800819a:	60b9      	str	r1, [r7, #8]
 800819c:	603b      	str	r3, [r7, #0]
 800819e:	4613      	mov	r3, r2
 80081a0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80081a2:	88fb      	ldrh	r3, [r7, #6]
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	4618      	mov	r0, r3
 80081a8:	f001 fec6 	bl	8009f38 <pvPortMalloc>
 80081ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00e      	beq.n	80081d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80081b4:	205c      	movs	r0, #92	; 0x5c
 80081b6:	f001 febf 	bl	8009f38 <pvPortMalloc>
 80081ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d003      	beq.n	80081ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80081c2:	69fb      	ldr	r3, [r7, #28]
 80081c4:	697a      	ldr	r2, [r7, #20]
 80081c6:	631a      	str	r2, [r3, #48]	; 0x30
 80081c8:	e005      	b.n	80081d6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80081ca:	6978      	ldr	r0, [r7, #20]
 80081cc:	f001 ff84 	bl	800a0d8 <vPortFree>
 80081d0:	e001      	b.n	80081d6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80081d2:	2300      	movs	r3, #0
 80081d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80081d6:	69fb      	ldr	r3, [r7, #28]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d017      	beq.n	800820c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80081dc:	69fb      	ldr	r3, [r7, #28]
 80081de:	2200      	movs	r2, #0
 80081e0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80081e4:	88fa      	ldrh	r2, [r7, #6]
 80081e6:	2300      	movs	r3, #0
 80081e8:	9303      	str	r3, [sp, #12]
 80081ea:	69fb      	ldr	r3, [r7, #28]
 80081ec:	9302      	str	r3, [sp, #8]
 80081ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f0:	9301      	str	r3, [sp, #4]
 80081f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f4:	9300      	str	r3, [sp, #0]
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	68b9      	ldr	r1, [r7, #8]
 80081fa:	68f8      	ldr	r0, [r7, #12]
 80081fc:	f000 f80e 	bl	800821c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008200:	69f8      	ldr	r0, [r7, #28]
 8008202:	f000 f89b 	bl	800833c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008206:	2301      	movs	r3, #1
 8008208:	61bb      	str	r3, [r7, #24]
 800820a:	e002      	b.n	8008212 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800820c:	f04f 33ff 	mov.w	r3, #4294967295
 8008210:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008212:	69bb      	ldr	r3, [r7, #24]
	}
 8008214:	4618      	mov	r0, r3
 8008216:	3720      	adds	r7, #32
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b088      	sub	sp, #32
 8008220:	af00      	add	r7, sp, #0
 8008222:	60f8      	str	r0, [r7, #12]
 8008224:	60b9      	str	r1, [r7, #8]
 8008226:	607a      	str	r2, [r7, #4]
 8008228:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800822a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	461a      	mov	r2, r3
 8008234:	21a5      	movs	r1, #165	; 0xa5
 8008236:	f002 f8d1 	bl	800a3dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800823a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800823c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008244:	3b01      	subs	r3, #1
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	4413      	add	r3, r2
 800824a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800824c:	69bb      	ldr	r3, [r7, #24]
 800824e:	f023 0307 	bic.w	r3, r3, #7
 8008252:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008254:	69bb      	ldr	r3, [r7, #24]
 8008256:	f003 0307 	and.w	r3, r3, #7
 800825a:	2b00      	cmp	r3, #0
 800825c:	d00a      	beq.n	8008274 <prvInitialiseNewTask+0x58>
	__asm volatile
 800825e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008262:	f383 8811 	msr	BASEPRI, r3
 8008266:	f3bf 8f6f 	isb	sy
 800826a:	f3bf 8f4f 	dsb	sy
 800826e:	617b      	str	r3, [r7, #20]
}
 8008270:	bf00      	nop
 8008272:	e7fe      	b.n	8008272 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d01f      	beq.n	80082ba <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800827a:	2300      	movs	r3, #0
 800827c:	61fb      	str	r3, [r7, #28]
 800827e:	e012      	b.n	80082a6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008280:	68ba      	ldr	r2, [r7, #8]
 8008282:	69fb      	ldr	r3, [r7, #28]
 8008284:	4413      	add	r3, r2
 8008286:	7819      	ldrb	r1, [r3, #0]
 8008288:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800828a:	69fb      	ldr	r3, [r7, #28]
 800828c:	4413      	add	r3, r2
 800828e:	3334      	adds	r3, #52	; 0x34
 8008290:	460a      	mov	r2, r1
 8008292:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008294:	68ba      	ldr	r2, [r7, #8]
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	4413      	add	r3, r2
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d006      	beq.n	80082ae <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80082a0:	69fb      	ldr	r3, [r7, #28]
 80082a2:	3301      	adds	r3, #1
 80082a4:	61fb      	str	r3, [r7, #28]
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	2b0f      	cmp	r3, #15
 80082aa:	d9e9      	bls.n	8008280 <prvInitialiseNewTask+0x64>
 80082ac:	e000      	b.n	80082b0 <prvInitialiseNewTask+0x94>
			{
				break;
 80082ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80082b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b2:	2200      	movs	r2, #0
 80082b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80082b8:	e003      	b.n	80082c2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80082ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082bc:	2200      	movs	r2, #0
 80082be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80082c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c4:	2b37      	cmp	r3, #55	; 0x37
 80082c6:	d901      	bls.n	80082cc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80082c8:	2337      	movs	r3, #55	; 0x37
 80082ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80082cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80082d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082d6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80082d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082da:	2200      	movs	r2, #0
 80082dc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80082de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e0:	3304      	adds	r3, #4
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7fe ff64 	bl	80071b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80082e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ea:	3318      	adds	r3, #24
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7fe ff5f 	bl	80071b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80082f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80082fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008300:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008306:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830a:	2200      	movs	r2, #0
 800830c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800830e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008310:	2200      	movs	r2, #0
 8008312:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008316:	683a      	ldr	r2, [r7, #0]
 8008318:	68f9      	ldr	r1, [r7, #12]
 800831a:	69b8      	ldr	r0, [r7, #24]
 800831c:	f001 fbba 	bl	8009a94 <pxPortInitialiseStack>
 8008320:	4602      	mov	r2, r0
 8008322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008324:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008328:	2b00      	cmp	r3, #0
 800832a:	d002      	beq.n	8008332 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800832c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800832e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008330:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008332:	bf00      	nop
 8008334:	3720      	adds	r7, #32
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
	...

0800833c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008344:	f001 fcd6 	bl	8009cf4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008348:	4b2d      	ldr	r3, [pc, #180]	; (8008400 <prvAddNewTaskToReadyList+0xc4>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	3301      	adds	r3, #1
 800834e:	4a2c      	ldr	r2, [pc, #176]	; (8008400 <prvAddNewTaskToReadyList+0xc4>)
 8008350:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008352:	4b2c      	ldr	r3, [pc, #176]	; (8008404 <prvAddNewTaskToReadyList+0xc8>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d109      	bne.n	800836e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800835a:	4a2a      	ldr	r2, [pc, #168]	; (8008404 <prvAddNewTaskToReadyList+0xc8>)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008360:	4b27      	ldr	r3, [pc, #156]	; (8008400 <prvAddNewTaskToReadyList+0xc4>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	2b01      	cmp	r3, #1
 8008366:	d110      	bne.n	800838a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008368:	f000 fd9a 	bl	8008ea0 <prvInitialiseTaskLists>
 800836c:	e00d      	b.n	800838a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800836e:	4b26      	ldr	r3, [pc, #152]	; (8008408 <prvAddNewTaskToReadyList+0xcc>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d109      	bne.n	800838a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008376:	4b23      	ldr	r3, [pc, #140]	; (8008404 <prvAddNewTaskToReadyList+0xc8>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008380:	429a      	cmp	r2, r3
 8008382:	d802      	bhi.n	800838a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008384:	4a1f      	ldr	r2, [pc, #124]	; (8008404 <prvAddNewTaskToReadyList+0xc8>)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800838a:	4b20      	ldr	r3, [pc, #128]	; (800840c <prvAddNewTaskToReadyList+0xd0>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	3301      	adds	r3, #1
 8008390:	4a1e      	ldr	r2, [pc, #120]	; (800840c <prvAddNewTaskToReadyList+0xd0>)
 8008392:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008394:	4b1d      	ldr	r3, [pc, #116]	; (800840c <prvAddNewTaskToReadyList+0xd0>)
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083a0:	4b1b      	ldr	r3, [pc, #108]	; (8008410 <prvAddNewTaskToReadyList+0xd4>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d903      	bls.n	80083b0 <prvAddNewTaskToReadyList+0x74>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ac:	4a18      	ldr	r2, [pc, #96]	; (8008410 <prvAddNewTaskToReadyList+0xd4>)
 80083ae:	6013      	str	r3, [r2, #0]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083b4:	4613      	mov	r3, r2
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	4413      	add	r3, r2
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	4a15      	ldr	r2, [pc, #84]	; (8008414 <prvAddNewTaskToReadyList+0xd8>)
 80083be:	441a      	add	r2, r3
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	3304      	adds	r3, #4
 80083c4:	4619      	mov	r1, r3
 80083c6:	4610      	mov	r0, r2
 80083c8:	f7fe feff 	bl	80071ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80083cc:	f001 fcc2 	bl	8009d54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80083d0:	4b0d      	ldr	r3, [pc, #52]	; (8008408 <prvAddNewTaskToReadyList+0xcc>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d00e      	beq.n	80083f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80083d8:	4b0a      	ldr	r3, [pc, #40]	; (8008404 <prvAddNewTaskToReadyList+0xc8>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d207      	bcs.n	80083f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80083e6:	4b0c      	ldr	r3, [pc, #48]	; (8008418 <prvAddNewTaskToReadyList+0xdc>)
 80083e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083ec:	601a      	str	r2, [r3, #0]
 80083ee:	f3bf 8f4f 	dsb	sy
 80083f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083f6:	bf00      	nop
 80083f8:	3708      	adds	r7, #8
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	20000c30 	.word	0x20000c30
 8008404:	2000075c 	.word	0x2000075c
 8008408:	20000c3c 	.word	0x20000c3c
 800840c:	20000c4c 	.word	0x20000c4c
 8008410:	20000c38 	.word	0x20000c38
 8008414:	20000760 	.word	0x20000760
 8008418:	e000ed04 	.word	0xe000ed04

0800841c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800841c:	b580      	push	{r7, lr}
 800841e:	b08a      	sub	sp, #40	; 0x28
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8008426:	2300      	movs	r3, #0
 8008428:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d10a      	bne.n	8008446 <vTaskDelayUntil+0x2a>
	__asm volatile
 8008430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008434:	f383 8811 	msr	BASEPRI, r3
 8008438:	f3bf 8f6f 	isb	sy
 800843c:	f3bf 8f4f 	dsb	sy
 8008440:	617b      	str	r3, [r7, #20]
}
 8008442:	bf00      	nop
 8008444:	e7fe      	b.n	8008444 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d10a      	bne.n	8008462 <vTaskDelayUntil+0x46>
	__asm volatile
 800844c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008450:	f383 8811 	msr	BASEPRI, r3
 8008454:	f3bf 8f6f 	isb	sy
 8008458:	f3bf 8f4f 	dsb	sy
 800845c:	613b      	str	r3, [r7, #16]
}
 800845e:	bf00      	nop
 8008460:	e7fe      	b.n	8008460 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8008462:	4b2a      	ldr	r3, [pc, #168]	; (800850c <vTaskDelayUntil+0xf0>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00a      	beq.n	8008480 <vTaskDelayUntil+0x64>
	__asm volatile
 800846a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846e:	f383 8811 	msr	BASEPRI, r3
 8008472:	f3bf 8f6f 	isb	sy
 8008476:	f3bf 8f4f 	dsb	sy
 800847a:	60fb      	str	r3, [r7, #12]
}
 800847c:	bf00      	nop
 800847e:	e7fe      	b.n	800847e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8008480:	f000 f9da 	bl	8008838 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8008484:	4b22      	ldr	r3, [pc, #136]	; (8008510 <vTaskDelayUntil+0xf4>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	683a      	ldr	r2, [r7, #0]
 8008490:	4413      	add	r3, r2
 8008492:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	6a3a      	ldr	r2, [r7, #32]
 800849a:	429a      	cmp	r2, r3
 800849c:	d20b      	bcs.n	80084b6 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	69fa      	ldr	r2, [r7, #28]
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d211      	bcs.n	80084cc <vTaskDelayUntil+0xb0>
 80084a8:	69fa      	ldr	r2, [r7, #28]
 80084aa:	6a3b      	ldr	r3, [r7, #32]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d90d      	bls.n	80084cc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80084b0:	2301      	movs	r3, #1
 80084b2:	627b      	str	r3, [r7, #36]	; 0x24
 80084b4:	e00a      	b.n	80084cc <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	69fa      	ldr	r2, [r7, #28]
 80084bc:	429a      	cmp	r2, r3
 80084be:	d303      	bcc.n	80084c8 <vTaskDelayUntil+0xac>
 80084c0:	69fa      	ldr	r2, [r7, #28]
 80084c2:	6a3b      	ldr	r3, [r7, #32]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d901      	bls.n	80084cc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80084c8:	2301      	movs	r3, #1
 80084ca:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	69fa      	ldr	r2, [r7, #28]
 80084d0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80084d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d006      	beq.n	80084e6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80084d8:	69fa      	ldr	r2, [r7, #28]
 80084da:	6a3b      	ldr	r3, [r7, #32]
 80084dc:	1ad3      	subs	r3, r2, r3
 80084de:	2100      	movs	r1, #0
 80084e0:	4618      	mov	r0, r3
 80084e2:	f000 ff35 	bl	8009350 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80084e6:	f000 f9b5 	bl	8008854 <xTaskResumeAll>
 80084ea:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80084ec:	69bb      	ldr	r3, [r7, #24]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d107      	bne.n	8008502 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 80084f2:	4b08      	ldr	r3, [pc, #32]	; (8008514 <vTaskDelayUntil+0xf8>)
 80084f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084f8:	601a      	str	r2, [r3, #0]
 80084fa:	f3bf 8f4f 	dsb	sy
 80084fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008502:	bf00      	nop
 8008504:	3728      	adds	r7, #40	; 0x28
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
 800850a:	bf00      	nop
 800850c:	20000c58 	.word	0x20000c58
 8008510:	20000c34 	.word	0x20000c34
 8008514:	e000ed04 	.word	0xe000ed04

08008518 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008520:	2300      	movs	r3, #0
 8008522:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d017      	beq.n	800855a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800852a:	4b13      	ldr	r3, [pc, #76]	; (8008578 <vTaskDelay+0x60>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d00a      	beq.n	8008548 <vTaskDelay+0x30>
	__asm volatile
 8008532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008536:	f383 8811 	msr	BASEPRI, r3
 800853a:	f3bf 8f6f 	isb	sy
 800853e:	f3bf 8f4f 	dsb	sy
 8008542:	60bb      	str	r3, [r7, #8]
}
 8008544:	bf00      	nop
 8008546:	e7fe      	b.n	8008546 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008548:	f000 f976 	bl	8008838 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800854c:	2100      	movs	r1, #0
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 fefe 	bl	8009350 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008554:	f000 f97e 	bl	8008854 <xTaskResumeAll>
 8008558:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d107      	bne.n	8008570 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008560:	4b06      	ldr	r3, [pc, #24]	; (800857c <vTaskDelay+0x64>)
 8008562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008566:	601a      	str	r2, [r3, #0]
 8008568:	f3bf 8f4f 	dsb	sy
 800856c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008570:	bf00      	nop
 8008572:	3710      	adds	r7, #16
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}
 8008578:	20000c58 	.word	0x20000c58
 800857c:	e000ed04 	.word	0xe000ed04

08008580 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8008580:	b580      	push	{r7, lr}
 8008582:	b088      	sub	sp, #32
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800858c:	69bb      	ldr	r3, [r7, #24]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d10a      	bne.n	80085a8 <eTaskGetState+0x28>
	__asm volatile
 8008592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008596:	f383 8811 	msr	BASEPRI, r3
 800859a:	f3bf 8f6f 	isb	sy
 800859e:	f3bf 8f4f 	dsb	sy
 80085a2:	60bb      	str	r3, [r7, #8]
}
 80085a4:	bf00      	nop
 80085a6:	e7fe      	b.n	80085a6 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 80085a8:	4b23      	ldr	r3, [pc, #140]	; (8008638 <eTaskGetState+0xb8>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	69ba      	ldr	r2, [r7, #24]
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d102      	bne.n	80085b8 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80085b2:	2300      	movs	r3, #0
 80085b4:	77fb      	strb	r3, [r7, #31]
 80085b6:	e03a      	b.n	800862e <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 80085b8:	f001 fb9c 	bl	8009cf4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80085bc:	69bb      	ldr	r3, [r7, #24]
 80085be:	695b      	ldr	r3, [r3, #20]
 80085c0:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80085c2:	4b1e      	ldr	r3, [pc, #120]	; (800863c <eTaskGetState+0xbc>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80085c8:	4b1d      	ldr	r3, [pc, #116]	; (8008640 <eTaskGetState+0xc0>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80085ce:	f001 fbc1 	bl	8009d54 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80085d2:	697a      	ldr	r2, [r7, #20]
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d003      	beq.n	80085e2 <eTaskGetState+0x62>
 80085da:	697a      	ldr	r2, [r7, #20]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	429a      	cmp	r2, r3
 80085e0:	d102      	bne.n	80085e8 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80085e2:	2302      	movs	r3, #2
 80085e4:	77fb      	strb	r3, [r7, #31]
 80085e6:	e022      	b.n	800862e <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	4a16      	ldr	r2, [pc, #88]	; (8008644 <eTaskGetState+0xc4>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d112      	bne.n	8008616 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80085f0:	69bb      	ldr	r3, [r7, #24]
 80085f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d10b      	bne.n	8008610 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80085f8:	69bb      	ldr	r3, [r7, #24]
 80085fa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	2b01      	cmp	r3, #1
 8008602:	d102      	bne.n	800860a <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8008604:	2302      	movs	r3, #2
 8008606:	77fb      	strb	r3, [r7, #31]
 8008608:	e011      	b.n	800862e <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 800860a:	2303      	movs	r3, #3
 800860c:	77fb      	strb	r3, [r7, #31]
 800860e:	e00e      	b.n	800862e <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8008610:	2302      	movs	r3, #2
 8008612:	77fb      	strb	r3, [r7, #31]
 8008614:	e00b      	b.n	800862e <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	4a0b      	ldr	r2, [pc, #44]	; (8008648 <eTaskGetState+0xc8>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d002      	beq.n	8008624 <eTaskGetState+0xa4>
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d102      	bne.n	800862a <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8008624:	2304      	movs	r3, #4
 8008626:	77fb      	strb	r3, [r7, #31]
 8008628:	e001      	b.n	800862e <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800862a:	2301      	movs	r3, #1
 800862c:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800862e:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8008630:	4618      	mov	r0, r3
 8008632:	3720      	adds	r7, #32
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}
 8008638:	2000075c 	.word	0x2000075c
 800863c:	20000be8 	.word	0x20000be8
 8008640:	20000bec 	.word	0x20000bec
 8008644:	20000c1c 	.word	0x20000c1c
 8008648:	20000c04 	.word	0x20000c04

0800864c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800864c:	b480      	push	{r7}
 800864e:	b087      	sub	sp, #28
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8008654:	2300      	movs	r3, #0
 8008656:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d10a      	bne.n	8008678 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8008662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008666:	f383 8811 	msr	BASEPRI, r3
 800866a:	f3bf 8f6f 	isb	sy
 800866e:	f3bf 8f4f 	dsb	sy
 8008672:	60fb      	str	r3, [r7, #12]
}
 8008674:	bf00      	nop
 8008676:	e7fe      	b.n	8008676 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	695b      	ldr	r3, [r3, #20]
 800867c:	4a0a      	ldr	r2, [pc, #40]	; (80086a8 <prvTaskIsTaskSuspended+0x5c>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d10a      	bne.n	8008698 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008686:	4a09      	ldr	r2, [pc, #36]	; (80086ac <prvTaskIsTaskSuspended+0x60>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d005      	beq.n	8008698 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008690:	2b00      	cmp	r3, #0
 8008692:	d101      	bne.n	8008698 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8008694:	2301      	movs	r3, #1
 8008696:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008698:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800869a:	4618      	mov	r0, r3
 800869c:	371c      	adds	r7, #28
 800869e:	46bd      	mov	sp, r7
 80086a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a4:	4770      	bx	lr
 80086a6:	bf00      	nop
 80086a8:	20000c1c 	.word	0x20000c1c
 80086ac:	20000bf0 	.word	0x20000bf0

080086b0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d10a      	bne.n	80086d8 <vTaskResume+0x28>
	__asm volatile
 80086c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c6:	f383 8811 	msr	BASEPRI, r3
 80086ca:	f3bf 8f6f 	isb	sy
 80086ce:	f3bf 8f4f 	dsb	sy
 80086d2:	60bb      	str	r3, [r7, #8]
}
 80086d4:	bf00      	nop
 80086d6:	e7fe      	b.n	80086d6 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80086d8:	4b20      	ldr	r3, [pc, #128]	; (800875c <vTaskResume+0xac>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	429a      	cmp	r2, r3
 80086e0:	d038      	beq.n	8008754 <vTaskResume+0xa4>
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d035      	beq.n	8008754 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 80086e8:	f001 fb04 	bl	8009cf4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80086ec:	68f8      	ldr	r0, [r7, #12]
 80086ee:	f7ff ffad 	bl	800864c <prvTaskIsTaskSuspended>
 80086f2:	4603      	mov	r3, r0
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d02b      	beq.n	8008750 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	3304      	adds	r3, #4
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7fe fdc1 	bl	8007284 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008706:	4b16      	ldr	r3, [pc, #88]	; (8008760 <vTaskResume+0xb0>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	429a      	cmp	r2, r3
 800870c:	d903      	bls.n	8008716 <vTaskResume+0x66>
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008712:	4a13      	ldr	r2, [pc, #76]	; (8008760 <vTaskResume+0xb0>)
 8008714:	6013      	str	r3, [r2, #0]
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800871a:	4613      	mov	r3, r2
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	4413      	add	r3, r2
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	4a10      	ldr	r2, [pc, #64]	; (8008764 <vTaskResume+0xb4>)
 8008724:	441a      	add	r2, r3
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	3304      	adds	r3, #4
 800872a:	4619      	mov	r1, r3
 800872c:	4610      	mov	r0, r2
 800872e:	f7fe fd4c 	bl	80071ca <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008736:	4b09      	ldr	r3, [pc, #36]	; (800875c <vTaskResume+0xac>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800873c:	429a      	cmp	r2, r3
 800873e:	d307      	bcc.n	8008750 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8008740:	4b09      	ldr	r3, [pc, #36]	; (8008768 <vTaskResume+0xb8>)
 8008742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008746:	601a      	str	r2, [r3, #0]
 8008748:	f3bf 8f4f 	dsb	sy
 800874c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8008750:	f001 fb00 	bl	8009d54 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008754:	bf00      	nop
 8008756:	3710      	adds	r7, #16
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}
 800875c:	2000075c 	.word	0x2000075c
 8008760:	20000c38 	.word	0x20000c38
 8008764:	20000760 	.word	0x20000760
 8008768:	e000ed04 	.word	0xe000ed04

0800876c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b08a      	sub	sp, #40	; 0x28
 8008770:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008772:	2300      	movs	r3, #0
 8008774:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008776:	2300      	movs	r3, #0
 8008778:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800877a:	463a      	mov	r2, r7
 800877c:	1d39      	adds	r1, r7, #4
 800877e:	f107 0308 	add.w	r3, r7, #8
 8008782:	4618      	mov	r0, r3
 8008784:	f7fe fcc0 	bl	8007108 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008788:	6839      	ldr	r1, [r7, #0]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	68ba      	ldr	r2, [r7, #8]
 800878e:	9202      	str	r2, [sp, #8]
 8008790:	9301      	str	r3, [sp, #4]
 8008792:	2300      	movs	r3, #0
 8008794:	9300      	str	r3, [sp, #0]
 8008796:	2300      	movs	r3, #0
 8008798:	460a      	mov	r2, r1
 800879a:	4921      	ldr	r1, [pc, #132]	; (8008820 <vTaskStartScheduler+0xb4>)
 800879c:	4821      	ldr	r0, [pc, #132]	; (8008824 <vTaskStartScheduler+0xb8>)
 800879e:	f7ff fc9b 	bl	80080d8 <xTaskCreateStatic>
 80087a2:	4603      	mov	r3, r0
 80087a4:	4a20      	ldr	r2, [pc, #128]	; (8008828 <vTaskStartScheduler+0xbc>)
 80087a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80087a8:	4b1f      	ldr	r3, [pc, #124]	; (8008828 <vTaskStartScheduler+0xbc>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d002      	beq.n	80087b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80087b0:	2301      	movs	r3, #1
 80087b2:	617b      	str	r3, [r7, #20]
 80087b4:	e001      	b.n	80087ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80087b6:	2300      	movs	r3, #0
 80087b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d102      	bne.n	80087c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80087c0:	f000 fe1a 	bl	80093f8 <xTimerCreateTimerTask>
 80087c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d116      	bne.n	80087fa <vTaskStartScheduler+0x8e>
	__asm volatile
 80087cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d0:	f383 8811 	msr	BASEPRI, r3
 80087d4:	f3bf 8f6f 	isb	sy
 80087d8:	f3bf 8f4f 	dsb	sy
 80087dc:	613b      	str	r3, [r7, #16]
}
 80087de:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80087e0:	4b12      	ldr	r3, [pc, #72]	; (800882c <vTaskStartScheduler+0xc0>)
 80087e2:	f04f 32ff 	mov.w	r2, #4294967295
 80087e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80087e8:	4b11      	ldr	r3, [pc, #68]	; (8008830 <vTaskStartScheduler+0xc4>)
 80087ea:	2201      	movs	r2, #1
 80087ec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80087ee:	4b11      	ldr	r3, [pc, #68]	; (8008834 <vTaskStartScheduler+0xc8>)
 80087f0:	2200      	movs	r2, #0
 80087f2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80087f4:	f001 f9dc 	bl	8009bb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80087f8:	e00e      	b.n	8008818 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008800:	d10a      	bne.n	8008818 <vTaskStartScheduler+0xac>
	__asm volatile
 8008802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008806:	f383 8811 	msr	BASEPRI, r3
 800880a:	f3bf 8f6f 	isb	sy
 800880e:	f3bf 8f4f 	dsb	sy
 8008812:	60fb      	str	r3, [r7, #12]
}
 8008814:	bf00      	nop
 8008816:	e7fe      	b.n	8008816 <vTaskStartScheduler+0xaa>
}
 8008818:	bf00      	nop
 800881a:	3718      	adds	r7, #24
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}
 8008820:	0800cfa0 	.word	0x0800cfa0
 8008824:	08008e6d 	.word	0x08008e6d
 8008828:	20000c54 	.word	0x20000c54
 800882c:	20000c50 	.word	0x20000c50
 8008830:	20000c3c 	.word	0x20000c3c
 8008834:	20000c34 	.word	0x20000c34

08008838 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008838:	b480      	push	{r7}
 800883a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800883c:	4b04      	ldr	r3, [pc, #16]	; (8008850 <vTaskSuspendAll+0x18>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	3301      	adds	r3, #1
 8008842:	4a03      	ldr	r2, [pc, #12]	; (8008850 <vTaskSuspendAll+0x18>)
 8008844:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008846:	bf00      	nop
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr
 8008850:	20000c58 	.word	0x20000c58

08008854 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800885a:	2300      	movs	r3, #0
 800885c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800885e:	2300      	movs	r3, #0
 8008860:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008862:	4b42      	ldr	r3, [pc, #264]	; (800896c <xTaskResumeAll+0x118>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d10a      	bne.n	8008880 <xTaskResumeAll+0x2c>
	__asm volatile
 800886a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800886e:	f383 8811 	msr	BASEPRI, r3
 8008872:	f3bf 8f6f 	isb	sy
 8008876:	f3bf 8f4f 	dsb	sy
 800887a:	603b      	str	r3, [r7, #0]
}
 800887c:	bf00      	nop
 800887e:	e7fe      	b.n	800887e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008880:	f001 fa38 	bl	8009cf4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008884:	4b39      	ldr	r3, [pc, #228]	; (800896c <xTaskResumeAll+0x118>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	3b01      	subs	r3, #1
 800888a:	4a38      	ldr	r2, [pc, #224]	; (800896c <xTaskResumeAll+0x118>)
 800888c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800888e:	4b37      	ldr	r3, [pc, #220]	; (800896c <xTaskResumeAll+0x118>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d162      	bne.n	800895c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008896:	4b36      	ldr	r3, [pc, #216]	; (8008970 <xTaskResumeAll+0x11c>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d05e      	beq.n	800895c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800889e:	e02f      	b.n	8008900 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088a0:	4b34      	ldr	r3, [pc, #208]	; (8008974 <xTaskResumeAll+0x120>)
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	3318      	adds	r3, #24
 80088ac:	4618      	mov	r0, r3
 80088ae:	f7fe fce9 	bl	8007284 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	3304      	adds	r3, #4
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7fe fce4 	bl	8007284 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088c0:	4b2d      	ldr	r3, [pc, #180]	; (8008978 <xTaskResumeAll+0x124>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d903      	bls.n	80088d0 <xTaskResumeAll+0x7c>
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088cc:	4a2a      	ldr	r2, [pc, #168]	; (8008978 <xTaskResumeAll+0x124>)
 80088ce:	6013      	str	r3, [r2, #0]
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088d4:	4613      	mov	r3, r2
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	4413      	add	r3, r2
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	4a27      	ldr	r2, [pc, #156]	; (800897c <xTaskResumeAll+0x128>)
 80088de:	441a      	add	r2, r3
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	3304      	adds	r3, #4
 80088e4:	4619      	mov	r1, r3
 80088e6:	4610      	mov	r0, r2
 80088e8:	f7fe fc6f 	bl	80071ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088f0:	4b23      	ldr	r3, [pc, #140]	; (8008980 <xTaskResumeAll+0x12c>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d302      	bcc.n	8008900 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80088fa:	4b22      	ldr	r3, [pc, #136]	; (8008984 <xTaskResumeAll+0x130>)
 80088fc:	2201      	movs	r2, #1
 80088fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008900:	4b1c      	ldr	r3, [pc, #112]	; (8008974 <xTaskResumeAll+0x120>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d1cb      	bne.n	80088a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d001      	beq.n	8008912 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800890e:	f000 fb65 	bl	8008fdc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008912:	4b1d      	ldr	r3, [pc, #116]	; (8008988 <xTaskResumeAll+0x134>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d010      	beq.n	8008940 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800891e:	f000 f847 	bl	80089b0 <xTaskIncrementTick>
 8008922:	4603      	mov	r3, r0
 8008924:	2b00      	cmp	r3, #0
 8008926:	d002      	beq.n	800892e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008928:	4b16      	ldr	r3, [pc, #88]	; (8008984 <xTaskResumeAll+0x130>)
 800892a:	2201      	movs	r2, #1
 800892c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	3b01      	subs	r3, #1
 8008932:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d1f1      	bne.n	800891e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800893a:	4b13      	ldr	r3, [pc, #76]	; (8008988 <xTaskResumeAll+0x134>)
 800893c:	2200      	movs	r2, #0
 800893e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008940:	4b10      	ldr	r3, [pc, #64]	; (8008984 <xTaskResumeAll+0x130>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d009      	beq.n	800895c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008948:	2301      	movs	r3, #1
 800894a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800894c:	4b0f      	ldr	r3, [pc, #60]	; (800898c <xTaskResumeAll+0x138>)
 800894e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008952:	601a      	str	r2, [r3, #0]
 8008954:	f3bf 8f4f 	dsb	sy
 8008958:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800895c:	f001 f9fa 	bl	8009d54 <vPortExitCritical>

	return xAlreadyYielded;
 8008960:	68bb      	ldr	r3, [r7, #8]
}
 8008962:	4618      	mov	r0, r3
 8008964:	3710      	adds	r7, #16
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop
 800896c:	20000c58 	.word	0x20000c58
 8008970:	20000c30 	.word	0x20000c30
 8008974:	20000bf0 	.word	0x20000bf0
 8008978:	20000c38 	.word	0x20000c38
 800897c:	20000760 	.word	0x20000760
 8008980:	2000075c 	.word	0x2000075c
 8008984:	20000c44 	.word	0x20000c44
 8008988:	20000c40 	.word	0x20000c40
 800898c:	e000ed04 	.word	0xe000ed04

08008990 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008996:	4b05      	ldr	r3, [pc, #20]	; (80089ac <xTaskGetTickCount+0x1c>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800899c:	687b      	ldr	r3, [r7, #4]
}
 800899e:	4618      	mov	r0, r3
 80089a0:	370c      	adds	r7, #12
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr
 80089aa:	bf00      	nop
 80089ac:	20000c34 	.word	0x20000c34

080089b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b086      	sub	sp, #24
 80089b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80089b6:	2300      	movs	r3, #0
 80089b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089ba:	4b4f      	ldr	r3, [pc, #316]	; (8008af8 <xTaskIncrementTick+0x148>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	f040 808f 	bne.w	8008ae2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80089c4:	4b4d      	ldr	r3, [pc, #308]	; (8008afc <xTaskIncrementTick+0x14c>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	3301      	adds	r3, #1
 80089ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80089cc:	4a4b      	ldr	r2, [pc, #300]	; (8008afc <xTaskIncrementTick+0x14c>)
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d120      	bne.n	8008a1a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80089d8:	4b49      	ldr	r3, [pc, #292]	; (8008b00 <xTaskIncrementTick+0x150>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d00a      	beq.n	80089f8 <xTaskIncrementTick+0x48>
	__asm volatile
 80089e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e6:	f383 8811 	msr	BASEPRI, r3
 80089ea:	f3bf 8f6f 	isb	sy
 80089ee:	f3bf 8f4f 	dsb	sy
 80089f2:	603b      	str	r3, [r7, #0]
}
 80089f4:	bf00      	nop
 80089f6:	e7fe      	b.n	80089f6 <xTaskIncrementTick+0x46>
 80089f8:	4b41      	ldr	r3, [pc, #260]	; (8008b00 <xTaskIncrementTick+0x150>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	60fb      	str	r3, [r7, #12]
 80089fe:	4b41      	ldr	r3, [pc, #260]	; (8008b04 <xTaskIncrementTick+0x154>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a3f      	ldr	r2, [pc, #252]	; (8008b00 <xTaskIncrementTick+0x150>)
 8008a04:	6013      	str	r3, [r2, #0]
 8008a06:	4a3f      	ldr	r2, [pc, #252]	; (8008b04 <xTaskIncrementTick+0x154>)
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	6013      	str	r3, [r2, #0]
 8008a0c:	4b3e      	ldr	r3, [pc, #248]	; (8008b08 <xTaskIncrementTick+0x158>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	3301      	adds	r3, #1
 8008a12:	4a3d      	ldr	r2, [pc, #244]	; (8008b08 <xTaskIncrementTick+0x158>)
 8008a14:	6013      	str	r3, [r2, #0]
 8008a16:	f000 fae1 	bl	8008fdc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008a1a:	4b3c      	ldr	r3, [pc, #240]	; (8008b0c <xTaskIncrementTick+0x15c>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	693a      	ldr	r2, [r7, #16]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d349      	bcc.n	8008ab8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a24:	4b36      	ldr	r3, [pc, #216]	; (8008b00 <xTaskIncrementTick+0x150>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d104      	bne.n	8008a38 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a2e:	4b37      	ldr	r3, [pc, #220]	; (8008b0c <xTaskIncrementTick+0x15c>)
 8008a30:	f04f 32ff 	mov.w	r2, #4294967295
 8008a34:	601a      	str	r2, [r3, #0]
					break;
 8008a36:	e03f      	b.n	8008ab8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a38:	4b31      	ldr	r3, [pc, #196]	; (8008b00 <xTaskIncrementTick+0x150>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	68db      	ldr	r3, [r3, #12]
 8008a3e:	68db      	ldr	r3, [r3, #12]
 8008a40:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008a48:	693a      	ldr	r2, [r7, #16]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d203      	bcs.n	8008a58 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008a50:	4a2e      	ldr	r2, [pc, #184]	; (8008b0c <xTaskIncrementTick+0x15c>)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008a56:	e02f      	b.n	8008ab8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	3304      	adds	r3, #4
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f7fe fc11 	bl	8007284 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d004      	beq.n	8008a74 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	3318      	adds	r3, #24
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7fe fc08 	bl	8007284 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a78:	4b25      	ldr	r3, [pc, #148]	; (8008b10 <xTaskIncrementTick+0x160>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d903      	bls.n	8008a88 <xTaskIncrementTick+0xd8>
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a84:	4a22      	ldr	r2, [pc, #136]	; (8008b10 <xTaskIncrementTick+0x160>)
 8008a86:	6013      	str	r3, [r2, #0]
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a8c:	4613      	mov	r3, r2
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	4413      	add	r3, r2
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	4a1f      	ldr	r2, [pc, #124]	; (8008b14 <xTaskIncrementTick+0x164>)
 8008a96:	441a      	add	r2, r3
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	3304      	adds	r3, #4
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	4610      	mov	r0, r2
 8008aa0:	f7fe fb93 	bl	80071ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aa8:	4b1b      	ldr	r3, [pc, #108]	; (8008b18 <xTaskIncrementTick+0x168>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d3b8      	bcc.n	8008a24 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ab6:	e7b5      	b.n	8008a24 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008ab8:	4b17      	ldr	r3, [pc, #92]	; (8008b18 <xTaskIncrementTick+0x168>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008abe:	4915      	ldr	r1, [pc, #84]	; (8008b14 <xTaskIncrementTick+0x164>)
 8008ac0:	4613      	mov	r3, r2
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	4413      	add	r3, r2
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	440b      	add	r3, r1
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d901      	bls.n	8008ad4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008ad4:	4b11      	ldr	r3, [pc, #68]	; (8008b1c <xTaskIncrementTick+0x16c>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d007      	beq.n	8008aec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008adc:	2301      	movs	r3, #1
 8008ade:	617b      	str	r3, [r7, #20]
 8008ae0:	e004      	b.n	8008aec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008ae2:	4b0f      	ldr	r3, [pc, #60]	; (8008b20 <xTaskIncrementTick+0x170>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	4a0d      	ldr	r2, [pc, #52]	; (8008b20 <xTaskIncrementTick+0x170>)
 8008aea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008aec:	697b      	ldr	r3, [r7, #20]
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3718      	adds	r7, #24
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	20000c58 	.word	0x20000c58
 8008afc:	20000c34 	.word	0x20000c34
 8008b00:	20000be8 	.word	0x20000be8
 8008b04:	20000bec 	.word	0x20000bec
 8008b08:	20000c48 	.word	0x20000c48
 8008b0c:	20000c50 	.word	0x20000c50
 8008b10:	20000c38 	.word	0x20000c38
 8008b14:	20000760 	.word	0x20000760
 8008b18:	2000075c 	.word	0x2000075c
 8008b1c:	20000c44 	.word	0x20000c44
 8008b20:	20000c40 	.word	0x20000c40

08008b24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b084      	sub	sp, #16
 8008b28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008b2a:	4b2f      	ldr	r3, [pc, #188]	; (8008be8 <vTaskSwitchContext+0xc4>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d003      	beq.n	8008b3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008b32:	4b2e      	ldr	r3, [pc, #184]	; (8008bec <vTaskSwitchContext+0xc8>)
 8008b34:	2201      	movs	r2, #1
 8008b36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008b38:	e052      	b.n	8008be0 <vTaskSwitchContext+0xbc>
		xYieldPending = pdFALSE;
 8008b3a:	4b2c      	ldr	r3, [pc, #176]	; (8008bec <vTaskSwitchContext+0xc8>)
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8008b40:	4b2b      	ldr	r3, [pc, #172]	; (8008bf0 <vTaskSwitchContext+0xcc>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	4b2a      	ldr	r3, [pc, #168]	; (8008bf0 <vTaskSwitchContext+0xcc>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d808      	bhi.n	8008b62 <vTaskSwitchContext+0x3e>
 8008b50:	4b27      	ldr	r3, [pc, #156]	; (8008bf0 <vTaskSwitchContext+0xcc>)
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	4b26      	ldr	r3, [pc, #152]	; (8008bf0 <vTaskSwitchContext+0xcc>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	3334      	adds	r3, #52	; 0x34
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	4610      	mov	r0, r2
 8008b5e:	f7fa f927 	bl	8002db0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b62:	4b24      	ldr	r3, [pc, #144]	; (8008bf4 <vTaskSwitchContext+0xd0>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	60fb      	str	r3, [r7, #12]
 8008b68:	e010      	b.n	8008b8c <vTaskSwitchContext+0x68>
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d10a      	bne.n	8008b86 <vTaskSwitchContext+0x62>
	__asm volatile
 8008b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b74:	f383 8811 	msr	BASEPRI, r3
 8008b78:	f3bf 8f6f 	isb	sy
 8008b7c:	f3bf 8f4f 	dsb	sy
 8008b80:	607b      	str	r3, [r7, #4]
}
 8008b82:	bf00      	nop
 8008b84:	e7fe      	b.n	8008b84 <vTaskSwitchContext+0x60>
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	3b01      	subs	r3, #1
 8008b8a:	60fb      	str	r3, [r7, #12]
 8008b8c:	491a      	ldr	r1, [pc, #104]	; (8008bf8 <vTaskSwitchContext+0xd4>)
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	4613      	mov	r3, r2
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	4413      	add	r3, r2
 8008b96:	009b      	lsls	r3, r3, #2
 8008b98:	440b      	add	r3, r1
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d0e4      	beq.n	8008b6a <vTaskSwitchContext+0x46>
 8008ba0:	68fa      	ldr	r2, [r7, #12]
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	4413      	add	r3, r2
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	4a13      	ldr	r2, [pc, #76]	; (8008bf8 <vTaskSwitchContext+0xd4>)
 8008bac:	4413      	add	r3, r2
 8008bae:	60bb      	str	r3, [r7, #8]
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	685a      	ldr	r2, [r3, #4]
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	605a      	str	r2, [r3, #4]
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	685a      	ldr	r2, [r3, #4]
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	3308      	adds	r3, #8
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d104      	bne.n	8008bd0 <vTaskSwitchContext+0xac>
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	685a      	ldr	r2, [r3, #4]
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	605a      	str	r2, [r3, #4]
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	68db      	ldr	r3, [r3, #12]
 8008bd6:	4a06      	ldr	r2, [pc, #24]	; (8008bf0 <vTaskSwitchContext+0xcc>)
 8008bd8:	6013      	str	r3, [r2, #0]
 8008bda:	4a06      	ldr	r2, [pc, #24]	; (8008bf4 <vTaskSwitchContext+0xd0>)
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6013      	str	r3, [r2, #0]
}
 8008be0:	bf00      	nop
 8008be2:	3710      	adds	r7, #16
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}
 8008be8:	20000c58 	.word	0x20000c58
 8008bec:	20000c44 	.word	0x20000c44
 8008bf0:	2000075c 	.word	0x2000075c
 8008bf4:	20000c38 	.word	0x20000c38
 8008bf8:	20000760 	.word	0x20000760

08008bfc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d10a      	bne.n	8008c22 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c10:	f383 8811 	msr	BASEPRI, r3
 8008c14:	f3bf 8f6f 	isb	sy
 8008c18:	f3bf 8f4f 	dsb	sy
 8008c1c:	60fb      	str	r3, [r7, #12]
}
 8008c1e:	bf00      	nop
 8008c20:	e7fe      	b.n	8008c20 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c22:	4b07      	ldr	r3, [pc, #28]	; (8008c40 <vTaskPlaceOnEventList+0x44>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	3318      	adds	r3, #24
 8008c28:	4619      	mov	r1, r3
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f7fe faf1 	bl	8007212 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008c30:	2101      	movs	r1, #1
 8008c32:	6838      	ldr	r0, [r7, #0]
 8008c34:	f000 fb8c 	bl	8009350 <prvAddCurrentTaskToDelayedList>
}
 8008c38:	bf00      	nop
 8008c3a:	3710      	adds	r7, #16
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}
 8008c40:	2000075c 	.word	0x2000075c

08008c44 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b086      	sub	sp, #24
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	60f8      	str	r0, [r7, #12]
 8008c4c:	60b9      	str	r1, [r7, #8]
 8008c4e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d10a      	bne.n	8008c6c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c5a:	f383 8811 	msr	BASEPRI, r3
 8008c5e:	f3bf 8f6f 	isb	sy
 8008c62:	f3bf 8f4f 	dsb	sy
 8008c66:	617b      	str	r3, [r7, #20]
}
 8008c68:	bf00      	nop
 8008c6a:	e7fe      	b.n	8008c6a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c6c:	4b0a      	ldr	r3, [pc, #40]	; (8008c98 <vTaskPlaceOnEventListRestricted+0x54>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	3318      	adds	r3, #24
 8008c72:	4619      	mov	r1, r3
 8008c74:	68f8      	ldr	r0, [r7, #12]
 8008c76:	f7fe faa8 	bl	80071ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d002      	beq.n	8008c86 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008c80:	f04f 33ff 	mov.w	r3, #4294967295
 8008c84:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008c86:	6879      	ldr	r1, [r7, #4]
 8008c88:	68b8      	ldr	r0, [r7, #8]
 8008c8a:	f000 fb61 	bl	8009350 <prvAddCurrentTaskToDelayedList>
	}
 8008c8e:	bf00      	nop
 8008c90:	3718      	adds	r7, #24
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	2000075c 	.word	0x2000075c

08008c9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b086      	sub	sp, #24
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	68db      	ldr	r3, [r3, #12]
 8008caa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d10a      	bne.n	8008cc8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb6:	f383 8811 	msr	BASEPRI, r3
 8008cba:	f3bf 8f6f 	isb	sy
 8008cbe:	f3bf 8f4f 	dsb	sy
 8008cc2:	60fb      	str	r3, [r7, #12]
}
 8008cc4:	bf00      	nop
 8008cc6:	e7fe      	b.n	8008cc6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	3318      	adds	r3, #24
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f7fe fad9 	bl	8007284 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cd2:	4b1e      	ldr	r3, [pc, #120]	; (8008d4c <xTaskRemoveFromEventList+0xb0>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d11d      	bne.n	8008d16 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	3304      	adds	r3, #4
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f7fe fad0 	bl	8007284 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ce8:	4b19      	ldr	r3, [pc, #100]	; (8008d50 <xTaskRemoveFromEventList+0xb4>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d903      	bls.n	8008cf8 <xTaskRemoveFromEventList+0x5c>
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf4:	4a16      	ldr	r2, [pc, #88]	; (8008d50 <xTaskRemoveFromEventList+0xb4>)
 8008cf6:	6013      	str	r3, [r2, #0]
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cfc:	4613      	mov	r3, r2
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	4413      	add	r3, r2
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	4a13      	ldr	r2, [pc, #76]	; (8008d54 <xTaskRemoveFromEventList+0xb8>)
 8008d06:	441a      	add	r2, r3
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	3304      	adds	r3, #4
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	4610      	mov	r0, r2
 8008d10:	f7fe fa5b 	bl	80071ca <vListInsertEnd>
 8008d14:	e005      	b.n	8008d22 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	3318      	adds	r3, #24
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	480e      	ldr	r0, [pc, #56]	; (8008d58 <xTaskRemoveFromEventList+0xbc>)
 8008d1e:	f7fe fa54 	bl	80071ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d26:	4b0d      	ldr	r3, [pc, #52]	; (8008d5c <xTaskRemoveFromEventList+0xc0>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d905      	bls.n	8008d3c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008d30:	2301      	movs	r3, #1
 8008d32:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008d34:	4b0a      	ldr	r3, [pc, #40]	; (8008d60 <xTaskRemoveFromEventList+0xc4>)
 8008d36:	2201      	movs	r2, #1
 8008d38:	601a      	str	r2, [r3, #0]
 8008d3a:	e001      	b.n	8008d40 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008d40:	697b      	ldr	r3, [r7, #20]
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3718      	adds	r7, #24
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	20000c58 	.word	0x20000c58
 8008d50:	20000c38 	.word	0x20000c38
 8008d54:	20000760 	.word	0x20000760
 8008d58:	20000bf0 	.word	0x20000bf0
 8008d5c:	2000075c 	.word	0x2000075c
 8008d60:	20000c44 	.word	0x20000c44

08008d64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008d6c:	4b06      	ldr	r3, [pc, #24]	; (8008d88 <vTaskInternalSetTimeOutState+0x24>)
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008d74:	4b05      	ldr	r3, [pc, #20]	; (8008d8c <vTaskInternalSetTimeOutState+0x28>)
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	605a      	str	r2, [r3, #4]
}
 8008d7c:	bf00      	nop
 8008d7e:	370c      	adds	r7, #12
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr
 8008d88:	20000c48 	.word	0x20000c48
 8008d8c:	20000c34 	.word	0x20000c34

08008d90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b088      	sub	sp, #32
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d10a      	bne.n	8008db6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da4:	f383 8811 	msr	BASEPRI, r3
 8008da8:	f3bf 8f6f 	isb	sy
 8008dac:	f3bf 8f4f 	dsb	sy
 8008db0:	613b      	str	r3, [r7, #16]
}
 8008db2:	bf00      	nop
 8008db4:	e7fe      	b.n	8008db4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d10a      	bne.n	8008dd2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc0:	f383 8811 	msr	BASEPRI, r3
 8008dc4:	f3bf 8f6f 	isb	sy
 8008dc8:	f3bf 8f4f 	dsb	sy
 8008dcc:	60fb      	str	r3, [r7, #12]
}
 8008dce:	bf00      	nop
 8008dd0:	e7fe      	b.n	8008dd0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008dd2:	f000 ff8f 	bl	8009cf4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008dd6:	4b1d      	ldr	r3, [pc, #116]	; (8008e4c <xTaskCheckForTimeOut+0xbc>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	69ba      	ldr	r2, [r7, #24]
 8008de2:	1ad3      	subs	r3, r2, r3
 8008de4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dee:	d102      	bne.n	8008df6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008df0:	2300      	movs	r3, #0
 8008df2:	61fb      	str	r3, [r7, #28]
 8008df4:	e023      	b.n	8008e3e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	4b15      	ldr	r3, [pc, #84]	; (8008e50 <xTaskCheckForTimeOut+0xc0>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d007      	beq.n	8008e12 <xTaskCheckForTimeOut+0x82>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	69ba      	ldr	r2, [r7, #24]
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d302      	bcc.n	8008e12 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	61fb      	str	r3, [r7, #28]
 8008e10:	e015      	b.n	8008e3e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	697a      	ldr	r2, [r7, #20]
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d20b      	bcs.n	8008e34 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	681a      	ldr	r2, [r3, #0]
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	1ad2      	subs	r2, r2, r3
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f7ff ff9b 	bl	8008d64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	61fb      	str	r3, [r7, #28]
 8008e32:	e004      	b.n	8008e3e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	2200      	movs	r2, #0
 8008e38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008e3e:	f000 ff89 	bl	8009d54 <vPortExitCritical>

	return xReturn;
 8008e42:	69fb      	ldr	r3, [r7, #28]
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3720      	adds	r7, #32
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}
 8008e4c:	20000c34 	.word	0x20000c34
 8008e50:	20000c48 	.word	0x20000c48

08008e54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008e54:	b480      	push	{r7}
 8008e56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008e58:	4b03      	ldr	r3, [pc, #12]	; (8008e68 <vTaskMissedYield+0x14>)
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	601a      	str	r2, [r3, #0]
}
 8008e5e:	bf00      	nop
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr
 8008e68:	20000c44 	.word	0x20000c44

08008e6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008e74:	f000 f854 	bl	8008f20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008e78:	4b07      	ldr	r3, [pc, #28]	; (8008e98 <prvIdleTask+0x2c>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d907      	bls.n	8008e90 <prvIdleTask+0x24>
			{
				taskYIELD();
 8008e80:	4b06      	ldr	r3, [pc, #24]	; (8008e9c <prvIdleTask+0x30>)
 8008e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e86:	601a      	str	r2, [r3, #0]
 8008e88:	f3bf 8f4f 	dsb	sy
 8008e8c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8008e90:	f7f9 ff86 	bl	8002da0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8008e94:	e7ee      	b.n	8008e74 <prvIdleTask+0x8>
 8008e96:	bf00      	nop
 8008e98:	20000760 	.word	0x20000760
 8008e9c:	e000ed04 	.word	0xe000ed04

08008ea0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	607b      	str	r3, [r7, #4]
 8008eaa:	e00c      	b.n	8008ec6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	4613      	mov	r3, r2
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	4413      	add	r3, r2
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	4a12      	ldr	r2, [pc, #72]	; (8008f00 <prvInitialiseTaskLists+0x60>)
 8008eb8:	4413      	add	r3, r2
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7fe f958 	bl	8007170 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	607b      	str	r3, [r7, #4]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2b37      	cmp	r3, #55	; 0x37
 8008eca:	d9ef      	bls.n	8008eac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008ecc:	480d      	ldr	r0, [pc, #52]	; (8008f04 <prvInitialiseTaskLists+0x64>)
 8008ece:	f7fe f94f 	bl	8007170 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008ed2:	480d      	ldr	r0, [pc, #52]	; (8008f08 <prvInitialiseTaskLists+0x68>)
 8008ed4:	f7fe f94c 	bl	8007170 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008ed8:	480c      	ldr	r0, [pc, #48]	; (8008f0c <prvInitialiseTaskLists+0x6c>)
 8008eda:	f7fe f949 	bl	8007170 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008ede:	480c      	ldr	r0, [pc, #48]	; (8008f10 <prvInitialiseTaskLists+0x70>)
 8008ee0:	f7fe f946 	bl	8007170 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008ee4:	480b      	ldr	r0, [pc, #44]	; (8008f14 <prvInitialiseTaskLists+0x74>)
 8008ee6:	f7fe f943 	bl	8007170 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008eea:	4b0b      	ldr	r3, [pc, #44]	; (8008f18 <prvInitialiseTaskLists+0x78>)
 8008eec:	4a05      	ldr	r2, [pc, #20]	; (8008f04 <prvInitialiseTaskLists+0x64>)
 8008eee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008ef0:	4b0a      	ldr	r3, [pc, #40]	; (8008f1c <prvInitialiseTaskLists+0x7c>)
 8008ef2:	4a05      	ldr	r2, [pc, #20]	; (8008f08 <prvInitialiseTaskLists+0x68>)
 8008ef4:	601a      	str	r2, [r3, #0]
}
 8008ef6:	bf00      	nop
 8008ef8:	3708      	adds	r7, #8
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop
 8008f00:	20000760 	.word	0x20000760
 8008f04:	20000bc0 	.word	0x20000bc0
 8008f08:	20000bd4 	.word	0x20000bd4
 8008f0c:	20000bf0 	.word	0x20000bf0
 8008f10:	20000c04 	.word	0x20000c04
 8008f14:	20000c1c 	.word	0x20000c1c
 8008f18:	20000be8 	.word	0x20000be8
 8008f1c:	20000bec 	.word	0x20000bec

08008f20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b082      	sub	sp, #8
 8008f24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f26:	e019      	b.n	8008f5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008f28:	f000 fee4 	bl	8009cf4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f2c:	4b10      	ldr	r3, [pc, #64]	; (8008f70 <prvCheckTasksWaitingTermination+0x50>)
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	3304      	adds	r3, #4
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f7fe f9a3 	bl	8007284 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008f3e:	4b0d      	ldr	r3, [pc, #52]	; (8008f74 <prvCheckTasksWaitingTermination+0x54>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	3b01      	subs	r3, #1
 8008f44:	4a0b      	ldr	r2, [pc, #44]	; (8008f74 <prvCheckTasksWaitingTermination+0x54>)
 8008f46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008f48:	4b0b      	ldr	r3, [pc, #44]	; (8008f78 <prvCheckTasksWaitingTermination+0x58>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	3b01      	subs	r3, #1
 8008f4e:	4a0a      	ldr	r2, [pc, #40]	; (8008f78 <prvCheckTasksWaitingTermination+0x58>)
 8008f50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008f52:	f000 feff 	bl	8009d54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 f810 	bl	8008f7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f5c:	4b06      	ldr	r3, [pc, #24]	; (8008f78 <prvCheckTasksWaitingTermination+0x58>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d1e1      	bne.n	8008f28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008f64:	bf00      	nop
 8008f66:	bf00      	nop
 8008f68:	3708      	adds	r7, #8
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	bf00      	nop
 8008f70:	20000c04 	.word	0x20000c04
 8008f74:	20000c30 	.word	0x20000c30
 8008f78:	20000c18 	.word	0x20000c18

08008f7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b084      	sub	sp, #16
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d108      	bne.n	8008fa0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f92:	4618      	mov	r0, r3
 8008f94:	f001 f8a0 	bl	800a0d8 <vPortFree>
				vPortFree( pxTCB );
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f001 f89d 	bl	800a0d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008f9e:	e018      	b.n	8008fd2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d103      	bne.n	8008fb2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f001 f894 	bl	800a0d8 <vPortFree>
	}
 8008fb0:	e00f      	b.n	8008fd2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008fb8:	2b02      	cmp	r3, #2
 8008fba:	d00a      	beq.n	8008fd2 <prvDeleteTCB+0x56>
	__asm volatile
 8008fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc0:	f383 8811 	msr	BASEPRI, r3
 8008fc4:	f3bf 8f6f 	isb	sy
 8008fc8:	f3bf 8f4f 	dsb	sy
 8008fcc:	60fb      	str	r3, [r7, #12]
}
 8008fce:	bf00      	nop
 8008fd0:	e7fe      	b.n	8008fd0 <prvDeleteTCB+0x54>
	}
 8008fd2:	bf00      	nop
 8008fd4:	3710      	adds	r7, #16
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
	...

08008fdc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fe2:	4b0c      	ldr	r3, [pc, #48]	; (8009014 <prvResetNextTaskUnblockTime+0x38>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d104      	bne.n	8008ff6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008fec:	4b0a      	ldr	r3, [pc, #40]	; (8009018 <prvResetNextTaskUnblockTime+0x3c>)
 8008fee:	f04f 32ff 	mov.w	r2, #4294967295
 8008ff2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008ff4:	e008      	b.n	8009008 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ff6:	4b07      	ldr	r3, [pc, #28]	; (8009014 <prvResetNextTaskUnblockTime+0x38>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	68db      	ldr	r3, [r3, #12]
 8008ffc:	68db      	ldr	r3, [r3, #12]
 8008ffe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	4a04      	ldr	r2, [pc, #16]	; (8009018 <prvResetNextTaskUnblockTime+0x3c>)
 8009006:	6013      	str	r3, [r2, #0]
}
 8009008:	bf00      	nop
 800900a:	370c      	adds	r7, #12
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr
 8009014:	20000be8 	.word	0x20000be8
 8009018:	20000c50 	.word	0x20000c50

0800901c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800901c:	b480      	push	{r7}
 800901e:	b083      	sub	sp, #12
 8009020:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009022:	4b05      	ldr	r3, [pc, #20]	; (8009038 <xTaskGetCurrentTaskHandle+0x1c>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009028:	687b      	ldr	r3, [r7, #4]
	}
 800902a:	4618      	mov	r0, r3
 800902c:	370c      	adds	r7, #12
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr
 8009036:	bf00      	nop
 8009038:	2000075c 	.word	0x2000075c

0800903c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800903c:	b480      	push	{r7}
 800903e:	b083      	sub	sp, #12
 8009040:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009042:	4b0b      	ldr	r3, [pc, #44]	; (8009070 <xTaskGetSchedulerState+0x34>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d102      	bne.n	8009050 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800904a:	2301      	movs	r3, #1
 800904c:	607b      	str	r3, [r7, #4]
 800904e:	e008      	b.n	8009062 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009050:	4b08      	ldr	r3, [pc, #32]	; (8009074 <xTaskGetSchedulerState+0x38>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d102      	bne.n	800905e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009058:	2302      	movs	r3, #2
 800905a:	607b      	str	r3, [r7, #4]
 800905c:	e001      	b.n	8009062 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800905e:	2300      	movs	r3, #0
 8009060:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009062:	687b      	ldr	r3, [r7, #4]
	}
 8009064:	4618      	mov	r0, r3
 8009066:	370c      	adds	r7, #12
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr
 8009070:	20000c3c 	.word	0x20000c3c
 8009074:	20000c58 	.word	0x20000c58

08009078 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009084:	2300      	movs	r3, #0
 8009086:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d051      	beq.n	8009132 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009092:	4b2a      	ldr	r3, [pc, #168]	; (800913c <xTaskPriorityInherit+0xc4>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009098:	429a      	cmp	r2, r3
 800909a:	d241      	bcs.n	8009120 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	699b      	ldr	r3, [r3, #24]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	db06      	blt.n	80090b2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090a4:	4b25      	ldr	r3, [pc, #148]	; (800913c <xTaskPriorityInherit+0xc4>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	6959      	ldr	r1, [r3, #20]
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090ba:	4613      	mov	r3, r2
 80090bc:	009b      	lsls	r3, r3, #2
 80090be:	4413      	add	r3, r2
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	4a1f      	ldr	r2, [pc, #124]	; (8009140 <xTaskPriorityInherit+0xc8>)
 80090c4:	4413      	add	r3, r2
 80090c6:	4299      	cmp	r1, r3
 80090c8:	d122      	bne.n	8009110 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	3304      	adds	r3, #4
 80090ce:	4618      	mov	r0, r3
 80090d0:	f7fe f8d8 	bl	8007284 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80090d4:	4b19      	ldr	r3, [pc, #100]	; (800913c <xTaskPriorityInherit+0xc4>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090e2:	4b18      	ldr	r3, [pc, #96]	; (8009144 <xTaskPriorityInherit+0xcc>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d903      	bls.n	80090f2 <xTaskPriorityInherit+0x7a>
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ee:	4a15      	ldr	r2, [pc, #84]	; (8009144 <xTaskPriorityInherit+0xcc>)
 80090f0:	6013      	str	r3, [r2, #0]
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090f6:	4613      	mov	r3, r2
 80090f8:	009b      	lsls	r3, r3, #2
 80090fa:	4413      	add	r3, r2
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	4a10      	ldr	r2, [pc, #64]	; (8009140 <xTaskPriorityInherit+0xc8>)
 8009100:	441a      	add	r2, r3
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	3304      	adds	r3, #4
 8009106:	4619      	mov	r1, r3
 8009108:	4610      	mov	r0, r2
 800910a:	f7fe f85e 	bl	80071ca <vListInsertEnd>
 800910e:	e004      	b.n	800911a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009110:	4b0a      	ldr	r3, [pc, #40]	; (800913c <xTaskPriorityInherit+0xc4>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800911a:	2301      	movs	r3, #1
 800911c:	60fb      	str	r3, [r7, #12]
 800911e:	e008      	b.n	8009132 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009124:	4b05      	ldr	r3, [pc, #20]	; (800913c <xTaskPriorityInherit+0xc4>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800912a:	429a      	cmp	r2, r3
 800912c:	d201      	bcs.n	8009132 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800912e:	2301      	movs	r3, #1
 8009130:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009132:	68fb      	ldr	r3, [r7, #12]
	}
 8009134:	4618      	mov	r0, r3
 8009136:	3710      	adds	r7, #16
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}
 800913c:	2000075c 	.word	0x2000075c
 8009140:	20000760 	.word	0x20000760
 8009144:	20000c38 	.word	0x20000c38

08009148 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009148:	b580      	push	{r7, lr}
 800914a:	b086      	sub	sp, #24
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009154:	2300      	movs	r3, #0
 8009156:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d056      	beq.n	800920c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800915e:	4b2e      	ldr	r3, [pc, #184]	; (8009218 <xTaskPriorityDisinherit+0xd0>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	693a      	ldr	r2, [r7, #16]
 8009164:	429a      	cmp	r2, r3
 8009166:	d00a      	beq.n	800917e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800916c:	f383 8811 	msr	BASEPRI, r3
 8009170:	f3bf 8f6f 	isb	sy
 8009174:	f3bf 8f4f 	dsb	sy
 8009178:	60fb      	str	r3, [r7, #12]
}
 800917a:	bf00      	nop
 800917c:	e7fe      	b.n	800917c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009182:	2b00      	cmp	r3, #0
 8009184:	d10a      	bne.n	800919c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918a:	f383 8811 	msr	BASEPRI, r3
 800918e:	f3bf 8f6f 	isb	sy
 8009192:	f3bf 8f4f 	dsb	sy
 8009196:	60bb      	str	r3, [r7, #8]
}
 8009198:	bf00      	nop
 800919a:	e7fe      	b.n	800919a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091a0:	1e5a      	subs	r2, r3, #1
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d02c      	beq.n	800920c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d128      	bne.n	800920c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	3304      	adds	r3, #4
 80091be:	4618      	mov	r0, r3
 80091c0:	f7fe f860 	bl	8007284 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091dc:	4b0f      	ldr	r3, [pc, #60]	; (800921c <xTaskPriorityDisinherit+0xd4>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d903      	bls.n	80091ec <xTaskPriorityDisinherit+0xa4>
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e8:	4a0c      	ldr	r2, [pc, #48]	; (800921c <xTaskPriorityDisinherit+0xd4>)
 80091ea:	6013      	str	r3, [r2, #0]
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091f0:	4613      	mov	r3, r2
 80091f2:	009b      	lsls	r3, r3, #2
 80091f4:	4413      	add	r3, r2
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	4a09      	ldr	r2, [pc, #36]	; (8009220 <xTaskPriorityDisinherit+0xd8>)
 80091fa:	441a      	add	r2, r3
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	3304      	adds	r3, #4
 8009200:	4619      	mov	r1, r3
 8009202:	4610      	mov	r0, r2
 8009204:	f7fd ffe1 	bl	80071ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009208:	2301      	movs	r3, #1
 800920a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800920c:	697b      	ldr	r3, [r7, #20]
	}
 800920e:	4618      	mov	r0, r3
 8009210:	3718      	adds	r7, #24
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	2000075c 	.word	0x2000075c
 800921c:	20000c38 	.word	0x20000c38
 8009220:	20000760 	.word	0x20000760

08009224 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009224:	b580      	push	{r7, lr}
 8009226:	b088      	sub	sp, #32
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009232:	2301      	movs	r3, #1
 8009234:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d06a      	beq.n	8009312 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800923c:	69bb      	ldr	r3, [r7, #24]
 800923e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009240:	2b00      	cmp	r3, #0
 8009242:	d10a      	bne.n	800925a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009248:	f383 8811 	msr	BASEPRI, r3
 800924c:	f3bf 8f6f 	isb	sy
 8009250:	f3bf 8f4f 	dsb	sy
 8009254:	60fb      	str	r3, [r7, #12]
}
 8009256:	bf00      	nop
 8009258:	e7fe      	b.n	8009258 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800925a:	69bb      	ldr	r3, [r7, #24]
 800925c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800925e:	683a      	ldr	r2, [r7, #0]
 8009260:	429a      	cmp	r2, r3
 8009262:	d902      	bls.n	800926a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	61fb      	str	r3, [r7, #28]
 8009268:	e002      	b.n	8009270 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800926a:	69bb      	ldr	r3, [r7, #24]
 800926c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800926e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009270:	69bb      	ldr	r3, [r7, #24]
 8009272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009274:	69fa      	ldr	r2, [r7, #28]
 8009276:	429a      	cmp	r2, r3
 8009278:	d04b      	beq.n	8009312 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800927a:	69bb      	ldr	r3, [r7, #24]
 800927c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800927e:	697a      	ldr	r2, [r7, #20]
 8009280:	429a      	cmp	r2, r3
 8009282:	d146      	bne.n	8009312 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009284:	4b25      	ldr	r3, [pc, #148]	; (800931c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	69ba      	ldr	r2, [r7, #24]
 800928a:	429a      	cmp	r2, r3
 800928c:	d10a      	bne.n	80092a4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800928e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009292:	f383 8811 	msr	BASEPRI, r3
 8009296:	f3bf 8f6f 	isb	sy
 800929a:	f3bf 8f4f 	dsb	sy
 800929e:	60bb      	str	r3, [r7, #8]
}
 80092a0:	bf00      	nop
 80092a2:	e7fe      	b.n	80092a2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80092a4:	69bb      	ldr	r3, [r7, #24]
 80092a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80092aa:	69bb      	ldr	r3, [r7, #24]
 80092ac:	69fa      	ldr	r2, [r7, #28]
 80092ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80092b0:	69bb      	ldr	r3, [r7, #24]
 80092b2:	699b      	ldr	r3, [r3, #24]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	db04      	blt.n	80092c2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092b8:	69fb      	ldr	r3, [r7, #28]
 80092ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80092be:	69bb      	ldr	r3, [r7, #24]
 80092c0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80092c2:	69bb      	ldr	r3, [r7, #24]
 80092c4:	6959      	ldr	r1, [r3, #20]
 80092c6:	693a      	ldr	r2, [r7, #16]
 80092c8:	4613      	mov	r3, r2
 80092ca:	009b      	lsls	r3, r3, #2
 80092cc:	4413      	add	r3, r2
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	4a13      	ldr	r2, [pc, #76]	; (8009320 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80092d2:	4413      	add	r3, r2
 80092d4:	4299      	cmp	r1, r3
 80092d6:	d11c      	bne.n	8009312 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092d8:	69bb      	ldr	r3, [r7, #24]
 80092da:	3304      	adds	r3, #4
 80092dc:	4618      	mov	r0, r3
 80092de:	f7fd ffd1 	bl	8007284 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80092e2:	69bb      	ldr	r3, [r7, #24]
 80092e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092e6:	4b0f      	ldr	r3, [pc, #60]	; (8009324 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d903      	bls.n	80092f6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80092ee:	69bb      	ldr	r3, [r7, #24]
 80092f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f2:	4a0c      	ldr	r2, [pc, #48]	; (8009324 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80092f4:	6013      	str	r3, [r2, #0]
 80092f6:	69bb      	ldr	r3, [r7, #24]
 80092f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092fa:	4613      	mov	r3, r2
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	4413      	add	r3, r2
 8009300:	009b      	lsls	r3, r3, #2
 8009302:	4a07      	ldr	r2, [pc, #28]	; (8009320 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009304:	441a      	add	r2, r3
 8009306:	69bb      	ldr	r3, [r7, #24]
 8009308:	3304      	adds	r3, #4
 800930a:	4619      	mov	r1, r3
 800930c:	4610      	mov	r0, r2
 800930e:	f7fd ff5c 	bl	80071ca <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009312:	bf00      	nop
 8009314:	3720      	adds	r7, #32
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
 800931a:	bf00      	nop
 800931c:	2000075c 	.word	0x2000075c
 8009320:	20000760 	.word	0x20000760
 8009324:	20000c38 	.word	0x20000c38

08009328 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009328:	b480      	push	{r7}
 800932a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800932c:	4b07      	ldr	r3, [pc, #28]	; (800934c <pvTaskIncrementMutexHeldCount+0x24>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d004      	beq.n	800933e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009334:	4b05      	ldr	r3, [pc, #20]	; (800934c <pvTaskIncrementMutexHeldCount+0x24>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800933a:	3201      	adds	r2, #1
 800933c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800933e:	4b03      	ldr	r3, [pc, #12]	; (800934c <pvTaskIncrementMutexHeldCount+0x24>)
 8009340:	681b      	ldr	r3, [r3, #0]
	}
 8009342:	4618      	mov	r0, r3
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr
 800934c:	2000075c 	.word	0x2000075c

08009350 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b084      	sub	sp, #16
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800935a:	4b21      	ldr	r3, [pc, #132]	; (80093e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009360:	4b20      	ldr	r3, [pc, #128]	; (80093e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	3304      	adds	r3, #4
 8009366:	4618      	mov	r0, r3
 8009368:	f7fd ff8c 	bl	8007284 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009372:	d10a      	bne.n	800938a <prvAddCurrentTaskToDelayedList+0x3a>
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d007      	beq.n	800938a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800937a:	4b1a      	ldr	r3, [pc, #104]	; (80093e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	3304      	adds	r3, #4
 8009380:	4619      	mov	r1, r3
 8009382:	4819      	ldr	r0, [pc, #100]	; (80093e8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009384:	f7fd ff21 	bl	80071ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009388:	e026      	b.n	80093d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800938a:	68fa      	ldr	r2, [r7, #12]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	4413      	add	r3, r2
 8009390:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009392:	4b14      	ldr	r3, [pc, #80]	; (80093e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	68ba      	ldr	r2, [r7, #8]
 8009398:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800939a:	68ba      	ldr	r2, [r7, #8]
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	429a      	cmp	r2, r3
 80093a0:	d209      	bcs.n	80093b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093a2:	4b12      	ldr	r3, [pc, #72]	; (80093ec <prvAddCurrentTaskToDelayedList+0x9c>)
 80093a4:	681a      	ldr	r2, [r3, #0]
 80093a6:	4b0f      	ldr	r3, [pc, #60]	; (80093e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	3304      	adds	r3, #4
 80093ac:	4619      	mov	r1, r3
 80093ae:	4610      	mov	r0, r2
 80093b0:	f7fd ff2f 	bl	8007212 <vListInsert>
}
 80093b4:	e010      	b.n	80093d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093b6:	4b0e      	ldr	r3, [pc, #56]	; (80093f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	4b0a      	ldr	r3, [pc, #40]	; (80093e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	3304      	adds	r3, #4
 80093c0:	4619      	mov	r1, r3
 80093c2:	4610      	mov	r0, r2
 80093c4:	f7fd ff25 	bl	8007212 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80093c8:	4b0a      	ldr	r3, [pc, #40]	; (80093f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	68ba      	ldr	r2, [r7, #8]
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d202      	bcs.n	80093d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80093d2:	4a08      	ldr	r2, [pc, #32]	; (80093f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	6013      	str	r3, [r2, #0]
}
 80093d8:	bf00      	nop
 80093da:	3710      	adds	r7, #16
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}
 80093e0:	20000c34 	.word	0x20000c34
 80093e4:	2000075c 	.word	0x2000075c
 80093e8:	20000c1c 	.word	0x20000c1c
 80093ec:	20000bec 	.word	0x20000bec
 80093f0:	20000be8 	.word	0x20000be8
 80093f4:	20000c50 	.word	0x20000c50

080093f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b08a      	sub	sp, #40	; 0x28
 80093fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80093fe:	2300      	movs	r3, #0
 8009400:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009402:	f000 fb07 	bl	8009a14 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009406:	4b1c      	ldr	r3, [pc, #112]	; (8009478 <xTimerCreateTimerTask+0x80>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d021      	beq.n	8009452 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800940e:	2300      	movs	r3, #0
 8009410:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009412:	2300      	movs	r3, #0
 8009414:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009416:	1d3a      	adds	r2, r7, #4
 8009418:	f107 0108 	add.w	r1, r7, #8
 800941c:	f107 030c 	add.w	r3, r7, #12
 8009420:	4618      	mov	r0, r3
 8009422:	f7fd fe8b 	bl	800713c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009426:	6879      	ldr	r1, [r7, #4]
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	68fa      	ldr	r2, [r7, #12]
 800942c:	9202      	str	r2, [sp, #8]
 800942e:	9301      	str	r3, [sp, #4]
 8009430:	2302      	movs	r3, #2
 8009432:	9300      	str	r3, [sp, #0]
 8009434:	2300      	movs	r3, #0
 8009436:	460a      	mov	r2, r1
 8009438:	4910      	ldr	r1, [pc, #64]	; (800947c <xTimerCreateTimerTask+0x84>)
 800943a:	4811      	ldr	r0, [pc, #68]	; (8009480 <xTimerCreateTimerTask+0x88>)
 800943c:	f7fe fe4c 	bl	80080d8 <xTaskCreateStatic>
 8009440:	4603      	mov	r3, r0
 8009442:	4a10      	ldr	r2, [pc, #64]	; (8009484 <xTimerCreateTimerTask+0x8c>)
 8009444:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009446:	4b0f      	ldr	r3, [pc, #60]	; (8009484 <xTimerCreateTimerTask+0x8c>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d001      	beq.n	8009452 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800944e:	2301      	movs	r3, #1
 8009450:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d10a      	bne.n	800946e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800945c:	f383 8811 	msr	BASEPRI, r3
 8009460:	f3bf 8f6f 	isb	sy
 8009464:	f3bf 8f4f 	dsb	sy
 8009468:	613b      	str	r3, [r7, #16]
}
 800946a:	bf00      	nop
 800946c:	e7fe      	b.n	800946c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800946e:	697b      	ldr	r3, [r7, #20]
}
 8009470:	4618      	mov	r0, r3
 8009472:	3718      	adds	r7, #24
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}
 8009478:	20000c8c 	.word	0x20000c8c
 800947c:	0800cfa8 	.word	0x0800cfa8
 8009480:	080095bd 	.word	0x080095bd
 8009484:	20000c90 	.word	0x20000c90

08009488 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b08a      	sub	sp, #40	; 0x28
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	607a      	str	r2, [r7, #4]
 8009494:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009496:	2300      	movs	r3, #0
 8009498:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d10a      	bne.n	80094b6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80094a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a4:	f383 8811 	msr	BASEPRI, r3
 80094a8:	f3bf 8f6f 	isb	sy
 80094ac:	f3bf 8f4f 	dsb	sy
 80094b0:	623b      	str	r3, [r7, #32]
}
 80094b2:	bf00      	nop
 80094b4:	e7fe      	b.n	80094b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80094b6:	4b1a      	ldr	r3, [pc, #104]	; (8009520 <xTimerGenericCommand+0x98>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d02a      	beq.n	8009514 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	2b05      	cmp	r3, #5
 80094ce:	dc18      	bgt.n	8009502 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80094d0:	f7ff fdb4 	bl	800903c <xTaskGetSchedulerState>
 80094d4:	4603      	mov	r3, r0
 80094d6:	2b02      	cmp	r3, #2
 80094d8:	d109      	bne.n	80094ee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80094da:	4b11      	ldr	r3, [pc, #68]	; (8009520 <xTimerGenericCommand+0x98>)
 80094dc:	6818      	ldr	r0, [r3, #0]
 80094de:	f107 0110 	add.w	r1, r7, #16
 80094e2:	2300      	movs	r3, #0
 80094e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094e6:	f7fe f8eb 	bl	80076c0 <xQueueGenericSend>
 80094ea:	6278      	str	r0, [r7, #36]	; 0x24
 80094ec:	e012      	b.n	8009514 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80094ee:	4b0c      	ldr	r3, [pc, #48]	; (8009520 <xTimerGenericCommand+0x98>)
 80094f0:	6818      	ldr	r0, [r3, #0]
 80094f2:	f107 0110 	add.w	r1, r7, #16
 80094f6:	2300      	movs	r3, #0
 80094f8:	2200      	movs	r2, #0
 80094fa:	f7fe f8e1 	bl	80076c0 <xQueueGenericSend>
 80094fe:	6278      	str	r0, [r7, #36]	; 0x24
 8009500:	e008      	b.n	8009514 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009502:	4b07      	ldr	r3, [pc, #28]	; (8009520 <xTimerGenericCommand+0x98>)
 8009504:	6818      	ldr	r0, [r3, #0]
 8009506:	f107 0110 	add.w	r1, r7, #16
 800950a:	2300      	movs	r3, #0
 800950c:	683a      	ldr	r2, [r7, #0]
 800950e:	f7fe f9d5 	bl	80078bc <xQueueGenericSendFromISR>
 8009512:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009516:	4618      	mov	r0, r3
 8009518:	3728      	adds	r7, #40	; 0x28
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
 800951e:	bf00      	nop
 8009520:	20000c8c 	.word	0x20000c8c

08009524 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b088      	sub	sp, #32
 8009528:	af02      	add	r7, sp, #8
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800952e:	4b22      	ldr	r3, [pc, #136]	; (80095b8 <prvProcessExpiredTimer+0x94>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	68db      	ldr	r3, [r3, #12]
 8009534:	68db      	ldr	r3, [r3, #12]
 8009536:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	3304      	adds	r3, #4
 800953c:	4618      	mov	r0, r3
 800953e:	f7fd fea1 	bl	8007284 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009548:	f003 0304 	and.w	r3, r3, #4
 800954c:	2b00      	cmp	r3, #0
 800954e:	d022      	beq.n	8009596 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	699a      	ldr	r2, [r3, #24]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	18d1      	adds	r1, r2, r3
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	683a      	ldr	r2, [r7, #0]
 800955c:	6978      	ldr	r0, [r7, #20]
 800955e:	f000 f8d1 	bl	8009704 <prvInsertTimerInActiveList>
 8009562:	4603      	mov	r3, r0
 8009564:	2b00      	cmp	r3, #0
 8009566:	d01f      	beq.n	80095a8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009568:	2300      	movs	r3, #0
 800956a:	9300      	str	r3, [sp, #0]
 800956c:	2300      	movs	r3, #0
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	2100      	movs	r1, #0
 8009572:	6978      	ldr	r0, [r7, #20]
 8009574:	f7ff ff88 	bl	8009488 <xTimerGenericCommand>
 8009578:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d113      	bne.n	80095a8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009584:	f383 8811 	msr	BASEPRI, r3
 8009588:	f3bf 8f6f 	isb	sy
 800958c:	f3bf 8f4f 	dsb	sy
 8009590:	60fb      	str	r3, [r7, #12]
}
 8009592:	bf00      	nop
 8009594:	e7fe      	b.n	8009594 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800959c:	f023 0301 	bic.w	r3, r3, #1
 80095a0:	b2da      	uxtb	r2, r3
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	6a1b      	ldr	r3, [r3, #32]
 80095ac:	6978      	ldr	r0, [r7, #20]
 80095ae:	4798      	blx	r3
}
 80095b0:	bf00      	nop
 80095b2:	3718      	adds	r7, #24
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}
 80095b8:	20000c84 	.word	0x20000c84

080095bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80095c4:	f107 0308 	add.w	r3, r7, #8
 80095c8:	4618      	mov	r0, r3
 80095ca:	f000 f857 	bl	800967c <prvGetNextExpireTime>
 80095ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	4619      	mov	r1, r3
 80095d4:	68f8      	ldr	r0, [r7, #12]
 80095d6:	f000 f803 	bl	80095e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80095da:	f000 f8d5 	bl	8009788 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80095de:	e7f1      	b.n	80095c4 <prvTimerTask+0x8>

080095e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80095ea:	f7ff f925 	bl	8008838 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80095ee:	f107 0308 	add.w	r3, r7, #8
 80095f2:	4618      	mov	r0, r3
 80095f4:	f000 f866 	bl	80096c4 <prvSampleTimeNow>
 80095f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d130      	bne.n	8009662 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d10a      	bne.n	800961c <prvProcessTimerOrBlockTask+0x3c>
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	429a      	cmp	r2, r3
 800960c:	d806      	bhi.n	800961c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800960e:	f7ff f921 	bl	8008854 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009612:	68f9      	ldr	r1, [r7, #12]
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f7ff ff85 	bl	8009524 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800961a:	e024      	b.n	8009666 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d008      	beq.n	8009634 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009622:	4b13      	ldr	r3, [pc, #76]	; (8009670 <prvProcessTimerOrBlockTask+0x90>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d101      	bne.n	8009630 <prvProcessTimerOrBlockTask+0x50>
 800962c:	2301      	movs	r3, #1
 800962e:	e000      	b.n	8009632 <prvProcessTimerOrBlockTask+0x52>
 8009630:	2300      	movs	r3, #0
 8009632:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009634:	4b0f      	ldr	r3, [pc, #60]	; (8009674 <prvProcessTimerOrBlockTask+0x94>)
 8009636:	6818      	ldr	r0, [r3, #0]
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	1ad3      	subs	r3, r2, r3
 800963e:	683a      	ldr	r2, [r7, #0]
 8009640:	4619      	mov	r1, r3
 8009642:	f7fe fd15 	bl	8008070 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009646:	f7ff f905 	bl	8008854 <xTaskResumeAll>
 800964a:	4603      	mov	r3, r0
 800964c:	2b00      	cmp	r3, #0
 800964e:	d10a      	bne.n	8009666 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009650:	4b09      	ldr	r3, [pc, #36]	; (8009678 <prvProcessTimerOrBlockTask+0x98>)
 8009652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009656:	601a      	str	r2, [r3, #0]
 8009658:	f3bf 8f4f 	dsb	sy
 800965c:	f3bf 8f6f 	isb	sy
}
 8009660:	e001      	b.n	8009666 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009662:	f7ff f8f7 	bl	8008854 <xTaskResumeAll>
}
 8009666:	bf00      	nop
 8009668:	3710      	adds	r7, #16
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	20000c88 	.word	0x20000c88
 8009674:	20000c8c 	.word	0x20000c8c
 8009678:	e000ed04 	.word	0xe000ed04

0800967c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800967c:	b480      	push	{r7}
 800967e:	b085      	sub	sp, #20
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009684:	4b0e      	ldr	r3, [pc, #56]	; (80096c0 <prvGetNextExpireTime+0x44>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d101      	bne.n	8009692 <prvGetNextExpireTime+0x16>
 800968e:	2201      	movs	r2, #1
 8009690:	e000      	b.n	8009694 <prvGetNextExpireTime+0x18>
 8009692:	2200      	movs	r2, #0
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d105      	bne.n	80096ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80096a0:	4b07      	ldr	r3, [pc, #28]	; (80096c0 <prvGetNextExpireTime+0x44>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	68db      	ldr	r3, [r3, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	60fb      	str	r3, [r7, #12]
 80096aa:	e001      	b.n	80096b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80096ac:	2300      	movs	r3, #0
 80096ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80096b0:	68fb      	ldr	r3, [r7, #12]
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3714      	adds	r7, #20
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr
 80096be:	bf00      	nop
 80096c0:	20000c84 	.word	0x20000c84

080096c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80096cc:	f7ff f960 	bl	8008990 <xTaskGetTickCount>
 80096d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80096d2:	4b0b      	ldr	r3, [pc, #44]	; (8009700 <prvSampleTimeNow+0x3c>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	68fa      	ldr	r2, [r7, #12]
 80096d8:	429a      	cmp	r2, r3
 80096da:	d205      	bcs.n	80096e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80096dc:	f000 f936 	bl	800994c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2201      	movs	r2, #1
 80096e4:	601a      	str	r2, [r3, #0]
 80096e6:	e002      	b.n	80096ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2200      	movs	r2, #0
 80096ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80096ee:	4a04      	ldr	r2, [pc, #16]	; (8009700 <prvSampleTimeNow+0x3c>)
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80096f4:	68fb      	ldr	r3, [r7, #12]
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3710      	adds	r7, #16
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	20000c94 	.word	0x20000c94

08009704 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b086      	sub	sp, #24
 8009708:	af00      	add	r7, sp, #0
 800970a:	60f8      	str	r0, [r7, #12]
 800970c:	60b9      	str	r1, [r7, #8]
 800970e:	607a      	str	r2, [r7, #4]
 8009710:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009712:	2300      	movs	r3, #0
 8009714:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	68ba      	ldr	r2, [r7, #8]
 800971a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	68fa      	ldr	r2, [r7, #12]
 8009720:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009722:	68ba      	ldr	r2, [r7, #8]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	429a      	cmp	r2, r3
 8009728:	d812      	bhi.n	8009750 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800972a:	687a      	ldr	r2, [r7, #4]
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	1ad2      	subs	r2, r2, r3
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	699b      	ldr	r3, [r3, #24]
 8009734:	429a      	cmp	r2, r3
 8009736:	d302      	bcc.n	800973e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009738:	2301      	movs	r3, #1
 800973a:	617b      	str	r3, [r7, #20]
 800973c:	e01b      	b.n	8009776 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800973e:	4b10      	ldr	r3, [pc, #64]	; (8009780 <prvInsertTimerInActiveList+0x7c>)
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	3304      	adds	r3, #4
 8009746:	4619      	mov	r1, r3
 8009748:	4610      	mov	r0, r2
 800974a:	f7fd fd62 	bl	8007212 <vListInsert>
 800974e:	e012      	b.n	8009776 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009750:	687a      	ldr	r2, [r7, #4]
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	429a      	cmp	r2, r3
 8009756:	d206      	bcs.n	8009766 <prvInsertTimerInActiveList+0x62>
 8009758:	68ba      	ldr	r2, [r7, #8]
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	429a      	cmp	r2, r3
 800975e:	d302      	bcc.n	8009766 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009760:	2301      	movs	r3, #1
 8009762:	617b      	str	r3, [r7, #20]
 8009764:	e007      	b.n	8009776 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009766:	4b07      	ldr	r3, [pc, #28]	; (8009784 <prvInsertTimerInActiveList+0x80>)
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	3304      	adds	r3, #4
 800976e:	4619      	mov	r1, r3
 8009770:	4610      	mov	r0, r2
 8009772:	f7fd fd4e 	bl	8007212 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009776:	697b      	ldr	r3, [r7, #20]
}
 8009778:	4618      	mov	r0, r3
 800977a:	3718      	adds	r7, #24
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}
 8009780:	20000c88 	.word	0x20000c88
 8009784:	20000c84 	.word	0x20000c84

08009788 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b08e      	sub	sp, #56	; 0x38
 800978c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800978e:	e0ca      	b.n	8009926 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2b00      	cmp	r3, #0
 8009794:	da18      	bge.n	80097c8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009796:	1d3b      	adds	r3, r7, #4
 8009798:	3304      	adds	r3, #4
 800979a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800979c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d10a      	bne.n	80097b8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80097a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a6:	f383 8811 	msr	BASEPRI, r3
 80097aa:	f3bf 8f6f 	isb	sy
 80097ae:	f3bf 8f4f 	dsb	sy
 80097b2:	61fb      	str	r3, [r7, #28]
}
 80097b4:	bf00      	nop
 80097b6:	e7fe      	b.n	80097b6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80097b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097be:	6850      	ldr	r0, [r2, #4]
 80097c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097c2:	6892      	ldr	r2, [r2, #8]
 80097c4:	4611      	mov	r1, r2
 80097c6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	f2c0 80aa 	blt.w	8009924 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80097d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d6:	695b      	ldr	r3, [r3, #20]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d004      	beq.n	80097e6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80097dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097de:	3304      	adds	r3, #4
 80097e0:	4618      	mov	r0, r3
 80097e2:	f7fd fd4f 	bl	8007284 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80097e6:	463b      	mov	r3, r7
 80097e8:	4618      	mov	r0, r3
 80097ea:	f7ff ff6b 	bl	80096c4 <prvSampleTimeNow>
 80097ee:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2b09      	cmp	r3, #9
 80097f4:	f200 8097 	bhi.w	8009926 <prvProcessReceivedCommands+0x19e>
 80097f8:	a201      	add	r2, pc, #4	; (adr r2, 8009800 <prvProcessReceivedCommands+0x78>)
 80097fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097fe:	bf00      	nop
 8009800:	08009829 	.word	0x08009829
 8009804:	08009829 	.word	0x08009829
 8009808:	08009829 	.word	0x08009829
 800980c:	0800989d 	.word	0x0800989d
 8009810:	080098b1 	.word	0x080098b1
 8009814:	080098fb 	.word	0x080098fb
 8009818:	08009829 	.word	0x08009829
 800981c:	08009829 	.word	0x08009829
 8009820:	0800989d 	.word	0x0800989d
 8009824:	080098b1 	.word	0x080098b1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800982a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800982e:	f043 0301 	orr.w	r3, r3, #1
 8009832:	b2da      	uxtb	r2, r3
 8009834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009836:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800983a:	68ba      	ldr	r2, [r7, #8]
 800983c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800983e:	699b      	ldr	r3, [r3, #24]
 8009840:	18d1      	adds	r1, r2, r3
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009846:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009848:	f7ff ff5c 	bl	8009704 <prvInsertTimerInActiveList>
 800984c:	4603      	mov	r3, r0
 800984e:	2b00      	cmp	r3, #0
 8009850:	d069      	beq.n	8009926 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009854:	6a1b      	ldr	r3, [r3, #32]
 8009856:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009858:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800985a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009860:	f003 0304 	and.w	r3, r3, #4
 8009864:	2b00      	cmp	r3, #0
 8009866:	d05e      	beq.n	8009926 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009868:	68ba      	ldr	r2, [r7, #8]
 800986a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800986c:	699b      	ldr	r3, [r3, #24]
 800986e:	441a      	add	r2, r3
 8009870:	2300      	movs	r3, #0
 8009872:	9300      	str	r3, [sp, #0]
 8009874:	2300      	movs	r3, #0
 8009876:	2100      	movs	r1, #0
 8009878:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800987a:	f7ff fe05 	bl	8009488 <xTimerGenericCommand>
 800987e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009880:	6a3b      	ldr	r3, [r7, #32]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d14f      	bne.n	8009926 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800988a:	f383 8811 	msr	BASEPRI, r3
 800988e:	f3bf 8f6f 	isb	sy
 8009892:	f3bf 8f4f 	dsb	sy
 8009896:	61bb      	str	r3, [r7, #24]
}
 8009898:	bf00      	nop
 800989a:	e7fe      	b.n	800989a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800989c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098a2:	f023 0301 	bic.w	r3, r3, #1
 80098a6:	b2da      	uxtb	r2, r3
 80098a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80098ae:	e03a      	b.n	8009926 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80098b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098b6:	f043 0301 	orr.w	r3, r3, #1
 80098ba:	b2da      	uxtb	r2, r3
 80098bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80098c2:	68ba      	ldr	r2, [r7, #8]
 80098c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80098c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ca:	699b      	ldr	r3, [r3, #24]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d10a      	bne.n	80098e6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80098d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d4:	f383 8811 	msr	BASEPRI, r3
 80098d8:	f3bf 8f6f 	isb	sy
 80098dc:	f3bf 8f4f 	dsb	sy
 80098e0:	617b      	str	r3, [r7, #20]
}
 80098e2:	bf00      	nop
 80098e4:	e7fe      	b.n	80098e4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80098e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e8:	699a      	ldr	r2, [r3, #24]
 80098ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ec:	18d1      	adds	r1, r2, r3
 80098ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098f4:	f7ff ff06 	bl	8009704 <prvInsertTimerInActiveList>
					break;
 80098f8:	e015      	b.n	8009926 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80098fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009900:	f003 0302 	and.w	r3, r3, #2
 8009904:	2b00      	cmp	r3, #0
 8009906:	d103      	bne.n	8009910 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009908:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800990a:	f000 fbe5 	bl	800a0d8 <vPortFree>
 800990e:	e00a      	b.n	8009926 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009912:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009916:	f023 0301 	bic.w	r3, r3, #1
 800991a:	b2da      	uxtb	r2, r3
 800991c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800991e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009922:	e000      	b.n	8009926 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009924:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009926:	4b08      	ldr	r3, [pc, #32]	; (8009948 <prvProcessReceivedCommands+0x1c0>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	1d39      	adds	r1, r7, #4
 800992c:	2200      	movs	r2, #0
 800992e:	4618      	mov	r0, r3
 8009930:	f7fe f860 	bl	80079f4 <xQueueReceive>
 8009934:	4603      	mov	r3, r0
 8009936:	2b00      	cmp	r3, #0
 8009938:	f47f af2a 	bne.w	8009790 <prvProcessReceivedCommands+0x8>
	}
}
 800993c:	bf00      	nop
 800993e:	bf00      	nop
 8009940:	3730      	adds	r7, #48	; 0x30
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
 8009946:	bf00      	nop
 8009948:	20000c8c 	.word	0x20000c8c

0800994c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b088      	sub	sp, #32
 8009950:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009952:	e048      	b.n	80099e6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009954:	4b2d      	ldr	r3, [pc, #180]	; (8009a0c <prvSwitchTimerLists+0xc0>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	68db      	ldr	r3, [r3, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800995e:	4b2b      	ldr	r3, [pc, #172]	; (8009a0c <prvSwitchTimerLists+0xc0>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	68db      	ldr	r3, [r3, #12]
 8009964:	68db      	ldr	r3, [r3, #12]
 8009966:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	3304      	adds	r3, #4
 800996c:	4618      	mov	r0, r3
 800996e:	f7fd fc89 	bl	8007284 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	6a1b      	ldr	r3, [r3, #32]
 8009976:	68f8      	ldr	r0, [r7, #12]
 8009978:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009980:	f003 0304 	and.w	r3, r3, #4
 8009984:	2b00      	cmp	r3, #0
 8009986:	d02e      	beq.n	80099e6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	699b      	ldr	r3, [r3, #24]
 800998c:	693a      	ldr	r2, [r7, #16]
 800998e:	4413      	add	r3, r2
 8009990:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009992:	68ba      	ldr	r2, [r7, #8]
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	429a      	cmp	r2, r3
 8009998:	d90e      	bls.n	80099b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	68ba      	ldr	r2, [r7, #8]
 800999e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	68fa      	ldr	r2, [r7, #12]
 80099a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80099a6:	4b19      	ldr	r3, [pc, #100]	; (8009a0c <prvSwitchTimerLists+0xc0>)
 80099a8:	681a      	ldr	r2, [r3, #0]
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	3304      	adds	r3, #4
 80099ae:	4619      	mov	r1, r3
 80099b0:	4610      	mov	r0, r2
 80099b2:	f7fd fc2e 	bl	8007212 <vListInsert>
 80099b6:	e016      	b.n	80099e6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80099b8:	2300      	movs	r3, #0
 80099ba:	9300      	str	r3, [sp, #0]
 80099bc:	2300      	movs	r3, #0
 80099be:	693a      	ldr	r2, [r7, #16]
 80099c0:	2100      	movs	r1, #0
 80099c2:	68f8      	ldr	r0, [r7, #12]
 80099c4:	f7ff fd60 	bl	8009488 <xTimerGenericCommand>
 80099c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d10a      	bne.n	80099e6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80099d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d4:	f383 8811 	msr	BASEPRI, r3
 80099d8:	f3bf 8f6f 	isb	sy
 80099dc:	f3bf 8f4f 	dsb	sy
 80099e0:	603b      	str	r3, [r7, #0]
}
 80099e2:	bf00      	nop
 80099e4:	e7fe      	b.n	80099e4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80099e6:	4b09      	ldr	r3, [pc, #36]	; (8009a0c <prvSwitchTimerLists+0xc0>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d1b1      	bne.n	8009954 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80099f0:	4b06      	ldr	r3, [pc, #24]	; (8009a0c <prvSwitchTimerLists+0xc0>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80099f6:	4b06      	ldr	r3, [pc, #24]	; (8009a10 <prvSwitchTimerLists+0xc4>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a04      	ldr	r2, [pc, #16]	; (8009a0c <prvSwitchTimerLists+0xc0>)
 80099fc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80099fe:	4a04      	ldr	r2, [pc, #16]	; (8009a10 <prvSwitchTimerLists+0xc4>)
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	6013      	str	r3, [r2, #0]
}
 8009a04:	bf00      	nop
 8009a06:	3718      	adds	r7, #24
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}
 8009a0c:	20000c84 	.word	0x20000c84
 8009a10:	20000c88 	.word	0x20000c88

08009a14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b082      	sub	sp, #8
 8009a18:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009a1a:	f000 f96b 	bl	8009cf4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009a1e:	4b15      	ldr	r3, [pc, #84]	; (8009a74 <prvCheckForValidListAndQueue+0x60>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d120      	bne.n	8009a68 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009a26:	4814      	ldr	r0, [pc, #80]	; (8009a78 <prvCheckForValidListAndQueue+0x64>)
 8009a28:	f7fd fba2 	bl	8007170 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009a2c:	4813      	ldr	r0, [pc, #76]	; (8009a7c <prvCheckForValidListAndQueue+0x68>)
 8009a2e:	f7fd fb9f 	bl	8007170 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009a32:	4b13      	ldr	r3, [pc, #76]	; (8009a80 <prvCheckForValidListAndQueue+0x6c>)
 8009a34:	4a10      	ldr	r2, [pc, #64]	; (8009a78 <prvCheckForValidListAndQueue+0x64>)
 8009a36:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009a38:	4b12      	ldr	r3, [pc, #72]	; (8009a84 <prvCheckForValidListAndQueue+0x70>)
 8009a3a:	4a10      	ldr	r2, [pc, #64]	; (8009a7c <prvCheckForValidListAndQueue+0x68>)
 8009a3c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009a3e:	2300      	movs	r3, #0
 8009a40:	9300      	str	r3, [sp, #0]
 8009a42:	4b11      	ldr	r3, [pc, #68]	; (8009a88 <prvCheckForValidListAndQueue+0x74>)
 8009a44:	4a11      	ldr	r2, [pc, #68]	; (8009a8c <prvCheckForValidListAndQueue+0x78>)
 8009a46:	2110      	movs	r1, #16
 8009a48:	200a      	movs	r0, #10
 8009a4a:	f7fd fcad 	bl	80073a8 <xQueueGenericCreateStatic>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	4a08      	ldr	r2, [pc, #32]	; (8009a74 <prvCheckForValidListAndQueue+0x60>)
 8009a52:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009a54:	4b07      	ldr	r3, [pc, #28]	; (8009a74 <prvCheckForValidListAndQueue+0x60>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d005      	beq.n	8009a68 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009a5c:	4b05      	ldr	r3, [pc, #20]	; (8009a74 <prvCheckForValidListAndQueue+0x60>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	490b      	ldr	r1, [pc, #44]	; (8009a90 <prvCheckForValidListAndQueue+0x7c>)
 8009a62:	4618      	mov	r0, r3
 8009a64:	f7fe fada 	bl	800801c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009a68:	f000 f974 	bl	8009d54 <vPortExitCritical>
}
 8009a6c:	bf00      	nop
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}
 8009a72:	bf00      	nop
 8009a74:	20000c8c 	.word	0x20000c8c
 8009a78:	20000c5c 	.word	0x20000c5c
 8009a7c:	20000c70 	.word	0x20000c70
 8009a80:	20000c84 	.word	0x20000c84
 8009a84:	20000c88 	.word	0x20000c88
 8009a88:	20000d38 	.word	0x20000d38
 8009a8c:	20000c98 	.word	0x20000c98
 8009a90:	0800cfb0 	.word	0x0800cfb0

08009a94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009a94:	b480      	push	{r7}
 8009a96:	b085      	sub	sp, #20
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	60f8      	str	r0, [r7, #12]
 8009a9c:	60b9      	str	r1, [r7, #8]
 8009a9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	3b04      	subs	r3, #4
 8009aa4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009aac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	3b04      	subs	r3, #4
 8009ab2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	f023 0201 	bic.w	r2, r3, #1
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	3b04      	subs	r3, #4
 8009ac2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009ac4:	4a0c      	ldr	r2, [pc, #48]	; (8009af8 <pxPortInitialiseStack+0x64>)
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	3b14      	subs	r3, #20
 8009ace:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	3b04      	subs	r3, #4
 8009ada:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f06f 0202 	mvn.w	r2, #2
 8009ae2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	3b20      	subs	r3, #32
 8009ae8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009aea:	68fb      	ldr	r3, [r7, #12]
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3714      	adds	r7, #20
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr
 8009af8:	08009afd 	.word	0x08009afd

08009afc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009afc:	b480      	push	{r7}
 8009afe:	b085      	sub	sp, #20
 8009b00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009b02:	2300      	movs	r3, #0
 8009b04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009b06:	4b12      	ldr	r3, [pc, #72]	; (8009b50 <prvTaskExitError+0x54>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b0e:	d00a      	beq.n	8009b26 <prvTaskExitError+0x2a>
	__asm volatile
 8009b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b14:	f383 8811 	msr	BASEPRI, r3
 8009b18:	f3bf 8f6f 	isb	sy
 8009b1c:	f3bf 8f4f 	dsb	sy
 8009b20:	60fb      	str	r3, [r7, #12]
}
 8009b22:	bf00      	nop
 8009b24:	e7fe      	b.n	8009b24 <prvTaskExitError+0x28>
	__asm volatile
 8009b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b2a:	f383 8811 	msr	BASEPRI, r3
 8009b2e:	f3bf 8f6f 	isb	sy
 8009b32:	f3bf 8f4f 	dsb	sy
 8009b36:	60bb      	str	r3, [r7, #8]
}
 8009b38:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009b3a:	bf00      	nop
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d0fc      	beq.n	8009b3c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009b42:	bf00      	nop
 8009b44:	bf00      	nop
 8009b46:	3714      	adds	r7, #20
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr
 8009b50:	20000014 	.word	0x20000014
	...

08009b60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009b60:	4b07      	ldr	r3, [pc, #28]	; (8009b80 <pxCurrentTCBConst2>)
 8009b62:	6819      	ldr	r1, [r3, #0]
 8009b64:	6808      	ldr	r0, [r1, #0]
 8009b66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b6a:	f380 8809 	msr	PSP, r0
 8009b6e:	f3bf 8f6f 	isb	sy
 8009b72:	f04f 0000 	mov.w	r0, #0
 8009b76:	f380 8811 	msr	BASEPRI, r0
 8009b7a:	4770      	bx	lr
 8009b7c:	f3af 8000 	nop.w

08009b80 <pxCurrentTCBConst2>:
 8009b80:	2000075c 	.word	0x2000075c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009b84:	bf00      	nop
 8009b86:	bf00      	nop

08009b88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009b88:	4808      	ldr	r0, [pc, #32]	; (8009bac <prvPortStartFirstTask+0x24>)
 8009b8a:	6800      	ldr	r0, [r0, #0]
 8009b8c:	6800      	ldr	r0, [r0, #0]
 8009b8e:	f380 8808 	msr	MSP, r0
 8009b92:	f04f 0000 	mov.w	r0, #0
 8009b96:	f380 8814 	msr	CONTROL, r0
 8009b9a:	b662      	cpsie	i
 8009b9c:	b661      	cpsie	f
 8009b9e:	f3bf 8f4f 	dsb	sy
 8009ba2:	f3bf 8f6f 	isb	sy
 8009ba6:	df00      	svc	0
 8009ba8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009baa:	bf00      	nop
 8009bac:	e000ed08 	.word	0xe000ed08

08009bb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b086      	sub	sp, #24
 8009bb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009bb6:	4b46      	ldr	r3, [pc, #280]	; (8009cd0 <xPortStartScheduler+0x120>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4a46      	ldr	r2, [pc, #280]	; (8009cd4 <xPortStartScheduler+0x124>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d10a      	bne.n	8009bd6 <xPortStartScheduler+0x26>
	__asm volatile
 8009bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc4:	f383 8811 	msr	BASEPRI, r3
 8009bc8:	f3bf 8f6f 	isb	sy
 8009bcc:	f3bf 8f4f 	dsb	sy
 8009bd0:	613b      	str	r3, [r7, #16]
}
 8009bd2:	bf00      	nop
 8009bd4:	e7fe      	b.n	8009bd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009bd6:	4b3e      	ldr	r3, [pc, #248]	; (8009cd0 <xPortStartScheduler+0x120>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a3f      	ldr	r2, [pc, #252]	; (8009cd8 <xPortStartScheduler+0x128>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d10a      	bne.n	8009bf6 <xPortStartScheduler+0x46>
	__asm volatile
 8009be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be4:	f383 8811 	msr	BASEPRI, r3
 8009be8:	f3bf 8f6f 	isb	sy
 8009bec:	f3bf 8f4f 	dsb	sy
 8009bf0:	60fb      	str	r3, [r7, #12]
}
 8009bf2:	bf00      	nop
 8009bf4:	e7fe      	b.n	8009bf4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009bf6:	4b39      	ldr	r3, [pc, #228]	; (8009cdc <xPortStartScheduler+0x12c>)
 8009bf8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	b2db      	uxtb	r3, r3
 8009c00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	22ff      	movs	r2, #255	; 0xff
 8009c06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	781b      	ldrb	r3, [r3, #0]
 8009c0c:	b2db      	uxtb	r3, r3
 8009c0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009c10:	78fb      	ldrb	r3, [r7, #3]
 8009c12:	b2db      	uxtb	r3, r3
 8009c14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009c18:	b2da      	uxtb	r2, r3
 8009c1a:	4b31      	ldr	r3, [pc, #196]	; (8009ce0 <xPortStartScheduler+0x130>)
 8009c1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009c1e:	4b31      	ldr	r3, [pc, #196]	; (8009ce4 <xPortStartScheduler+0x134>)
 8009c20:	2207      	movs	r2, #7
 8009c22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009c24:	e009      	b.n	8009c3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009c26:	4b2f      	ldr	r3, [pc, #188]	; (8009ce4 <xPortStartScheduler+0x134>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	3b01      	subs	r3, #1
 8009c2c:	4a2d      	ldr	r2, [pc, #180]	; (8009ce4 <xPortStartScheduler+0x134>)
 8009c2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009c30:	78fb      	ldrb	r3, [r7, #3]
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	005b      	lsls	r3, r3, #1
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009c3a:	78fb      	ldrb	r3, [r7, #3]
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c42:	2b80      	cmp	r3, #128	; 0x80
 8009c44:	d0ef      	beq.n	8009c26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009c46:	4b27      	ldr	r3, [pc, #156]	; (8009ce4 <xPortStartScheduler+0x134>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f1c3 0307 	rsb	r3, r3, #7
 8009c4e:	2b04      	cmp	r3, #4
 8009c50:	d00a      	beq.n	8009c68 <xPortStartScheduler+0xb8>
	__asm volatile
 8009c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c56:	f383 8811 	msr	BASEPRI, r3
 8009c5a:	f3bf 8f6f 	isb	sy
 8009c5e:	f3bf 8f4f 	dsb	sy
 8009c62:	60bb      	str	r3, [r7, #8]
}
 8009c64:	bf00      	nop
 8009c66:	e7fe      	b.n	8009c66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009c68:	4b1e      	ldr	r3, [pc, #120]	; (8009ce4 <xPortStartScheduler+0x134>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	021b      	lsls	r3, r3, #8
 8009c6e:	4a1d      	ldr	r2, [pc, #116]	; (8009ce4 <xPortStartScheduler+0x134>)
 8009c70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009c72:	4b1c      	ldr	r3, [pc, #112]	; (8009ce4 <xPortStartScheduler+0x134>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009c7a:	4a1a      	ldr	r2, [pc, #104]	; (8009ce4 <xPortStartScheduler+0x134>)
 8009c7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	b2da      	uxtb	r2, r3
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009c86:	4b18      	ldr	r3, [pc, #96]	; (8009ce8 <xPortStartScheduler+0x138>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4a17      	ldr	r2, [pc, #92]	; (8009ce8 <xPortStartScheduler+0x138>)
 8009c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009c90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009c92:	4b15      	ldr	r3, [pc, #84]	; (8009ce8 <xPortStartScheduler+0x138>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4a14      	ldr	r2, [pc, #80]	; (8009ce8 <xPortStartScheduler+0x138>)
 8009c98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009c9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009c9e:	f000 f8dd 	bl	8009e5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009ca2:	4b12      	ldr	r3, [pc, #72]	; (8009cec <xPortStartScheduler+0x13c>)
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009ca8:	f000 f8fc 	bl	8009ea4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009cac:	4b10      	ldr	r3, [pc, #64]	; (8009cf0 <xPortStartScheduler+0x140>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4a0f      	ldr	r2, [pc, #60]	; (8009cf0 <xPortStartScheduler+0x140>)
 8009cb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009cb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009cb8:	f7ff ff66 	bl	8009b88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009cbc:	f7fe ff32 	bl	8008b24 <vTaskSwitchContext>
	prvTaskExitError();
 8009cc0:	f7ff ff1c 	bl	8009afc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009cc4:	2300      	movs	r3, #0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3718      	adds	r7, #24
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	e000ed00 	.word	0xe000ed00
 8009cd4:	410fc271 	.word	0x410fc271
 8009cd8:	410fc270 	.word	0x410fc270
 8009cdc:	e000e400 	.word	0xe000e400
 8009ce0:	20000d88 	.word	0x20000d88
 8009ce4:	20000d8c 	.word	0x20000d8c
 8009ce8:	e000ed20 	.word	0xe000ed20
 8009cec:	20000014 	.word	0x20000014
 8009cf0:	e000ef34 	.word	0xe000ef34

08009cf4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b083      	sub	sp, #12
 8009cf8:	af00      	add	r7, sp, #0
	__asm volatile
 8009cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cfe:	f383 8811 	msr	BASEPRI, r3
 8009d02:	f3bf 8f6f 	isb	sy
 8009d06:	f3bf 8f4f 	dsb	sy
 8009d0a:	607b      	str	r3, [r7, #4]
}
 8009d0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009d0e:	4b0f      	ldr	r3, [pc, #60]	; (8009d4c <vPortEnterCritical+0x58>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	3301      	adds	r3, #1
 8009d14:	4a0d      	ldr	r2, [pc, #52]	; (8009d4c <vPortEnterCritical+0x58>)
 8009d16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009d18:	4b0c      	ldr	r3, [pc, #48]	; (8009d4c <vPortEnterCritical+0x58>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d10f      	bne.n	8009d40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009d20:	4b0b      	ldr	r3, [pc, #44]	; (8009d50 <vPortEnterCritical+0x5c>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	b2db      	uxtb	r3, r3
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d00a      	beq.n	8009d40 <vPortEnterCritical+0x4c>
	__asm volatile
 8009d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d2e:	f383 8811 	msr	BASEPRI, r3
 8009d32:	f3bf 8f6f 	isb	sy
 8009d36:	f3bf 8f4f 	dsb	sy
 8009d3a:	603b      	str	r3, [r7, #0]
}
 8009d3c:	bf00      	nop
 8009d3e:	e7fe      	b.n	8009d3e <vPortEnterCritical+0x4a>
	}
}
 8009d40:	bf00      	nop
 8009d42:	370c      	adds	r7, #12
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr
 8009d4c:	20000014 	.word	0x20000014
 8009d50:	e000ed04 	.word	0xe000ed04

08009d54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009d54:	b480      	push	{r7}
 8009d56:	b083      	sub	sp, #12
 8009d58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009d5a:	4b12      	ldr	r3, [pc, #72]	; (8009da4 <vPortExitCritical+0x50>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d10a      	bne.n	8009d78 <vPortExitCritical+0x24>
	__asm volatile
 8009d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d66:	f383 8811 	msr	BASEPRI, r3
 8009d6a:	f3bf 8f6f 	isb	sy
 8009d6e:	f3bf 8f4f 	dsb	sy
 8009d72:	607b      	str	r3, [r7, #4]
}
 8009d74:	bf00      	nop
 8009d76:	e7fe      	b.n	8009d76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009d78:	4b0a      	ldr	r3, [pc, #40]	; (8009da4 <vPortExitCritical+0x50>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	3b01      	subs	r3, #1
 8009d7e:	4a09      	ldr	r2, [pc, #36]	; (8009da4 <vPortExitCritical+0x50>)
 8009d80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009d82:	4b08      	ldr	r3, [pc, #32]	; (8009da4 <vPortExitCritical+0x50>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d105      	bne.n	8009d96 <vPortExitCritical+0x42>
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	f383 8811 	msr	BASEPRI, r3
}
 8009d94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009d96:	bf00      	nop
 8009d98:	370c      	adds	r7, #12
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr
 8009da2:	bf00      	nop
 8009da4:	20000014 	.word	0x20000014
	...

08009db0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009db0:	f3ef 8009 	mrs	r0, PSP
 8009db4:	f3bf 8f6f 	isb	sy
 8009db8:	4b15      	ldr	r3, [pc, #84]	; (8009e10 <pxCurrentTCBConst>)
 8009dba:	681a      	ldr	r2, [r3, #0]
 8009dbc:	f01e 0f10 	tst.w	lr, #16
 8009dc0:	bf08      	it	eq
 8009dc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009dc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dca:	6010      	str	r0, [r2, #0]
 8009dcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009dd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009dd4:	f380 8811 	msr	BASEPRI, r0
 8009dd8:	f3bf 8f4f 	dsb	sy
 8009ddc:	f3bf 8f6f 	isb	sy
 8009de0:	f7fe fea0 	bl	8008b24 <vTaskSwitchContext>
 8009de4:	f04f 0000 	mov.w	r0, #0
 8009de8:	f380 8811 	msr	BASEPRI, r0
 8009dec:	bc09      	pop	{r0, r3}
 8009dee:	6819      	ldr	r1, [r3, #0]
 8009df0:	6808      	ldr	r0, [r1, #0]
 8009df2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009df6:	f01e 0f10 	tst.w	lr, #16
 8009dfa:	bf08      	it	eq
 8009dfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009e00:	f380 8809 	msr	PSP, r0
 8009e04:	f3bf 8f6f 	isb	sy
 8009e08:	4770      	bx	lr
 8009e0a:	bf00      	nop
 8009e0c:	f3af 8000 	nop.w

08009e10 <pxCurrentTCBConst>:
 8009e10:	2000075c 	.word	0x2000075c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009e14:	bf00      	nop
 8009e16:	bf00      	nop

08009e18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b082      	sub	sp, #8
 8009e1c:	af00      	add	r7, sp, #0
	__asm volatile
 8009e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e22:	f383 8811 	msr	BASEPRI, r3
 8009e26:	f3bf 8f6f 	isb	sy
 8009e2a:	f3bf 8f4f 	dsb	sy
 8009e2e:	607b      	str	r3, [r7, #4]
}
 8009e30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009e32:	f7fe fdbd 	bl	80089b0 <xTaskIncrementTick>
 8009e36:	4603      	mov	r3, r0
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d003      	beq.n	8009e44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009e3c:	4b06      	ldr	r3, [pc, #24]	; (8009e58 <xPortSysTickHandler+0x40>)
 8009e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e42:	601a      	str	r2, [r3, #0]
 8009e44:	2300      	movs	r3, #0
 8009e46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	f383 8811 	msr	BASEPRI, r3
}
 8009e4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009e50:	bf00      	nop
 8009e52:	3708      	adds	r7, #8
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}
 8009e58:	e000ed04 	.word	0xe000ed04

08009e5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009e60:	4b0b      	ldr	r3, [pc, #44]	; (8009e90 <vPortSetupTimerInterrupt+0x34>)
 8009e62:	2200      	movs	r2, #0
 8009e64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009e66:	4b0b      	ldr	r3, [pc, #44]	; (8009e94 <vPortSetupTimerInterrupt+0x38>)
 8009e68:	2200      	movs	r2, #0
 8009e6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009e6c:	4b0a      	ldr	r3, [pc, #40]	; (8009e98 <vPortSetupTimerInterrupt+0x3c>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a0a      	ldr	r2, [pc, #40]	; (8009e9c <vPortSetupTimerInterrupt+0x40>)
 8009e72:	fba2 2303 	umull	r2, r3, r2, r3
 8009e76:	099b      	lsrs	r3, r3, #6
 8009e78:	4a09      	ldr	r2, [pc, #36]	; (8009ea0 <vPortSetupTimerInterrupt+0x44>)
 8009e7a:	3b01      	subs	r3, #1
 8009e7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009e7e:	4b04      	ldr	r3, [pc, #16]	; (8009e90 <vPortSetupTimerInterrupt+0x34>)
 8009e80:	2207      	movs	r2, #7
 8009e82:	601a      	str	r2, [r3, #0]
}
 8009e84:	bf00      	nop
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr
 8009e8e:	bf00      	nop
 8009e90:	e000e010 	.word	0xe000e010
 8009e94:	e000e018 	.word	0xe000e018
 8009e98:	20000008 	.word	0x20000008
 8009e9c:	10624dd3 	.word	0x10624dd3
 8009ea0:	e000e014 	.word	0xe000e014

08009ea4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009ea4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009eb4 <vPortEnableVFP+0x10>
 8009ea8:	6801      	ldr	r1, [r0, #0]
 8009eaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009eae:	6001      	str	r1, [r0, #0]
 8009eb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009eb2:	bf00      	nop
 8009eb4:	e000ed88 	.word	0xe000ed88

08009eb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009eb8:	b480      	push	{r7}
 8009eba:	b085      	sub	sp, #20
 8009ebc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009ebe:	f3ef 8305 	mrs	r3, IPSR
 8009ec2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2b0f      	cmp	r3, #15
 8009ec8:	d914      	bls.n	8009ef4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009eca:	4a17      	ldr	r2, [pc, #92]	; (8009f28 <vPortValidateInterruptPriority+0x70>)
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	4413      	add	r3, r2
 8009ed0:	781b      	ldrb	r3, [r3, #0]
 8009ed2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009ed4:	4b15      	ldr	r3, [pc, #84]	; (8009f2c <vPortValidateInterruptPriority+0x74>)
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	7afa      	ldrb	r2, [r7, #11]
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d20a      	bcs.n	8009ef4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee2:	f383 8811 	msr	BASEPRI, r3
 8009ee6:	f3bf 8f6f 	isb	sy
 8009eea:	f3bf 8f4f 	dsb	sy
 8009eee:	607b      	str	r3, [r7, #4]
}
 8009ef0:	bf00      	nop
 8009ef2:	e7fe      	b.n	8009ef2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009ef4:	4b0e      	ldr	r3, [pc, #56]	; (8009f30 <vPortValidateInterruptPriority+0x78>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009efc:	4b0d      	ldr	r3, [pc, #52]	; (8009f34 <vPortValidateInterruptPriority+0x7c>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d90a      	bls.n	8009f1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f08:	f383 8811 	msr	BASEPRI, r3
 8009f0c:	f3bf 8f6f 	isb	sy
 8009f10:	f3bf 8f4f 	dsb	sy
 8009f14:	603b      	str	r3, [r7, #0]
}
 8009f16:	bf00      	nop
 8009f18:	e7fe      	b.n	8009f18 <vPortValidateInterruptPriority+0x60>
	}
 8009f1a:	bf00      	nop
 8009f1c:	3714      	adds	r7, #20
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr
 8009f26:	bf00      	nop
 8009f28:	e000e3f0 	.word	0xe000e3f0
 8009f2c:	20000d88 	.word	0x20000d88
 8009f30:	e000ed0c 	.word	0xe000ed0c
 8009f34:	20000d8c 	.word	0x20000d8c

08009f38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b08a      	sub	sp, #40	; 0x28
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009f40:	2300      	movs	r3, #0
 8009f42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009f44:	f7fe fc78 	bl	8008838 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009f48:	4b5d      	ldr	r3, [pc, #372]	; (800a0c0 <pvPortMalloc+0x188>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d101      	bne.n	8009f54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009f50:	f000 f924 	bl	800a19c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009f54:	4b5b      	ldr	r3, [pc, #364]	; (800a0c4 <pvPortMalloc+0x18c>)
 8009f56:	681a      	ldr	r2, [r3, #0]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	4013      	ands	r3, r2
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	f040 8093 	bne.w	800a088 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d01d      	beq.n	8009fa4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009f68:	2208      	movs	r2, #8
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	4413      	add	r3, r2
 8009f6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f003 0307 	and.w	r3, r3, #7
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d014      	beq.n	8009fa4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f023 0307 	bic.w	r3, r3, #7
 8009f80:	3308      	adds	r3, #8
 8009f82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f003 0307 	and.w	r3, r3, #7
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d00a      	beq.n	8009fa4 <pvPortMalloc+0x6c>
	__asm volatile
 8009f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f92:	f383 8811 	msr	BASEPRI, r3
 8009f96:	f3bf 8f6f 	isb	sy
 8009f9a:	f3bf 8f4f 	dsb	sy
 8009f9e:	617b      	str	r3, [r7, #20]
}
 8009fa0:	bf00      	nop
 8009fa2:	e7fe      	b.n	8009fa2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d06e      	beq.n	800a088 <pvPortMalloc+0x150>
 8009faa:	4b47      	ldr	r3, [pc, #284]	; (800a0c8 <pvPortMalloc+0x190>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	687a      	ldr	r2, [r7, #4]
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d869      	bhi.n	800a088 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009fb4:	4b45      	ldr	r3, [pc, #276]	; (800a0cc <pvPortMalloc+0x194>)
 8009fb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009fb8:	4b44      	ldr	r3, [pc, #272]	; (800a0cc <pvPortMalloc+0x194>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009fbe:	e004      	b.n	8009fca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d903      	bls.n	8009fdc <pvPortMalloc+0xa4>
 8009fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d1f1      	bne.n	8009fc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009fdc:	4b38      	ldr	r3, [pc, #224]	; (800a0c0 <pvPortMalloc+0x188>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d050      	beq.n	800a088 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009fe6:	6a3b      	ldr	r3, [r7, #32]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	2208      	movs	r2, #8
 8009fec:	4413      	add	r3, r2
 8009fee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	6a3b      	ldr	r3, [r7, #32]
 8009ff6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffa:	685a      	ldr	r2, [r3, #4]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	1ad2      	subs	r2, r2, r3
 800a000:	2308      	movs	r3, #8
 800a002:	005b      	lsls	r3, r3, #1
 800a004:	429a      	cmp	r2, r3
 800a006:	d91f      	bls.n	800a048 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	4413      	add	r3, r2
 800a00e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a010:	69bb      	ldr	r3, [r7, #24]
 800a012:	f003 0307 	and.w	r3, r3, #7
 800a016:	2b00      	cmp	r3, #0
 800a018:	d00a      	beq.n	800a030 <pvPortMalloc+0xf8>
	__asm volatile
 800a01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a01e:	f383 8811 	msr	BASEPRI, r3
 800a022:	f3bf 8f6f 	isb	sy
 800a026:	f3bf 8f4f 	dsb	sy
 800a02a:	613b      	str	r3, [r7, #16]
}
 800a02c:	bf00      	nop
 800a02e:	e7fe      	b.n	800a02e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a032:	685a      	ldr	r2, [r3, #4]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	1ad2      	subs	r2, r2, r3
 800a038:	69bb      	ldr	r3, [r7, #24]
 800a03a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a03e:	687a      	ldr	r2, [r7, #4]
 800a040:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a042:	69b8      	ldr	r0, [r7, #24]
 800a044:	f000 f90c 	bl	800a260 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a048:	4b1f      	ldr	r3, [pc, #124]	; (800a0c8 <pvPortMalloc+0x190>)
 800a04a:	681a      	ldr	r2, [r3, #0]
 800a04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	1ad3      	subs	r3, r2, r3
 800a052:	4a1d      	ldr	r2, [pc, #116]	; (800a0c8 <pvPortMalloc+0x190>)
 800a054:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a056:	4b1c      	ldr	r3, [pc, #112]	; (800a0c8 <pvPortMalloc+0x190>)
 800a058:	681a      	ldr	r2, [r3, #0]
 800a05a:	4b1d      	ldr	r3, [pc, #116]	; (800a0d0 <pvPortMalloc+0x198>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	429a      	cmp	r2, r3
 800a060:	d203      	bcs.n	800a06a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a062:	4b19      	ldr	r3, [pc, #100]	; (800a0c8 <pvPortMalloc+0x190>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4a1a      	ldr	r2, [pc, #104]	; (800a0d0 <pvPortMalloc+0x198>)
 800a068:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a06c:	685a      	ldr	r2, [r3, #4]
 800a06e:	4b15      	ldr	r3, [pc, #84]	; (800a0c4 <pvPortMalloc+0x18c>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	431a      	orrs	r2, r3
 800a074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a076:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07a:	2200      	movs	r2, #0
 800a07c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a07e:	4b15      	ldr	r3, [pc, #84]	; (800a0d4 <pvPortMalloc+0x19c>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	3301      	adds	r3, #1
 800a084:	4a13      	ldr	r2, [pc, #76]	; (800a0d4 <pvPortMalloc+0x19c>)
 800a086:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a088:	f7fe fbe4 	bl	8008854 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800a08c:	69fb      	ldr	r3, [r7, #28]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d101      	bne.n	800a096 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800a092:	f7f8 fe9d 	bl	8002dd0 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a096:	69fb      	ldr	r3, [r7, #28]
 800a098:	f003 0307 	and.w	r3, r3, #7
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d00a      	beq.n	800a0b6 <pvPortMalloc+0x17e>
	__asm volatile
 800a0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a4:	f383 8811 	msr	BASEPRI, r3
 800a0a8:	f3bf 8f6f 	isb	sy
 800a0ac:	f3bf 8f4f 	dsb	sy
 800a0b0:	60fb      	str	r3, [r7, #12]
}
 800a0b2:	bf00      	nop
 800a0b4:	e7fe      	b.n	800a0b4 <pvPortMalloc+0x17c>
	return pvReturn;
 800a0b6:	69fb      	ldr	r3, [r7, #28]
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3728      	adds	r7, #40	; 0x28
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}
 800a0c0:	20004998 	.word	0x20004998
 800a0c4:	200049ac 	.word	0x200049ac
 800a0c8:	2000499c 	.word	0x2000499c
 800a0cc:	20004990 	.word	0x20004990
 800a0d0:	200049a0 	.word	0x200049a0
 800a0d4:	200049a4 	.word	0x200049a4

0800a0d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b086      	sub	sp, #24
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d04d      	beq.n	800a186 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a0ea:	2308      	movs	r3, #8
 800a0ec:	425b      	negs	r3, r3
 800a0ee:	697a      	ldr	r2, [r7, #20]
 800a0f0:	4413      	add	r3, r2
 800a0f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	685a      	ldr	r2, [r3, #4]
 800a0fc:	4b24      	ldr	r3, [pc, #144]	; (800a190 <vPortFree+0xb8>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4013      	ands	r3, r2
 800a102:	2b00      	cmp	r3, #0
 800a104:	d10a      	bne.n	800a11c <vPortFree+0x44>
	__asm volatile
 800a106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a10a:	f383 8811 	msr	BASEPRI, r3
 800a10e:	f3bf 8f6f 	isb	sy
 800a112:	f3bf 8f4f 	dsb	sy
 800a116:	60fb      	str	r3, [r7, #12]
}
 800a118:	bf00      	nop
 800a11a:	e7fe      	b.n	800a11a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d00a      	beq.n	800a13a <vPortFree+0x62>
	__asm volatile
 800a124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a128:	f383 8811 	msr	BASEPRI, r3
 800a12c:	f3bf 8f6f 	isb	sy
 800a130:	f3bf 8f4f 	dsb	sy
 800a134:	60bb      	str	r3, [r7, #8]
}
 800a136:	bf00      	nop
 800a138:	e7fe      	b.n	800a138 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	685a      	ldr	r2, [r3, #4]
 800a13e:	4b14      	ldr	r3, [pc, #80]	; (800a190 <vPortFree+0xb8>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	4013      	ands	r3, r2
 800a144:	2b00      	cmp	r3, #0
 800a146:	d01e      	beq.n	800a186 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d11a      	bne.n	800a186 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	685a      	ldr	r2, [r3, #4]
 800a154:	4b0e      	ldr	r3, [pc, #56]	; (800a190 <vPortFree+0xb8>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	43db      	mvns	r3, r3
 800a15a:	401a      	ands	r2, r3
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a160:	f7fe fb6a 	bl	8008838 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	685a      	ldr	r2, [r3, #4]
 800a168:	4b0a      	ldr	r3, [pc, #40]	; (800a194 <vPortFree+0xbc>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4413      	add	r3, r2
 800a16e:	4a09      	ldr	r2, [pc, #36]	; (800a194 <vPortFree+0xbc>)
 800a170:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a172:	6938      	ldr	r0, [r7, #16]
 800a174:	f000 f874 	bl	800a260 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a178:	4b07      	ldr	r3, [pc, #28]	; (800a198 <vPortFree+0xc0>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	3301      	adds	r3, #1
 800a17e:	4a06      	ldr	r2, [pc, #24]	; (800a198 <vPortFree+0xc0>)
 800a180:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a182:	f7fe fb67 	bl	8008854 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a186:	bf00      	nop
 800a188:	3718      	adds	r7, #24
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	bf00      	nop
 800a190:	200049ac 	.word	0x200049ac
 800a194:	2000499c 	.word	0x2000499c
 800a198:	200049a8 	.word	0x200049a8

0800a19c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a19c:	b480      	push	{r7}
 800a19e:	b085      	sub	sp, #20
 800a1a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a1a2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a1a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a1a8:	4b27      	ldr	r3, [pc, #156]	; (800a248 <prvHeapInit+0xac>)
 800a1aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f003 0307 	and.w	r3, r3, #7
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d00c      	beq.n	800a1d0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	3307      	adds	r3, #7
 800a1ba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f023 0307 	bic.w	r3, r3, #7
 800a1c2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a1c4:	68ba      	ldr	r2, [r7, #8]
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	1ad3      	subs	r3, r2, r3
 800a1ca:	4a1f      	ldr	r2, [pc, #124]	; (800a248 <prvHeapInit+0xac>)
 800a1cc:	4413      	add	r3, r2
 800a1ce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a1d4:	4a1d      	ldr	r2, [pc, #116]	; (800a24c <prvHeapInit+0xb0>)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a1da:	4b1c      	ldr	r3, [pc, #112]	; (800a24c <prvHeapInit+0xb0>)
 800a1dc:	2200      	movs	r2, #0
 800a1de:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	68ba      	ldr	r2, [r7, #8]
 800a1e4:	4413      	add	r3, r2
 800a1e6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a1e8:	2208      	movs	r2, #8
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	1a9b      	subs	r3, r3, r2
 800a1ee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f023 0307 	bic.w	r3, r3, #7
 800a1f6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	4a15      	ldr	r2, [pc, #84]	; (800a250 <prvHeapInit+0xb4>)
 800a1fc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a1fe:	4b14      	ldr	r3, [pc, #80]	; (800a250 <prvHeapInit+0xb4>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	2200      	movs	r2, #0
 800a204:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a206:	4b12      	ldr	r3, [pc, #72]	; (800a250 <prvHeapInit+0xb4>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	2200      	movs	r2, #0
 800a20c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	68fa      	ldr	r2, [r7, #12]
 800a216:	1ad2      	subs	r2, r2, r3
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a21c:	4b0c      	ldr	r3, [pc, #48]	; (800a250 <prvHeapInit+0xb4>)
 800a21e:	681a      	ldr	r2, [r3, #0]
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	4a0a      	ldr	r2, [pc, #40]	; (800a254 <prvHeapInit+0xb8>)
 800a22a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	685b      	ldr	r3, [r3, #4]
 800a230:	4a09      	ldr	r2, [pc, #36]	; (800a258 <prvHeapInit+0xbc>)
 800a232:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a234:	4b09      	ldr	r3, [pc, #36]	; (800a25c <prvHeapInit+0xc0>)
 800a236:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a23a:	601a      	str	r2, [r3, #0]
}
 800a23c:	bf00      	nop
 800a23e:	3714      	adds	r7, #20
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr
 800a248:	20000d90 	.word	0x20000d90
 800a24c:	20004990 	.word	0x20004990
 800a250:	20004998 	.word	0x20004998
 800a254:	200049a0 	.word	0x200049a0
 800a258:	2000499c 	.word	0x2000499c
 800a25c:	200049ac 	.word	0x200049ac

0800a260 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a260:	b480      	push	{r7}
 800a262:	b085      	sub	sp, #20
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a268:	4b28      	ldr	r3, [pc, #160]	; (800a30c <prvInsertBlockIntoFreeList+0xac>)
 800a26a:	60fb      	str	r3, [r7, #12]
 800a26c:	e002      	b.n	800a274 <prvInsertBlockIntoFreeList+0x14>
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	60fb      	str	r3, [r7, #12]
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	687a      	ldr	r2, [r7, #4]
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d8f7      	bhi.n	800a26e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	68ba      	ldr	r2, [r7, #8]
 800a288:	4413      	add	r3, r2
 800a28a:	687a      	ldr	r2, [r7, #4]
 800a28c:	429a      	cmp	r2, r3
 800a28e:	d108      	bne.n	800a2a2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	685a      	ldr	r2, [r3, #4]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	441a      	add	r2, r3
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	68ba      	ldr	r2, [r7, #8]
 800a2ac:	441a      	add	r2, r3
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d118      	bne.n	800a2e8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681a      	ldr	r2, [r3, #0]
 800a2ba:	4b15      	ldr	r3, [pc, #84]	; (800a310 <prvInsertBlockIntoFreeList+0xb0>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d00d      	beq.n	800a2de <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	685a      	ldr	r2, [r3, #4]
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	685b      	ldr	r3, [r3, #4]
 800a2cc:	441a      	add	r2, r3
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	681a      	ldr	r2, [r3, #0]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	601a      	str	r2, [r3, #0]
 800a2dc:	e008      	b.n	800a2f0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a2de:	4b0c      	ldr	r3, [pc, #48]	; (800a310 <prvInsertBlockIntoFreeList+0xb0>)
 800a2e0:	681a      	ldr	r2, [r3, #0]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	601a      	str	r2, [r3, #0]
 800a2e6:	e003      	b.n	800a2f0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681a      	ldr	r2, [r3, #0]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a2f0:	68fa      	ldr	r2, [r7, #12]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d002      	beq.n	800a2fe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	687a      	ldr	r2, [r7, #4]
 800a2fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a2fe:	bf00      	nop
 800a300:	3714      	adds	r7, #20
 800a302:	46bd      	mov	sp, r7
 800a304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a308:	4770      	bx	lr
 800a30a:	bf00      	nop
 800a30c:	20004990 	.word	0x20004990
 800a310:	20004998 	.word	0x20004998

0800a314 <gcvt>:
 800a314:	b530      	push	{r4, r5, lr}
 800a316:	2200      	movs	r2, #0
 800a318:	b085      	sub	sp, #20
 800a31a:	460c      	mov	r4, r1
 800a31c:	4605      	mov	r5, r0
 800a31e:	2300      	movs	r3, #0
 800a320:	ec51 0b10 	vmov	r0, r1, d0
 800a324:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a328:	f7f6 fbd8 	bl	8000adc <__aeabi_dcmplt>
 800a32c:	ed9d 0b02 	vldr	d0, [sp, #8]
 800a330:	4622      	mov	r2, r4
 800a332:	b118      	cbz	r0, 800a33c <gcvt+0x28>
 800a334:	232d      	movs	r3, #45	; 0x2d
 800a336:	f802 3b01 	strb.w	r3, [r2], #1
 800a33a:	3d01      	subs	r5, #1
 800a33c:	2300      	movs	r3, #0
 800a33e:	4806      	ldr	r0, [pc, #24]	; (800a358 <gcvt+0x44>)
 800a340:	9300      	str	r3, [sp, #0]
 800a342:	4629      	mov	r1, r5
 800a344:	2367      	movs	r3, #103	; 0x67
 800a346:	6800      	ldr	r0, [r0, #0]
 800a348:	f000 faba 	bl	800a8c0 <_gcvt>
 800a34c:	2800      	cmp	r0, #0
 800a34e:	bf14      	ite	ne
 800a350:	4620      	movne	r0, r4
 800a352:	2000      	moveq	r0, #0
 800a354:	b005      	add	sp, #20
 800a356:	bd30      	pop	{r4, r5, pc}
 800a358:	20000018 	.word	0x20000018

0800a35c <__errno>:
 800a35c:	4b01      	ldr	r3, [pc, #4]	; (800a364 <__errno+0x8>)
 800a35e:	6818      	ldr	r0, [r3, #0]
 800a360:	4770      	bx	lr
 800a362:	bf00      	nop
 800a364:	20000018 	.word	0x20000018

0800a368 <__libc_init_array>:
 800a368:	b570      	push	{r4, r5, r6, lr}
 800a36a:	4d0d      	ldr	r5, [pc, #52]	; (800a3a0 <__libc_init_array+0x38>)
 800a36c:	4c0d      	ldr	r4, [pc, #52]	; (800a3a4 <__libc_init_array+0x3c>)
 800a36e:	1b64      	subs	r4, r4, r5
 800a370:	10a4      	asrs	r4, r4, #2
 800a372:	2600      	movs	r6, #0
 800a374:	42a6      	cmp	r6, r4
 800a376:	d109      	bne.n	800a38c <__libc_init_array+0x24>
 800a378:	4d0b      	ldr	r5, [pc, #44]	; (800a3a8 <__libc_init_array+0x40>)
 800a37a:	4c0c      	ldr	r4, [pc, #48]	; (800a3ac <__libc_init_array+0x44>)
 800a37c:	f002 fbcc 	bl	800cb18 <_init>
 800a380:	1b64      	subs	r4, r4, r5
 800a382:	10a4      	asrs	r4, r4, #2
 800a384:	2600      	movs	r6, #0
 800a386:	42a6      	cmp	r6, r4
 800a388:	d105      	bne.n	800a396 <__libc_init_array+0x2e>
 800a38a:	bd70      	pop	{r4, r5, r6, pc}
 800a38c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a390:	4798      	blx	r3
 800a392:	3601      	adds	r6, #1
 800a394:	e7ee      	b.n	800a374 <__libc_init_array+0xc>
 800a396:	f855 3b04 	ldr.w	r3, [r5], #4
 800a39a:	4798      	blx	r3
 800a39c:	3601      	adds	r6, #1
 800a39e:	e7f2      	b.n	800a386 <__libc_init_array+0x1e>
 800a3a0:	0800defc 	.word	0x0800defc
 800a3a4:	0800defc 	.word	0x0800defc
 800a3a8:	0800defc 	.word	0x0800defc
 800a3ac:	0800df00 	.word	0x0800df00

0800a3b0 <malloc>:
 800a3b0:	4b02      	ldr	r3, [pc, #8]	; (800a3bc <malloc+0xc>)
 800a3b2:	4601      	mov	r1, r0
 800a3b4:	6818      	ldr	r0, [r3, #0]
 800a3b6:	f000 b869 	b.w	800a48c <_malloc_r>
 800a3ba:	bf00      	nop
 800a3bc:	20000018 	.word	0x20000018

0800a3c0 <memcpy>:
 800a3c0:	440a      	add	r2, r1
 800a3c2:	4291      	cmp	r1, r2
 800a3c4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a3c8:	d100      	bne.n	800a3cc <memcpy+0xc>
 800a3ca:	4770      	bx	lr
 800a3cc:	b510      	push	{r4, lr}
 800a3ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a3d6:	4291      	cmp	r1, r2
 800a3d8:	d1f9      	bne.n	800a3ce <memcpy+0xe>
 800a3da:	bd10      	pop	{r4, pc}

0800a3dc <memset>:
 800a3dc:	4402      	add	r2, r0
 800a3de:	4603      	mov	r3, r0
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	d100      	bne.n	800a3e6 <memset+0xa>
 800a3e4:	4770      	bx	lr
 800a3e6:	f803 1b01 	strb.w	r1, [r3], #1
 800a3ea:	e7f9      	b.n	800a3e0 <memset+0x4>

0800a3ec <_free_r>:
 800a3ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a3ee:	2900      	cmp	r1, #0
 800a3f0:	d048      	beq.n	800a484 <_free_r+0x98>
 800a3f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3f6:	9001      	str	r0, [sp, #4]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	f1a1 0404 	sub.w	r4, r1, #4
 800a3fe:	bfb8      	it	lt
 800a400:	18e4      	addlt	r4, r4, r3
 800a402:	f000 fd3b 	bl	800ae7c <__malloc_lock>
 800a406:	4a20      	ldr	r2, [pc, #128]	; (800a488 <_free_r+0x9c>)
 800a408:	9801      	ldr	r0, [sp, #4]
 800a40a:	6813      	ldr	r3, [r2, #0]
 800a40c:	4615      	mov	r5, r2
 800a40e:	b933      	cbnz	r3, 800a41e <_free_r+0x32>
 800a410:	6063      	str	r3, [r4, #4]
 800a412:	6014      	str	r4, [r2, #0]
 800a414:	b003      	add	sp, #12
 800a416:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a41a:	f000 bd35 	b.w	800ae88 <__malloc_unlock>
 800a41e:	42a3      	cmp	r3, r4
 800a420:	d90b      	bls.n	800a43a <_free_r+0x4e>
 800a422:	6821      	ldr	r1, [r4, #0]
 800a424:	1862      	adds	r2, r4, r1
 800a426:	4293      	cmp	r3, r2
 800a428:	bf04      	itt	eq
 800a42a:	681a      	ldreq	r2, [r3, #0]
 800a42c:	685b      	ldreq	r3, [r3, #4]
 800a42e:	6063      	str	r3, [r4, #4]
 800a430:	bf04      	itt	eq
 800a432:	1852      	addeq	r2, r2, r1
 800a434:	6022      	streq	r2, [r4, #0]
 800a436:	602c      	str	r4, [r5, #0]
 800a438:	e7ec      	b.n	800a414 <_free_r+0x28>
 800a43a:	461a      	mov	r2, r3
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	b10b      	cbz	r3, 800a444 <_free_r+0x58>
 800a440:	42a3      	cmp	r3, r4
 800a442:	d9fa      	bls.n	800a43a <_free_r+0x4e>
 800a444:	6811      	ldr	r1, [r2, #0]
 800a446:	1855      	adds	r5, r2, r1
 800a448:	42a5      	cmp	r5, r4
 800a44a:	d10b      	bne.n	800a464 <_free_r+0x78>
 800a44c:	6824      	ldr	r4, [r4, #0]
 800a44e:	4421      	add	r1, r4
 800a450:	1854      	adds	r4, r2, r1
 800a452:	42a3      	cmp	r3, r4
 800a454:	6011      	str	r1, [r2, #0]
 800a456:	d1dd      	bne.n	800a414 <_free_r+0x28>
 800a458:	681c      	ldr	r4, [r3, #0]
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	6053      	str	r3, [r2, #4]
 800a45e:	4421      	add	r1, r4
 800a460:	6011      	str	r1, [r2, #0]
 800a462:	e7d7      	b.n	800a414 <_free_r+0x28>
 800a464:	d902      	bls.n	800a46c <_free_r+0x80>
 800a466:	230c      	movs	r3, #12
 800a468:	6003      	str	r3, [r0, #0]
 800a46a:	e7d3      	b.n	800a414 <_free_r+0x28>
 800a46c:	6825      	ldr	r5, [r4, #0]
 800a46e:	1961      	adds	r1, r4, r5
 800a470:	428b      	cmp	r3, r1
 800a472:	bf04      	itt	eq
 800a474:	6819      	ldreq	r1, [r3, #0]
 800a476:	685b      	ldreq	r3, [r3, #4]
 800a478:	6063      	str	r3, [r4, #4]
 800a47a:	bf04      	itt	eq
 800a47c:	1949      	addeq	r1, r1, r5
 800a47e:	6021      	streq	r1, [r4, #0]
 800a480:	6054      	str	r4, [r2, #4]
 800a482:	e7c7      	b.n	800a414 <_free_r+0x28>
 800a484:	b003      	add	sp, #12
 800a486:	bd30      	pop	{r4, r5, pc}
 800a488:	200049b0 	.word	0x200049b0

0800a48c <_malloc_r>:
 800a48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a48e:	1ccd      	adds	r5, r1, #3
 800a490:	f025 0503 	bic.w	r5, r5, #3
 800a494:	3508      	adds	r5, #8
 800a496:	2d0c      	cmp	r5, #12
 800a498:	bf38      	it	cc
 800a49a:	250c      	movcc	r5, #12
 800a49c:	2d00      	cmp	r5, #0
 800a49e:	4606      	mov	r6, r0
 800a4a0:	db01      	blt.n	800a4a6 <_malloc_r+0x1a>
 800a4a2:	42a9      	cmp	r1, r5
 800a4a4:	d903      	bls.n	800a4ae <_malloc_r+0x22>
 800a4a6:	230c      	movs	r3, #12
 800a4a8:	6033      	str	r3, [r6, #0]
 800a4aa:	2000      	movs	r0, #0
 800a4ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4ae:	f000 fce5 	bl	800ae7c <__malloc_lock>
 800a4b2:	4921      	ldr	r1, [pc, #132]	; (800a538 <_malloc_r+0xac>)
 800a4b4:	680a      	ldr	r2, [r1, #0]
 800a4b6:	4614      	mov	r4, r2
 800a4b8:	b99c      	cbnz	r4, 800a4e2 <_malloc_r+0x56>
 800a4ba:	4f20      	ldr	r7, [pc, #128]	; (800a53c <_malloc_r+0xb0>)
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	b923      	cbnz	r3, 800a4ca <_malloc_r+0x3e>
 800a4c0:	4621      	mov	r1, r4
 800a4c2:	4630      	mov	r0, r6
 800a4c4:	f000 f8b2 	bl	800a62c <_sbrk_r>
 800a4c8:	6038      	str	r0, [r7, #0]
 800a4ca:	4629      	mov	r1, r5
 800a4cc:	4630      	mov	r0, r6
 800a4ce:	f000 f8ad 	bl	800a62c <_sbrk_r>
 800a4d2:	1c43      	adds	r3, r0, #1
 800a4d4:	d123      	bne.n	800a51e <_malloc_r+0x92>
 800a4d6:	230c      	movs	r3, #12
 800a4d8:	6033      	str	r3, [r6, #0]
 800a4da:	4630      	mov	r0, r6
 800a4dc:	f000 fcd4 	bl	800ae88 <__malloc_unlock>
 800a4e0:	e7e3      	b.n	800a4aa <_malloc_r+0x1e>
 800a4e2:	6823      	ldr	r3, [r4, #0]
 800a4e4:	1b5b      	subs	r3, r3, r5
 800a4e6:	d417      	bmi.n	800a518 <_malloc_r+0x8c>
 800a4e8:	2b0b      	cmp	r3, #11
 800a4ea:	d903      	bls.n	800a4f4 <_malloc_r+0x68>
 800a4ec:	6023      	str	r3, [r4, #0]
 800a4ee:	441c      	add	r4, r3
 800a4f0:	6025      	str	r5, [r4, #0]
 800a4f2:	e004      	b.n	800a4fe <_malloc_r+0x72>
 800a4f4:	6863      	ldr	r3, [r4, #4]
 800a4f6:	42a2      	cmp	r2, r4
 800a4f8:	bf0c      	ite	eq
 800a4fa:	600b      	streq	r3, [r1, #0]
 800a4fc:	6053      	strne	r3, [r2, #4]
 800a4fe:	4630      	mov	r0, r6
 800a500:	f000 fcc2 	bl	800ae88 <__malloc_unlock>
 800a504:	f104 000b 	add.w	r0, r4, #11
 800a508:	1d23      	adds	r3, r4, #4
 800a50a:	f020 0007 	bic.w	r0, r0, #7
 800a50e:	1ac2      	subs	r2, r0, r3
 800a510:	d0cc      	beq.n	800a4ac <_malloc_r+0x20>
 800a512:	1a1b      	subs	r3, r3, r0
 800a514:	50a3      	str	r3, [r4, r2]
 800a516:	e7c9      	b.n	800a4ac <_malloc_r+0x20>
 800a518:	4622      	mov	r2, r4
 800a51a:	6864      	ldr	r4, [r4, #4]
 800a51c:	e7cc      	b.n	800a4b8 <_malloc_r+0x2c>
 800a51e:	1cc4      	adds	r4, r0, #3
 800a520:	f024 0403 	bic.w	r4, r4, #3
 800a524:	42a0      	cmp	r0, r4
 800a526:	d0e3      	beq.n	800a4f0 <_malloc_r+0x64>
 800a528:	1a21      	subs	r1, r4, r0
 800a52a:	4630      	mov	r0, r6
 800a52c:	f000 f87e 	bl	800a62c <_sbrk_r>
 800a530:	3001      	adds	r0, #1
 800a532:	d1dd      	bne.n	800a4f0 <_malloc_r+0x64>
 800a534:	e7cf      	b.n	800a4d6 <_malloc_r+0x4a>
 800a536:	bf00      	nop
 800a538:	200049b0 	.word	0x200049b0
 800a53c:	200049b4 	.word	0x200049b4

0800a540 <_puts_r>:
 800a540:	b570      	push	{r4, r5, r6, lr}
 800a542:	460e      	mov	r6, r1
 800a544:	4605      	mov	r5, r0
 800a546:	b118      	cbz	r0, 800a550 <_puts_r+0x10>
 800a548:	6983      	ldr	r3, [r0, #24]
 800a54a:	b90b      	cbnz	r3, 800a550 <_puts_r+0x10>
 800a54c:	f000 fb92 	bl	800ac74 <__sinit>
 800a550:	69ab      	ldr	r3, [r5, #24]
 800a552:	68ac      	ldr	r4, [r5, #8]
 800a554:	b913      	cbnz	r3, 800a55c <_puts_r+0x1c>
 800a556:	4628      	mov	r0, r5
 800a558:	f000 fb8c 	bl	800ac74 <__sinit>
 800a55c:	4b2c      	ldr	r3, [pc, #176]	; (800a610 <_puts_r+0xd0>)
 800a55e:	429c      	cmp	r4, r3
 800a560:	d120      	bne.n	800a5a4 <_puts_r+0x64>
 800a562:	686c      	ldr	r4, [r5, #4]
 800a564:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a566:	07db      	lsls	r3, r3, #31
 800a568:	d405      	bmi.n	800a576 <_puts_r+0x36>
 800a56a:	89a3      	ldrh	r3, [r4, #12]
 800a56c:	0598      	lsls	r0, r3, #22
 800a56e:	d402      	bmi.n	800a576 <_puts_r+0x36>
 800a570:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a572:	f000 fc1d 	bl	800adb0 <__retarget_lock_acquire_recursive>
 800a576:	89a3      	ldrh	r3, [r4, #12]
 800a578:	0719      	lsls	r1, r3, #28
 800a57a:	d51d      	bpl.n	800a5b8 <_puts_r+0x78>
 800a57c:	6923      	ldr	r3, [r4, #16]
 800a57e:	b1db      	cbz	r3, 800a5b8 <_puts_r+0x78>
 800a580:	3e01      	subs	r6, #1
 800a582:	68a3      	ldr	r3, [r4, #8]
 800a584:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a588:	3b01      	subs	r3, #1
 800a58a:	60a3      	str	r3, [r4, #8]
 800a58c:	bb39      	cbnz	r1, 800a5de <_puts_r+0x9e>
 800a58e:	2b00      	cmp	r3, #0
 800a590:	da38      	bge.n	800a604 <_puts_r+0xc4>
 800a592:	4622      	mov	r2, r4
 800a594:	210a      	movs	r1, #10
 800a596:	4628      	mov	r0, r5
 800a598:	f000 f858 	bl	800a64c <__swbuf_r>
 800a59c:	3001      	adds	r0, #1
 800a59e:	d011      	beq.n	800a5c4 <_puts_r+0x84>
 800a5a0:	250a      	movs	r5, #10
 800a5a2:	e011      	b.n	800a5c8 <_puts_r+0x88>
 800a5a4:	4b1b      	ldr	r3, [pc, #108]	; (800a614 <_puts_r+0xd4>)
 800a5a6:	429c      	cmp	r4, r3
 800a5a8:	d101      	bne.n	800a5ae <_puts_r+0x6e>
 800a5aa:	68ac      	ldr	r4, [r5, #8]
 800a5ac:	e7da      	b.n	800a564 <_puts_r+0x24>
 800a5ae:	4b1a      	ldr	r3, [pc, #104]	; (800a618 <_puts_r+0xd8>)
 800a5b0:	429c      	cmp	r4, r3
 800a5b2:	bf08      	it	eq
 800a5b4:	68ec      	ldreq	r4, [r5, #12]
 800a5b6:	e7d5      	b.n	800a564 <_puts_r+0x24>
 800a5b8:	4621      	mov	r1, r4
 800a5ba:	4628      	mov	r0, r5
 800a5bc:	f000 f898 	bl	800a6f0 <__swsetup_r>
 800a5c0:	2800      	cmp	r0, #0
 800a5c2:	d0dd      	beq.n	800a580 <_puts_r+0x40>
 800a5c4:	f04f 35ff 	mov.w	r5, #4294967295
 800a5c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a5ca:	07da      	lsls	r2, r3, #31
 800a5cc:	d405      	bmi.n	800a5da <_puts_r+0x9a>
 800a5ce:	89a3      	ldrh	r3, [r4, #12]
 800a5d0:	059b      	lsls	r3, r3, #22
 800a5d2:	d402      	bmi.n	800a5da <_puts_r+0x9a>
 800a5d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5d6:	f000 fbec 	bl	800adb2 <__retarget_lock_release_recursive>
 800a5da:	4628      	mov	r0, r5
 800a5dc:	bd70      	pop	{r4, r5, r6, pc}
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	da04      	bge.n	800a5ec <_puts_r+0xac>
 800a5e2:	69a2      	ldr	r2, [r4, #24]
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	dc06      	bgt.n	800a5f6 <_puts_r+0xb6>
 800a5e8:	290a      	cmp	r1, #10
 800a5ea:	d004      	beq.n	800a5f6 <_puts_r+0xb6>
 800a5ec:	6823      	ldr	r3, [r4, #0]
 800a5ee:	1c5a      	adds	r2, r3, #1
 800a5f0:	6022      	str	r2, [r4, #0]
 800a5f2:	7019      	strb	r1, [r3, #0]
 800a5f4:	e7c5      	b.n	800a582 <_puts_r+0x42>
 800a5f6:	4622      	mov	r2, r4
 800a5f8:	4628      	mov	r0, r5
 800a5fa:	f000 f827 	bl	800a64c <__swbuf_r>
 800a5fe:	3001      	adds	r0, #1
 800a600:	d1bf      	bne.n	800a582 <_puts_r+0x42>
 800a602:	e7df      	b.n	800a5c4 <_puts_r+0x84>
 800a604:	6823      	ldr	r3, [r4, #0]
 800a606:	250a      	movs	r5, #10
 800a608:	1c5a      	adds	r2, r3, #1
 800a60a:	6022      	str	r2, [r4, #0]
 800a60c:	701d      	strb	r5, [r3, #0]
 800a60e:	e7db      	b.n	800a5c8 <_puts_r+0x88>
 800a610:	0800dc50 	.word	0x0800dc50
 800a614:	0800dc70 	.word	0x0800dc70
 800a618:	0800dc30 	.word	0x0800dc30

0800a61c <puts>:
 800a61c:	4b02      	ldr	r3, [pc, #8]	; (800a628 <puts+0xc>)
 800a61e:	4601      	mov	r1, r0
 800a620:	6818      	ldr	r0, [r3, #0]
 800a622:	f7ff bf8d 	b.w	800a540 <_puts_r>
 800a626:	bf00      	nop
 800a628:	20000018 	.word	0x20000018

0800a62c <_sbrk_r>:
 800a62c:	b538      	push	{r3, r4, r5, lr}
 800a62e:	4d06      	ldr	r5, [pc, #24]	; (800a648 <_sbrk_r+0x1c>)
 800a630:	2300      	movs	r3, #0
 800a632:	4604      	mov	r4, r0
 800a634:	4608      	mov	r0, r1
 800a636:	602b      	str	r3, [r5, #0]
 800a638:	f7f9 fc2e 	bl	8003e98 <_sbrk>
 800a63c:	1c43      	adds	r3, r0, #1
 800a63e:	d102      	bne.n	800a646 <_sbrk_r+0x1a>
 800a640:	682b      	ldr	r3, [r5, #0]
 800a642:	b103      	cbz	r3, 800a646 <_sbrk_r+0x1a>
 800a644:	6023      	str	r3, [r4, #0]
 800a646:	bd38      	pop	{r3, r4, r5, pc}
 800a648:	200051f0 	.word	0x200051f0

0800a64c <__swbuf_r>:
 800a64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a64e:	460e      	mov	r6, r1
 800a650:	4614      	mov	r4, r2
 800a652:	4605      	mov	r5, r0
 800a654:	b118      	cbz	r0, 800a65e <__swbuf_r+0x12>
 800a656:	6983      	ldr	r3, [r0, #24]
 800a658:	b90b      	cbnz	r3, 800a65e <__swbuf_r+0x12>
 800a65a:	f000 fb0b 	bl	800ac74 <__sinit>
 800a65e:	4b21      	ldr	r3, [pc, #132]	; (800a6e4 <__swbuf_r+0x98>)
 800a660:	429c      	cmp	r4, r3
 800a662:	d12b      	bne.n	800a6bc <__swbuf_r+0x70>
 800a664:	686c      	ldr	r4, [r5, #4]
 800a666:	69a3      	ldr	r3, [r4, #24]
 800a668:	60a3      	str	r3, [r4, #8]
 800a66a:	89a3      	ldrh	r3, [r4, #12]
 800a66c:	071a      	lsls	r2, r3, #28
 800a66e:	d52f      	bpl.n	800a6d0 <__swbuf_r+0x84>
 800a670:	6923      	ldr	r3, [r4, #16]
 800a672:	b36b      	cbz	r3, 800a6d0 <__swbuf_r+0x84>
 800a674:	6923      	ldr	r3, [r4, #16]
 800a676:	6820      	ldr	r0, [r4, #0]
 800a678:	1ac0      	subs	r0, r0, r3
 800a67a:	6963      	ldr	r3, [r4, #20]
 800a67c:	b2f6      	uxtb	r6, r6
 800a67e:	4283      	cmp	r3, r0
 800a680:	4637      	mov	r7, r6
 800a682:	dc04      	bgt.n	800a68e <__swbuf_r+0x42>
 800a684:	4621      	mov	r1, r4
 800a686:	4628      	mov	r0, r5
 800a688:	f000 fa60 	bl	800ab4c <_fflush_r>
 800a68c:	bb30      	cbnz	r0, 800a6dc <__swbuf_r+0x90>
 800a68e:	68a3      	ldr	r3, [r4, #8]
 800a690:	3b01      	subs	r3, #1
 800a692:	60a3      	str	r3, [r4, #8]
 800a694:	6823      	ldr	r3, [r4, #0]
 800a696:	1c5a      	adds	r2, r3, #1
 800a698:	6022      	str	r2, [r4, #0]
 800a69a:	701e      	strb	r6, [r3, #0]
 800a69c:	6963      	ldr	r3, [r4, #20]
 800a69e:	3001      	adds	r0, #1
 800a6a0:	4283      	cmp	r3, r0
 800a6a2:	d004      	beq.n	800a6ae <__swbuf_r+0x62>
 800a6a4:	89a3      	ldrh	r3, [r4, #12]
 800a6a6:	07db      	lsls	r3, r3, #31
 800a6a8:	d506      	bpl.n	800a6b8 <__swbuf_r+0x6c>
 800a6aa:	2e0a      	cmp	r6, #10
 800a6ac:	d104      	bne.n	800a6b8 <__swbuf_r+0x6c>
 800a6ae:	4621      	mov	r1, r4
 800a6b0:	4628      	mov	r0, r5
 800a6b2:	f000 fa4b 	bl	800ab4c <_fflush_r>
 800a6b6:	b988      	cbnz	r0, 800a6dc <__swbuf_r+0x90>
 800a6b8:	4638      	mov	r0, r7
 800a6ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6bc:	4b0a      	ldr	r3, [pc, #40]	; (800a6e8 <__swbuf_r+0x9c>)
 800a6be:	429c      	cmp	r4, r3
 800a6c0:	d101      	bne.n	800a6c6 <__swbuf_r+0x7a>
 800a6c2:	68ac      	ldr	r4, [r5, #8]
 800a6c4:	e7cf      	b.n	800a666 <__swbuf_r+0x1a>
 800a6c6:	4b09      	ldr	r3, [pc, #36]	; (800a6ec <__swbuf_r+0xa0>)
 800a6c8:	429c      	cmp	r4, r3
 800a6ca:	bf08      	it	eq
 800a6cc:	68ec      	ldreq	r4, [r5, #12]
 800a6ce:	e7ca      	b.n	800a666 <__swbuf_r+0x1a>
 800a6d0:	4621      	mov	r1, r4
 800a6d2:	4628      	mov	r0, r5
 800a6d4:	f000 f80c 	bl	800a6f0 <__swsetup_r>
 800a6d8:	2800      	cmp	r0, #0
 800a6da:	d0cb      	beq.n	800a674 <__swbuf_r+0x28>
 800a6dc:	f04f 37ff 	mov.w	r7, #4294967295
 800a6e0:	e7ea      	b.n	800a6b8 <__swbuf_r+0x6c>
 800a6e2:	bf00      	nop
 800a6e4:	0800dc50 	.word	0x0800dc50
 800a6e8:	0800dc70 	.word	0x0800dc70
 800a6ec:	0800dc30 	.word	0x0800dc30

0800a6f0 <__swsetup_r>:
 800a6f0:	4b32      	ldr	r3, [pc, #200]	; (800a7bc <__swsetup_r+0xcc>)
 800a6f2:	b570      	push	{r4, r5, r6, lr}
 800a6f4:	681d      	ldr	r5, [r3, #0]
 800a6f6:	4606      	mov	r6, r0
 800a6f8:	460c      	mov	r4, r1
 800a6fa:	b125      	cbz	r5, 800a706 <__swsetup_r+0x16>
 800a6fc:	69ab      	ldr	r3, [r5, #24]
 800a6fe:	b913      	cbnz	r3, 800a706 <__swsetup_r+0x16>
 800a700:	4628      	mov	r0, r5
 800a702:	f000 fab7 	bl	800ac74 <__sinit>
 800a706:	4b2e      	ldr	r3, [pc, #184]	; (800a7c0 <__swsetup_r+0xd0>)
 800a708:	429c      	cmp	r4, r3
 800a70a:	d10f      	bne.n	800a72c <__swsetup_r+0x3c>
 800a70c:	686c      	ldr	r4, [r5, #4]
 800a70e:	89a3      	ldrh	r3, [r4, #12]
 800a710:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a714:	0719      	lsls	r1, r3, #28
 800a716:	d42c      	bmi.n	800a772 <__swsetup_r+0x82>
 800a718:	06dd      	lsls	r5, r3, #27
 800a71a:	d411      	bmi.n	800a740 <__swsetup_r+0x50>
 800a71c:	2309      	movs	r3, #9
 800a71e:	6033      	str	r3, [r6, #0]
 800a720:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a724:	81a3      	strh	r3, [r4, #12]
 800a726:	f04f 30ff 	mov.w	r0, #4294967295
 800a72a:	e03e      	b.n	800a7aa <__swsetup_r+0xba>
 800a72c:	4b25      	ldr	r3, [pc, #148]	; (800a7c4 <__swsetup_r+0xd4>)
 800a72e:	429c      	cmp	r4, r3
 800a730:	d101      	bne.n	800a736 <__swsetup_r+0x46>
 800a732:	68ac      	ldr	r4, [r5, #8]
 800a734:	e7eb      	b.n	800a70e <__swsetup_r+0x1e>
 800a736:	4b24      	ldr	r3, [pc, #144]	; (800a7c8 <__swsetup_r+0xd8>)
 800a738:	429c      	cmp	r4, r3
 800a73a:	bf08      	it	eq
 800a73c:	68ec      	ldreq	r4, [r5, #12]
 800a73e:	e7e6      	b.n	800a70e <__swsetup_r+0x1e>
 800a740:	0758      	lsls	r0, r3, #29
 800a742:	d512      	bpl.n	800a76a <__swsetup_r+0x7a>
 800a744:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a746:	b141      	cbz	r1, 800a75a <__swsetup_r+0x6a>
 800a748:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a74c:	4299      	cmp	r1, r3
 800a74e:	d002      	beq.n	800a756 <__swsetup_r+0x66>
 800a750:	4630      	mov	r0, r6
 800a752:	f7ff fe4b 	bl	800a3ec <_free_r>
 800a756:	2300      	movs	r3, #0
 800a758:	6363      	str	r3, [r4, #52]	; 0x34
 800a75a:	89a3      	ldrh	r3, [r4, #12]
 800a75c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a760:	81a3      	strh	r3, [r4, #12]
 800a762:	2300      	movs	r3, #0
 800a764:	6063      	str	r3, [r4, #4]
 800a766:	6923      	ldr	r3, [r4, #16]
 800a768:	6023      	str	r3, [r4, #0]
 800a76a:	89a3      	ldrh	r3, [r4, #12]
 800a76c:	f043 0308 	orr.w	r3, r3, #8
 800a770:	81a3      	strh	r3, [r4, #12]
 800a772:	6923      	ldr	r3, [r4, #16]
 800a774:	b94b      	cbnz	r3, 800a78a <__swsetup_r+0x9a>
 800a776:	89a3      	ldrh	r3, [r4, #12]
 800a778:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a77c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a780:	d003      	beq.n	800a78a <__swsetup_r+0x9a>
 800a782:	4621      	mov	r1, r4
 800a784:	4630      	mov	r0, r6
 800a786:	f000 fb39 	bl	800adfc <__smakebuf_r>
 800a78a:	89a0      	ldrh	r0, [r4, #12]
 800a78c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a790:	f010 0301 	ands.w	r3, r0, #1
 800a794:	d00a      	beq.n	800a7ac <__swsetup_r+0xbc>
 800a796:	2300      	movs	r3, #0
 800a798:	60a3      	str	r3, [r4, #8]
 800a79a:	6963      	ldr	r3, [r4, #20]
 800a79c:	425b      	negs	r3, r3
 800a79e:	61a3      	str	r3, [r4, #24]
 800a7a0:	6923      	ldr	r3, [r4, #16]
 800a7a2:	b943      	cbnz	r3, 800a7b6 <__swsetup_r+0xc6>
 800a7a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a7a8:	d1ba      	bne.n	800a720 <__swsetup_r+0x30>
 800a7aa:	bd70      	pop	{r4, r5, r6, pc}
 800a7ac:	0781      	lsls	r1, r0, #30
 800a7ae:	bf58      	it	pl
 800a7b0:	6963      	ldrpl	r3, [r4, #20]
 800a7b2:	60a3      	str	r3, [r4, #8]
 800a7b4:	e7f4      	b.n	800a7a0 <__swsetup_r+0xb0>
 800a7b6:	2000      	movs	r0, #0
 800a7b8:	e7f7      	b.n	800a7aa <__swsetup_r+0xba>
 800a7ba:	bf00      	nop
 800a7bc:	20000018 	.word	0x20000018
 800a7c0:	0800dc50 	.word	0x0800dc50
 800a7c4:	0800dc70 	.word	0x0800dc70
 800a7c8:	0800dc30 	.word	0x0800dc30

0800a7cc <print_e>:
 800a7cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7ce:	b087      	sub	sp, #28
 800a7d0:	ec43 2b10 	vmov	d0, r2, r3
 800a7d4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a7d6:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 800a7da:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800a7dc:	ab04      	add	r3, sp, #16
 800a7de:	9301      	str	r3, [sp, #4]
 800a7e0:	ab03      	add	r3, sp, #12
 800a7e2:	9300      	str	r3, [sp, #0]
 800a7e4:	1c62      	adds	r2, r4, #1
 800a7e6:	ab05      	add	r3, sp, #20
 800a7e8:	460f      	mov	r7, r1
 800a7ea:	2102      	movs	r1, #2
 800a7ec:	f001 fb04 	bl	800bdf8 <_dtoa_r>
 800a7f0:	9a05      	ldr	r2, [sp, #20]
 800a7f2:	f242 730f 	movw	r3, #9999	; 0x270f
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d105      	bne.n	800a806 <print_e+0x3a>
 800a7fa:	4601      	mov	r1, r0
 800a7fc:	4638      	mov	r0, r7
 800a7fe:	f001 fa24 	bl	800bc4a <strcpy>
 800a802:	b007      	add	sp, #28
 800a804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a806:	463b      	mov	r3, r7
 800a808:	7801      	ldrb	r1, [r0, #0]
 800a80a:	f803 1b01 	strb.w	r1, [r3], #1
 800a80e:	2c00      	cmp	r4, #0
 800a810:	bfc8      	it	gt
 800a812:	2501      	movgt	r5, #1
 800a814:	212e      	movs	r1, #46	; 0x2e
 800a816:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800a81a:	b10f      	cbz	r7, 800a820 <print_e+0x54>
 800a81c:	2c00      	cmp	r4, #0
 800a81e:	dc37      	bgt.n	800a890 <print_e+0xc4>
 800a820:	2e67      	cmp	r6, #103	; 0x67
 800a822:	d046      	beq.n	800a8b2 <print_e+0xe6>
 800a824:	2e47      	cmp	r6, #71	; 0x47
 800a826:	d046      	beq.n	800a8b6 <print_e+0xea>
 800a828:	212e      	movs	r1, #46	; 0x2e
 800a82a:	2030      	movs	r0, #48	; 0x30
 800a82c:	2c00      	cmp	r4, #0
 800a82e:	dc38      	bgt.n	800a8a2 <print_e+0xd6>
 800a830:	1e51      	subs	r1, r2, #1
 800a832:	2900      	cmp	r1, #0
 800a834:	bfb8      	it	lt
 800a836:	f1c2 0201 	rsblt	r2, r2, #1
 800a83a:	4618      	mov	r0, r3
 800a83c:	9105      	str	r1, [sp, #20]
 800a83e:	bfbc      	itt	lt
 800a840:	212d      	movlt	r1, #45	; 0x2d
 800a842:	9205      	strlt	r2, [sp, #20]
 800a844:	f800 6b02 	strb.w	r6, [r0], #2
 800a848:	bfb8      	it	lt
 800a84a:	7059      	strblt	r1, [r3, #1]
 800a84c:	9905      	ldr	r1, [sp, #20]
 800a84e:	bfa4      	itt	ge
 800a850:	222b      	movge	r2, #43	; 0x2b
 800a852:	705a      	strbge	r2, [r3, #1]
 800a854:	2963      	cmp	r1, #99	; 0x63
 800a856:	dd0b      	ble.n	800a870 <print_e+0xa4>
 800a858:	2264      	movs	r2, #100	; 0x64
 800a85a:	fb91 f2f2 	sdiv	r2, r1, r2
 800a85e:	f102 0430 	add.w	r4, r2, #48	; 0x30
 800a862:	1cd8      	adds	r0, r3, #3
 800a864:	709c      	strb	r4, [r3, #2]
 800a866:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800a86a:	fb03 1202 	mla	r2, r3, r2, r1
 800a86e:	9205      	str	r2, [sp, #20]
 800a870:	9a05      	ldr	r2, [sp, #20]
 800a872:	230a      	movs	r3, #10
 800a874:	fb92 f3f3 	sdiv	r3, r2, r3
 800a878:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a87c:	7001      	strb	r1, [r0, #0]
 800a87e:	f06f 0109 	mvn.w	r1, #9
 800a882:	fb01 2303 	mla	r3, r1, r3, r2
 800a886:	3330      	adds	r3, #48	; 0x30
 800a888:	7043      	strb	r3, [r0, #1]
 800a88a:	2300      	movs	r3, #0
 800a88c:	7083      	strb	r3, [r0, #2]
 800a88e:	e7b8      	b.n	800a802 <print_e+0x36>
 800a890:	b10d      	cbz	r5, 800a896 <print_e+0xca>
 800a892:	f803 1b01 	strb.w	r1, [r3], #1
 800a896:	7805      	ldrb	r5, [r0, #0]
 800a898:	f803 5b01 	strb.w	r5, [r3], #1
 800a89c:	3c01      	subs	r4, #1
 800a89e:	2500      	movs	r5, #0
 800a8a0:	e7b9      	b.n	800a816 <print_e+0x4a>
 800a8a2:	b10d      	cbz	r5, 800a8a8 <print_e+0xdc>
 800a8a4:	f803 1b01 	strb.w	r1, [r3], #1
 800a8a8:	f803 0b01 	strb.w	r0, [r3], #1
 800a8ac:	3c01      	subs	r4, #1
 800a8ae:	2500      	movs	r5, #0
 800a8b0:	e7bc      	b.n	800a82c <print_e+0x60>
 800a8b2:	2665      	movs	r6, #101	; 0x65
 800a8b4:	e7bc      	b.n	800a830 <print_e+0x64>
 800a8b6:	2645      	movs	r6, #69	; 0x45
 800a8b8:	e7ba      	b.n	800a830 <print_e+0x64>
 800a8ba:	0000      	movs	r0, r0
 800a8bc:	0000      	movs	r0, r0
	...

0800a8c0 <_gcvt>:
 800a8c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8c4:	ec55 4b10 	vmov	r4, r5, d0
 800a8c8:	b088      	sub	sp, #32
 800a8ca:	4681      	mov	r9, r0
 800a8cc:	4688      	mov	r8, r1
 800a8ce:	4616      	mov	r6, r2
 800a8d0:	469a      	mov	sl, r3
 800a8d2:	ee10 0a10 	vmov	r0, s0
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	2300      	movs	r3, #0
 800a8da:	4629      	mov	r1, r5
 800a8dc:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800a8de:	f7f6 f8fd 	bl	8000adc <__aeabi_dcmplt>
 800a8e2:	b110      	cbz	r0, 800a8ea <_gcvt+0x2a>
 800a8e4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a8e8:	461d      	mov	r5, r3
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	4620      	mov	r0, r4
 800a8f0:	4629      	mov	r1, r5
 800a8f2:	f7f6 f8e9 	bl	8000ac8 <__aeabi_dcmpeq>
 800a8f6:	b138      	cbz	r0, 800a908 <_gcvt+0x48>
 800a8f8:	2330      	movs	r3, #48	; 0x30
 800a8fa:	7033      	strb	r3, [r6, #0]
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	7073      	strb	r3, [r6, #1]
 800a900:	4630      	mov	r0, r6
 800a902:	b008      	add	sp, #32
 800a904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a908:	a34b      	add	r3, pc, #300	; (adr r3, 800aa38 <_gcvt+0x178>)
 800a90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90e:	4620      	mov	r0, r4
 800a910:	4629      	mov	r1, r5
 800a912:	f7f6 f8ed 	bl	8000af0 <__aeabi_dcmple>
 800a916:	b158      	cbz	r0, 800a930 <_gcvt+0x70>
 800a918:	f108 31ff 	add.w	r1, r8, #4294967295
 800a91c:	9100      	str	r1, [sp, #0]
 800a91e:	e9cd a701 	strd	sl, r7, [sp, #4]
 800a922:	4622      	mov	r2, r4
 800a924:	462b      	mov	r3, r5
 800a926:	4631      	mov	r1, r6
 800a928:	4648      	mov	r0, r9
 800a92a:	f7ff ff4f 	bl	800a7cc <print_e>
 800a92e:	e7e7      	b.n	800a900 <_gcvt+0x40>
 800a930:	4640      	mov	r0, r8
 800a932:	f000 fe2d 	bl	800b590 <_mprec_log10>
 800a936:	4622      	mov	r2, r4
 800a938:	ec51 0b10 	vmov	r0, r1, d0
 800a93c:	462b      	mov	r3, r5
 800a93e:	f7f6 f8d7 	bl	8000af0 <__aeabi_dcmple>
 800a942:	2800      	cmp	r0, #0
 800a944:	d1e8      	bne.n	800a918 <_gcvt+0x58>
 800a946:	ab07      	add	r3, sp, #28
 800a948:	9301      	str	r3, [sp, #4]
 800a94a:	ab06      	add	r3, sp, #24
 800a94c:	9300      	str	r3, [sp, #0]
 800a94e:	4642      	mov	r2, r8
 800a950:	ab05      	add	r3, sp, #20
 800a952:	ec45 4b10 	vmov	d0, r4, r5
 800a956:	2102      	movs	r1, #2
 800a958:	4648      	mov	r0, r9
 800a95a:	f001 fa4d 	bl	800bdf8 <_dtoa_r>
 800a95e:	9a05      	ldr	r2, [sp, #20]
 800a960:	f242 730f 	movw	r3, #9999	; 0x270f
 800a964:	429a      	cmp	r2, r3
 800a966:	d00e      	beq.n	800a986 <_gcvt+0xc6>
 800a968:	4633      	mov	r3, r6
 800a96a:	44b0      	add	r8, r6
 800a96c:	4604      	mov	r4, r0
 800a96e:	f810 5b01 	ldrb.w	r5, [r0], #1
 800a972:	9905      	ldr	r1, [sp, #20]
 800a974:	eba8 0203 	sub.w	r2, r8, r3
 800a978:	b10d      	cbz	r5, 800a97e <_gcvt+0xbe>
 800a97a:	2900      	cmp	r1, #0
 800a97c:	dc08      	bgt.n	800a990 <_gcvt+0xd0>
 800a97e:	2000      	movs	r0, #0
 800a980:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800a984:	e00d      	b.n	800a9a2 <_gcvt+0xe2>
 800a986:	4601      	mov	r1, r0
 800a988:	4630      	mov	r0, r6
 800a98a:	f001 f95e 	bl	800bc4a <strcpy>
 800a98e:	e7b7      	b.n	800a900 <_gcvt+0x40>
 800a990:	3901      	subs	r1, #1
 800a992:	f803 5b01 	strb.w	r5, [r3], #1
 800a996:	9105      	str	r1, [sp, #20]
 800a998:	e7e8      	b.n	800a96c <_gcvt+0xac>
 800a99a:	f803 cb01 	strb.w	ip, [r3], #1
 800a99e:	3a01      	subs	r2, #1
 800a9a0:	2001      	movs	r0, #1
 800a9a2:	2900      	cmp	r1, #0
 800a9a4:	460d      	mov	r5, r1
 800a9a6:	dc2a      	bgt.n	800a9fe <_gcvt+0x13e>
 800a9a8:	b100      	cbz	r0, 800a9ac <_gcvt+0xec>
 800a9aa:	9105      	str	r1, [sp, #20]
 800a9ac:	b90f      	cbnz	r7, 800a9b2 <_gcvt+0xf2>
 800a9ae:	7821      	ldrb	r1, [r4, #0]
 800a9b0:	b311      	cbz	r1, 800a9f8 <_gcvt+0x138>
 800a9b2:	42b3      	cmp	r3, r6
 800a9b4:	bf04      	itt	eq
 800a9b6:	2130      	moveq	r1, #48	; 0x30
 800a9b8:	f803 1b01 	strbeq.w	r1, [r3], #1
 800a9bc:	212e      	movs	r1, #46	; 0x2e
 800a9be:	7019      	strb	r1, [r3, #0]
 800a9c0:	9905      	ldr	r1, [sp, #20]
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	2500      	movs	r5, #0
 800a9c6:	eba1 0c03 	sub.w	ip, r1, r3
 800a9ca:	f04f 0e30 	mov.w	lr, #48	; 0x30
 800a9ce:	eb1c 0f00 	cmn.w	ip, r0
 800a9d2:	d41c      	bmi.n	800aa0e <_gcvt+0x14e>
 800a9d4:	2900      	cmp	r1, #0
 800a9d6:	f1c1 0000 	rsb	r0, r1, #0
 800a9da:	bfc8      	it	gt
 800a9dc:	2000      	movgt	r0, #0
 800a9de:	f100 0c01 	add.w	ip, r0, #1
 800a9e2:	4463      	add	r3, ip
 800a9e4:	4401      	add	r1, r0
 800a9e6:	b105      	cbz	r5, 800a9ea <_gcvt+0x12a>
 800a9e8:	9105      	str	r1, [sp, #20]
 800a9ea:	1e61      	subs	r1, r4, #1
 800a9ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a9f0:	b108      	cbz	r0, 800a9f6 <_gcvt+0x136>
 800a9f2:	2a00      	cmp	r2, #0
 800a9f4:	dc0f      	bgt.n	800aa16 <_gcvt+0x156>
 800a9f6:	b9df      	cbnz	r7, 800aa30 <_gcvt+0x170>
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	701a      	strb	r2, [r3, #0]
 800a9fc:	e780      	b.n	800a900 <_gcvt+0x40>
 800a9fe:	2a00      	cmp	r2, #0
 800aa00:	f101 31ff 	add.w	r1, r1, #4294967295
 800aa04:	dcc9      	bgt.n	800a99a <_gcvt+0xda>
 800aa06:	2800      	cmp	r0, #0
 800aa08:	d0d0      	beq.n	800a9ac <_gcvt+0xec>
 800aa0a:	9505      	str	r5, [sp, #20]
 800aa0c:	e7ce      	b.n	800a9ac <_gcvt+0xec>
 800aa0e:	f800 ef01 	strb.w	lr, [r0, #1]!
 800aa12:	2501      	movs	r5, #1
 800aa14:	e7db      	b.n	800a9ce <_gcvt+0x10e>
 800aa16:	f803 0b01 	strb.w	r0, [r3], #1
 800aa1a:	3a01      	subs	r2, #1
 800aa1c:	e7e6      	b.n	800a9ec <_gcvt+0x12c>
 800aa1e:	f801 5b01 	strb.w	r5, [r1], #1
 800aa22:	1a60      	subs	r0, r4, r1
 800aa24:	2800      	cmp	r0, #0
 800aa26:	dcfa      	bgt.n	800aa1e <_gcvt+0x15e>
 800aa28:	2a00      	cmp	r2, #0
 800aa2a:	bfa8      	it	ge
 800aa2c:	189b      	addge	r3, r3, r2
 800aa2e:	e7e3      	b.n	800a9f8 <_gcvt+0x138>
 800aa30:	4619      	mov	r1, r3
 800aa32:	189c      	adds	r4, r3, r2
 800aa34:	2530      	movs	r5, #48	; 0x30
 800aa36:	e7f4      	b.n	800aa22 <_gcvt+0x162>
 800aa38:	eb1c432d 	.word	0xeb1c432d
 800aa3c:	3f1a36e2 	.word	0x3f1a36e2

0800aa40 <__sflush_r>:
 800aa40:	898a      	ldrh	r2, [r1, #12]
 800aa42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa46:	4605      	mov	r5, r0
 800aa48:	0710      	lsls	r0, r2, #28
 800aa4a:	460c      	mov	r4, r1
 800aa4c:	d458      	bmi.n	800ab00 <__sflush_r+0xc0>
 800aa4e:	684b      	ldr	r3, [r1, #4]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	dc05      	bgt.n	800aa60 <__sflush_r+0x20>
 800aa54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	dc02      	bgt.n	800aa60 <__sflush_r+0x20>
 800aa5a:	2000      	movs	r0, #0
 800aa5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa62:	2e00      	cmp	r6, #0
 800aa64:	d0f9      	beq.n	800aa5a <__sflush_r+0x1a>
 800aa66:	2300      	movs	r3, #0
 800aa68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aa6c:	682f      	ldr	r7, [r5, #0]
 800aa6e:	602b      	str	r3, [r5, #0]
 800aa70:	d032      	beq.n	800aad8 <__sflush_r+0x98>
 800aa72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aa74:	89a3      	ldrh	r3, [r4, #12]
 800aa76:	075a      	lsls	r2, r3, #29
 800aa78:	d505      	bpl.n	800aa86 <__sflush_r+0x46>
 800aa7a:	6863      	ldr	r3, [r4, #4]
 800aa7c:	1ac0      	subs	r0, r0, r3
 800aa7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aa80:	b10b      	cbz	r3, 800aa86 <__sflush_r+0x46>
 800aa82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aa84:	1ac0      	subs	r0, r0, r3
 800aa86:	2300      	movs	r3, #0
 800aa88:	4602      	mov	r2, r0
 800aa8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa8c:	6a21      	ldr	r1, [r4, #32]
 800aa8e:	4628      	mov	r0, r5
 800aa90:	47b0      	blx	r6
 800aa92:	1c43      	adds	r3, r0, #1
 800aa94:	89a3      	ldrh	r3, [r4, #12]
 800aa96:	d106      	bne.n	800aaa6 <__sflush_r+0x66>
 800aa98:	6829      	ldr	r1, [r5, #0]
 800aa9a:	291d      	cmp	r1, #29
 800aa9c:	d82c      	bhi.n	800aaf8 <__sflush_r+0xb8>
 800aa9e:	4a2a      	ldr	r2, [pc, #168]	; (800ab48 <__sflush_r+0x108>)
 800aaa0:	40ca      	lsrs	r2, r1
 800aaa2:	07d6      	lsls	r6, r2, #31
 800aaa4:	d528      	bpl.n	800aaf8 <__sflush_r+0xb8>
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	6062      	str	r2, [r4, #4]
 800aaaa:	04d9      	lsls	r1, r3, #19
 800aaac:	6922      	ldr	r2, [r4, #16]
 800aaae:	6022      	str	r2, [r4, #0]
 800aab0:	d504      	bpl.n	800aabc <__sflush_r+0x7c>
 800aab2:	1c42      	adds	r2, r0, #1
 800aab4:	d101      	bne.n	800aaba <__sflush_r+0x7a>
 800aab6:	682b      	ldr	r3, [r5, #0]
 800aab8:	b903      	cbnz	r3, 800aabc <__sflush_r+0x7c>
 800aaba:	6560      	str	r0, [r4, #84]	; 0x54
 800aabc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aabe:	602f      	str	r7, [r5, #0]
 800aac0:	2900      	cmp	r1, #0
 800aac2:	d0ca      	beq.n	800aa5a <__sflush_r+0x1a>
 800aac4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aac8:	4299      	cmp	r1, r3
 800aaca:	d002      	beq.n	800aad2 <__sflush_r+0x92>
 800aacc:	4628      	mov	r0, r5
 800aace:	f7ff fc8d 	bl	800a3ec <_free_r>
 800aad2:	2000      	movs	r0, #0
 800aad4:	6360      	str	r0, [r4, #52]	; 0x34
 800aad6:	e7c1      	b.n	800aa5c <__sflush_r+0x1c>
 800aad8:	6a21      	ldr	r1, [r4, #32]
 800aada:	2301      	movs	r3, #1
 800aadc:	4628      	mov	r0, r5
 800aade:	47b0      	blx	r6
 800aae0:	1c41      	adds	r1, r0, #1
 800aae2:	d1c7      	bne.n	800aa74 <__sflush_r+0x34>
 800aae4:	682b      	ldr	r3, [r5, #0]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d0c4      	beq.n	800aa74 <__sflush_r+0x34>
 800aaea:	2b1d      	cmp	r3, #29
 800aaec:	d001      	beq.n	800aaf2 <__sflush_r+0xb2>
 800aaee:	2b16      	cmp	r3, #22
 800aaf0:	d101      	bne.n	800aaf6 <__sflush_r+0xb6>
 800aaf2:	602f      	str	r7, [r5, #0]
 800aaf4:	e7b1      	b.n	800aa5a <__sflush_r+0x1a>
 800aaf6:	89a3      	ldrh	r3, [r4, #12]
 800aaf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aafc:	81a3      	strh	r3, [r4, #12]
 800aafe:	e7ad      	b.n	800aa5c <__sflush_r+0x1c>
 800ab00:	690f      	ldr	r7, [r1, #16]
 800ab02:	2f00      	cmp	r7, #0
 800ab04:	d0a9      	beq.n	800aa5a <__sflush_r+0x1a>
 800ab06:	0793      	lsls	r3, r2, #30
 800ab08:	680e      	ldr	r6, [r1, #0]
 800ab0a:	bf08      	it	eq
 800ab0c:	694b      	ldreq	r3, [r1, #20]
 800ab0e:	600f      	str	r7, [r1, #0]
 800ab10:	bf18      	it	ne
 800ab12:	2300      	movne	r3, #0
 800ab14:	eba6 0807 	sub.w	r8, r6, r7
 800ab18:	608b      	str	r3, [r1, #8]
 800ab1a:	f1b8 0f00 	cmp.w	r8, #0
 800ab1e:	dd9c      	ble.n	800aa5a <__sflush_r+0x1a>
 800ab20:	6a21      	ldr	r1, [r4, #32]
 800ab22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ab24:	4643      	mov	r3, r8
 800ab26:	463a      	mov	r2, r7
 800ab28:	4628      	mov	r0, r5
 800ab2a:	47b0      	blx	r6
 800ab2c:	2800      	cmp	r0, #0
 800ab2e:	dc06      	bgt.n	800ab3e <__sflush_r+0xfe>
 800ab30:	89a3      	ldrh	r3, [r4, #12]
 800ab32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab36:	81a3      	strh	r3, [r4, #12]
 800ab38:	f04f 30ff 	mov.w	r0, #4294967295
 800ab3c:	e78e      	b.n	800aa5c <__sflush_r+0x1c>
 800ab3e:	4407      	add	r7, r0
 800ab40:	eba8 0800 	sub.w	r8, r8, r0
 800ab44:	e7e9      	b.n	800ab1a <__sflush_r+0xda>
 800ab46:	bf00      	nop
 800ab48:	20400001 	.word	0x20400001

0800ab4c <_fflush_r>:
 800ab4c:	b538      	push	{r3, r4, r5, lr}
 800ab4e:	690b      	ldr	r3, [r1, #16]
 800ab50:	4605      	mov	r5, r0
 800ab52:	460c      	mov	r4, r1
 800ab54:	b913      	cbnz	r3, 800ab5c <_fflush_r+0x10>
 800ab56:	2500      	movs	r5, #0
 800ab58:	4628      	mov	r0, r5
 800ab5a:	bd38      	pop	{r3, r4, r5, pc}
 800ab5c:	b118      	cbz	r0, 800ab66 <_fflush_r+0x1a>
 800ab5e:	6983      	ldr	r3, [r0, #24]
 800ab60:	b90b      	cbnz	r3, 800ab66 <_fflush_r+0x1a>
 800ab62:	f000 f887 	bl	800ac74 <__sinit>
 800ab66:	4b14      	ldr	r3, [pc, #80]	; (800abb8 <_fflush_r+0x6c>)
 800ab68:	429c      	cmp	r4, r3
 800ab6a:	d11b      	bne.n	800aba4 <_fflush_r+0x58>
 800ab6c:	686c      	ldr	r4, [r5, #4]
 800ab6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d0ef      	beq.n	800ab56 <_fflush_r+0xa>
 800ab76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ab78:	07d0      	lsls	r0, r2, #31
 800ab7a:	d404      	bmi.n	800ab86 <_fflush_r+0x3a>
 800ab7c:	0599      	lsls	r1, r3, #22
 800ab7e:	d402      	bmi.n	800ab86 <_fflush_r+0x3a>
 800ab80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab82:	f000 f915 	bl	800adb0 <__retarget_lock_acquire_recursive>
 800ab86:	4628      	mov	r0, r5
 800ab88:	4621      	mov	r1, r4
 800ab8a:	f7ff ff59 	bl	800aa40 <__sflush_r>
 800ab8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab90:	07da      	lsls	r2, r3, #31
 800ab92:	4605      	mov	r5, r0
 800ab94:	d4e0      	bmi.n	800ab58 <_fflush_r+0xc>
 800ab96:	89a3      	ldrh	r3, [r4, #12]
 800ab98:	059b      	lsls	r3, r3, #22
 800ab9a:	d4dd      	bmi.n	800ab58 <_fflush_r+0xc>
 800ab9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab9e:	f000 f908 	bl	800adb2 <__retarget_lock_release_recursive>
 800aba2:	e7d9      	b.n	800ab58 <_fflush_r+0xc>
 800aba4:	4b05      	ldr	r3, [pc, #20]	; (800abbc <_fflush_r+0x70>)
 800aba6:	429c      	cmp	r4, r3
 800aba8:	d101      	bne.n	800abae <_fflush_r+0x62>
 800abaa:	68ac      	ldr	r4, [r5, #8]
 800abac:	e7df      	b.n	800ab6e <_fflush_r+0x22>
 800abae:	4b04      	ldr	r3, [pc, #16]	; (800abc0 <_fflush_r+0x74>)
 800abb0:	429c      	cmp	r4, r3
 800abb2:	bf08      	it	eq
 800abb4:	68ec      	ldreq	r4, [r5, #12]
 800abb6:	e7da      	b.n	800ab6e <_fflush_r+0x22>
 800abb8:	0800dc50 	.word	0x0800dc50
 800abbc:	0800dc70 	.word	0x0800dc70
 800abc0:	0800dc30 	.word	0x0800dc30

0800abc4 <std>:
 800abc4:	2300      	movs	r3, #0
 800abc6:	b510      	push	{r4, lr}
 800abc8:	4604      	mov	r4, r0
 800abca:	e9c0 3300 	strd	r3, r3, [r0]
 800abce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800abd2:	6083      	str	r3, [r0, #8]
 800abd4:	8181      	strh	r1, [r0, #12]
 800abd6:	6643      	str	r3, [r0, #100]	; 0x64
 800abd8:	81c2      	strh	r2, [r0, #14]
 800abda:	6183      	str	r3, [r0, #24]
 800abdc:	4619      	mov	r1, r3
 800abde:	2208      	movs	r2, #8
 800abe0:	305c      	adds	r0, #92	; 0x5c
 800abe2:	f7ff fbfb 	bl	800a3dc <memset>
 800abe6:	4b05      	ldr	r3, [pc, #20]	; (800abfc <std+0x38>)
 800abe8:	6263      	str	r3, [r4, #36]	; 0x24
 800abea:	4b05      	ldr	r3, [pc, #20]	; (800ac00 <std+0x3c>)
 800abec:	62a3      	str	r3, [r4, #40]	; 0x28
 800abee:	4b05      	ldr	r3, [pc, #20]	; (800ac04 <std+0x40>)
 800abf0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800abf2:	4b05      	ldr	r3, [pc, #20]	; (800ac08 <std+0x44>)
 800abf4:	6224      	str	r4, [r4, #32]
 800abf6:	6323      	str	r3, [r4, #48]	; 0x30
 800abf8:	bd10      	pop	{r4, pc}
 800abfa:	bf00      	nop
 800abfc:	0800bbc5 	.word	0x0800bbc5
 800ac00:	0800bbe7 	.word	0x0800bbe7
 800ac04:	0800bc1f 	.word	0x0800bc1f
 800ac08:	0800bc43 	.word	0x0800bc43

0800ac0c <_cleanup_r>:
 800ac0c:	4901      	ldr	r1, [pc, #4]	; (800ac14 <_cleanup_r+0x8>)
 800ac0e:	f000 b8af 	b.w	800ad70 <_fwalk_reent>
 800ac12:	bf00      	nop
 800ac14:	0800ab4d 	.word	0x0800ab4d

0800ac18 <__sfmoreglue>:
 800ac18:	b570      	push	{r4, r5, r6, lr}
 800ac1a:	1e4a      	subs	r2, r1, #1
 800ac1c:	2568      	movs	r5, #104	; 0x68
 800ac1e:	4355      	muls	r5, r2
 800ac20:	460e      	mov	r6, r1
 800ac22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ac26:	f7ff fc31 	bl	800a48c <_malloc_r>
 800ac2a:	4604      	mov	r4, r0
 800ac2c:	b140      	cbz	r0, 800ac40 <__sfmoreglue+0x28>
 800ac2e:	2100      	movs	r1, #0
 800ac30:	e9c0 1600 	strd	r1, r6, [r0]
 800ac34:	300c      	adds	r0, #12
 800ac36:	60a0      	str	r0, [r4, #8]
 800ac38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ac3c:	f7ff fbce 	bl	800a3dc <memset>
 800ac40:	4620      	mov	r0, r4
 800ac42:	bd70      	pop	{r4, r5, r6, pc}

0800ac44 <__sfp_lock_acquire>:
 800ac44:	4801      	ldr	r0, [pc, #4]	; (800ac4c <__sfp_lock_acquire+0x8>)
 800ac46:	f000 b8b3 	b.w	800adb0 <__retarget_lock_acquire_recursive>
 800ac4a:	bf00      	nop
 800ac4c:	200051ec 	.word	0x200051ec

0800ac50 <__sfp_lock_release>:
 800ac50:	4801      	ldr	r0, [pc, #4]	; (800ac58 <__sfp_lock_release+0x8>)
 800ac52:	f000 b8ae 	b.w	800adb2 <__retarget_lock_release_recursive>
 800ac56:	bf00      	nop
 800ac58:	200051ec 	.word	0x200051ec

0800ac5c <__sinit_lock_acquire>:
 800ac5c:	4801      	ldr	r0, [pc, #4]	; (800ac64 <__sinit_lock_acquire+0x8>)
 800ac5e:	f000 b8a7 	b.w	800adb0 <__retarget_lock_acquire_recursive>
 800ac62:	bf00      	nop
 800ac64:	200051e7 	.word	0x200051e7

0800ac68 <__sinit_lock_release>:
 800ac68:	4801      	ldr	r0, [pc, #4]	; (800ac70 <__sinit_lock_release+0x8>)
 800ac6a:	f000 b8a2 	b.w	800adb2 <__retarget_lock_release_recursive>
 800ac6e:	bf00      	nop
 800ac70:	200051e7 	.word	0x200051e7

0800ac74 <__sinit>:
 800ac74:	b510      	push	{r4, lr}
 800ac76:	4604      	mov	r4, r0
 800ac78:	f7ff fff0 	bl	800ac5c <__sinit_lock_acquire>
 800ac7c:	69a3      	ldr	r3, [r4, #24]
 800ac7e:	b11b      	cbz	r3, 800ac88 <__sinit+0x14>
 800ac80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac84:	f7ff bff0 	b.w	800ac68 <__sinit_lock_release>
 800ac88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ac8c:	6523      	str	r3, [r4, #80]	; 0x50
 800ac8e:	4b13      	ldr	r3, [pc, #76]	; (800acdc <__sinit+0x68>)
 800ac90:	4a13      	ldr	r2, [pc, #76]	; (800ace0 <__sinit+0x6c>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	62a2      	str	r2, [r4, #40]	; 0x28
 800ac96:	42a3      	cmp	r3, r4
 800ac98:	bf04      	itt	eq
 800ac9a:	2301      	moveq	r3, #1
 800ac9c:	61a3      	streq	r3, [r4, #24]
 800ac9e:	4620      	mov	r0, r4
 800aca0:	f000 f820 	bl	800ace4 <__sfp>
 800aca4:	6060      	str	r0, [r4, #4]
 800aca6:	4620      	mov	r0, r4
 800aca8:	f000 f81c 	bl	800ace4 <__sfp>
 800acac:	60a0      	str	r0, [r4, #8]
 800acae:	4620      	mov	r0, r4
 800acb0:	f000 f818 	bl	800ace4 <__sfp>
 800acb4:	2200      	movs	r2, #0
 800acb6:	60e0      	str	r0, [r4, #12]
 800acb8:	2104      	movs	r1, #4
 800acba:	6860      	ldr	r0, [r4, #4]
 800acbc:	f7ff ff82 	bl	800abc4 <std>
 800acc0:	68a0      	ldr	r0, [r4, #8]
 800acc2:	2201      	movs	r2, #1
 800acc4:	2109      	movs	r1, #9
 800acc6:	f7ff ff7d 	bl	800abc4 <std>
 800acca:	68e0      	ldr	r0, [r4, #12]
 800accc:	2202      	movs	r2, #2
 800acce:	2112      	movs	r1, #18
 800acd0:	f7ff ff78 	bl	800abc4 <std>
 800acd4:	2301      	movs	r3, #1
 800acd6:	61a3      	str	r3, [r4, #24]
 800acd8:	e7d2      	b.n	800ac80 <__sinit+0xc>
 800acda:	bf00      	nop
 800acdc:	0800dc2c 	.word	0x0800dc2c
 800ace0:	0800ac0d 	.word	0x0800ac0d

0800ace4 <__sfp>:
 800ace4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ace6:	4607      	mov	r7, r0
 800ace8:	f7ff ffac 	bl	800ac44 <__sfp_lock_acquire>
 800acec:	4b1e      	ldr	r3, [pc, #120]	; (800ad68 <__sfp+0x84>)
 800acee:	681e      	ldr	r6, [r3, #0]
 800acf0:	69b3      	ldr	r3, [r6, #24]
 800acf2:	b913      	cbnz	r3, 800acfa <__sfp+0x16>
 800acf4:	4630      	mov	r0, r6
 800acf6:	f7ff ffbd 	bl	800ac74 <__sinit>
 800acfa:	3648      	adds	r6, #72	; 0x48
 800acfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ad00:	3b01      	subs	r3, #1
 800ad02:	d503      	bpl.n	800ad0c <__sfp+0x28>
 800ad04:	6833      	ldr	r3, [r6, #0]
 800ad06:	b30b      	cbz	r3, 800ad4c <__sfp+0x68>
 800ad08:	6836      	ldr	r6, [r6, #0]
 800ad0a:	e7f7      	b.n	800acfc <__sfp+0x18>
 800ad0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ad10:	b9d5      	cbnz	r5, 800ad48 <__sfp+0x64>
 800ad12:	4b16      	ldr	r3, [pc, #88]	; (800ad6c <__sfp+0x88>)
 800ad14:	60e3      	str	r3, [r4, #12]
 800ad16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ad1a:	6665      	str	r5, [r4, #100]	; 0x64
 800ad1c:	f000 f847 	bl	800adae <__retarget_lock_init_recursive>
 800ad20:	f7ff ff96 	bl	800ac50 <__sfp_lock_release>
 800ad24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ad28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ad2c:	6025      	str	r5, [r4, #0]
 800ad2e:	61a5      	str	r5, [r4, #24]
 800ad30:	2208      	movs	r2, #8
 800ad32:	4629      	mov	r1, r5
 800ad34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ad38:	f7ff fb50 	bl	800a3dc <memset>
 800ad3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ad40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ad44:	4620      	mov	r0, r4
 800ad46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad48:	3468      	adds	r4, #104	; 0x68
 800ad4a:	e7d9      	b.n	800ad00 <__sfp+0x1c>
 800ad4c:	2104      	movs	r1, #4
 800ad4e:	4638      	mov	r0, r7
 800ad50:	f7ff ff62 	bl	800ac18 <__sfmoreglue>
 800ad54:	4604      	mov	r4, r0
 800ad56:	6030      	str	r0, [r6, #0]
 800ad58:	2800      	cmp	r0, #0
 800ad5a:	d1d5      	bne.n	800ad08 <__sfp+0x24>
 800ad5c:	f7ff ff78 	bl	800ac50 <__sfp_lock_release>
 800ad60:	230c      	movs	r3, #12
 800ad62:	603b      	str	r3, [r7, #0]
 800ad64:	e7ee      	b.n	800ad44 <__sfp+0x60>
 800ad66:	bf00      	nop
 800ad68:	0800dc2c 	.word	0x0800dc2c
 800ad6c:	ffff0001 	.word	0xffff0001

0800ad70 <_fwalk_reent>:
 800ad70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad74:	4606      	mov	r6, r0
 800ad76:	4688      	mov	r8, r1
 800ad78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ad7c:	2700      	movs	r7, #0
 800ad7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad82:	f1b9 0901 	subs.w	r9, r9, #1
 800ad86:	d505      	bpl.n	800ad94 <_fwalk_reent+0x24>
 800ad88:	6824      	ldr	r4, [r4, #0]
 800ad8a:	2c00      	cmp	r4, #0
 800ad8c:	d1f7      	bne.n	800ad7e <_fwalk_reent+0xe>
 800ad8e:	4638      	mov	r0, r7
 800ad90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad94:	89ab      	ldrh	r3, [r5, #12]
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d907      	bls.n	800adaa <_fwalk_reent+0x3a>
 800ad9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad9e:	3301      	adds	r3, #1
 800ada0:	d003      	beq.n	800adaa <_fwalk_reent+0x3a>
 800ada2:	4629      	mov	r1, r5
 800ada4:	4630      	mov	r0, r6
 800ada6:	47c0      	blx	r8
 800ada8:	4307      	orrs	r7, r0
 800adaa:	3568      	adds	r5, #104	; 0x68
 800adac:	e7e9      	b.n	800ad82 <_fwalk_reent+0x12>

0800adae <__retarget_lock_init_recursive>:
 800adae:	4770      	bx	lr

0800adb0 <__retarget_lock_acquire_recursive>:
 800adb0:	4770      	bx	lr

0800adb2 <__retarget_lock_release_recursive>:
 800adb2:	4770      	bx	lr

0800adb4 <__swhatbuf_r>:
 800adb4:	b570      	push	{r4, r5, r6, lr}
 800adb6:	460e      	mov	r6, r1
 800adb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adbc:	2900      	cmp	r1, #0
 800adbe:	b096      	sub	sp, #88	; 0x58
 800adc0:	4614      	mov	r4, r2
 800adc2:	461d      	mov	r5, r3
 800adc4:	da07      	bge.n	800add6 <__swhatbuf_r+0x22>
 800adc6:	2300      	movs	r3, #0
 800adc8:	602b      	str	r3, [r5, #0]
 800adca:	89b3      	ldrh	r3, [r6, #12]
 800adcc:	061a      	lsls	r2, r3, #24
 800adce:	d410      	bmi.n	800adf2 <__swhatbuf_r+0x3e>
 800add0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800add4:	e00e      	b.n	800adf4 <__swhatbuf_r+0x40>
 800add6:	466a      	mov	r2, sp
 800add8:	f001 fe0c 	bl	800c9f4 <_fstat_r>
 800addc:	2800      	cmp	r0, #0
 800adde:	dbf2      	blt.n	800adc6 <__swhatbuf_r+0x12>
 800ade0:	9a01      	ldr	r2, [sp, #4]
 800ade2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ade6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800adea:	425a      	negs	r2, r3
 800adec:	415a      	adcs	r2, r3
 800adee:	602a      	str	r2, [r5, #0]
 800adf0:	e7ee      	b.n	800add0 <__swhatbuf_r+0x1c>
 800adf2:	2340      	movs	r3, #64	; 0x40
 800adf4:	2000      	movs	r0, #0
 800adf6:	6023      	str	r3, [r4, #0]
 800adf8:	b016      	add	sp, #88	; 0x58
 800adfa:	bd70      	pop	{r4, r5, r6, pc}

0800adfc <__smakebuf_r>:
 800adfc:	898b      	ldrh	r3, [r1, #12]
 800adfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae00:	079d      	lsls	r5, r3, #30
 800ae02:	4606      	mov	r6, r0
 800ae04:	460c      	mov	r4, r1
 800ae06:	d507      	bpl.n	800ae18 <__smakebuf_r+0x1c>
 800ae08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ae0c:	6023      	str	r3, [r4, #0]
 800ae0e:	6123      	str	r3, [r4, #16]
 800ae10:	2301      	movs	r3, #1
 800ae12:	6163      	str	r3, [r4, #20]
 800ae14:	b002      	add	sp, #8
 800ae16:	bd70      	pop	{r4, r5, r6, pc}
 800ae18:	ab01      	add	r3, sp, #4
 800ae1a:	466a      	mov	r2, sp
 800ae1c:	f7ff ffca 	bl	800adb4 <__swhatbuf_r>
 800ae20:	9900      	ldr	r1, [sp, #0]
 800ae22:	4605      	mov	r5, r0
 800ae24:	4630      	mov	r0, r6
 800ae26:	f7ff fb31 	bl	800a48c <_malloc_r>
 800ae2a:	b948      	cbnz	r0, 800ae40 <__smakebuf_r+0x44>
 800ae2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae30:	059a      	lsls	r2, r3, #22
 800ae32:	d4ef      	bmi.n	800ae14 <__smakebuf_r+0x18>
 800ae34:	f023 0303 	bic.w	r3, r3, #3
 800ae38:	f043 0302 	orr.w	r3, r3, #2
 800ae3c:	81a3      	strh	r3, [r4, #12]
 800ae3e:	e7e3      	b.n	800ae08 <__smakebuf_r+0xc>
 800ae40:	4b0d      	ldr	r3, [pc, #52]	; (800ae78 <__smakebuf_r+0x7c>)
 800ae42:	62b3      	str	r3, [r6, #40]	; 0x28
 800ae44:	89a3      	ldrh	r3, [r4, #12]
 800ae46:	6020      	str	r0, [r4, #0]
 800ae48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae4c:	81a3      	strh	r3, [r4, #12]
 800ae4e:	9b00      	ldr	r3, [sp, #0]
 800ae50:	6163      	str	r3, [r4, #20]
 800ae52:	9b01      	ldr	r3, [sp, #4]
 800ae54:	6120      	str	r0, [r4, #16]
 800ae56:	b15b      	cbz	r3, 800ae70 <__smakebuf_r+0x74>
 800ae58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae5c:	4630      	mov	r0, r6
 800ae5e:	f001 fddb 	bl	800ca18 <_isatty_r>
 800ae62:	b128      	cbz	r0, 800ae70 <__smakebuf_r+0x74>
 800ae64:	89a3      	ldrh	r3, [r4, #12]
 800ae66:	f023 0303 	bic.w	r3, r3, #3
 800ae6a:	f043 0301 	orr.w	r3, r3, #1
 800ae6e:	81a3      	strh	r3, [r4, #12]
 800ae70:	89a0      	ldrh	r0, [r4, #12]
 800ae72:	4305      	orrs	r5, r0
 800ae74:	81a5      	strh	r5, [r4, #12]
 800ae76:	e7cd      	b.n	800ae14 <__smakebuf_r+0x18>
 800ae78:	0800ac0d 	.word	0x0800ac0d

0800ae7c <__malloc_lock>:
 800ae7c:	4801      	ldr	r0, [pc, #4]	; (800ae84 <__malloc_lock+0x8>)
 800ae7e:	f7ff bf97 	b.w	800adb0 <__retarget_lock_acquire_recursive>
 800ae82:	bf00      	nop
 800ae84:	200051e8 	.word	0x200051e8

0800ae88 <__malloc_unlock>:
 800ae88:	4801      	ldr	r0, [pc, #4]	; (800ae90 <__malloc_unlock+0x8>)
 800ae8a:	f7ff bf92 	b.w	800adb2 <__retarget_lock_release_recursive>
 800ae8e:	bf00      	nop
 800ae90:	200051e8 	.word	0x200051e8

0800ae94 <_Balloc>:
 800ae94:	b570      	push	{r4, r5, r6, lr}
 800ae96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ae98:	4604      	mov	r4, r0
 800ae9a:	460d      	mov	r5, r1
 800ae9c:	b976      	cbnz	r6, 800aebc <_Balloc+0x28>
 800ae9e:	2010      	movs	r0, #16
 800aea0:	f7ff fa86 	bl	800a3b0 <malloc>
 800aea4:	4602      	mov	r2, r0
 800aea6:	6260      	str	r0, [r4, #36]	; 0x24
 800aea8:	b920      	cbnz	r0, 800aeb4 <_Balloc+0x20>
 800aeaa:	4b18      	ldr	r3, [pc, #96]	; (800af0c <_Balloc+0x78>)
 800aeac:	4818      	ldr	r0, [pc, #96]	; (800af10 <_Balloc+0x7c>)
 800aeae:	2166      	movs	r1, #102	; 0x66
 800aeb0:	f000 fee6 	bl	800bc80 <__assert_func>
 800aeb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aeb8:	6006      	str	r6, [r0, #0]
 800aeba:	60c6      	str	r6, [r0, #12]
 800aebc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800aebe:	68f3      	ldr	r3, [r6, #12]
 800aec0:	b183      	cbz	r3, 800aee4 <_Balloc+0x50>
 800aec2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aec4:	68db      	ldr	r3, [r3, #12]
 800aec6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aeca:	b9b8      	cbnz	r0, 800aefc <_Balloc+0x68>
 800aecc:	2101      	movs	r1, #1
 800aece:	fa01 f605 	lsl.w	r6, r1, r5
 800aed2:	1d72      	adds	r2, r6, #5
 800aed4:	0092      	lsls	r2, r2, #2
 800aed6:	4620      	mov	r0, r4
 800aed8:	f000 fb78 	bl	800b5cc <_calloc_r>
 800aedc:	b160      	cbz	r0, 800aef8 <_Balloc+0x64>
 800aede:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aee2:	e00e      	b.n	800af02 <_Balloc+0x6e>
 800aee4:	2221      	movs	r2, #33	; 0x21
 800aee6:	2104      	movs	r1, #4
 800aee8:	4620      	mov	r0, r4
 800aeea:	f000 fb6f 	bl	800b5cc <_calloc_r>
 800aeee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aef0:	60f0      	str	r0, [r6, #12]
 800aef2:	68db      	ldr	r3, [r3, #12]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d1e4      	bne.n	800aec2 <_Balloc+0x2e>
 800aef8:	2000      	movs	r0, #0
 800aefa:	bd70      	pop	{r4, r5, r6, pc}
 800aefc:	6802      	ldr	r2, [r0, #0]
 800aefe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800af02:	2300      	movs	r3, #0
 800af04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800af08:	e7f7      	b.n	800aefa <_Balloc+0x66>
 800af0a:	bf00      	nop
 800af0c:	0800dc90 	.word	0x0800dc90
 800af10:	0800dca7 	.word	0x0800dca7

0800af14 <_Bfree>:
 800af14:	b570      	push	{r4, r5, r6, lr}
 800af16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800af18:	4605      	mov	r5, r0
 800af1a:	460c      	mov	r4, r1
 800af1c:	b976      	cbnz	r6, 800af3c <_Bfree+0x28>
 800af1e:	2010      	movs	r0, #16
 800af20:	f7ff fa46 	bl	800a3b0 <malloc>
 800af24:	4602      	mov	r2, r0
 800af26:	6268      	str	r0, [r5, #36]	; 0x24
 800af28:	b920      	cbnz	r0, 800af34 <_Bfree+0x20>
 800af2a:	4b09      	ldr	r3, [pc, #36]	; (800af50 <_Bfree+0x3c>)
 800af2c:	4809      	ldr	r0, [pc, #36]	; (800af54 <_Bfree+0x40>)
 800af2e:	218a      	movs	r1, #138	; 0x8a
 800af30:	f000 fea6 	bl	800bc80 <__assert_func>
 800af34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af38:	6006      	str	r6, [r0, #0]
 800af3a:	60c6      	str	r6, [r0, #12]
 800af3c:	b13c      	cbz	r4, 800af4e <_Bfree+0x3a>
 800af3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800af40:	6862      	ldr	r2, [r4, #4]
 800af42:	68db      	ldr	r3, [r3, #12]
 800af44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800af48:	6021      	str	r1, [r4, #0]
 800af4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800af4e:	bd70      	pop	{r4, r5, r6, pc}
 800af50:	0800dc90 	.word	0x0800dc90
 800af54:	0800dca7 	.word	0x0800dca7

0800af58 <__multadd>:
 800af58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af5c:	690e      	ldr	r6, [r1, #16]
 800af5e:	4607      	mov	r7, r0
 800af60:	4698      	mov	r8, r3
 800af62:	460c      	mov	r4, r1
 800af64:	f101 0014 	add.w	r0, r1, #20
 800af68:	2300      	movs	r3, #0
 800af6a:	6805      	ldr	r5, [r0, #0]
 800af6c:	b2a9      	uxth	r1, r5
 800af6e:	fb02 8101 	mla	r1, r2, r1, r8
 800af72:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800af76:	0c2d      	lsrs	r5, r5, #16
 800af78:	fb02 c505 	mla	r5, r2, r5, ip
 800af7c:	b289      	uxth	r1, r1
 800af7e:	3301      	adds	r3, #1
 800af80:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800af84:	429e      	cmp	r6, r3
 800af86:	f840 1b04 	str.w	r1, [r0], #4
 800af8a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800af8e:	dcec      	bgt.n	800af6a <__multadd+0x12>
 800af90:	f1b8 0f00 	cmp.w	r8, #0
 800af94:	d022      	beq.n	800afdc <__multadd+0x84>
 800af96:	68a3      	ldr	r3, [r4, #8]
 800af98:	42b3      	cmp	r3, r6
 800af9a:	dc19      	bgt.n	800afd0 <__multadd+0x78>
 800af9c:	6861      	ldr	r1, [r4, #4]
 800af9e:	4638      	mov	r0, r7
 800afa0:	3101      	adds	r1, #1
 800afa2:	f7ff ff77 	bl	800ae94 <_Balloc>
 800afa6:	4605      	mov	r5, r0
 800afa8:	b928      	cbnz	r0, 800afb6 <__multadd+0x5e>
 800afaa:	4602      	mov	r2, r0
 800afac:	4b0d      	ldr	r3, [pc, #52]	; (800afe4 <__multadd+0x8c>)
 800afae:	480e      	ldr	r0, [pc, #56]	; (800afe8 <__multadd+0x90>)
 800afb0:	21b5      	movs	r1, #181	; 0xb5
 800afb2:	f000 fe65 	bl	800bc80 <__assert_func>
 800afb6:	6922      	ldr	r2, [r4, #16]
 800afb8:	3202      	adds	r2, #2
 800afba:	f104 010c 	add.w	r1, r4, #12
 800afbe:	0092      	lsls	r2, r2, #2
 800afc0:	300c      	adds	r0, #12
 800afc2:	f7ff f9fd 	bl	800a3c0 <memcpy>
 800afc6:	4621      	mov	r1, r4
 800afc8:	4638      	mov	r0, r7
 800afca:	f7ff ffa3 	bl	800af14 <_Bfree>
 800afce:	462c      	mov	r4, r5
 800afd0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800afd4:	3601      	adds	r6, #1
 800afd6:	f8c3 8014 	str.w	r8, [r3, #20]
 800afda:	6126      	str	r6, [r4, #16]
 800afdc:	4620      	mov	r0, r4
 800afde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afe2:	bf00      	nop
 800afe4:	0800dd07 	.word	0x0800dd07
 800afe8:	0800dca7 	.word	0x0800dca7

0800afec <__hi0bits>:
 800afec:	0c03      	lsrs	r3, r0, #16
 800afee:	041b      	lsls	r3, r3, #16
 800aff0:	b9d3      	cbnz	r3, 800b028 <__hi0bits+0x3c>
 800aff2:	0400      	lsls	r0, r0, #16
 800aff4:	2310      	movs	r3, #16
 800aff6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800affa:	bf04      	itt	eq
 800affc:	0200      	lsleq	r0, r0, #8
 800affe:	3308      	addeq	r3, #8
 800b000:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b004:	bf04      	itt	eq
 800b006:	0100      	lsleq	r0, r0, #4
 800b008:	3304      	addeq	r3, #4
 800b00a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b00e:	bf04      	itt	eq
 800b010:	0080      	lsleq	r0, r0, #2
 800b012:	3302      	addeq	r3, #2
 800b014:	2800      	cmp	r0, #0
 800b016:	db05      	blt.n	800b024 <__hi0bits+0x38>
 800b018:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b01c:	f103 0301 	add.w	r3, r3, #1
 800b020:	bf08      	it	eq
 800b022:	2320      	moveq	r3, #32
 800b024:	4618      	mov	r0, r3
 800b026:	4770      	bx	lr
 800b028:	2300      	movs	r3, #0
 800b02a:	e7e4      	b.n	800aff6 <__hi0bits+0xa>

0800b02c <__lo0bits>:
 800b02c:	6803      	ldr	r3, [r0, #0]
 800b02e:	f013 0207 	ands.w	r2, r3, #7
 800b032:	4601      	mov	r1, r0
 800b034:	d00b      	beq.n	800b04e <__lo0bits+0x22>
 800b036:	07da      	lsls	r2, r3, #31
 800b038:	d424      	bmi.n	800b084 <__lo0bits+0x58>
 800b03a:	0798      	lsls	r0, r3, #30
 800b03c:	bf49      	itett	mi
 800b03e:	085b      	lsrmi	r3, r3, #1
 800b040:	089b      	lsrpl	r3, r3, #2
 800b042:	2001      	movmi	r0, #1
 800b044:	600b      	strmi	r3, [r1, #0]
 800b046:	bf5c      	itt	pl
 800b048:	600b      	strpl	r3, [r1, #0]
 800b04a:	2002      	movpl	r0, #2
 800b04c:	4770      	bx	lr
 800b04e:	b298      	uxth	r0, r3
 800b050:	b9b0      	cbnz	r0, 800b080 <__lo0bits+0x54>
 800b052:	0c1b      	lsrs	r3, r3, #16
 800b054:	2010      	movs	r0, #16
 800b056:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b05a:	bf04      	itt	eq
 800b05c:	0a1b      	lsreq	r3, r3, #8
 800b05e:	3008      	addeq	r0, #8
 800b060:	071a      	lsls	r2, r3, #28
 800b062:	bf04      	itt	eq
 800b064:	091b      	lsreq	r3, r3, #4
 800b066:	3004      	addeq	r0, #4
 800b068:	079a      	lsls	r2, r3, #30
 800b06a:	bf04      	itt	eq
 800b06c:	089b      	lsreq	r3, r3, #2
 800b06e:	3002      	addeq	r0, #2
 800b070:	07da      	lsls	r2, r3, #31
 800b072:	d403      	bmi.n	800b07c <__lo0bits+0x50>
 800b074:	085b      	lsrs	r3, r3, #1
 800b076:	f100 0001 	add.w	r0, r0, #1
 800b07a:	d005      	beq.n	800b088 <__lo0bits+0x5c>
 800b07c:	600b      	str	r3, [r1, #0]
 800b07e:	4770      	bx	lr
 800b080:	4610      	mov	r0, r2
 800b082:	e7e8      	b.n	800b056 <__lo0bits+0x2a>
 800b084:	2000      	movs	r0, #0
 800b086:	4770      	bx	lr
 800b088:	2020      	movs	r0, #32
 800b08a:	4770      	bx	lr

0800b08c <__i2b>:
 800b08c:	b510      	push	{r4, lr}
 800b08e:	460c      	mov	r4, r1
 800b090:	2101      	movs	r1, #1
 800b092:	f7ff feff 	bl	800ae94 <_Balloc>
 800b096:	4602      	mov	r2, r0
 800b098:	b928      	cbnz	r0, 800b0a6 <__i2b+0x1a>
 800b09a:	4b05      	ldr	r3, [pc, #20]	; (800b0b0 <__i2b+0x24>)
 800b09c:	4805      	ldr	r0, [pc, #20]	; (800b0b4 <__i2b+0x28>)
 800b09e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b0a2:	f000 fded 	bl	800bc80 <__assert_func>
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	6144      	str	r4, [r0, #20]
 800b0aa:	6103      	str	r3, [r0, #16]
 800b0ac:	bd10      	pop	{r4, pc}
 800b0ae:	bf00      	nop
 800b0b0:	0800dd07 	.word	0x0800dd07
 800b0b4:	0800dca7 	.word	0x0800dca7

0800b0b8 <__multiply>:
 800b0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0bc:	4614      	mov	r4, r2
 800b0be:	690a      	ldr	r2, [r1, #16]
 800b0c0:	6923      	ldr	r3, [r4, #16]
 800b0c2:	429a      	cmp	r2, r3
 800b0c4:	bfb8      	it	lt
 800b0c6:	460b      	movlt	r3, r1
 800b0c8:	460d      	mov	r5, r1
 800b0ca:	bfbc      	itt	lt
 800b0cc:	4625      	movlt	r5, r4
 800b0ce:	461c      	movlt	r4, r3
 800b0d0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b0d4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b0d8:	68ab      	ldr	r3, [r5, #8]
 800b0da:	6869      	ldr	r1, [r5, #4]
 800b0dc:	eb0a 0709 	add.w	r7, sl, r9
 800b0e0:	42bb      	cmp	r3, r7
 800b0e2:	b085      	sub	sp, #20
 800b0e4:	bfb8      	it	lt
 800b0e6:	3101      	addlt	r1, #1
 800b0e8:	f7ff fed4 	bl	800ae94 <_Balloc>
 800b0ec:	b930      	cbnz	r0, 800b0fc <__multiply+0x44>
 800b0ee:	4602      	mov	r2, r0
 800b0f0:	4b42      	ldr	r3, [pc, #264]	; (800b1fc <__multiply+0x144>)
 800b0f2:	4843      	ldr	r0, [pc, #268]	; (800b200 <__multiply+0x148>)
 800b0f4:	f240 115d 	movw	r1, #349	; 0x15d
 800b0f8:	f000 fdc2 	bl	800bc80 <__assert_func>
 800b0fc:	f100 0614 	add.w	r6, r0, #20
 800b100:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b104:	4633      	mov	r3, r6
 800b106:	2200      	movs	r2, #0
 800b108:	4543      	cmp	r3, r8
 800b10a:	d31e      	bcc.n	800b14a <__multiply+0x92>
 800b10c:	f105 0c14 	add.w	ip, r5, #20
 800b110:	f104 0314 	add.w	r3, r4, #20
 800b114:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b118:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b11c:	9202      	str	r2, [sp, #8]
 800b11e:	ebac 0205 	sub.w	r2, ip, r5
 800b122:	3a15      	subs	r2, #21
 800b124:	f022 0203 	bic.w	r2, r2, #3
 800b128:	3204      	adds	r2, #4
 800b12a:	f105 0115 	add.w	r1, r5, #21
 800b12e:	458c      	cmp	ip, r1
 800b130:	bf38      	it	cc
 800b132:	2204      	movcc	r2, #4
 800b134:	9201      	str	r2, [sp, #4]
 800b136:	9a02      	ldr	r2, [sp, #8]
 800b138:	9303      	str	r3, [sp, #12]
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d808      	bhi.n	800b150 <__multiply+0x98>
 800b13e:	2f00      	cmp	r7, #0
 800b140:	dc55      	bgt.n	800b1ee <__multiply+0x136>
 800b142:	6107      	str	r7, [r0, #16]
 800b144:	b005      	add	sp, #20
 800b146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b14a:	f843 2b04 	str.w	r2, [r3], #4
 800b14e:	e7db      	b.n	800b108 <__multiply+0x50>
 800b150:	f8b3 a000 	ldrh.w	sl, [r3]
 800b154:	f1ba 0f00 	cmp.w	sl, #0
 800b158:	d020      	beq.n	800b19c <__multiply+0xe4>
 800b15a:	f105 0e14 	add.w	lr, r5, #20
 800b15e:	46b1      	mov	r9, r6
 800b160:	2200      	movs	r2, #0
 800b162:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b166:	f8d9 b000 	ldr.w	fp, [r9]
 800b16a:	b2a1      	uxth	r1, r4
 800b16c:	fa1f fb8b 	uxth.w	fp, fp
 800b170:	fb0a b101 	mla	r1, sl, r1, fp
 800b174:	4411      	add	r1, r2
 800b176:	f8d9 2000 	ldr.w	r2, [r9]
 800b17a:	0c24      	lsrs	r4, r4, #16
 800b17c:	0c12      	lsrs	r2, r2, #16
 800b17e:	fb0a 2404 	mla	r4, sl, r4, r2
 800b182:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b186:	b289      	uxth	r1, r1
 800b188:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b18c:	45f4      	cmp	ip, lr
 800b18e:	f849 1b04 	str.w	r1, [r9], #4
 800b192:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b196:	d8e4      	bhi.n	800b162 <__multiply+0xaa>
 800b198:	9901      	ldr	r1, [sp, #4]
 800b19a:	5072      	str	r2, [r6, r1]
 800b19c:	9a03      	ldr	r2, [sp, #12]
 800b19e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b1a2:	3304      	adds	r3, #4
 800b1a4:	f1b9 0f00 	cmp.w	r9, #0
 800b1a8:	d01f      	beq.n	800b1ea <__multiply+0x132>
 800b1aa:	6834      	ldr	r4, [r6, #0]
 800b1ac:	f105 0114 	add.w	r1, r5, #20
 800b1b0:	46b6      	mov	lr, r6
 800b1b2:	f04f 0a00 	mov.w	sl, #0
 800b1b6:	880a      	ldrh	r2, [r1, #0]
 800b1b8:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b1bc:	fb09 b202 	mla	r2, r9, r2, fp
 800b1c0:	4492      	add	sl, r2
 800b1c2:	b2a4      	uxth	r4, r4
 800b1c4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b1c8:	f84e 4b04 	str.w	r4, [lr], #4
 800b1cc:	f851 4b04 	ldr.w	r4, [r1], #4
 800b1d0:	f8be 2000 	ldrh.w	r2, [lr]
 800b1d4:	0c24      	lsrs	r4, r4, #16
 800b1d6:	fb09 2404 	mla	r4, r9, r4, r2
 800b1da:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b1de:	458c      	cmp	ip, r1
 800b1e0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b1e4:	d8e7      	bhi.n	800b1b6 <__multiply+0xfe>
 800b1e6:	9a01      	ldr	r2, [sp, #4]
 800b1e8:	50b4      	str	r4, [r6, r2]
 800b1ea:	3604      	adds	r6, #4
 800b1ec:	e7a3      	b.n	800b136 <__multiply+0x7e>
 800b1ee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d1a5      	bne.n	800b142 <__multiply+0x8a>
 800b1f6:	3f01      	subs	r7, #1
 800b1f8:	e7a1      	b.n	800b13e <__multiply+0x86>
 800b1fa:	bf00      	nop
 800b1fc:	0800dd07 	.word	0x0800dd07
 800b200:	0800dca7 	.word	0x0800dca7

0800b204 <__pow5mult>:
 800b204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b208:	4615      	mov	r5, r2
 800b20a:	f012 0203 	ands.w	r2, r2, #3
 800b20e:	4606      	mov	r6, r0
 800b210:	460f      	mov	r7, r1
 800b212:	d007      	beq.n	800b224 <__pow5mult+0x20>
 800b214:	4c25      	ldr	r4, [pc, #148]	; (800b2ac <__pow5mult+0xa8>)
 800b216:	3a01      	subs	r2, #1
 800b218:	2300      	movs	r3, #0
 800b21a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b21e:	f7ff fe9b 	bl	800af58 <__multadd>
 800b222:	4607      	mov	r7, r0
 800b224:	10ad      	asrs	r5, r5, #2
 800b226:	d03d      	beq.n	800b2a4 <__pow5mult+0xa0>
 800b228:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b22a:	b97c      	cbnz	r4, 800b24c <__pow5mult+0x48>
 800b22c:	2010      	movs	r0, #16
 800b22e:	f7ff f8bf 	bl	800a3b0 <malloc>
 800b232:	4602      	mov	r2, r0
 800b234:	6270      	str	r0, [r6, #36]	; 0x24
 800b236:	b928      	cbnz	r0, 800b244 <__pow5mult+0x40>
 800b238:	4b1d      	ldr	r3, [pc, #116]	; (800b2b0 <__pow5mult+0xac>)
 800b23a:	481e      	ldr	r0, [pc, #120]	; (800b2b4 <__pow5mult+0xb0>)
 800b23c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b240:	f000 fd1e 	bl	800bc80 <__assert_func>
 800b244:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b248:	6004      	str	r4, [r0, #0]
 800b24a:	60c4      	str	r4, [r0, #12]
 800b24c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b250:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b254:	b94c      	cbnz	r4, 800b26a <__pow5mult+0x66>
 800b256:	f240 2171 	movw	r1, #625	; 0x271
 800b25a:	4630      	mov	r0, r6
 800b25c:	f7ff ff16 	bl	800b08c <__i2b>
 800b260:	2300      	movs	r3, #0
 800b262:	f8c8 0008 	str.w	r0, [r8, #8]
 800b266:	4604      	mov	r4, r0
 800b268:	6003      	str	r3, [r0, #0]
 800b26a:	f04f 0900 	mov.w	r9, #0
 800b26e:	07eb      	lsls	r3, r5, #31
 800b270:	d50a      	bpl.n	800b288 <__pow5mult+0x84>
 800b272:	4639      	mov	r1, r7
 800b274:	4622      	mov	r2, r4
 800b276:	4630      	mov	r0, r6
 800b278:	f7ff ff1e 	bl	800b0b8 <__multiply>
 800b27c:	4639      	mov	r1, r7
 800b27e:	4680      	mov	r8, r0
 800b280:	4630      	mov	r0, r6
 800b282:	f7ff fe47 	bl	800af14 <_Bfree>
 800b286:	4647      	mov	r7, r8
 800b288:	106d      	asrs	r5, r5, #1
 800b28a:	d00b      	beq.n	800b2a4 <__pow5mult+0xa0>
 800b28c:	6820      	ldr	r0, [r4, #0]
 800b28e:	b938      	cbnz	r0, 800b2a0 <__pow5mult+0x9c>
 800b290:	4622      	mov	r2, r4
 800b292:	4621      	mov	r1, r4
 800b294:	4630      	mov	r0, r6
 800b296:	f7ff ff0f 	bl	800b0b8 <__multiply>
 800b29a:	6020      	str	r0, [r4, #0]
 800b29c:	f8c0 9000 	str.w	r9, [r0]
 800b2a0:	4604      	mov	r4, r0
 800b2a2:	e7e4      	b.n	800b26e <__pow5mult+0x6a>
 800b2a4:	4638      	mov	r0, r7
 800b2a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2aa:	bf00      	nop
 800b2ac:	0800de08 	.word	0x0800de08
 800b2b0:	0800dc90 	.word	0x0800dc90
 800b2b4:	0800dca7 	.word	0x0800dca7

0800b2b8 <__lshift>:
 800b2b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2bc:	460c      	mov	r4, r1
 800b2be:	6849      	ldr	r1, [r1, #4]
 800b2c0:	6923      	ldr	r3, [r4, #16]
 800b2c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b2c6:	68a3      	ldr	r3, [r4, #8]
 800b2c8:	4607      	mov	r7, r0
 800b2ca:	4691      	mov	r9, r2
 800b2cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b2d0:	f108 0601 	add.w	r6, r8, #1
 800b2d4:	42b3      	cmp	r3, r6
 800b2d6:	db0b      	blt.n	800b2f0 <__lshift+0x38>
 800b2d8:	4638      	mov	r0, r7
 800b2da:	f7ff fddb 	bl	800ae94 <_Balloc>
 800b2de:	4605      	mov	r5, r0
 800b2e0:	b948      	cbnz	r0, 800b2f6 <__lshift+0x3e>
 800b2e2:	4602      	mov	r2, r0
 800b2e4:	4b28      	ldr	r3, [pc, #160]	; (800b388 <__lshift+0xd0>)
 800b2e6:	4829      	ldr	r0, [pc, #164]	; (800b38c <__lshift+0xd4>)
 800b2e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b2ec:	f000 fcc8 	bl	800bc80 <__assert_func>
 800b2f0:	3101      	adds	r1, #1
 800b2f2:	005b      	lsls	r3, r3, #1
 800b2f4:	e7ee      	b.n	800b2d4 <__lshift+0x1c>
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	f100 0114 	add.w	r1, r0, #20
 800b2fc:	f100 0210 	add.w	r2, r0, #16
 800b300:	4618      	mov	r0, r3
 800b302:	4553      	cmp	r3, sl
 800b304:	db33      	blt.n	800b36e <__lshift+0xb6>
 800b306:	6920      	ldr	r0, [r4, #16]
 800b308:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b30c:	f104 0314 	add.w	r3, r4, #20
 800b310:	f019 091f 	ands.w	r9, r9, #31
 800b314:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b318:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b31c:	d02b      	beq.n	800b376 <__lshift+0xbe>
 800b31e:	f1c9 0e20 	rsb	lr, r9, #32
 800b322:	468a      	mov	sl, r1
 800b324:	2200      	movs	r2, #0
 800b326:	6818      	ldr	r0, [r3, #0]
 800b328:	fa00 f009 	lsl.w	r0, r0, r9
 800b32c:	4302      	orrs	r2, r0
 800b32e:	f84a 2b04 	str.w	r2, [sl], #4
 800b332:	f853 2b04 	ldr.w	r2, [r3], #4
 800b336:	459c      	cmp	ip, r3
 800b338:	fa22 f20e 	lsr.w	r2, r2, lr
 800b33c:	d8f3      	bhi.n	800b326 <__lshift+0x6e>
 800b33e:	ebac 0304 	sub.w	r3, ip, r4
 800b342:	3b15      	subs	r3, #21
 800b344:	f023 0303 	bic.w	r3, r3, #3
 800b348:	3304      	adds	r3, #4
 800b34a:	f104 0015 	add.w	r0, r4, #21
 800b34e:	4584      	cmp	ip, r0
 800b350:	bf38      	it	cc
 800b352:	2304      	movcc	r3, #4
 800b354:	50ca      	str	r2, [r1, r3]
 800b356:	b10a      	cbz	r2, 800b35c <__lshift+0xa4>
 800b358:	f108 0602 	add.w	r6, r8, #2
 800b35c:	3e01      	subs	r6, #1
 800b35e:	4638      	mov	r0, r7
 800b360:	612e      	str	r6, [r5, #16]
 800b362:	4621      	mov	r1, r4
 800b364:	f7ff fdd6 	bl	800af14 <_Bfree>
 800b368:	4628      	mov	r0, r5
 800b36a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b36e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b372:	3301      	adds	r3, #1
 800b374:	e7c5      	b.n	800b302 <__lshift+0x4a>
 800b376:	3904      	subs	r1, #4
 800b378:	f853 2b04 	ldr.w	r2, [r3], #4
 800b37c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b380:	459c      	cmp	ip, r3
 800b382:	d8f9      	bhi.n	800b378 <__lshift+0xc0>
 800b384:	e7ea      	b.n	800b35c <__lshift+0xa4>
 800b386:	bf00      	nop
 800b388:	0800dd07 	.word	0x0800dd07
 800b38c:	0800dca7 	.word	0x0800dca7

0800b390 <__mcmp>:
 800b390:	b530      	push	{r4, r5, lr}
 800b392:	6902      	ldr	r2, [r0, #16]
 800b394:	690c      	ldr	r4, [r1, #16]
 800b396:	1b12      	subs	r2, r2, r4
 800b398:	d10e      	bne.n	800b3b8 <__mcmp+0x28>
 800b39a:	f100 0314 	add.w	r3, r0, #20
 800b39e:	3114      	adds	r1, #20
 800b3a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b3a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b3a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b3ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b3b0:	42a5      	cmp	r5, r4
 800b3b2:	d003      	beq.n	800b3bc <__mcmp+0x2c>
 800b3b4:	d305      	bcc.n	800b3c2 <__mcmp+0x32>
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	4610      	mov	r0, r2
 800b3ba:	bd30      	pop	{r4, r5, pc}
 800b3bc:	4283      	cmp	r3, r0
 800b3be:	d3f3      	bcc.n	800b3a8 <__mcmp+0x18>
 800b3c0:	e7fa      	b.n	800b3b8 <__mcmp+0x28>
 800b3c2:	f04f 32ff 	mov.w	r2, #4294967295
 800b3c6:	e7f7      	b.n	800b3b8 <__mcmp+0x28>

0800b3c8 <__mdiff>:
 800b3c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3cc:	460c      	mov	r4, r1
 800b3ce:	4606      	mov	r6, r0
 800b3d0:	4611      	mov	r1, r2
 800b3d2:	4620      	mov	r0, r4
 800b3d4:	4617      	mov	r7, r2
 800b3d6:	f7ff ffdb 	bl	800b390 <__mcmp>
 800b3da:	1e05      	subs	r5, r0, #0
 800b3dc:	d110      	bne.n	800b400 <__mdiff+0x38>
 800b3de:	4629      	mov	r1, r5
 800b3e0:	4630      	mov	r0, r6
 800b3e2:	f7ff fd57 	bl	800ae94 <_Balloc>
 800b3e6:	b930      	cbnz	r0, 800b3f6 <__mdiff+0x2e>
 800b3e8:	4b39      	ldr	r3, [pc, #228]	; (800b4d0 <__mdiff+0x108>)
 800b3ea:	4602      	mov	r2, r0
 800b3ec:	f240 2132 	movw	r1, #562	; 0x232
 800b3f0:	4838      	ldr	r0, [pc, #224]	; (800b4d4 <__mdiff+0x10c>)
 800b3f2:	f000 fc45 	bl	800bc80 <__assert_func>
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b3fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b400:	bfa4      	itt	ge
 800b402:	463b      	movge	r3, r7
 800b404:	4627      	movge	r7, r4
 800b406:	4630      	mov	r0, r6
 800b408:	6879      	ldr	r1, [r7, #4]
 800b40a:	bfa6      	itte	ge
 800b40c:	461c      	movge	r4, r3
 800b40e:	2500      	movge	r5, #0
 800b410:	2501      	movlt	r5, #1
 800b412:	f7ff fd3f 	bl	800ae94 <_Balloc>
 800b416:	b920      	cbnz	r0, 800b422 <__mdiff+0x5a>
 800b418:	4b2d      	ldr	r3, [pc, #180]	; (800b4d0 <__mdiff+0x108>)
 800b41a:	4602      	mov	r2, r0
 800b41c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b420:	e7e6      	b.n	800b3f0 <__mdiff+0x28>
 800b422:	693e      	ldr	r6, [r7, #16]
 800b424:	60c5      	str	r5, [r0, #12]
 800b426:	6925      	ldr	r5, [r4, #16]
 800b428:	f107 0114 	add.w	r1, r7, #20
 800b42c:	f104 0914 	add.w	r9, r4, #20
 800b430:	f100 0e14 	add.w	lr, r0, #20
 800b434:	f107 0210 	add.w	r2, r7, #16
 800b438:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b43c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b440:	46f2      	mov	sl, lr
 800b442:	2700      	movs	r7, #0
 800b444:	f859 3b04 	ldr.w	r3, [r9], #4
 800b448:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b44c:	fa1f f883 	uxth.w	r8, r3
 800b450:	fa17 f78b 	uxtah	r7, r7, fp
 800b454:	0c1b      	lsrs	r3, r3, #16
 800b456:	eba7 0808 	sub.w	r8, r7, r8
 800b45a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b45e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b462:	fa1f f888 	uxth.w	r8, r8
 800b466:	141f      	asrs	r7, r3, #16
 800b468:	454d      	cmp	r5, r9
 800b46a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b46e:	f84a 3b04 	str.w	r3, [sl], #4
 800b472:	d8e7      	bhi.n	800b444 <__mdiff+0x7c>
 800b474:	1b2b      	subs	r3, r5, r4
 800b476:	3b15      	subs	r3, #21
 800b478:	f023 0303 	bic.w	r3, r3, #3
 800b47c:	3304      	adds	r3, #4
 800b47e:	3415      	adds	r4, #21
 800b480:	42a5      	cmp	r5, r4
 800b482:	bf38      	it	cc
 800b484:	2304      	movcc	r3, #4
 800b486:	4419      	add	r1, r3
 800b488:	4473      	add	r3, lr
 800b48a:	469e      	mov	lr, r3
 800b48c:	460d      	mov	r5, r1
 800b48e:	4565      	cmp	r5, ip
 800b490:	d30e      	bcc.n	800b4b0 <__mdiff+0xe8>
 800b492:	f10c 0203 	add.w	r2, ip, #3
 800b496:	1a52      	subs	r2, r2, r1
 800b498:	f022 0203 	bic.w	r2, r2, #3
 800b49c:	3903      	subs	r1, #3
 800b49e:	458c      	cmp	ip, r1
 800b4a0:	bf38      	it	cc
 800b4a2:	2200      	movcc	r2, #0
 800b4a4:	441a      	add	r2, r3
 800b4a6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b4aa:	b17b      	cbz	r3, 800b4cc <__mdiff+0x104>
 800b4ac:	6106      	str	r6, [r0, #16]
 800b4ae:	e7a5      	b.n	800b3fc <__mdiff+0x34>
 800b4b0:	f855 8b04 	ldr.w	r8, [r5], #4
 800b4b4:	fa17 f488 	uxtah	r4, r7, r8
 800b4b8:	1422      	asrs	r2, r4, #16
 800b4ba:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b4be:	b2a4      	uxth	r4, r4
 800b4c0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b4c4:	f84e 4b04 	str.w	r4, [lr], #4
 800b4c8:	1417      	asrs	r7, r2, #16
 800b4ca:	e7e0      	b.n	800b48e <__mdiff+0xc6>
 800b4cc:	3e01      	subs	r6, #1
 800b4ce:	e7ea      	b.n	800b4a6 <__mdiff+0xde>
 800b4d0:	0800dd07 	.word	0x0800dd07
 800b4d4:	0800dca7 	.word	0x0800dca7

0800b4d8 <__d2b>:
 800b4d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b4dc:	4689      	mov	r9, r1
 800b4de:	2101      	movs	r1, #1
 800b4e0:	ec57 6b10 	vmov	r6, r7, d0
 800b4e4:	4690      	mov	r8, r2
 800b4e6:	f7ff fcd5 	bl	800ae94 <_Balloc>
 800b4ea:	4604      	mov	r4, r0
 800b4ec:	b930      	cbnz	r0, 800b4fc <__d2b+0x24>
 800b4ee:	4602      	mov	r2, r0
 800b4f0:	4b25      	ldr	r3, [pc, #148]	; (800b588 <__d2b+0xb0>)
 800b4f2:	4826      	ldr	r0, [pc, #152]	; (800b58c <__d2b+0xb4>)
 800b4f4:	f240 310a 	movw	r1, #778	; 0x30a
 800b4f8:	f000 fbc2 	bl	800bc80 <__assert_func>
 800b4fc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b500:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b504:	bb35      	cbnz	r5, 800b554 <__d2b+0x7c>
 800b506:	2e00      	cmp	r6, #0
 800b508:	9301      	str	r3, [sp, #4]
 800b50a:	d028      	beq.n	800b55e <__d2b+0x86>
 800b50c:	4668      	mov	r0, sp
 800b50e:	9600      	str	r6, [sp, #0]
 800b510:	f7ff fd8c 	bl	800b02c <__lo0bits>
 800b514:	9900      	ldr	r1, [sp, #0]
 800b516:	b300      	cbz	r0, 800b55a <__d2b+0x82>
 800b518:	9a01      	ldr	r2, [sp, #4]
 800b51a:	f1c0 0320 	rsb	r3, r0, #32
 800b51e:	fa02 f303 	lsl.w	r3, r2, r3
 800b522:	430b      	orrs	r3, r1
 800b524:	40c2      	lsrs	r2, r0
 800b526:	6163      	str	r3, [r4, #20]
 800b528:	9201      	str	r2, [sp, #4]
 800b52a:	9b01      	ldr	r3, [sp, #4]
 800b52c:	61a3      	str	r3, [r4, #24]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	bf14      	ite	ne
 800b532:	2202      	movne	r2, #2
 800b534:	2201      	moveq	r2, #1
 800b536:	6122      	str	r2, [r4, #16]
 800b538:	b1d5      	cbz	r5, 800b570 <__d2b+0x98>
 800b53a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b53e:	4405      	add	r5, r0
 800b540:	f8c9 5000 	str.w	r5, [r9]
 800b544:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b548:	f8c8 0000 	str.w	r0, [r8]
 800b54c:	4620      	mov	r0, r4
 800b54e:	b003      	add	sp, #12
 800b550:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b558:	e7d5      	b.n	800b506 <__d2b+0x2e>
 800b55a:	6161      	str	r1, [r4, #20]
 800b55c:	e7e5      	b.n	800b52a <__d2b+0x52>
 800b55e:	a801      	add	r0, sp, #4
 800b560:	f7ff fd64 	bl	800b02c <__lo0bits>
 800b564:	9b01      	ldr	r3, [sp, #4]
 800b566:	6163      	str	r3, [r4, #20]
 800b568:	2201      	movs	r2, #1
 800b56a:	6122      	str	r2, [r4, #16]
 800b56c:	3020      	adds	r0, #32
 800b56e:	e7e3      	b.n	800b538 <__d2b+0x60>
 800b570:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b574:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b578:	f8c9 0000 	str.w	r0, [r9]
 800b57c:	6918      	ldr	r0, [r3, #16]
 800b57e:	f7ff fd35 	bl	800afec <__hi0bits>
 800b582:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b586:	e7df      	b.n	800b548 <__d2b+0x70>
 800b588:	0800dd07 	.word	0x0800dd07
 800b58c:	0800dca7 	.word	0x0800dca7

0800b590 <_mprec_log10>:
 800b590:	2817      	cmp	r0, #23
 800b592:	b5d0      	push	{r4, r6, r7, lr}
 800b594:	4604      	mov	r4, r0
 800b596:	dc07      	bgt.n	800b5a8 <_mprec_log10+0x18>
 800b598:	4809      	ldr	r0, [pc, #36]	; (800b5c0 <_mprec_log10+0x30>)
 800b59a:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800b59e:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b5a2:	ec41 0b10 	vmov	d0, r0, r1
 800b5a6:	bdd0      	pop	{r4, r6, r7, pc}
 800b5a8:	4906      	ldr	r1, [pc, #24]	; (800b5c4 <_mprec_log10+0x34>)
 800b5aa:	4f07      	ldr	r7, [pc, #28]	; (800b5c8 <_mprec_log10+0x38>)
 800b5ac:	2000      	movs	r0, #0
 800b5ae:	2600      	movs	r6, #0
 800b5b0:	4632      	mov	r2, r6
 800b5b2:	463b      	mov	r3, r7
 800b5b4:	f7f5 f820 	bl	80005f8 <__aeabi_dmul>
 800b5b8:	3c01      	subs	r4, #1
 800b5ba:	d1f9      	bne.n	800b5b0 <_mprec_log10+0x20>
 800b5bc:	e7f1      	b.n	800b5a2 <_mprec_log10+0x12>
 800b5be:	bf00      	nop
 800b5c0:	0800dd40 	.word	0x0800dd40
 800b5c4:	3ff00000 	.word	0x3ff00000
 800b5c8:	40240000 	.word	0x40240000

0800b5cc <_calloc_r>:
 800b5cc:	b513      	push	{r0, r1, r4, lr}
 800b5ce:	434a      	muls	r2, r1
 800b5d0:	4611      	mov	r1, r2
 800b5d2:	9201      	str	r2, [sp, #4]
 800b5d4:	f7fe ff5a 	bl	800a48c <_malloc_r>
 800b5d8:	4604      	mov	r4, r0
 800b5da:	b118      	cbz	r0, 800b5e4 <_calloc_r+0x18>
 800b5dc:	9a01      	ldr	r2, [sp, #4]
 800b5de:	2100      	movs	r1, #0
 800b5e0:	f7fe fefc 	bl	800a3dc <memset>
 800b5e4:	4620      	mov	r0, r4
 800b5e6:	b002      	add	sp, #8
 800b5e8:	bd10      	pop	{r4, pc}

0800b5ea <__sfputc_r>:
 800b5ea:	6893      	ldr	r3, [r2, #8]
 800b5ec:	3b01      	subs	r3, #1
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	b410      	push	{r4}
 800b5f2:	6093      	str	r3, [r2, #8]
 800b5f4:	da08      	bge.n	800b608 <__sfputc_r+0x1e>
 800b5f6:	6994      	ldr	r4, [r2, #24]
 800b5f8:	42a3      	cmp	r3, r4
 800b5fa:	db01      	blt.n	800b600 <__sfputc_r+0x16>
 800b5fc:	290a      	cmp	r1, #10
 800b5fe:	d103      	bne.n	800b608 <__sfputc_r+0x1e>
 800b600:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b604:	f7ff b822 	b.w	800a64c <__swbuf_r>
 800b608:	6813      	ldr	r3, [r2, #0]
 800b60a:	1c58      	adds	r0, r3, #1
 800b60c:	6010      	str	r0, [r2, #0]
 800b60e:	7019      	strb	r1, [r3, #0]
 800b610:	4608      	mov	r0, r1
 800b612:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b616:	4770      	bx	lr

0800b618 <__sfputs_r>:
 800b618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b61a:	4606      	mov	r6, r0
 800b61c:	460f      	mov	r7, r1
 800b61e:	4614      	mov	r4, r2
 800b620:	18d5      	adds	r5, r2, r3
 800b622:	42ac      	cmp	r4, r5
 800b624:	d101      	bne.n	800b62a <__sfputs_r+0x12>
 800b626:	2000      	movs	r0, #0
 800b628:	e007      	b.n	800b63a <__sfputs_r+0x22>
 800b62a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b62e:	463a      	mov	r2, r7
 800b630:	4630      	mov	r0, r6
 800b632:	f7ff ffda 	bl	800b5ea <__sfputc_r>
 800b636:	1c43      	adds	r3, r0, #1
 800b638:	d1f3      	bne.n	800b622 <__sfputs_r+0xa>
 800b63a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b63c <_vfiprintf_r>:
 800b63c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b640:	460d      	mov	r5, r1
 800b642:	b09d      	sub	sp, #116	; 0x74
 800b644:	4614      	mov	r4, r2
 800b646:	4698      	mov	r8, r3
 800b648:	4606      	mov	r6, r0
 800b64a:	b118      	cbz	r0, 800b654 <_vfiprintf_r+0x18>
 800b64c:	6983      	ldr	r3, [r0, #24]
 800b64e:	b90b      	cbnz	r3, 800b654 <_vfiprintf_r+0x18>
 800b650:	f7ff fb10 	bl	800ac74 <__sinit>
 800b654:	4b89      	ldr	r3, [pc, #548]	; (800b87c <_vfiprintf_r+0x240>)
 800b656:	429d      	cmp	r5, r3
 800b658:	d11b      	bne.n	800b692 <_vfiprintf_r+0x56>
 800b65a:	6875      	ldr	r5, [r6, #4]
 800b65c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b65e:	07d9      	lsls	r1, r3, #31
 800b660:	d405      	bmi.n	800b66e <_vfiprintf_r+0x32>
 800b662:	89ab      	ldrh	r3, [r5, #12]
 800b664:	059a      	lsls	r2, r3, #22
 800b666:	d402      	bmi.n	800b66e <_vfiprintf_r+0x32>
 800b668:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b66a:	f7ff fba1 	bl	800adb0 <__retarget_lock_acquire_recursive>
 800b66e:	89ab      	ldrh	r3, [r5, #12]
 800b670:	071b      	lsls	r3, r3, #28
 800b672:	d501      	bpl.n	800b678 <_vfiprintf_r+0x3c>
 800b674:	692b      	ldr	r3, [r5, #16]
 800b676:	b9eb      	cbnz	r3, 800b6b4 <_vfiprintf_r+0x78>
 800b678:	4629      	mov	r1, r5
 800b67a:	4630      	mov	r0, r6
 800b67c:	f7ff f838 	bl	800a6f0 <__swsetup_r>
 800b680:	b1c0      	cbz	r0, 800b6b4 <_vfiprintf_r+0x78>
 800b682:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b684:	07dc      	lsls	r4, r3, #31
 800b686:	d50e      	bpl.n	800b6a6 <_vfiprintf_r+0x6a>
 800b688:	f04f 30ff 	mov.w	r0, #4294967295
 800b68c:	b01d      	add	sp, #116	; 0x74
 800b68e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b692:	4b7b      	ldr	r3, [pc, #492]	; (800b880 <_vfiprintf_r+0x244>)
 800b694:	429d      	cmp	r5, r3
 800b696:	d101      	bne.n	800b69c <_vfiprintf_r+0x60>
 800b698:	68b5      	ldr	r5, [r6, #8]
 800b69a:	e7df      	b.n	800b65c <_vfiprintf_r+0x20>
 800b69c:	4b79      	ldr	r3, [pc, #484]	; (800b884 <_vfiprintf_r+0x248>)
 800b69e:	429d      	cmp	r5, r3
 800b6a0:	bf08      	it	eq
 800b6a2:	68f5      	ldreq	r5, [r6, #12]
 800b6a4:	e7da      	b.n	800b65c <_vfiprintf_r+0x20>
 800b6a6:	89ab      	ldrh	r3, [r5, #12]
 800b6a8:	0598      	lsls	r0, r3, #22
 800b6aa:	d4ed      	bmi.n	800b688 <_vfiprintf_r+0x4c>
 800b6ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6ae:	f7ff fb80 	bl	800adb2 <__retarget_lock_release_recursive>
 800b6b2:	e7e9      	b.n	800b688 <_vfiprintf_r+0x4c>
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	9309      	str	r3, [sp, #36]	; 0x24
 800b6b8:	2320      	movs	r3, #32
 800b6ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b6be:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6c2:	2330      	movs	r3, #48	; 0x30
 800b6c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b888 <_vfiprintf_r+0x24c>
 800b6c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b6cc:	f04f 0901 	mov.w	r9, #1
 800b6d0:	4623      	mov	r3, r4
 800b6d2:	469a      	mov	sl, r3
 800b6d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6d8:	b10a      	cbz	r2, 800b6de <_vfiprintf_r+0xa2>
 800b6da:	2a25      	cmp	r2, #37	; 0x25
 800b6dc:	d1f9      	bne.n	800b6d2 <_vfiprintf_r+0x96>
 800b6de:	ebba 0b04 	subs.w	fp, sl, r4
 800b6e2:	d00b      	beq.n	800b6fc <_vfiprintf_r+0xc0>
 800b6e4:	465b      	mov	r3, fp
 800b6e6:	4622      	mov	r2, r4
 800b6e8:	4629      	mov	r1, r5
 800b6ea:	4630      	mov	r0, r6
 800b6ec:	f7ff ff94 	bl	800b618 <__sfputs_r>
 800b6f0:	3001      	adds	r0, #1
 800b6f2:	f000 80aa 	beq.w	800b84a <_vfiprintf_r+0x20e>
 800b6f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6f8:	445a      	add	r2, fp
 800b6fa:	9209      	str	r2, [sp, #36]	; 0x24
 800b6fc:	f89a 3000 	ldrb.w	r3, [sl]
 800b700:	2b00      	cmp	r3, #0
 800b702:	f000 80a2 	beq.w	800b84a <_vfiprintf_r+0x20e>
 800b706:	2300      	movs	r3, #0
 800b708:	f04f 32ff 	mov.w	r2, #4294967295
 800b70c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b710:	f10a 0a01 	add.w	sl, sl, #1
 800b714:	9304      	str	r3, [sp, #16]
 800b716:	9307      	str	r3, [sp, #28]
 800b718:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b71c:	931a      	str	r3, [sp, #104]	; 0x68
 800b71e:	4654      	mov	r4, sl
 800b720:	2205      	movs	r2, #5
 800b722:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b726:	4858      	ldr	r0, [pc, #352]	; (800b888 <_vfiprintf_r+0x24c>)
 800b728:	f7f4 fd5a 	bl	80001e0 <memchr>
 800b72c:	9a04      	ldr	r2, [sp, #16]
 800b72e:	b9d8      	cbnz	r0, 800b768 <_vfiprintf_r+0x12c>
 800b730:	06d1      	lsls	r1, r2, #27
 800b732:	bf44      	itt	mi
 800b734:	2320      	movmi	r3, #32
 800b736:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b73a:	0713      	lsls	r3, r2, #28
 800b73c:	bf44      	itt	mi
 800b73e:	232b      	movmi	r3, #43	; 0x2b
 800b740:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b744:	f89a 3000 	ldrb.w	r3, [sl]
 800b748:	2b2a      	cmp	r3, #42	; 0x2a
 800b74a:	d015      	beq.n	800b778 <_vfiprintf_r+0x13c>
 800b74c:	9a07      	ldr	r2, [sp, #28]
 800b74e:	4654      	mov	r4, sl
 800b750:	2000      	movs	r0, #0
 800b752:	f04f 0c0a 	mov.w	ip, #10
 800b756:	4621      	mov	r1, r4
 800b758:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b75c:	3b30      	subs	r3, #48	; 0x30
 800b75e:	2b09      	cmp	r3, #9
 800b760:	d94e      	bls.n	800b800 <_vfiprintf_r+0x1c4>
 800b762:	b1b0      	cbz	r0, 800b792 <_vfiprintf_r+0x156>
 800b764:	9207      	str	r2, [sp, #28]
 800b766:	e014      	b.n	800b792 <_vfiprintf_r+0x156>
 800b768:	eba0 0308 	sub.w	r3, r0, r8
 800b76c:	fa09 f303 	lsl.w	r3, r9, r3
 800b770:	4313      	orrs	r3, r2
 800b772:	9304      	str	r3, [sp, #16]
 800b774:	46a2      	mov	sl, r4
 800b776:	e7d2      	b.n	800b71e <_vfiprintf_r+0xe2>
 800b778:	9b03      	ldr	r3, [sp, #12]
 800b77a:	1d19      	adds	r1, r3, #4
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	9103      	str	r1, [sp, #12]
 800b780:	2b00      	cmp	r3, #0
 800b782:	bfbb      	ittet	lt
 800b784:	425b      	neglt	r3, r3
 800b786:	f042 0202 	orrlt.w	r2, r2, #2
 800b78a:	9307      	strge	r3, [sp, #28]
 800b78c:	9307      	strlt	r3, [sp, #28]
 800b78e:	bfb8      	it	lt
 800b790:	9204      	strlt	r2, [sp, #16]
 800b792:	7823      	ldrb	r3, [r4, #0]
 800b794:	2b2e      	cmp	r3, #46	; 0x2e
 800b796:	d10c      	bne.n	800b7b2 <_vfiprintf_r+0x176>
 800b798:	7863      	ldrb	r3, [r4, #1]
 800b79a:	2b2a      	cmp	r3, #42	; 0x2a
 800b79c:	d135      	bne.n	800b80a <_vfiprintf_r+0x1ce>
 800b79e:	9b03      	ldr	r3, [sp, #12]
 800b7a0:	1d1a      	adds	r2, r3, #4
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	9203      	str	r2, [sp, #12]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	bfb8      	it	lt
 800b7aa:	f04f 33ff 	movlt.w	r3, #4294967295
 800b7ae:	3402      	adds	r4, #2
 800b7b0:	9305      	str	r3, [sp, #20]
 800b7b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b898 <_vfiprintf_r+0x25c>
 800b7b6:	7821      	ldrb	r1, [r4, #0]
 800b7b8:	2203      	movs	r2, #3
 800b7ba:	4650      	mov	r0, sl
 800b7bc:	f7f4 fd10 	bl	80001e0 <memchr>
 800b7c0:	b140      	cbz	r0, 800b7d4 <_vfiprintf_r+0x198>
 800b7c2:	2340      	movs	r3, #64	; 0x40
 800b7c4:	eba0 000a 	sub.w	r0, r0, sl
 800b7c8:	fa03 f000 	lsl.w	r0, r3, r0
 800b7cc:	9b04      	ldr	r3, [sp, #16]
 800b7ce:	4303      	orrs	r3, r0
 800b7d0:	3401      	adds	r4, #1
 800b7d2:	9304      	str	r3, [sp, #16]
 800b7d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7d8:	482c      	ldr	r0, [pc, #176]	; (800b88c <_vfiprintf_r+0x250>)
 800b7da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b7de:	2206      	movs	r2, #6
 800b7e0:	f7f4 fcfe 	bl	80001e0 <memchr>
 800b7e4:	2800      	cmp	r0, #0
 800b7e6:	d03f      	beq.n	800b868 <_vfiprintf_r+0x22c>
 800b7e8:	4b29      	ldr	r3, [pc, #164]	; (800b890 <_vfiprintf_r+0x254>)
 800b7ea:	bb1b      	cbnz	r3, 800b834 <_vfiprintf_r+0x1f8>
 800b7ec:	9b03      	ldr	r3, [sp, #12]
 800b7ee:	3307      	adds	r3, #7
 800b7f0:	f023 0307 	bic.w	r3, r3, #7
 800b7f4:	3308      	adds	r3, #8
 800b7f6:	9303      	str	r3, [sp, #12]
 800b7f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7fa:	443b      	add	r3, r7
 800b7fc:	9309      	str	r3, [sp, #36]	; 0x24
 800b7fe:	e767      	b.n	800b6d0 <_vfiprintf_r+0x94>
 800b800:	fb0c 3202 	mla	r2, ip, r2, r3
 800b804:	460c      	mov	r4, r1
 800b806:	2001      	movs	r0, #1
 800b808:	e7a5      	b.n	800b756 <_vfiprintf_r+0x11a>
 800b80a:	2300      	movs	r3, #0
 800b80c:	3401      	adds	r4, #1
 800b80e:	9305      	str	r3, [sp, #20]
 800b810:	4619      	mov	r1, r3
 800b812:	f04f 0c0a 	mov.w	ip, #10
 800b816:	4620      	mov	r0, r4
 800b818:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b81c:	3a30      	subs	r2, #48	; 0x30
 800b81e:	2a09      	cmp	r2, #9
 800b820:	d903      	bls.n	800b82a <_vfiprintf_r+0x1ee>
 800b822:	2b00      	cmp	r3, #0
 800b824:	d0c5      	beq.n	800b7b2 <_vfiprintf_r+0x176>
 800b826:	9105      	str	r1, [sp, #20]
 800b828:	e7c3      	b.n	800b7b2 <_vfiprintf_r+0x176>
 800b82a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b82e:	4604      	mov	r4, r0
 800b830:	2301      	movs	r3, #1
 800b832:	e7f0      	b.n	800b816 <_vfiprintf_r+0x1da>
 800b834:	ab03      	add	r3, sp, #12
 800b836:	9300      	str	r3, [sp, #0]
 800b838:	462a      	mov	r2, r5
 800b83a:	4b16      	ldr	r3, [pc, #88]	; (800b894 <_vfiprintf_r+0x258>)
 800b83c:	a904      	add	r1, sp, #16
 800b83e:	4630      	mov	r0, r6
 800b840:	f3af 8000 	nop.w
 800b844:	4607      	mov	r7, r0
 800b846:	1c78      	adds	r0, r7, #1
 800b848:	d1d6      	bne.n	800b7f8 <_vfiprintf_r+0x1bc>
 800b84a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b84c:	07d9      	lsls	r1, r3, #31
 800b84e:	d405      	bmi.n	800b85c <_vfiprintf_r+0x220>
 800b850:	89ab      	ldrh	r3, [r5, #12]
 800b852:	059a      	lsls	r2, r3, #22
 800b854:	d402      	bmi.n	800b85c <_vfiprintf_r+0x220>
 800b856:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b858:	f7ff faab 	bl	800adb2 <__retarget_lock_release_recursive>
 800b85c:	89ab      	ldrh	r3, [r5, #12]
 800b85e:	065b      	lsls	r3, r3, #25
 800b860:	f53f af12 	bmi.w	800b688 <_vfiprintf_r+0x4c>
 800b864:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b866:	e711      	b.n	800b68c <_vfiprintf_r+0x50>
 800b868:	ab03      	add	r3, sp, #12
 800b86a:	9300      	str	r3, [sp, #0]
 800b86c:	462a      	mov	r2, r5
 800b86e:	4b09      	ldr	r3, [pc, #36]	; (800b894 <_vfiprintf_r+0x258>)
 800b870:	a904      	add	r1, sp, #16
 800b872:	4630      	mov	r0, r6
 800b874:	f000 f880 	bl	800b978 <_printf_i>
 800b878:	e7e4      	b.n	800b844 <_vfiprintf_r+0x208>
 800b87a:	bf00      	nop
 800b87c:	0800dc50 	.word	0x0800dc50
 800b880:	0800dc70 	.word	0x0800dc70
 800b884:	0800dc30 	.word	0x0800dc30
 800b888:	0800de14 	.word	0x0800de14
 800b88c:	0800de1e 	.word	0x0800de1e
 800b890:	00000000 	.word	0x00000000
 800b894:	0800b619 	.word	0x0800b619
 800b898:	0800de1a 	.word	0x0800de1a

0800b89c <_printf_common>:
 800b89c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8a0:	4616      	mov	r6, r2
 800b8a2:	4699      	mov	r9, r3
 800b8a4:	688a      	ldr	r2, [r1, #8]
 800b8a6:	690b      	ldr	r3, [r1, #16]
 800b8a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	bfb8      	it	lt
 800b8b0:	4613      	movlt	r3, r2
 800b8b2:	6033      	str	r3, [r6, #0]
 800b8b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b8b8:	4607      	mov	r7, r0
 800b8ba:	460c      	mov	r4, r1
 800b8bc:	b10a      	cbz	r2, 800b8c2 <_printf_common+0x26>
 800b8be:	3301      	adds	r3, #1
 800b8c0:	6033      	str	r3, [r6, #0]
 800b8c2:	6823      	ldr	r3, [r4, #0]
 800b8c4:	0699      	lsls	r1, r3, #26
 800b8c6:	bf42      	ittt	mi
 800b8c8:	6833      	ldrmi	r3, [r6, #0]
 800b8ca:	3302      	addmi	r3, #2
 800b8cc:	6033      	strmi	r3, [r6, #0]
 800b8ce:	6825      	ldr	r5, [r4, #0]
 800b8d0:	f015 0506 	ands.w	r5, r5, #6
 800b8d4:	d106      	bne.n	800b8e4 <_printf_common+0x48>
 800b8d6:	f104 0a19 	add.w	sl, r4, #25
 800b8da:	68e3      	ldr	r3, [r4, #12]
 800b8dc:	6832      	ldr	r2, [r6, #0]
 800b8de:	1a9b      	subs	r3, r3, r2
 800b8e0:	42ab      	cmp	r3, r5
 800b8e2:	dc26      	bgt.n	800b932 <_printf_common+0x96>
 800b8e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b8e8:	1e13      	subs	r3, r2, #0
 800b8ea:	6822      	ldr	r2, [r4, #0]
 800b8ec:	bf18      	it	ne
 800b8ee:	2301      	movne	r3, #1
 800b8f0:	0692      	lsls	r2, r2, #26
 800b8f2:	d42b      	bmi.n	800b94c <_printf_common+0xb0>
 800b8f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b8f8:	4649      	mov	r1, r9
 800b8fa:	4638      	mov	r0, r7
 800b8fc:	47c0      	blx	r8
 800b8fe:	3001      	adds	r0, #1
 800b900:	d01e      	beq.n	800b940 <_printf_common+0xa4>
 800b902:	6823      	ldr	r3, [r4, #0]
 800b904:	68e5      	ldr	r5, [r4, #12]
 800b906:	6832      	ldr	r2, [r6, #0]
 800b908:	f003 0306 	and.w	r3, r3, #6
 800b90c:	2b04      	cmp	r3, #4
 800b90e:	bf08      	it	eq
 800b910:	1aad      	subeq	r5, r5, r2
 800b912:	68a3      	ldr	r3, [r4, #8]
 800b914:	6922      	ldr	r2, [r4, #16]
 800b916:	bf0c      	ite	eq
 800b918:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b91c:	2500      	movne	r5, #0
 800b91e:	4293      	cmp	r3, r2
 800b920:	bfc4      	itt	gt
 800b922:	1a9b      	subgt	r3, r3, r2
 800b924:	18ed      	addgt	r5, r5, r3
 800b926:	2600      	movs	r6, #0
 800b928:	341a      	adds	r4, #26
 800b92a:	42b5      	cmp	r5, r6
 800b92c:	d11a      	bne.n	800b964 <_printf_common+0xc8>
 800b92e:	2000      	movs	r0, #0
 800b930:	e008      	b.n	800b944 <_printf_common+0xa8>
 800b932:	2301      	movs	r3, #1
 800b934:	4652      	mov	r2, sl
 800b936:	4649      	mov	r1, r9
 800b938:	4638      	mov	r0, r7
 800b93a:	47c0      	blx	r8
 800b93c:	3001      	adds	r0, #1
 800b93e:	d103      	bne.n	800b948 <_printf_common+0xac>
 800b940:	f04f 30ff 	mov.w	r0, #4294967295
 800b944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b948:	3501      	adds	r5, #1
 800b94a:	e7c6      	b.n	800b8da <_printf_common+0x3e>
 800b94c:	18e1      	adds	r1, r4, r3
 800b94e:	1c5a      	adds	r2, r3, #1
 800b950:	2030      	movs	r0, #48	; 0x30
 800b952:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b956:	4422      	add	r2, r4
 800b958:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b95c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b960:	3302      	adds	r3, #2
 800b962:	e7c7      	b.n	800b8f4 <_printf_common+0x58>
 800b964:	2301      	movs	r3, #1
 800b966:	4622      	mov	r2, r4
 800b968:	4649      	mov	r1, r9
 800b96a:	4638      	mov	r0, r7
 800b96c:	47c0      	blx	r8
 800b96e:	3001      	adds	r0, #1
 800b970:	d0e6      	beq.n	800b940 <_printf_common+0xa4>
 800b972:	3601      	adds	r6, #1
 800b974:	e7d9      	b.n	800b92a <_printf_common+0x8e>
	...

0800b978 <_printf_i>:
 800b978:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b97c:	460c      	mov	r4, r1
 800b97e:	4691      	mov	r9, r2
 800b980:	7e27      	ldrb	r7, [r4, #24]
 800b982:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b984:	2f78      	cmp	r7, #120	; 0x78
 800b986:	4680      	mov	r8, r0
 800b988:	469a      	mov	sl, r3
 800b98a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b98e:	d807      	bhi.n	800b9a0 <_printf_i+0x28>
 800b990:	2f62      	cmp	r7, #98	; 0x62
 800b992:	d80a      	bhi.n	800b9aa <_printf_i+0x32>
 800b994:	2f00      	cmp	r7, #0
 800b996:	f000 80d8 	beq.w	800bb4a <_printf_i+0x1d2>
 800b99a:	2f58      	cmp	r7, #88	; 0x58
 800b99c:	f000 80a3 	beq.w	800bae6 <_printf_i+0x16e>
 800b9a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b9a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b9a8:	e03a      	b.n	800ba20 <_printf_i+0xa8>
 800b9aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b9ae:	2b15      	cmp	r3, #21
 800b9b0:	d8f6      	bhi.n	800b9a0 <_printf_i+0x28>
 800b9b2:	a001      	add	r0, pc, #4	; (adr r0, 800b9b8 <_printf_i+0x40>)
 800b9b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b9b8:	0800ba11 	.word	0x0800ba11
 800b9bc:	0800ba25 	.word	0x0800ba25
 800b9c0:	0800b9a1 	.word	0x0800b9a1
 800b9c4:	0800b9a1 	.word	0x0800b9a1
 800b9c8:	0800b9a1 	.word	0x0800b9a1
 800b9cc:	0800b9a1 	.word	0x0800b9a1
 800b9d0:	0800ba25 	.word	0x0800ba25
 800b9d4:	0800b9a1 	.word	0x0800b9a1
 800b9d8:	0800b9a1 	.word	0x0800b9a1
 800b9dc:	0800b9a1 	.word	0x0800b9a1
 800b9e0:	0800b9a1 	.word	0x0800b9a1
 800b9e4:	0800bb31 	.word	0x0800bb31
 800b9e8:	0800ba55 	.word	0x0800ba55
 800b9ec:	0800bb13 	.word	0x0800bb13
 800b9f0:	0800b9a1 	.word	0x0800b9a1
 800b9f4:	0800b9a1 	.word	0x0800b9a1
 800b9f8:	0800bb53 	.word	0x0800bb53
 800b9fc:	0800b9a1 	.word	0x0800b9a1
 800ba00:	0800ba55 	.word	0x0800ba55
 800ba04:	0800b9a1 	.word	0x0800b9a1
 800ba08:	0800b9a1 	.word	0x0800b9a1
 800ba0c:	0800bb1b 	.word	0x0800bb1b
 800ba10:	680b      	ldr	r3, [r1, #0]
 800ba12:	1d1a      	adds	r2, r3, #4
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	600a      	str	r2, [r1, #0]
 800ba18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ba1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ba20:	2301      	movs	r3, #1
 800ba22:	e0a3      	b.n	800bb6c <_printf_i+0x1f4>
 800ba24:	6825      	ldr	r5, [r4, #0]
 800ba26:	6808      	ldr	r0, [r1, #0]
 800ba28:	062e      	lsls	r6, r5, #24
 800ba2a:	f100 0304 	add.w	r3, r0, #4
 800ba2e:	d50a      	bpl.n	800ba46 <_printf_i+0xce>
 800ba30:	6805      	ldr	r5, [r0, #0]
 800ba32:	600b      	str	r3, [r1, #0]
 800ba34:	2d00      	cmp	r5, #0
 800ba36:	da03      	bge.n	800ba40 <_printf_i+0xc8>
 800ba38:	232d      	movs	r3, #45	; 0x2d
 800ba3a:	426d      	negs	r5, r5
 800ba3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba40:	485e      	ldr	r0, [pc, #376]	; (800bbbc <_printf_i+0x244>)
 800ba42:	230a      	movs	r3, #10
 800ba44:	e019      	b.n	800ba7a <_printf_i+0x102>
 800ba46:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ba4a:	6805      	ldr	r5, [r0, #0]
 800ba4c:	600b      	str	r3, [r1, #0]
 800ba4e:	bf18      	it	ne
 800ba50:	b22d      	sxthne	r5, r5
 800ba52:	e7ef      	b.n	800ba34 <_printf_i+0xbc>
 800ba54:	680b      	ldr	r3, [r1, #0]
 800ba56:	6825      	ldr	r5, [r4, #0]
 800ba58:	1d18      	adds	r0, r3, #4
 800ba5a:	6008      	str	r0, [r1, #0]
 800ba5c:	0628      	lsls	r0, r5, #24
 800ba5e:	d501      	bpl.n	800ba64 <_printf_i+0xec>
 800ba60:	681d      	ldr	r5, [r3, #0]
 800ba62:	e002      	b.n	800ba6a <_printf_i+0xf2>
 800ba64:	0669      	lsls	r1, r5, #25
 800ba66:	d5fb      	bpl.n	800ba60 <_printf_i+0xe8>
 800ba68:	881d      	ldrh	r5, [r3, #0]
 800ba6a:	4854      	ldr	r0, [pc, #336]	; (800bbbc <_printf_i+0x244>)
 800ba6c:	2f6f      	cmp	r7, #111	; 0x6f
 800ba6e:	bf0c      	ite	eq
 800ba70:	2308      	moveq	r3, #8
 800ba72:	230a      	movne	r3, #10
 800ba74:	2100      	movs	r1, #0
 800ba76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ba7a:	6866      	ldr	r6, [r4, #4]
 800ba7c:	60a6      	str	r6, [r4, #8]
 800ba7e:	2e00      	cmp	r6, #0
 800ba80:	bfa2      	ittt	ge
 800ba82:	6821      	ldrge	r1, [r4, #0]
 800ba84:	f021 0104 	bicge.w	r1, r1, #4
 800ba88:	6021      	strge	r1, [r4, #0]
 800ba8a:	b90d      	cbnz	r5, 800ba90 <_printf_i+0x118>
 800ba8c:	2e00      	cmp	r6, #0
 800ba8e:	d04d      	beq.n	800bb2c <_printf_i+0x1b4>
 800ba90:	4616      	mov	r6, r2
 800ba92:	fbb5 f1f3 	udiv	r1, r5, r3
 800ba96:	fb03 5711 	mls	r7, r3, r1, r5
 800ba9a:	5dc7      	ldrb	r7, [r0, r7]
 800ba9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800baa0:	462f      	mov	r7, r5
 800baa2:	42bb      	cmp	r3, r7
 800baa4:	460d      	mov	r5, r1
 800baa6:	d9f4      	bls.n	800ba92 <_printf_i+0x11a>
 800baa8:	2b08      	cmp	r3, #8
 800baaa:	d10b      	bne.n	800bac4 <_printf_i+0x14c>
 800baac:	6823      	ldr	r3, [r4, #0]
 800baae:	07df      	lsls	r7, r3, #31
 800bab0:	d508      	bpl.n	800bac4 <_printf_i+0x14c>
 800bab2:	6923      	ldr	r3, [r4, #16]
 800bab4:	6861      	ldr	r1, [r4, #4]
 800bab6:	4299      	cmp	r1, r3
 800bab8:	bfde      	ittt	le
 800baba:	2330      	movle	r3, #48	; 0x30
 800babc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bac0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bac4:	1b92      	subs	r2, r2, r6
 800bac6:	6122      	str	r2, [r4, #16]
 800bac8:	f8cd a000 	str.w	sl, [sp]
 800bacc:	464b      	mov	r3, r9
 800bace:	aa03      	add	r2, sp, #12
 800bad0:	4621      	mov	r1, r4
 800bad2:	4640      	mov	r0, r8
 800bad4:	f7ff fee2 	bl	800b89c <_printf_common>
 800bad8:	3001      	adds	r0, #1
 800bada:	d14c      	bne.n	800bb76 <_printf_i+0x1fe>
 800badc:	f04f 30ff 	mov.w	r0, #4294967295
 800bae0:	b004      	add	sp, #16
 800bae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bae6:	4835      	ldr	r0, [pc, #212]	; (800bbbc <_printf_i+0x244>)
 800bae8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800baec:	6823      	ldr	r3, [r4, #0]
 800baee:	680e      	ldr	r6, [r1, #0]
 800baf0:	061f      	lsls	r7, r3, #24
 800baf2:	f856 5b04 	ldr.w	r5, [r6], #4
 800baf6:	600e      	str	r6, [r1, #0]
 800baf8:	d514      	bpl.n	800bb24 <_printf_i+0x1ac>
 800bafa:	07d9      	lsls	r1, r3, #31
 800bafc:	bf44      	itt	mi
 800bafe:	f043 0320 	orrmi.w	r3, r3, #32
 800bb02:	6023      	strmi	r3, [r4, #0]
 800bb04:	b91d      	cbnz	r5, 800bb0e <_printf_i+0x196>
 800bb06:	6823      	ldr	r3, [r4, #0]
 800bb08:	f023 0320 	bic.w	r3, r3, #32
 800bb0c:	6023      	str	r3, [r4, #0]
 800bb0e:	2310      	movs	r3, #16
 800bb10:	e7b0      	b.n	800ba74 <_printf_i+0xfc>
 800bb12:	6823      	ldr	r3, [r4, #0]
 800bb14:	f043 0320 	orr.w	r3, r3, #32
 800bb18:	6023      	str	r3, [r4, #0]
 800bb1a:	2378      	movs	r3, #120	; 0x78
 800bb1c:	4828      	ldr	r0, [pc, #160]	; (800bbc0 <_printf_i+0x248>)
 800bb1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bb22:	e7e3      	b.n	800baec <_printf_i+0x174>
 800bb24:	065e      	lsls	r6, r3, #25
 800bb26:	bf48      	it	mi
 800bb28:	b2ad      	uxthmi	r5, r5
 800bb2a:	e7e6      	b.n	800bafa <_printf_i+0x182>
 800bb2c:	4616      	mov	r6, r2
 800bb2e:	e7bb      	b.n	800baa8 <_printf_i+0x130>
 800bb30:	680b      	ldr	r3, [r1, #0]
 800bb32:	6826      	ldr	r6, [r4, #0]
 800bb34:	6960      	ldr	r0, [r4, #20]
 800bb36:	1d1d      	adds	r5, r3, #4
 800bb38:	600d      	str	r5, [r1, #0]
 800bb3a:	0635      	lsls	r5, r6, #24
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	d501      	bpl.n	800bb44 <_printf_i+0x1cc>
 800bb40:	6018      	str	r0, [r3, #0]
 800bb42:	e002      	b.n	800bb4a <_printf_i+0x1d2>
 800bb44:	0671      	lsls	r1, r6, #25
 800bb46:	d5fb      	bpl.n	800bb40 <_printf_i+0x1c8>
 800bb48:	8018      	strh	r0, [r3, #0]
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	6123      	str	r3, [r4, #16]
 800bb4e:	4616      	mov	r6, r2
 800bb50:	e7ba      	b.n	800bac8 <_printf_i+0x150>
 800bb52:	680b      	ldr	r3, [r1, #0]
 800bb54:	1d1a      	adds	r2, r3, #4
 800bb56:	600a      	str	r2, [r1, #0]
 800bb58:	681e      	ldr	r6, [r3, #0]
 800bb5a:	6862      	ldr	r2, [r4, #4]
 800bb5c:	2100      	movs	r1, #0
 800bb5e:	4630      	mov	r0, r6
 800bb60:	f7f4 fb3e 	bl	80001e0 <memchr>
 800bb64:	b108      	cbz	r0, 800bb6a <_printf_i+0x1f2>
 800bb66:	1b80      	subs	r0, r0, r6
 800bb68:	6060      	str	r0, [r4, #4]
 800bb6a:	6863      	ldr	r3, [r4, #4]
 800bb6c:	6123      	str	r3, [r4, #16]
 800bb6e:	2300      	movs	r3, #0
 800bb70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb74:	e7a8      	b.n	800bac8 <_printf_i+0x150>
 800bb76:	6923      	ldr	r3, [r4, #16]
 800bb78:	4632      	mov	r2, r6
 800bb7a:	4649      	mov	r1, r9
 800bb7c:	4640      	mov	r0, r8
 800bb7e:	47d0      	blx	sl
 800bb80:	3001      	adds	r0, #1
 800bb82:	d0ab      	beq.n	800badc <_printf_i+0x164>
 800bb84:	6823      	ldr	r3, [r4, #0]
 800bb86:	079b      	lsls	r3, r3, #30
 800bb88:	d413      	bmi.n	800bbb2 <_printf_i+0x23a>
 800bb8a:	68e0      	ldr	r0, [r4, #12]
 800bb8c:	9b03      	ldr	r3, [sp, #12]
 800bb8e:	4298      	cmp	r0, r3
 800bb90:	bfb8      	it	lt
 800bb92:	4618      	movlt	r0, r3
 800bb94:	e7a4      	b.n	800bae0 <_printf_i+0x168>
 800bb96:	2301      	movs	r3, #1
 800bb98:	4632      	mov	r2, r6
 800bb9a:	4649      	mov	r1, r9
 800bb9c:	4640      	mov	r0, r8
 800bb9e:	47d0      	blx	sl
 800bba0:	3001      	adds	r0, #1
 800bba2:	d09b      	beq.n	800badc <_printf_i+0x164>
 800bba4:	3501      	adds	r5, #1
 800bba6:	68e3      	ldr	r3, [r4, #12]
 800bba8:	9903      	ldr	r1, [sp, #12]
 800bbaa:	1a5b      	subs	r3, r3, r1
 800bbac:	42ab      	cmp	r3, r5
 800bbae:	dcf2      	bgt.n	800bb96 <_printf_i+0x21e>
 800bbb0:	e7eb      	b.n	800bb8a <_printf_i+0x212>
 800bbb2:	2500      	movs	r5, #0
 800bbb4:	f104 0619 	add.w	r6, r4, #25
 800bbb8:	e7f5      	b.n	800bba6 <_printf_i+0x22e>
 800bbba:	bf00      	nop
 800bbbc:	0800de25 	.word	0x0800de25
 800bbc0:	0800de36 	.word	0x0800de36

0800bbc4 <__sread>:
 800bbc4:	b510      	push	{r4, lr}
 800bbc6:	460c      	mov	r4, r1
 800bbc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbcc:	f000 ff46 	bl	800ca5c <_read_r>
 800bbd0:	2800      	cmp	r0, #0
 800bbd2:	bfab      	itete	ge
 800bbd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bbd6:	89a3      	ldrhlt	r3, [r4, #12]
 800bbd8:	181b      	addge	r3, r3, r0
 800bbda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bbde:	bfac      	ite	ge
 800bbe0:	6563      	strge	r3, [r4, #84]	; 0x54
 800bbe2:	81a3      	strhlt	r3, [r4, #12]
 800bbe4:	bd10      	pop	{r4, pc}

0800bbe6 <__swrite>:
 800bbe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbea:	461f      	mov	r7, r3
 800bbec:	898b      	ldrh	r3, [r1, #12]
 800bbee:	05db      	lsls	r3, r3, #23
 800bbf0:	4605      	mov	r5, r0
 800bbf2:	460c      	mov	r4, r1
 800bbf4:	4616      	mov	r6, r2
 800bbf6:	d505      	bpl.n	800bc04 <__swrite+0x1e>
 800bbf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbfc:	2302      	movs	r3, #2
 800bbfe:	2200      	movs	r2, #0
 800bc00:	f000 ff1a 	bl	800ca38 <_lseek_r>
 800bc04:	89a3      	ldrh	r3, [r4, #12]
 800bc06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc0e:	81a3      	strh	r3, [r4, #12]
 800bc10:	4632      	mov	r2, r6
 800bc12:	463b      	mov	r3, r7
 800bc14:	4628      	mov	r0, r5
 800bc16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc1a:	f000 b81f 	b.w	800bc5c <_write_r>

0800bc1e <__sseek>:
 800bc1e:	b510      	push	{r4, lr}
 800bc20:	460c      	mov	r4, r1
 800bc22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc26:	f000 ff07 	bl	800ca38 <_lseek_r>
 800bc2a:	1c43      	adds	r3, r0, #1
 800bc2c:	89a3      	ldrh	r3, [r4, #12]
 800bc2e:	bf15      	itete	ne
 800bc30:	6560      	strne	r0, [r4, #84]	; 0x54
 800bc32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bc36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bc3a:	81a3      	strheq	r3, [r4, #12]
 800bc3c:	bf18      	it	ne
 800bc3e:	81a3      	strhne	r3, [r4, #12]
 800bc40:	bd10      	pop	{r4, pc}

0800bc42 <__sclose>:
 800bc42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc46:	f000 b839 	b.w	800bcbc <_close_r>

0800bc4a <strcpy>:
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc50:	f803 2b01 	strb.w	r2, [r3], #1
 800bc54:	2a00      	cmp	r2, #0
 800bc56:	d1f9      	bne.n	800bc4c <strcpy+0x2>
 800bc58:	4770      	bx	lr
	...

0800bc5c <_write_r>:
 800bc5c:	b538      	push	{r3, r4, r5, lr}
 800bc5e:	4d07      	ldr	r5, [pc, #28]	; (800bc7c <_write_r+0x20>)
 800bc60:	4604      	mov	r4, r0
 800bc62:	4608      	mov	r0, r1
 800bc64:	4611      	mov	r1, r2
 800bc66:	2200      	movs	r2, #0
 800bc68:	602a      	str	r2, [r5, #0]
 800bc6a:	461a      	mov	r2, r3
 800bc6c:	f7f8 f8c3 	bl	8003df6 <_write>
 800bc70:	1c43      	adds	r3, r0, #1
 800bc72:	d102      	bne.n	800bc7a <_write_r+0x1e>
 800bc74:	682b      	ldr	r3, [r5, #0]
 800bc76:	b103      	cbz	r3, 800bc7a <_write_r+0x1e>
 800bc78:	6023      	str	r3, [r4, #0]
 800bc7a:	bd38      	pop	{r3, r4, r5, pc}
 800bc7c:	200051f0 	.word	0x200051f0

0800bc80 <__assert_func>:
 800bc80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bc82:	4614      	mov	r4, r2
 800bc84:	461a      	mov	r2, r3
 800bc86:	4b09      	ldr	r3, [pc, #36]	; (800bcac <__assert_func+0x2c>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	4605      	mov	r5, r0
 800bc8c:	68d8      	ldr	r0, [r3, #12]
 800bc8e:	b14c      	cbz	r4, 800bca4 <__assert_func+0x24>
 800bc90:	4b07      	ldr	r3, [pc, #28]	; (800bcb0 <__assert_func+0x30>)
 800bc92:	9100      	str	r1, [sp, #0]
 800bc94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bc98:	4906      	ldr	r1, [pc, #24]	; (800bcb4 <__assert_func+0x34>)
 800bc9a:	462b      	mov	r3, r5
 800bc9c:	f000 fe98 	bl	800c9d0 <fiprintf>
 800bca0:	f000 feee 	bl	800ca80 <abort>
 800bca4:	4b04      	ldr	r3, [pc, #16]	; (800bcb8 <__assert_func+0x38>)
 800bca6:	461c      	mov	r4, r3
 800bca8:	e7f3      	b.n	800bc92 <__assert_func+0x12>
 800bcaa:	bf00      	nop
 800bcac:	20000018 	.word	0x20000018
 800bcb0:	0800de47 	.word	0x0800de47
 800bcb4:	0800de54 	.word	0x0800de54
 800bcb8:	0800de82 	.word	0x0800de82

0800bcbc <_close_r>:
 800bcbc:	b538      	push	{r3, r4, r5, lr}
 800bcbe:	4d06      	ldr	r5, [pc, #24]	; (800bcd8 <_close_r+0x1c>)
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	4604      	mov	r4, r0
 800bcc4:	4608      	mov	r0, r1
 800bcc6:	602b      	str	r3, [r5, #0]
 800bcc8:	f7f8 f8b1 	bl	8003e2e <_close>
 800bccc:	1c43      	adds	r3, r0, #1
 800bcce:	d102      	bne.n	800bcd6 <_close_r+0x1a>
 800bcd0:	682b      	ldr	r3, [r5, #0]
 800bcd2:	b103      	cbz	r3, 800bcd6 <_close_r+0x1a>
 800bcd4:	6023      	str	r3, [r4, #0]
 800bcd6:	bd38      	pop	{r3, r4, r5, pc}
 800bcd8:	200051f0 	.word	0x200051f0

0800bcdc <quorem>:
 800bcdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bce0:	6903      	ldr	r3, [r0, #16]
 800bce2:	690c      	ldr	r4, [r1, #16]
 800bce4:	42a3      	cmp	r3, r4
 800bce6:	4607      	mov	r7, r0
 800bce8:	f2c0 8081 	blt.w	800bdee <quorem+0x112>
 800bcec:	3c01      	subs	r4, #1
 800bcee:	f101 0814 	add.w	r8, r1, #20
 800bcf2:	f100 0514 	add.w	r5, r0, #20
 800bcf6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bcfa:	9301      	str	r3, [sp, #4]
 800bcfc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bd00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bd04:	3301      	adds	r3, #1
 800bd06:	429a      	cmp	r2, r3
 800bd08:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bd0c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bd10:	fbb2 f6f3 	udiv	r6, r2, r3
 800bd14:	d331      	bcc.n	800bd7a <quorem+0x9e>
 800bd16:	f04f 0e00 	mov.w	lr, #0
 800bd1a:	4640      	mov	r0, r8
 800bd1c:	46ac      	mov	ip, r5
 800bd1e:	46f2      	mov	sl, lr
 800bd20:	f850 2b04 	ldr.w	r2, [r0], #4
 800bd24:	b293      	uxth	r3, r2
 800bd26:	fb06 e303 	mla	r3, r6, r3, lr
 800bd2a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bd2e:	b29b      	uxth	r3, r3
 800bd30:	ebaa 0303 	sub.w	r3, sl, r3
 800bd34:	0c12      	lsrs	r2, r2, #16
 800bd36:	f8dc a000 	ldr.w	sl, [ip]
 800bd3a:	fb06 e202 	mla	r2, r6, r2, lr
 800bd3e:	fa13 f38a 	uxtah	r3, r3, sl
 800bd42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bd46:	fa1f fa82 	uxth.w	sl, r2
 800bd4a:	f8dc 2000 	ldr.w	r2, [ip]
 800bd4e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800bd52:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bd56:	b29b      	uxth	r3, r3
 800bd58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd5c:	4581      	cmp	r9, r0
 800bd5e:	f84c 3b04 	str.w	r3, [ip], #4
 800bd62:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bd66:	d2db      	bcs.n	800bd20 <quorem+0x44>
 800bd68:	f855 300b 	ldr.w	r3, [r5, fp]
 800bd6c:	b92b      	cbnz	r3, 800bd7a <quorem+0x9e>
 800bd6e:	9b01      	ldr	r3, [sp, #4]
 800bd70:	3b04      	subs	r3, #4
 800bd72:	429d      	cmp	r5, r3
 800bd74:	461a      	mov	r2, r3
 800bd76:	d32e      	bcc.n	800bdd6 <quorem+0xfa>
 800bd78:	613c      	str	r4, [r7, #16]
 800bd7a:	4638      	mov	r0, r7
 800bd7c:	f7ff fb08 	bl	800b390 <__mcmp>
 800bd80:	2800      	cmp	r0, #0
 800bd82:	db24      	blt.n	800bdce <quorem+0xf2>
 800bd84:	3601      	adds	r6, #1
 800bd86:	4628      	mov	r0, r5
 800bd88:	f04f 0c00 	mov.w	ip, #0
 800bd8c:	f858 2b04 	ldr.w	r2, [r8], #4
 800bd90:	f8d0 e000 	ldr.w	lr, [r0]
 800bd94:	b293      	uxth	r3, r2
 800bd96:	ebac 0303 	sub.w	r3, ip, r3
 800bd9a:	0c12      	lsrs	r2, r2, #16
 800bd9c:	fa13 f38e 	uxtah	r3, r3, lr
 800bda0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bda4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bda8:	b29b      	uxth	r3, r3
 800bdaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bdae:	45c1      	cmp	r9, r8
 800bdb0:	f840 3b04 	str.w	r3, [r0], #4
 800bdb4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bdb8:	d2e8      	bcs.n	800bd8c <quorem+0xb0>
 800bdba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bdbe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bdc2:	b922      	cbnz	r2, 800bdce <quorem+0xf2>
 800bdc4:	3b04      	subs	r3, #4
 800bdc6:	429d      	cmp	r5, r3
 800bdc8:	461a      	mov	r2, r3
 800bdca:	d30a      	bcc.n	800bde2 <quorem+0x106>
 800bdcc:	613c      	str	r4, [r7, #16]
 800bdce:	4630      	mov	r0, r6
 800bdd0:	b003      	add	sp, #12
 800bdd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdd6:	6812      	ldr	r2, [r2, #0]
 800bdd8:	3b04      	subs	r3, #4
 800bdda:	2a00      	cmp	r2, #0
 800bddc:	d1cc      	bne.n	800bd78 <quorem+0x9c>
 800bdde:	3c01      	subs	r4, #1
 800bde0:	e7c7      	b.n	800bd72 <quorem+0x96>
 800bde2:	6812      	ldr	r2, [r2, #0]
 800bde4:	3b04      	subs	r3, #4
 800bde6:	2a00      	cmp	r2, #0
 800bde8:	d1f0      	bne.n	800bdcc <quorem+0xf0>
 800bdea:	3c01      	subs	r4, #1
 800bdec:	e7eb      	b.n	800bdc6 <quorem+0xea>
 800bdee:	2000      	movs	r0, #0
 800bdf0:	e7ee      	b.n	800bdd0 <quorem+0xf4>
 800bdf2:	0000      	movs	r0, r0
 800bdf4:	0000      	movs	r0, r0
	...

0800bdf8 <_dtoa_r>:
 800bdf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdfc:	ed2d 8b02 	vpush	{d8}
 800be00:	ec57 6b10 	vmov	r6, r7, d0
 800be04:	b095      	sub	sp, #84	; 0x54
 800be06:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800be08:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800be0c:	9105      	str	r1, [sp, #20]
 800be0e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800be12:	4604      	mov	r4, r0
 800be14:	9209      	str	r2, [sp, #36]	; 0x24
 800be16:	930f      	str	r3, [sp, #60]	; 0x3c
 800be18:	b975      	cbnz	r5, 800be38 <_dtoa_r+0x40>
 800be1a:	2010      	movs	r0, #16
 800be1c:	f7fe fac8 	bl	800a3b0 <malloc>
 800be20:	4602      	mov	r2, r0
 800be22:	6260      	str	r0, [r4, #36]	; 0x24
 800be24:	b920      	cbnz	r0, 800be30 <_dtoa_r+0x38>
 800be26:	4bb2      	ldr	r3, [pc, #712]	; (800c0f0 <_dtoa_r+0x2f8>)
 800be28:	21ea      	movs	r1, #234	; 0xea
 800be2a:	48b2      	ldr	r0, [pc, #712]	; (800c0f4 <_dtoa_r+0x2fc>)
 800be2c:	f7ff ff28 	bl	800bc80 <__assert_func>
 800be30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800be34:	6005      	str	r5, [r0, #0]
 800be36:	60c5      	str	r5, [r0, #12]
 800be38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be3a:	6819      	ldr	r1, [r3, #0]
 800be3c:	b151      	cbz	r1, 800be54 <_dtoa_r+0x5c>
 800be3e:	685a      	ldr	r2, [r3, #4]
 800be40:	604a      	str	r2, [r1, #4]
 800be42:	2301      	movs	r3, #1
 800be44:	4093      	lsls	r3, r2
 800be46:	608b      	str	r3, [r1, #8]
 800be48:	4620      	mov	r0, r4
 800be4a:	f7ff f863 	bl	800af14 <_Bfree>
 800be4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be50:	2200      	movs	r2, #0
 800be52:	601a      	str	r2, [r3, #0]
 800be54:	1e3b      	subs	r3, r7, #0
 800be56:	bfb9      	ittee	lt
 800be58:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800be5c:	9303      	strlt	r3, [sp, #12]
 800be5e:	2300      	movge	r3, #0
 800be60:	f8c8 3000 	strge.w	r3, [r8]
 800be64:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800be68:	4ba3      	ldr	r3, [pc, #652]	; (800c0f8 <_dtoa_r+0x300>)
 800be6a:	bfbc      	itt	lt
 800be6c:	2201      	movlt	r2, #1
 800be6e:	f8c8 2000 	strlt.w	r2, [r8]
 800be72:	ea33 0309 	bics.w	r3, r3, r9
 800be76:	d11b      	bne.n	800beb0 <_dtoa_r+0xb8>
 800be78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800be7a:	f242 730f 	movw	r3, #9999	; 0x270f
 800be7e:	6013      	str	r3, [r2, #0]
 800be80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800be84:	4333      	orrs	r3, r6
 800be86:	f000 857a 	beq.w	800c97e <_dtoa_r+0xb86>
 800be8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be8c:	b963      	cbnz	r3, 800bea8 <_dtoa_r+0xb0>
 800be8e:	4b9b      	ldr	r3, [pc, #620]	; (800c0fc <_dtoa_r+0x304>)
 800be90:	e024      	b.n	800bedc <_dtoa_r+0xe4>
 800be92:	4b9b      	ldr	r3, [pc, #620]	; (800c100 <_dtoa_r+0x308>)
 800be94:	9300      	str	r3, [sp, #0]
 800be96:	3308      	adds	r3, #8
 800be98:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800be9a:	6013      	str	r3, [r2, #0]
 800be9c:	9800      	ldr	r0, [sp, #0]
 800be9e:	b015      	add	sp, #84	; 0x54
 800bea0:	ecbd 8b02 	vpop	{d8}
 800bea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bea8:	4b94      	ldr	r3, [pc, #592]	; (800c0fc <_dtoa_r+0x304>)
 800beaa:	9300      	str	r3, [sp, #0]
 800beac:	3303      	adds	r3, #3
 800beae:	e7f3      	b.n	800be98 <_dtoa_r+0xa0>
 800beb0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800beb4:	2200      	movs	r2, #0
 800beb6:	ec51 0b17 	vmov	r0, r1, d7
 800beba:	2300      	movs	r3, #0
 800bebc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800bec0:	f7f4 fe02 	bl	8000ac8 <__aeabi_dcmpeq>
 800bec4:	4680      	mov	r8, r0
 800bec6:	b158      	cbz	r0, 800bee0 <_dtoa_r+0xe8>
 800bec8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800beca:	2301      	movs	r3, #1
 800becc:	6013      	str	r3, [r2, #0]
 800bece:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	f000 8551 	beq.w	800c978 <_dtoa_r+0xb80>
 800bed6:	488b      	ldr	r0, [pc, #556]	; (800c104 <_dtoa_r+0x30c>)
 800bed8:	6018      	str	r0, [r3, #0]
 800beda:	1e43      	subs	r3, r0, #1
 800bedc:	9300      	str	r3, [sp, #0]
 800bede:	e7dd      	b.n	800be9c <_dtoa_r+0xa4>
 800bee0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800bee4:	aa12      	add	r2, sp, #72	; 0x48
 800bee6:	a913      	add	r1, sp, #76	; 0x4c
 800bee8:	4620      	mov	r0, r4
 800beea:	f7ff faf5 	bl	800b4d8 <__d2b>
 800beee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bef2:	4683      	mov	fp, r0
 800bef4:	2d00      	cmp	r5, #0
 800bef6:	d07c      	beq.n	800bff2 <_dtoa_r+0x1fa>
 800bef8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800befa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800befe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf02:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800bf06:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800bf0a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800bf0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bf12:	4b7d      	ldr	r3, [pc, #500]	; (800c108 <_dtoa_r+0x310>)
 800bf14:	2200      	movs	r2, #0
 800bf16:	4630      	mov	r0, r6
 800bf18:	4639      	mov	r1, r7
 800bf1a:	f7f4 f9b5 	bl	8000288 <__aeabi_dsub>
 800bf1e:	a36e      	add	r3, pc, #440	; (adr r3, 800c0d8 <_dtoa_r+0x2e0>)
 800bf20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf24:	f7f4 fb68 	bl	80005f8 <__aeabi_dmul>
 800bf28:	a36d      	add	r3, pc, #436	; (adr r3, 800c0e0 <_dtoa_r+0x2e8>)
 800bf2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf2e:	f7f4 f9ad 	bl	800028c <__adddf3>
 800bf32:	4606      	mov	r6, r0
 800bf34:	4628      	mov	r0, r5
 800bf36:	460f      	mov	r7, r1
 800bf38:	f7f4 faf4 	bl	8000524 <__aeabi_i2d>
 800bf3c:	a36a      	add	r3, pc, #424	; (adr r3, 800c0e8 <_dtoa_r+0x2f0>)
 800bf3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf42:	f7f4 fb59 	bl	80005f8 <__aeabi_dmul>
 800bf46:	4602      	mov	r2, r0
 800bf48:	460b      	mov	r3, r1
 800bf4a:	4630      	mov	r0, r6
 800bf4c:	4639      	mov	r1, r7
 800bf4e:	f7f4 f99d 	bl	800028c <__adddf3>
 800bf52:	4606      	mov	r6, r0
 800bf54:	460f      	mov	r7, r1
 800bf56:	f7f4 fde9 	bl	8000b2c <__aeabi_d2iz>
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	4682      	mov	sl, r0
 800bf5e:	2300      	movs	r3, #0
 800bf60:	4630      	mov	r0, r6
 800bf62:	4639      	mov	r1, r7
 800bf64:	f7f4 fdba 	bl	8000adc <__aeabi_dcmplt>
 800bf68:	b148      	cbz	r0, 800bf7e <_dtoa_r+0x186>
 800bf6a:	4650      	mov	r0, sl
 800bf6c:	f7f4 fada 	bl	8000524 <__aeabi_i2d>
 800bf70:	4632      	mov	r2, r6
 800bf72:	463b      	mov	r3, r7
 800bf74:	f7f4 fda8 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf78:	b908      	cbnz	r0, 800bf7e <_dtoa_r+0x186>
 800bf7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bf7e:	f1ba 0f16 	cmp.w	sl, #22
 800bf82:	d854      	bhi.n	800c02e <_dtoa_r+0x236>
 800bf84:	4b61      	ldr	r3, [pc, #388]	; (800c10c <_dtoa_r+0x314>)
 800bf86:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bf8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bf92:	f7f4 fda3 	bl	8000adc <__aeabi_dcmplt>
 800bf96:	2800      	cmp	r0, #0
 800bf98:	d04b      	beq.n	800c032 <_dtoa_r+0x23a>
 800bf9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	930e      	str	r3, [sp, #56]	; 0x38
 800bfa2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bfa4:	1b5d      	subs	r5, r3, r5
 800bfa6:	1e6b      	subs	r3, r5, #1
 800bfa8:	9304      	str	r3, [sp, #16]
 800bfaa:	bf43      	ittte	mi
 800bfac:	2300      	movmi	r3, #0
 800bfae:	f1c5 0801 	rsbmi	r8, r5, #1
 800bfb2:	9304      	strmi	r3, [sp, #16]
 800bfb4:	f04f 0800 	movpl.w	r8, #0
 800bfb8:	f1ba 0f00 	cmp.w	sl, #0
 800bfbc:	db3b      	blt.n	800c036 <_dtoa_r+0x23e>
 800bfbe:	9b04      	ldr	r3, [sp, #16]
 800bfc0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800bfc4:	4453      	add	r3, sl
 800bfc6:	9304      	str	r3, [sp, #16]
 800bfc8:	2300      	movs	r3, #0
 800bfca:	9306      	str	r3, [sp, #24]
 800bfcc:	9b05      	ldr	r3, [sp, #20]
 800bfce:	2b09      	cmp	r3, #9
 800bfd0:	d869      	bhi.n	800c0a6 <_dtoa_r+0x2ae>
 800bfd2:	2b05      	cmp	r3, #5
 800bfd4:	bfc4      	itt	gt
 800bfd6:	3b04      	subgt	r3, #4
 800bfd8:	9305      	strgt	r3, [sp, #20]
 800bfda:	9b05      	ldr	r3, [sp, #20]
 800bfdc:	f1a3 0302 	sub.w	r3, r3, #2
 800bfe0:	bfcc      	ite	gt
 800bfe2:	2500      	movgt	r5, #0
 800bfe4:	2501      	movle	r5, #1
 800bfe6:	2b03      	cmp	r3, #3
 800bfe8:	d869      	bhi.n	800c0be <_dtoa_r+0x2c6>
 800bfea:	e8df f003 	tbb	[pc, r3]
 800bfee:	4e2c      	.short	0x4e2c
 800bff0:	5a4c      	.short	0x5a4c
 800bff2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800bff6:	441d      	add	r5, r3
 800bff8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bffc:	2b20      	cmp	r3, #32
 800bffe:	bfc1      	itttt	gt
 800c000:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c004:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c008:	fa09 f303 	lslgt.w	r3, r9, r3
 800c00c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c010:	bfda      	itte	le
 800c012:	f1c3 0320 	rsble	r3, r3, #32
 800c016:	fa06 f003 	lslle.w	r0, r6, r3
 800c01a:	4318      	orrgt	r0, r3
 800c01c:	f7f4 fa72 	bl	8000504 <__aeabi_ui2d>
 800c020:	2301      	movs	r3, #1
 800c022:	4606      	mov	r6, r0
 800c024:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c028:	3d01      	subs	r5, #1
 800c02a:	9310      	str	r3, [sp, #64]	; 0x40
 800c02c:	e771      	b.n	800bf12 <_dtoa_r+0x11a>
 800c02e:	2301      	movs	r3, #1
 800c030:	e7b6      	b.n	800bfa0 <_dtoa_r+0x1a8>
 800c032:	900e      	str	r0, [sp, #56]	; 0x38
 800c034:	e7b5      	b.n	800bfa2 <_dtoa_r+0x1aa>
 800c036:	f1ca 0300 	rsb	r3, sl, #0
 800c03a:	9306      	str	r3, [sp, #24]
 800c03c:	2300      	movs	r3, #0
 800c03e:	eba8 080a 	sub.w	r8, r8, sl
 800c042:	930d      	str	r3, [sp, #52]	; 0x34
 800c044:	e7c2      	b.n	800bfcc <_dtoa_r+0x1d4>
 800c046:	2300      	movs	r3, #0
 800c048:	9308      	str	r3, [sp, #32]
 800c04a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	dc39      	bgt.n	800c0c4 <_dtoa_r+0x2cc>
 800c050:	f04f 0901 	mov.w	r9, #1
 800c054:	f8cd 9004 	str.w	r9, [sp, #4]
 800c058:	464b      	mov	r3, r9
 800c05a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800c05e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c060:	2200      	movs	r2, #0
 800c062:	6042      	str	r2, [r0, #4]
 800c064:	2204      	movs	r2, #4
 800c066:	f102 0614 	add.w	r6, r2, #20
 800c06a:	429e      	cmp	r6, r3
 800c06c:	6841      	ldr	r1, [r0, #4]
 800c06e:	d92f      	bls.n	800c0d0 <_dtoa_r+0x2d8>
 800c070:	4620      	mov	r0, r4
 800c072:	f7fe ff0f 	bl	800ae94 <_Balloc>
 800c076:	9000      	str	r0, [sp, #0]
 800c078:	2800      	cmp	r0, #0
 800c07a:	d14b      	bne.n	800c114 <_dtoa_r+0x31c>
 800c07c:	4b24      	ldr	r3, [pc, #144]	; (800c110 <_dtoa_r+0x318>)
 800c07e:	4602      	mov	r2, r0
 800c080:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c084:	e6d1      	b.n	800be2a <_dtoa_r+0x32>
 800c086:	2301      	movs	r3, #1
 800c088:	e7de      	b.n	800c048 <_dtoa_r+0x250>
 800c08a:	2300      	movs	r3, #0
 800c08c:	9308      	str	r3, [sp, #32]
 800c08e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c090:	eb0a 0903 	add.w	r9, sl, r3
 800c094:	f109 0301 	add.w	r3, r9, #1
 800c098:	2b01      	cmp	r3, #1
 800c09a:	9301      	str	r3, [sp, #4]
 800c09c:	bfb8      	it	lt
 800c09e:	2301      	movlt	r3, #1
 800c0a0:	e7dd      	b.n	800c05e <_dtoa_r+0x266>
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	e7f2      	b.n	800c08c <_dtoa_r+0x294>
 800c0a6:	2501      	movs	r5, #1
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	9305      	str	r3, [sp, #20]
 800c0ac:	9508      	str	r5, [sp, #32]
 800c0ae:	f04f 39ff 	mov.w	r9, #4294967295
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	f8cd 9004 	str.w	r9, [sp, #4]
 800c0b8:	2312      	movs	r3, #18
 800c0ba:	9209      	str	r2, [sp, #36]	; 0x24
 800c0bc:	e7cf      	b.n	800c05e <_dtoa_r+0x266>
 800c0be:	2301      	movs	r3, #1
 800c0c0:	9308      	str	r3, [sp, #32]
 800c0c2:	e7f4      	b.n	800c0ae <_dtoa_r+0x2b6>
 800c0c4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c0c8:	f8cd 9004 	str.w	r9, [sp, #4]
 800c0cc:	464b      	mov	r3, r9
 800c0ce:	e7c6      	b.n	800c05e <_dtoa_r+0x266>
 800c0d0:	3101      	adds	r1, #1
 800c0d2:	6041      	str	r1, [r0, #4]
 800c0d4:	0052      	lsls	r2, r2, #1
 800c0d6:	e7c6      	b.n	800c066 <_dtoa_r+0x26e>
 800c0d8:	636f4361 	.word	0x636f4361
 800c0dc:	3fd287a7 	.word	0x3fd287a7
 800c0e0:	8b60c8b3 	.word	0x8b60c8b3
 800c0e4:	3fc68a28 	.word	0x3fc68a28
 800c0e8:	509f79fb 	.word	0x509f79fb
 800c0ec:	3fd34413 	.word	0x3fd34413
 800c0f0:	0800dc90 	.word	0x0800dc90
 800c0f4:	0800de92 	.word	0x0800de92
 800c0f8:	7ff00000 	.word	0x7ff00000
 800c0fc:	0800de8c 	.word	0x0800de8c
 800c100:	0800de83 	.word	0x0800de83
 800c104:	0800de91 	.word	0x0800de91
 800c108:	3ff80000 	.word	0x3ff80000
 800c10c:	0800dd40 	.word	0x0800dd40
 800c110:	0800dd07 	.word	0x0800dd07
 800c114:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c116:	9a00      	ldr	r2, [sp, #0]
 800c118:	601a      	str	r2, [r3, #0]
 800c11a:	9b01      	ldr	r3, [sp, #4]
 800c11c:	2b0e      	cmp	r3, #14
 800c11e:	f200 80ad 	bhi.w	800c27c <_dtoa_r+0x484>
 800c122:	2d00      	cmp	r5, #0
 800c124:	f000 80aa 	beq.w	800c27c <_dtoa_r+0x484>
 800c128:	f1ba 0f00 	cmp.w	sl, #0
 800c12c:	dd36      	ble.n	800c19c <_dtoa_r+0x3a4>
 800c12e:	4ac3      	ldr	r2, [pc, #780]	; (800c43c <_dtoa_r+0x644>)
 800c130:	f00a 030f 	and.w	r3, sl, #15
 800c134:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c138:	ed93 7b00 	vldr	d7, [r3]
 800c13c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800c140:	ea4f 172a 	mov.w	r7, sl, asr #4
 800c144:	eeb0 8a47 	vmov.f32	s16, s14
 800c148:	eef0 8a67 	vmov.f32	s17, s15
 800c14c:	d016      	beq.n	800c17c <_dtoa_r+0x384>
 800c14e:	4bbc      	ldr	r3, [pc, #752]	; (800c440 <_dtoa_r+0x648>)
 800c150:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c154:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c158:	f7f4 fb78 	bl	800084c <__aeabi_ddiv>
 800c15c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c160:	f007 070f 	and.w	r7, r7, #15
 800c164:	2503      	movs	r5, #3
 800c166:	4eb6      	ldr	r6, [pc, #728]	; (800c440 <_dtoa_r+0x648>)
 800c168:	b957      	cbnz	r7, 800c180 <_dtoa_r+0x388>
 800c16a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c16e:	ec53 2b18 	vmov	r2, r3, d8
 800c172:	f7f4 fb6b 	bl	800084c <__aeabi_ddiv>
 800c176:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c17a:	e029      	b.n	800c1d0 <_dtoa_r+0x3d8>
 800c17c:	2502      	movs	r5, #2
 800c17e:	e7f2      	b.n	800c166 <_dtoa_r+0x36e>
 800c180:	07f9      	lsls	r1, r7, #31
 800c182:	d508      	bpl.n	800c196 <_dtoa_r+0x39e>
 800c184:	ec51 0b18 	vmov	r0, r1, d8
 800c188:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c18c:	f7f4 fa34 	bl	80005f8 <__aeabi_dmul>
 800c190:	ec41 0b18 	vmov	d8, r0, r1
 800c194:	3501      	adds	r5, #1
 800c196:	107f      	asrs	r7, r7, #1
 800c198:	3608      	adds	r6, #8
 800c19a:	e7e5      	b.n	800c168 <_dtoa_r+0x370>
 800c19c:	f000 80a6 	beq.w	800c2ec <_dtoa_r+0x4f4>
 800c1a0:	f1ca 0600 	rsb	r6, sl, #0
 800c1a4:	4ba5      	ldr	r3, [pc, #660]	; (800c43c <_dtoa_r+0x644>)
 800c1a6:	4fa6      	ldr	r7, [pc, #664]	; (800c440 <_dtoa_r+0x648>)
 800c1a8:	f006 020f 	and.w	r2, r6, #15
 800c1ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c1b8:	f7f4 fa1e 	bl	80005f8 <__aeabi_dmul>
 800c1bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c1c0:	1136      	asrs	r6, r6, #4
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	2502      	movs	r5, #2
 800c1c6:	2e00      	cmp	r6, #0
 800c1c8:	f040 8085 	bne.w	800c2d6 <_dtoa_r+0x4de>
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d1d2      	bne.n	800c176 <_dtoa_r+0x37e>
 800c1d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	f000 808c 	beq.w	800c2f0 <_dtoa_r+0x4f8>
 800c1d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c1dc:	4b99      	ldr	r3, [pc, #612]	; (800c444 <_dtoa_r+0x64c>)
 800c1de:	2200      	movs	r2, #0
 800c1e0:	4630      	mov	r0, r6
 800c1e2:	4639      	mov	r1, r7
 800c1e4:	f7f4 fc7a 	bl	8000adc <__aeabi_dcmplt>
 800c1e8:	2800      	cmp	r0, #0
 800c1ea:	f000 8081 	beq.w	800c2f0 <_dtoa_r+0x4f8>
 800c1ee:	9b01      	ldr	r3, [sp, #4]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d07d      	beq.n	800c2f0 <_dtoa_r+0x4f8>
 800c1f4:	f1b9 0f00 	cmp.w	r9, #0
 800c1f8:	dd3c      	ble.n	800c274 <_dtoa_r+0x47c>
 800c1fa:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c1fe:	9307      	str	r3, [sp, #28]
 800c200:	2200      	movs	r2, #0
 800c202:	4b91      	ldr	r3, [pc, #580]	; (800c448 <_dtoa_r+0x650>)
 800c204:	4630      	mov	r0, r6
 800c206:	4639      	mov	r1, r7
 800c208:	f7f4 f9f6 	bl	80005f8 <__aeabi_dmul>
 800c20c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c210:	3501      	adds	r5, #1
 800c212:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800c216:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c21a:	4628      	mov	r0, r5
 800c21c:	f7f4 f982 	bl	8000524 <__aeabi_i2d>
 800c220:	4632      	mov	r2, r6
 800c222:	463b      	mov	r3, r7
 800c224:	f7f4 f9e8 	bl	80005f8 <__aeabi_dmul>
 800c228:	4b88      	ldr	r3, [pc, #544]	; (800c44c <_dtoa_r+0x654>)
 800c22a:	2200      	movs	r2, #0
 800c22c:	f7f4 f82e 	bl	800028c <__adddf3>
 800c230:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c234:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c238:	9303      	str	r3, [sp, #12]
 800c23a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d15c      	bne.n	800c2fa <_dtoa_r+0x502>
 800c240:	4b83      	ldr	r3, [pc, #524]	; (800c450 <_dtoa_r+0x658>)
 800c242:	2200      	movs	r2, #0
 800c244:	4630      	mov	r0, r6
 800c246:	4639      	mov	r1, r7
 800c248:	f7f4 f81e 	bl	8000288 <__aeabi_dsub>
 800c24c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c250:	4606      	mov	r6, r0
 800c252:	460f      	mov	r7, r1
 800c254:	f7f4 fc60 	bl	8000b18 <__aeabi_dcmpgt>
 800c258:	2800      	cmp	r0, #0
 800c25a:	f040 8296 	bne.w	800c78a <_dtoa_r+0x992>
 800c25e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c262:	4630      	mov	r0, r6
 800c264:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c268:	4639      	mov	r1, r7
 800c26a:	f7f4 fc37 	bl	8000adc <__aeabi_dcmplt>
 800c26e:	2800      	cmp	r0, #0
 800c270:	f040 8288 	bne.w	800c784 <_dtoa_r+0x98c>
 800c274:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c278:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c27c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c27e:	2b00      	cmp	r3, #0
 800c280:	f2c0 8158 	blt.w	800c534 <_dtoa_r+0x73c>
 800c284:	f1ba 0f0e 	cmp.w	sl, #14
 800c288:	f300 8154 	bgt.w	800c534 <_dtoa_r+0x73c>
 800c28c:	4b6b      	ldr	r3, [pc, #428]	; (800c43c <_dtoa_r+0x644>)
 800c28e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c292:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c298:	2b00      	cmp	r3, #0
 800c29a:	f280 80e3 	bge.w	800c464 <_dtoa_r+0x66c>
 800c29e:	9b01      	ldr	r3, [sp, #4]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	f300 80df 	bgt.w	800c464 <_dtoa_r+0x66c>
 800c2a6:	f040 826d 	bne.w	800c784 <_dtoa_r+0x98c>
 800c2aa:	4b69      	ldr	r3, [pc, #420]	; (800c450 <_dtoa_r+0x658>)
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	4640      	mov	r0, r8
 800c2b0:	4649      	mov	r1, r9
 800c2b2:	f7f4 f9a1 	bl	80005f8 <__aeabi_dmul>
 800c2b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c2ba:	f7f4 fc23 	bl	8000b04 <__aeabi_dcmpge>
 800c2be:	9e01      	ldr	r6, [sp, #4]
 800c2c0:	4637      	mov	r7, r6
 800c2c2:	2800      	cmp	r0, #0
 800c2c4:	f040 8243 	bne.w	800c74e <_dtoa_r+0x956>
 800c2c8:	9d00      	ldr	r5, [sp, #0]
 800c2ca:	2331      	movs	r3, #49	; 0x31
 800c2cc:	f805 3b01 	strb.w	r3, [r5], #1
 800c2d0:	f10a 0a01 	add.w	sl, sl, #1
 800c2d4:	e23f      	b.n	800c756 <_dtoa_r+0x95e>
 800c2d6:	07f2      	lsls	r2, r6, #31
 800c2d8:	d505      	bpl.n	800c2e6 <_dtoa_r+0x4ee>
 800c2da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2de:	f7f4 f98b 	bl	80005f8 <__aeabi_dmul>
 800c2e2:	3501      	adds	r5, #1
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	1076      	asrs	r6, r6, #1
 800c2e8:	3708      	adds	r7, #8
 800c2ea:	e76c      	b.n	800c1c6 <_dtoa_r+0x3ce>
 800c2ec:	2502      	movs	r5, #2
 800c2ee:	e76f      	b.n	800c1d0 <_dtoa_r+0x3d8>
 800c2f0:	9b01      	ldr	r3, [sp, #4]
 800c2f2:	f8cd a01c 	str.w	sl, [sp, #28]
 800c2f6:	930c      	str	r3, [sp, #48]	; 0x30
 800c2f8:	e78d      	b.n	800c216 <_dtoa_r+0x41e>
 800c2fa:	9900      	ldr	r1, [sp, #0]
 800c2fc:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c2fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c300:	4b4e      	ldr	r3, [pc, #312]	; (800c43c <_dtoa_r+0x644>)
 800c302:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c306:	4401      	add	r1, r0
 800c308:	9102      	str	r1, [sp, #8]
 800c30a:	9908      	ldr	r1, [sp, #32]
 800c30c:	eeb0 8a47 	vmov.f32	s16, s14
 800c310:	eef0 8a67 	vmov.f32	s17, s15
 800c314:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c318:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c31c:	2900      	cmp	r1, #0
 800c31e:	d045      	beq.n	800c3ac <_dtoa_r+0x5b4>
 800c320:	494c      	ldr	r1, [pc, #304]	; (800c454 <_dtoa_r+0x65c>)
 800c322:	2000      	movs	r0, #0
 800c324:	f7f4 fa92 	bl	800084c <__aeabi_ddiv>
 800c328:	ec53 2b18 	vmov	r2, r3, d8
 800c32c:	f7f3 ffac 	bl	8000288 <__aeabi_dsub>
 800c330:	9d00      	ldr	r5, [sp, #0]
 800c332:	ec41 0b18 	vmov	d8, r0, r1
 800c336:	4639      	mov	r1, r7
 800c338:	4630      	mov	r0, r6
 800c33a:	f7f4 fbf7 	bl	8000b2c <__aeabi_d2iz>
 800c33e:	900c      	str	r0, [sp, #48]	; 0x30
 800c340:	f7f4 f8f0 	bl	8000524 <__aeabi_i2d>
 800c344:	4602      	mov	r2, r0
 800c346:	460b      	mov	r3, r1
 800c348:	4630      	mov	r0, r6
 800c34a:	4639      	mov	r1, r7
 800c34c:	f7f3 ff9c 	bl	8000288 <__aeabi_dsub>
 800c350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c352:	3330      	adds	r3, #48	; 0x30
 800c354:	f805 3b01 	strb.w	r3, [r5], #1
 800c358:	ec53 2b18 	vmov	r2, r3, d8
 800c35c:	4606      	mov	r6, r0
 800c35e:	460f      	mov	r7, r1
 800c360:	f7f4 fbbc 	bl	8000adc <__aeabi_dcmplt>
 800c364:	2800      	cmp	r0, #0
 800c366:	d165      	bne.n	800c434 <_dtoa_r+0x63c>
 800c368:	4632      	mov	r2, r6
 800c36a:	463b      	mov	r3, r7
 800c36c:	4935      	ldr	r1, [pc, #212]	; (800c444 <_dtoa_r+0x64c>)
 800c36e:	2000      	movs	r0, #0
 800c370:	f7f3 ff8a 	bl	8000288 <__aeabi_dsub>
 800c374:	ec53 2b18 	vmov	r2, r3, d8
 800c378:	f7f4 fbb0 	bl	8000adc <__aeabi_dcmplt>
 800c37c:	2800      	cmp	r0, #0
 800c37e:	f040 80b9 	bne.w	800c4f4 <_dtoa_r+0x6fc>
 800c382:	9b02      	ldr	r3, [sp, #8]
 800c384:	429d      	cmp	r5, r3
 800c386:	f43f af75 	beq.w	800c274 <_dtoa_r+0x47c>
 800c38a:	4b2f      	ldr	r3, [pc, #188]	; (800c448 <_dtoa_r+0x650>)
 800c38c:	ec51 0b18 	vmov	r0, r1, d8
 800c390:	2200      	movs	r2, #0
 800c392:	f7f4 f931 	bl	80005f8 <__aeabi_dmul>
 800c396:	4b2c      	ldr	r3, [pc, #176]	; (800c448 <_dtoa_r+0x650>)
 800c398:	ec41 0b18 	vmov	d8, r0, r1
 800c39c:	2200      	movs	r2, #0
 800c39e:	4630      	mov	r0, r6
 800c3a0:	4639      	mov	r1, r7
 800c3a2:	f7f4 f929 	bl	80005f8 <__aeabi_dmul>
 800c3a6:	4606      	mov	r6, r0
 800c3a8:	460f      	mov	r7, r1
 800c3aa:	e7c4      	b.n	800c336 <_dtoa_r+0x53e>
 800c3ac:	ec51 0b17 	vmov	r0, r1, d7
 800c3b0:	f7f4 f922 	bl	80005f8 <__aeabi_dmul>
 800c3b4:	9b02      	ldr	r3, [sp, #8]
 800c3b6:	9d00      	ldr	r5, [sp, #0]
 800c3b8:	930c      	str	r3, [sp, #48]	; 0x30
 800c3ba:	ec41 0b18 	vmov	d8, r0, r1
 800c3be:	4639      	mov	r1, r7
 800c3c0:	4630      	mov	r0, r6
 800c3c2:	f7f4 fbb3 	bl	8000b2c <__aeabi_d2iz>
 800c3c6:	9011      	str	r0, [sp, #68]	; 0x44
 800c3c8:	f7f4 f8ac 	bl	8000524 <__aeabi_i2d>
 800c3cc:	4602      	mov	r2, r0
 800c3ce:	460b      	mov	r3, r1
 800c3d0:	4630      	mov	r0, r6
 800c3d2:	4639      	mov	r1, r7
 800c3d4:	f7f3 ff58 	bl	8000288 <__aeabi_dsub>
 800c3d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c3da:	3330      	adds	r3, #48	; 0x30
 800c3dc:	f805 3b01 	strb.w	r3, [r5], #1
 800c3e0:	9b02      	ldr	r3, [sp, #8]
 800c3e2:	429d      	cmp	r5, r3
 800c3e4:	4606      	mov	r6, r0
 800c3e6:	460f      	mov	r7, r1
 800c3e8:	f04f 0200 	mov.w	r2, #0
 800c3ec:	d134      	bne.n	800c458 <_dtoa_r+0x660>
 800c3ee:	4b19      	ldr	r3, [pc, #100]	; (800c454 <_dtoa_r+0x65c>)
 800c3f0:	ec51 0b18 	vmov	r0, r1, d8
 800c3f4:	f7f3 ff4a 	bl	800028c <__adddf3>
 800c3f8:	4602      	mov	r2, r0
 800c3fa:	460b      	mov	r3, r1
 800c3fc:	4630      	mov	r0, r6
 800c3fe:	4639      	mov	r1, r7
 800c400:	f7f4 fb8a 	bl	8000b18 <__aeabi_dcmpgt>
 800c404:	2800      	cmp	r0, #0
 800c406:	d175      	bne.n	800c4f4 <_dtoa_r+0x6fc>
 800c408:	ec53 2b18 	vmov	r2, r3, d8
 800c40c:	4911      	ldr	r1, [pc, #68]	; (800c454 <_dtoa_r+0x65c>)
 800c40e:	2000      	movs	r0, #0
 800c410:	f7f3 ff3a 	bl	8000288 <__aeabi_dsub>
 800c414:	4602      	mov	r2, r0
 800c416:	460b      	mov	r3, r1
 800c418:	4630      	mov	r0, r6
 800c41a:	4639      	mov	r1, r7
 800c41c:	f7f4 fb5e 	bl	8000adc <__aeabi_dcmplt>
 800c420:	2800      	cmp	r0, #0
 800c422:	f43f af27 	beq.w	800c274 <_dtoa_r+0x47c>
 800c426:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c428:	1e6b      	subs	r3, r5, #1
 800c42a:	930c      	str	r3, [sp, #48]	; 0x30
 800c42c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c430:	2b30      	cmp	r3, #48	; 0x30
 800c432:	d0f8      	beq.n	800c426 <_dtoa_r+0x62e>
 800c434:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c438:	e04a      	b.n	800c4d0 <_dtoa_r+0x6d8>
 800c43a:	bf00      	nop
 800c43c:	0800dd40 	.word	0x0800dd40
 800c440:	0800dd18 	.word	0x0800dd18
 800c444:	3ff00000 	.word	0x3ff00000
 800c448:	40240000 	.word	0x40240000
 800c44c:	401c0000 	.word	0x401c0000
 800c450:	40140000 	.word	0x40140000
 800c454:	3fe00000 	.word	0x3fe00000
 800c458:	4baf      	ldr	r3, [pc, #700]	; (800c718 <_dtoa_r+0x920>)
 800c45a:	f7f4 f8cd 	bl	80005f8 <__aeabi_dmul>
 800c45e:	4606      	mov	r6, r0
 800c460:	460f      	mov	r7, r1
 800c462:	e7ac      	b.n	800c3be <_dtoa_r+0x5c6>
 800c464:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c468:	9d00      	ldr	r5, [sp, #0]
 800c46a:	4642      	mov	r2, r8
 800c46c:	464b      	mov	r3, r9
 800c46e:	4630      	mov	r0, r6
 800c470:	4639      	mov	r1, r7
 800c472:	f7f4 f9eb 	bl	800084c <__aeabi_ddiv>
 800c476:	f7f4 fb59 	bl	8000b2c <__aeabi_d2iz>
 800c47a:	9002      	str	r0, [sp, #8]
 800c47c:	f7f4 f852 	bl	8000524 <__aeabi_i2d>
 800c480:	4642      	mov	r2, r8
 800c482:	464b      	mov	r3, r9
 800c484:	f7f4 f8b8 	bl	80005f8 <__aeabi_dmul>
 800c488:	4602      	mov	r2, r0
 800c48a:	460b      	mov	r3, r1
 800c48c:	4630      	mov	r0, r6
 800c48e:	4639      	mov	r1, r7
 800c490:	f7f3 fefa 	bl	8000288 <__aeabi_dsub>
 800c494:	9e02      	ldr	r6, [sp, #8]
 800c496:	9f01      	ldr	r7, [sp, #4]
 800c498:	3630      	adds	r6, #48	; 0x30
 800c49a:	f805 6b01 	strb.w	r6, [r5], #1
 800c49e:	9e00      	ldr	r6, [sp, #0]
 800c4a0:	1bae      	subs	r6, r5, r6
 800c4a2:	42b7      	cmp	r7, r6
 800c4a4:	4602      	mov	r2, r0
 800c4a6:	460b      	mov	r3, r1
 800c4a8:	d137      	bne.n	800c51a <_dtoa_r+0x722>
 800c4aa:	f7f3 feef 	bl	800028c <__adddf3>
 800c4ae:	4642      	mov	r2, r8
 800c4b0:	464b      	mov	r3, r9
 800c4b2:	4606      	mov	r6, r0
 800c4b4:	460f      	mov	r7, r1
 800c4b6:	f7f4 fb2f 	bl	8000b18 <__aeabi_dcmpgt>
 800c4ba:	b9c8      	cbnz	r0, 800c4f0 <_dtoa_r+0x6f8>
 800c4bc:	4642      	mov	r2, r8
 800c4be:	464b      	mov	r3, r9
 800c4c0:	4630      	mov	r0, r6
 800c4c2:	4639      	mov	r1, r7
 800c4c4:	f7f4 fb00 	bl	8000ac8 <__aeabi_dcmpeq>
 800c4c8:	b110      	cbz	r0, 800c4d0 <_dtoa_r+0x6d8>
 800c4ca:	9b02      	ldr	r3, [sp, #8]
 800c4cc:	07d9      	lsls	r1, r3, #31
 800c4ce:	d40f      	bmi.n	800c4f0 <_dtoa_r+0x6f8>
 800c4d0:	4620      	mov	r0, r4
 800c4d2:	4659      	mov	r1, fp
 800c4d4:	f7fe fd1e 	bl	800af14 <_Bfree>
 800c4d8:	2300      	movs	r3, #0
 800c4da:	702b      	strb	r3, [r5, #0]
 800c4dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c4de:	f10a 0001 	add.w	r0, sl, #1
 800c4e2:	6018      	str	r0, [r3, #0]
 800c4e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	f43f acd8 	beq.w	800be9c <_dtoa_r+0xa4>
 800c4ec:	601d      	str	r5, [r3, #0]
 800c4ee:	e4d5      	b.n	800be9c <_dtoa_r+0xa4>
 800c4f0:	f8cd a01c 	str.w	sl, [sp, #28]
 800c4f4:	462b      	mov	r3, r5
 800c4f6:	461d      	mov	r5, r3
 800c4f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c4fc:	2a39      	cmp	r2, #57	; 0x39
 800c4fe:	d108      	bne.n	800c512 <_dtoa_r+0x71a>
 800c500:	9a00      	ldr	r2, [sp, #0]
 800c502:	429a      	cmp	r2, r3
 800c504:	d1f7      	bne.n	800c4f6 <_dtoa_r+0x6fe>
 800c506:	9a07      	ldr	r2, [sp, #28]
 800c508:	9900      	ldr	r1, [sp, #0]
 800c50a:	3201      	adds	r2, #1
 800c50c:	9207      	str	r2, [sp, #28]
 800c50e:	2230      	movs	r2, #48	; 0x30
 800c510:	700a      	strb	r2, [r1, #0]
 800c512:	781a      	ldrb	r2, [r3, #0]
 800c514:	3201      	adds	r2, #1
 800c516:	701a      	strb	r2, [r3, #0]
 800c518:	e78c      	b.n	800c434 <_dtoa_r+0x63c>
 800c51a:	4b7f      	ldr	r3, [pc, #508]	; (800c718 <_dtoa_r+0x920>)
 800c51c:	2200      	movs	r2, #0
 800c51e:	f7f4 f86b 	bl	80005f8 <__aeabi_dmul>
 800c522:	2200      	movs	r2, #0
 800c524:	2300      	movs	r3, #0
 800c526:	4606      	mov	r6, r0
 800c528:	460f      	mov	r7, r1
 800c52a:	f7f4 facd 	bl	8000ac8 <__aeabi_dcmpeq>
 800c52e:	2800      	cmp	r0, #0
 800c530:	d09b      	beq.n	800c46a <_dtoa_r+0x672>
 800c532:	e7cd      	b.n	800c4d0 <_dtoa_r+0x6d8>
 800c534:	9a08      	ldr	r2, [sp, #32]
 800c536:	2a00      	cmp	r2, #0
 800c538:	f000 80c4 	beq.w	800c6c4 <_dtoa_r+0x8cc>
 800c53c:	9a05      	ldr	r2, [sp, #20]
 800c53e:	2a01      	cmp	r2, #1
 800c540:	f300 80a8 	bgt.w	800c694 <_dtoa_r+0x89c>
 800c544:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c546:	2a00      	cmp	r2, #0
 800c548:	f000 80a0 	beq.w	800c68c <_dtoa_r+0x894>
 800c54c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c550:	9e06      	ldr	r6, [sp, #24]
 800c552:	4645      	mov	r5, r8
 800c554:	9a04      	ldr	r2, [sp, #16]
 800c556:	2101      	movs	r1, #1
 800c558:	441a      	add	r2, r3
 800c55a:	4620      	mov	r0, r4
 800c55c:	4498      	add	r8, r3
 800c55e:	9204      	str	r2, [sp, #16]
 800c560:	f7fe fd94 	bl	800b08c <__i2b>
 800c564:	4607      	mov	r7, r0
 800c566:	2d00      	cmp	r5, #0
 800c568:	dd0b      	ble.n	800c582 <_dtoa_r+0x78a>
 800c56a:	9b04      	ldr	r3, [sp, #16]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	dd08      	ble.n	800c582 <_dtoa_r+0x78a>
 800c570:	42ab      	cmp	r3, r5
 800c572:	9a04      	ldr	r2, [sp, #16]
 800c574:	bfa8      	it	ge
 800c576:	462b      	movge	r3, r5
 800c578:	eba8 0803 	sub.w	r8, r8, r3
 800c57c:	1aed      	subs	r5, r5, r3
 800c57e:	1ad3      	subs	r3, r2, r3
 800c580:	9304      	str	r3, [sp, #16]
 800c582:	9b06      	ldr	r3, [sp, #24]
 800c584:	b1fb      	cbz	r3, 800c5c6 <_dtoa_r+0x7ce>
 800c586:	9b08      	ldr	r3, [sp, #32]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	f000 809f 	beq.w	800c6cc <_dtoa_r+0x8d4>
 800c58e:	2e00      	cmp	r6, #0
 800c590:	dd11      	ble.n	800c5b6 <_dtoa_r+0x7be>
 800c592:	4639      	mov	r1, r7
 800c594:	4632      	mov	r2, r6
 800c596:	4620      	mov	r0, r4
 800c598:	f7fe fe34 	bl	800b204 <__pow5mult>
 800c59c:	465a      	mov	r2, fp
 800c59e:	4601      	mov	r1, r0
 800c5a0:	4607      	mov	r7, r0
 800c5a2:	4620      	mov	r0, r4
 800c5a4:	f7fe fd88 	bl	800b0b8 <__multiply>
 800c5a8:	4659      	mov	r1, fp
 800c5aa:	9007      	str	r0, [sp, #28]
 800c5ac:	4620      	mov	r0, r4
 800c5ae:	f7fe fcb1 	bl	800af14 <_Bfree>
 800c5b2:	9b07      	ldr	r3, [sp, #28]
 800c5b4:	469b      	mov	fp, r3
 800c5b6:	9b06      	ldr	r3, [sp, #24]
 800c5b8:	1b9a      	subs	r2, r3, r6
 800c5ba:	d004      	beq.n	800c5c6 <_dtoa_r+0x7ce>
 800c5bc:	4659      	mov	r1, fp
 800c5be:	4620      	mov	r0, r4
 800c5c0:	f7fe fe20 	bl	800b204 <__pow5mult>
 800c5c4:	4683      	mov	fp, r0
 800c5c6:	2101      	movs	r1, #1
 800c5c8:	4620      	mov	r0, r4
 800c5ca:	f7fe fd5f 	bl	800b08c <__i2b>
 800c5ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	4606      	mov	r6, r0
 800c5d4:	dd7c      	ble.n	800c6d0 <_dtoa_r+0x8d8>
 800c5d6:	461a      	mov	r2, r3
 800c5d8:	4601      	mov	r1, r0
 800c5da:	4620      	mov	r0, r4
 800c5dc:	f7fe fe12 	bl	800b204 <__pow5mult>
 800c5e0:	9b05      	ldr	r3, [sp, #20]
 800c5e2:	2b01      	cmp	r3, #1
 800c5e4:	4606      	mov	r6, r0
 800c5e6:	dd76      	ble.n	800c6d6 <_dtoa_r+0x8de>
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	9306      	str	r3, [sp, #24]
 800c5ec:	6933      	ldr	r3, [r6, #16]
 800c5ee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c5f2:	6918      	ldr	r0, [r3, #16]
 800c5f4:	f7fe fcfa 	bl	800afec <__hi0bits>
 800c5f8:	f1c0 0020 	rsb	r0, r0, #32
 800c5fc:	9b04      	ldr	r3, [sp, #16]
 800c5fe:	4418      	add	r0, r3
 800c600:	f010 001f 	ands.w	r0, r0, #31
 800c604:	f000 8086 	beq.w	800c714 <_dtoa_r+0x91c>
 800c608:	f1c0 0320 	rsb	r3, r0, #32
 800c60c:	2b04      	cmp	r3, #4
 800c60e:	dd7f      	ble.n	800c710 <_dtoa_r+0x918>
 800c610:	f1c0 001c 	rsb	r0, r0, #28
 800c614:	9b04      	ldr	r3, [sp, #16]
 800c616:	4403      	add	r3, r0
 800c618:	4480      	add	r8, r0
 800c61a:	4405      	add	r5, r0
 800c61c:	9304      	str	r3, [sp, #16]
 800c61e:	f1b8 0f00 	cmp.w	r8, #0
 800c622:	dd05      	ble.n	800c630 <_dtoa_r+0x838>
 800c624:	4659      	mov	r1, fp
 800c626:	4642      	mov	r2, r8
 800c628:	4620      	mov	r0, r4
 800c62a:	f7fe fe45 	bl	800b2b8 <__lshift>
 800c62e:	4683      	mov	fp, r0
 800c630:	9b04      	ldr	r3, [sp, #16]
 800c632:	2b00      	cmp	r3, #0
 800c634:	dd05      	ble.n	800c642 <_dtoa_r+0x84a>
 800c636:	4631      	mov	r1, r6
 800c638:	461a      	mov	r2, r3
 800c63a:	4620      	mov	r0, r4
 800c63c:	f7fe fe3c 	bl	800b2b8 <__lshift>
 800c640:	4606      	mov	r6, r0
 800c642:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c644:	2b00      	cmp	r3, #0
 800c646:	d069      	beq.n	800c71c <_dtoa_r+0x924>
 800c648:	4631      	mov	r1, r6
 800c64a:	4658      	mov	r0, fp
 800c64c:	f7fe fea0 	bl	800b390 <__mcmp>
 800c650:	2800      	cmp	r0, #0
 800c652:	da63      	bge.n	800c71c <_dtoa_r+0x924>
 800c654:	2300      	movs	r3, #0
 800c656:	4659      	mov	r1, fp
 800c658:	220a      	movs	r2, #10
 800c65a:	4620      	mov	r0, r4
 800c65c:	f7fe fc7c 	bl	800af58 <__multadd>
 800c660:	9b08      	ldr	r3, [sp, #32]
 800c662:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c666:	4683      	mov	fp, r0
 800c668:	2b00      	cmp	r3, #0
 800c66a:	f000 818f 	beq.w	800c98c <_dtoa_r+0xb94>
 800c66e:	4639      	mov	r1, r7
 800c670:	2300      	movs	r3, #0
 800c672:	220a      	movs	r2, #10
 800c674:	4620      	mov	r0, r4
 800c676:	f7fe fc6f 	bl	800af58 <__multadd>
 800c67a:	f1b9 0f00 	cmp.w	r9, #0
 800c67e:	4607      	mov	r7, r0
 800c680:	f300 808e 	bgt.w	800c7a0 <_dtoa_r+0x9a8>
 800c684:	9b05      	ldr	r3, [sp, #20]
 800c686:	2b02      	cmp	r3, #2
 800c688:	dc50      	bgt.n	800c72c <_dtoa_r+0x934>
 800c68a:	e089      	b.n	800c7a0 <_dtoa_r+0x9a8>
 800c68c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c68e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c692:	e75d      	b.n	800c550 <_dtoa_r+0x758>
 800c694:	9b01      	ldr	r3, [sp, #4]
 800c696:	1e5e      	subs	r6, r3, #1
 800c698:	9b06      	ldr	r3, [sp, #24]
 800c69a:	42b3      	cmp	r3, r6
 800c69c:	bfbf      	itttt	lt
 800c69e:	9b06      	ldrlt	r3, [sp, #24]
 800c6a0:	9606      	strlt	r6, [sp, #24]
 800c6a2:	1af2      	sublt	r2, r6, r3
 800c6a4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800c6a6:	bfb6      	itet	lt
 800c6a8:	189b      	addlt	r3, r3, r2
 800c6aa:	1b9e      	subge	r6, r3, r6
 800c6ac:	930d      	strlt	r3, [sp, #52]	; 0x34
 800c6ae:	9b01      	ldr	r3, [sp, #4]
 800c6b0:	bfb8      	it	lt
 800c6b2:	2600      	movlt	r6, #0
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	bfb5      	itete	lt
 800c6b8:	eba8 0503 	sublt.w	r5, r8, r3
 800c6bc:	9b01      	ldrge	r3, [sp, #4]
 800c6be:	2300      	movlt	r3, #0
 800c6c0:	4645      	movge	r5, r8
 800c6c2:	e747      	b.n	800c554 <_dtoa_r+0x75c>
 800c6c4:	9e06      	ldr	r6, [sp, #24]
 800c6c6:	9f08      	ldr	r7, [sp, #32]
 800c6c8:	4645      	mov	r5, r8
 800c6ca:	e74c      	b.n	800c566 <_dtoa_r+0x76e>
 800c6cc:	9a06      	ldr	r2, [sp, #24]
 800c6ce:	e775      	b.n	800c5bc <_dtoa_r+0x7c4>
 800c6d0:	9b05      	ldr	r3, [sp, #20]
 800c6d2:	2b01      	cmp	r3, #1
 800c6d4:	dc18      	bgt.n	800c708 <_dtoa_r+0x910>
 800c6d6:	9b02      	ldr	r3, [sp, #8]
 800c6d8:	b9b3      	cbnz	r3, 800c708 <_dtoa_r+0x910>
 800c6da:	9b03      	ldr	r3, [sp, #12]
 800c6dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c6e0:	b9a3      	cbnz	r3, 800c70c <_dtoa_r+0x914>
 800c6e2:	9b03      	ldr	r3, [sp, #12]
 800c6e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c6e8:	0d1b      	lsrs	r3, r3, #20
 800c6ea:	051b      	lsls	r3, r3, #20
 800c6ec:	b12b      	cbz	r3, 800c6fa <_dtoa_r+0x902>
 800c6ee:	9b04      	ldr	r3, [sp, #16]
 800c6f0:	3301      	adds	r3, #1
 800c6f2:	9304      	str	r3, [sp, #16]
 800c6f4:	f108 0801 	add.w	r8, r8, #1
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	9306      	str	r3, [sp, #24]
 800c6fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	f47f af74 	bne.w	800c5ec <_dtoa_r+0x7f4>
 800c704:	2001      	movs	r0, #1
 800c706:	e779      	b.n	800c5fc <_dtoa_r+0x804>
 800c708:	2300      	movs	r3, #0
 800c70a:	e7f6      	b.n	800c6fa <_dtoa_r+0x902>
 800c70c:	9b02      	ldr	r3, [sp, #8]
 800c70e:	e7f4      	b.n	800c6fa <_dtoa_r+0x902>
 800c710:	d085      	beq.n	800c61e <_dtoa_r+0x826>
 800c712:	4618      	mov	r0, r3
 800c714:	301c      	adds	r0, #28
 800c716:	e77d      	b.n	800c614 <_dtoa_r+0x81c>
 800c718:	40240000 	.word	0x40240000
 800c71c:	9b01      	ldr	r3, [sp, #4]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	dc38      	bgt.n	800c794 <_dtoa_r+0x99c>
 800c722:	9b05      	ldr	r3, [sp, #20]
 800c724:	2b02      	cmp	r3, #2
 800c726:	dd35      	ble.n	800c794 <_dtoa_r+0x99c>
 800c728:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c72c:	f1b9 0f00 	cmp.w	r9, #0
 800c730:	d10d      	bne.n	800c74e <_dtoa_r+0x956>
 800c732:	4631      	mov	r1, r6
 800c734:	464b      	mov	r3, r9
 800c736:	2205      	movs	r2, #5
 800c738:	4620      	mov	r0, r4
 800c73a:	f7fe fc0d 	bl	800af58 <__multadd>
 800c73e:	4601      	mov	r1, r0
 800c740:	4606      	mov	r6, r0
 800c742:	4658      	mov	r0, fp
 800c744:	f7fe fe24 	bl	800b390 <__mcmp>
 800c748:	2800      	cmp	r0, #0
 800c74a:	f73f adbd 	bgt.w	800c2c8 <_dtoa_r+0x4d0>
 800c74e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c750:	9d00      	ldr	r5, [sp, #0]
 800c752:	ea6f 0a03 	mvn.w	sl, r3
 800c756:	f04f 0800 	mov.w	r8, #0
 800c75a:	4631      	mov	r1, r6
 800c75c:	4620      	mov	r0, r4
 800c75e:	f7fe fbd9 	bl	800af14 <_Bfree>
 800c762:	2f00      	cmp	r7, #0
 800c764:	f43f aeb4 	beq.w	800c4d0 <_dtoa_r+0x6d8>
 800c768:	f1b8 0f00 	cmp.w	r8, #0
 800c76c:	d005      	beq.n	800c77a <_dtoa_r+0x982>
 800c76e:	45b8      	cmp	r8, r7
 800c770:	d003      	beq.n	800c77a <_dtoa_r+0x982>
 800c772:	4641      	mov	r1, r8
 800c774:	4620      	mov	r0, r4
 800c776:	f7fe fbcd 	bl	800af14 <_Bfree>
 800c77a:	4639      	mov	r1, r7
 800c77c:	4620      	mov	r0, r4
 800c77e:	f7fe fbc9 	bl	800af14 <_Bfree>
 800c782:	e6a5      	b.n	800c4d0 <_dtoa_r+0x6d8>
 800c784:	2600      	movs	r6, #0
 800c786:	4637      	mov	r7, r6
 800c788:	e7e1      	b.n	800c74e <_dtoa_r+0x956>
 800c78a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c78c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c790:	4637      	mov	r7, r6
 800c792:	e599      	b.n	800c2c8 <_dtoa_r+0x4d0>
 800c794:	9b08      	ldr	r3, [sp, #32]
 800c796:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	f000 80fd 	beq.w	800c99a <_dtoa_r+0xba2>
 800c7a0:	2d00      	cmp	r5, #0
 800c7a2:	dd05      	ble.n	800c7b0 <_dtoa_r+0x9b8>
 800c7a4:	4639      	mov	r1, r7
 800c7a6:	462a      	mov	r2, r5
 800c7a8:	4620      	mov	r0, r4
 800c7aa:	f7fe fd85 	bl	800b2b8 <__lshift>
 800c7ae:	4607      	mov	r7, r0
 800c7b0:	9b06      	ldr	r3, [sp, #24]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d05c      	beq.n	800c870 <_dtoa_r+0xa78>
 800c7b6:	6879      	ldr	r1, [r7, #4]
 800c7b8:	4620      	mov	r0, r4
 800c7ba:	f7fe fb6b 	bl	800ae94 <_Balloc>
 800c7be:	4605      	mov	r5, r0
 800c7c0:	b928      	cbnz	r0, 800c7ce <_dtoa_r+0x9d6>
 800c7c2:	4b80      	ldr	r3, [pc, #512]	; (800c9c4 <_dtoa_r+0xbcc>)
 800c7c4:	4602      	mov	r2, r0
 800c7c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c7ca:	f7ff bb2e 	b.w	800be2a <_dtoa_r+0x32>
 800c7ce:	693a      	ldr	r2, [r7, #16]
 800c7d0:	3202      	adds	r2, #2
 800c7d2:	0092      	lsls	r2, r2, #2
 800c7d4:	f107 010c 	add.w	r1, r7, #12
 800c7d8:	300c      	adds	r0, #12
 800c7da:	f7fd fdf1 	bl	800a3c0 <memcpy>
 800c7de:	2201      	movs	r2, #1
 800c7e0:	4629      	mov	r1, r5
 800c7e2:	4620      	mov	r0, r4
 800c7e4:	f7fe fd68 	bl	800b2b8 <__lshift>
 800c7e8:	9b00      	ldr	r3, [sp, #0]
 800c7ea:	3301      	adds	r3, #1
 800c7ec:	9301      	str	r3, [sp, #4]
 800c7ee:	9b00      	ldr	r3, [sp, #0]
 800c7f0:	444b      	add	r3, r9
 800c7f2:	9307      	str	r3, [sp, #28]
 800c7f4:	9b02      	ldr	r3, [sp, #8]
 800c7f6:	f003 0301 	and.w	r3, r3, #1
 800c7fa:	46b8      	mov	r8, r7
 800c7fc:	9306      	str	r3, [sp, #24]
 800c7fe:	4607      	mov	r7, r0
 800c800:	9b01      	ldr	r3, [sp, #4]
 800c802:	4631      	mov	r1, r6
 800c804:	3b01      	subs	r3, #1
 800c806:	4658      	mov	r0, fp
 800c808:	9302      	str	r3, [sp, #8]
 800c80a:	f7ff fa67 	bl	800bcdc <quorem>
 800c80e:	4603      	mov	r3, r0
 800c810:	3330      	adds	r3, #48	; 0x30
 800c812:	9004      	str	r0, [sp, #16]
 800c814:	4641      	mov	r1, r8
 800c816:	4658      	mov	r0, fp
 800c818:	9308      	str	r3, [sp, #32]
 800c81a:	f7fe fdb9 	bl	800b390 <__mcmp>
 800c81e:	463a      	mov	r2, r7
 800c820:	4681      	mov	r9, r0
 800c822:	4631      	mov	r1, r6
 800c824:	4620      	mov	r0, r4
 800c826:	f7fe fdcf 	bl	800b3c8 <__mdiff>
 800c82a:	68c2      	ldr	r2, [r0, #12]
 800c82c:	9b08      	ldr	r3, [sp, #32]
 800c82e:	4605      	mov	r5, r0
 800c830:	bb02      	cbnz	r2, 800c874 <_dtoa_r+0xa7c>
 800c832:	4601      	mov	r1, r0
 800c834:	4658      	mov	r0, fp
 800c836:	f7fe fdab 	bl	800b390 <__mcmp>
 800c83a:	9b08      	ldr	r3, [sp, #32]
 800c83c:	4602      	mov	r2, r0
 800c83e:	4629      	mov	r1, r5
 800c840:	4620      	mov	r0, r4
 800c842:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800c846:	f7fe fb65 	bl	800af14 <_Bfree>
 800c84a:	9b05      	ldr	r3, [sp, #20]
 800c84c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c84e:	9d01      	ldr	r5, [sp, #4]
 800c850:	ea43 0102 	orr.w	r1, r3, r2
 800c854:	9b06      	ldr	r3, [sp, #24]
 800c856:	430b      	orrs	r3, r1
 800c858:	9b08      	ldr	r3, [sp, #32]
 800c85a:	d10d      	bne.n	800c878 <_dtoa_r+0xa80>
 800c85c:	2b39      	cmp	r3, #57	; 0x39
 800c85e:	d029      	beq.n	800c8b4 <_dtoa_r+0xabc>
 800c860:	f1b9 0f00 	cmp.w	r9, #0
 800c864:	dd01      	ble.n	800c86a <_dtoa_r+0xa72>
 800c866:	9b04      	ldr	r3, [sp, #16]
 800c868:	3331      	adds	r3, #49	; 0x31
 800c86a:	9a02      	ldr	r2, [sp, #8]
 800c86c:	7013      	strb	r3, [r2, #0]
 800c86e:	e774      	b.n	800c75a <_dtoa_r+0x962>
 800c870:	4638      	mov	r0, r7
 800c872:	e7b9      	b.n	800c7e8 <_dtoa_r+0x9f0>
 800c874:	2201      	movs	r2, #1
 800c876:	e7e2      	b.n	800c83e <_dtoa_r+0xa46>
 800c878:	f1b9 0f00 	cmp.w	r9, #0
 800c87c:	db06      	blt.n	800c88c <_dtoa_r+0xa94>
 800c87e:	9905      	ldr	r1, [sp, #20]
 800c880:	ea41 0909 	orr.w	r9, r1, r9
 800c884:	9906      	ldr	r1, [sp, #24]
 800c886:	ea59 0101 	orrs.w	r1, r9, r1
 800c88a:	d120      	bne.n	800c8ce <_dtoa_r+0xad6>
 800c88c:	2a00      	cmp	r2, #0
 800c88e:	ddec      	ble.n	800c86a <_dtoa_r+0xa72>
 800c890:	4659      	mov	r1, fp
 800c892:	2201      	movs	r2, #1
 800c894:	4620      	mov	r0, r4
 800c896:	9301      	str	r3, [sp, #4]
 800c898:	f7fe fd0e 	bl	800b2b8 <__lshift>
 800c89c:	4631      	mov	r1, r6
 800c89e:	4683      	mov	fp, r0
 800c8a0:	f7fe fd76 	bl	800b390 <__mcmp>
 800c8a4:	2800      	cmp	r0, #0
 800c8a6:	9b01      	ldr	r3, [sp, #4]
 800c8a8:	dc02      	bgt.n	800c8b0 <_dtoa_r+0xab8>
 800c8aa:	d1de      	bne.n	800c86a <_dtoa_r+0xa72>
 800c8ac:	07da      	lsls	r2, r3, #31
 800c8ae:	d5dc      	bpl.n	800c86a <_dtoa_r+0xa72>
 800c8b0:	2b39      	cmp	r3, #57	; 0x39
 800c8b2:	d1d8      	bne.n	800c866 <_dtoa_r+0xa6e>
 800c8b4:	9a02      	ldr	r2, [sp, #8]
 800c8b6:	2339      	movs	r3, #57	; 0x39
 800c8b8:	7013      	strb	r3, [r2, #0]
 800c8ba:	462b      	mov	r3, r5
 800c8bc:	461d      	mov	r5, r3
 800c8be:	3b01      	subs	r3, #1
 800c8c0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c8c4:	2a39      	cmp	r2, #57	; 0x39
 800c8c6:	d050      	beq.n	800c96a <_dtoa_r+0xb72>
 800c8c8:	3201      	adds	r2, #1
 800c8ca:	701a      	strb	r2, [r3, #0]
 800c8cc:	e745      	b.n	800c75a <_dtoa_r+0x962>
 800c8ce:	2a00      	cmp	r2, #0
 800c8d0:	dd03      	ble.n	800c8da <_dtoa_r+0xae2>
 800c8d2:	2b39      	cmp	r3, #57	; 0x39
 800c8d4:	d0ee      	beq.n	800c8b4 <_dtoa_r+0xabc>
 800c8d6:	3301      	adds	r3, #1
 800c8d8:	e7c7      	b.n	800c86a <_dtoa_r+0xa72>
 800c8da:	9a01      	ldr	r2, [sp, #4]
 800c8dc:	9907      	ldr	r1, [sp, #28]
 800c8de:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c8e2:	428a      	cmp	r2, r1
 800c8e4:	d02a      	beq.n	800c93c <_dtoa_r+0xb44>
 800c8e6:	4659      	mov	r1, fp
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	220a      	movs	r2, #10
 800c8ec:	4620      	mov	r0, r4
 800c8ee:	f7fe fb33 	bl	800af58 <__multadd>
 800c8f2:	45b8      	cmp	r8, r7
 800c8f4:	4683      	mov	fp, r0
 800c8f6:	f04f 0300 	mov.w	r3, #0
 800c8fa:	f04f 020a 	mov.w	r2, #10
 800c8fe:	4641      	mov	r1, r8
 800c900:	4620      	mov	r0, r4
 800c902:	d107      	bne.n	800c914 <_dtoa_r+0xb1c>
 800c904:	f7fe fb28 	bl	800af58 <__multadd>
 800c908:	4680      	mov	r8, r0
 800c90a:	4607      	mov	r7, r0
 800c90c:	9b01      	ldr	r3, [sp, #4]
 800c90e:	3301      	adds	r3, #1
 800c910:	9301      	str	r3, [sp, #4]
 800c912:	e775      	b.n	800c800 <_dtoa_r+0xa08>
 800c914:	f7fe fb20 	bl	800af58 <__multadd>
 800c918:	4639      	mov	r1, r7
 800c91a:	4680      	mov	r8, r0
 800c91c:	2300      	movs	r3, #0
 800c91e:	220a      	movs	r2, #10
 800c920:	4620      	mov	r0, r4
 800c922:	f7fe fb19 	bl	800af58 <__multadd>
 800c926:	4607      	mov	r7, r0
 800c928:	e7f0      	b.n	800c90c <_dtoa_r+0xb14>
 800c92a:	f1b9 0f00 	cmp.w	r9, #0
 800c92e:	9a00      	ldr	r2, [sp, #0]
 800c930:	bfcc      	ite	gt
 800c932:	464d      	movgt	r5, r9
 800c934:	2501      	movle	r5, #1
 800c936:	4415      	add	r5, r2
 800c938:	f04f 0800 	mov.w	r8, #0
 800c93c:	4659      	mov	r1, fp
 800c93e:	2201      	movs	r2, #1
 800c940:	4620      	mov	r0, r4
 800c942:	9301      	str	r3, [sp, #4]
 800c944:	f7fe fcb8 	bl	800b2b8 <__lshift>
 800c948:	4631      	mov	r1, r6
 800c94a:	4683      	mov	fp, r0
 800c94c:	f7fe fd20 	bl	800b390 <__mcmp>
 800c950:	2800      	cmp	r0, #0
 800c952:	dcb2      	bgt.n	800c8ba <_dtoa_r+0xac2>
 800c954:	d102      	bne.n	800c95c <_dtoa_r+0xb64>
 800c956:	9b01      	ldr	r3, [sp, #4]
 800c958:	07db      	lsls	r3, r3, #31
 800c95a:	d4ae      	bmi.n	800c8ba <_dtoa_r+0xac2>
 800c95c:	462b      	mov	r3, r5
 800c95e:	461d      	mov	r5, r3
 800c960:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c964:	2a30      	cmp	r2, #48	; 0x30
 800c966:	d0fa      	beq.n	800c95e <_dtoa_r+0xb66>
 800c968:	e6f7      	b.n	800c75a <_dtoa_r+0x962>
 800c96a:	9a00      	ldr	r2, [sp, #0]
 800c96c:	429a      	cmp	r2, r3
 800c96e:	d1a5      	bne.n	800c8bc <_dtoa_r+0xac4>
 800c970:	f10a 0a01 	add.w	sl, sl, #1
 800c974:	2331      	movs	r3, #49	; 0x31
 800c976:	e779      	b.n	800c86c <_dtoa_r+0xa74>
 800c978:	4b13      	ldr	r3, [pc, #76]	; (800c9c8 <_dtoa_r+0xbd0>)
 800c97a:	f7ff baaf 	b.w	800bedc <_dtoa_r+0xe4>
 800c97e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c980:	2b00      	cmp	r3, #0
 800c982:	f47f aa86 	bne.w	800be92 <_dtoa_r+0x9a>
 800c986:	4b11      	ldr	r3, [pc, #68]	; (800c9cc <_dtoa_r+0xbd4>)
 800c988:	f7ff baa8 	b.w	800bedc <_dtoa_r+0xe4>
 800c98c:	f1b9 0f00 	cmp.w	r9, #0
 800c990:	dc03      	bgt.n	800c99a <_dtoa_r+0xba2>
 800c992:	9b05      	ldr	r3, [sp, #20]
 800c994:	2b02      	cmp	r3, #2
 800c996:	f73f aec9 	bgt.w	800c72c <_dtoa_r+0x934>
 800c99a:	9d00      	ldr	r5, [sp, #0]
 800c99c:	4631      	mov	r1, r6
 800c99e:	4658      	mov	r0, fp
 800c9a0:	f7ff f99c 	bl	800bcdc <quorem>
 800c9a4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c9a8:	f805 3b01 	strb.w	r3, [r5], #1
 800c9ac:	9a00      	ldr	r2, [sp, #0]
 800c9ae:	1aaa      	subs	r2, r5, r2
 800c9b0:	4591      	cmp	r9, r2
 800c9b2:	ddba      	ble.n	800c92a <_dtoa_r+0xb32>
 800c9b4:	4659      	mov	r1, fp
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	220a      	movs	r2, #10
 800c9ba:	4620      	mov	r0, r4
 800c9bc:	f7fe facc 	bl	800af58 <__multadd>
 800c9c0:	4683      	mov	fp, r0
 800c9c2:	e7eb      	b.n	800c99c <_dtoa_r+0xba4>
 800c9c4:	0800dd07 	.word	0x0800dd07
 800c9c8:	0800de90 	.word	0x0800de90
 800c9cc:	0800de83 	.word	0x0800de83

0800c9d0 <fiprintf>:
 800c9d0:	b40e      	push	{r1, r2, r3}
 800c9d2:	b503      	push	{r0, r1, lr}
 800c9d4:	4601      	mov	r1, r0
 800c9d6:	ab03      	add	r3, sp, #12
 800c9d8:	4805      	ldr	r0, [pc, #20]	; (800c9f0 <fiprintf+0x20>)
 800c9da:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9de:	6800      	ldr	r0, [r0, #0]
 800c9e0:	9301      	str	r3, [sp, #4]
 800c9e2:	f7fe fe2b 	bl	800b63c <_vfiprintf_r>
 800c9e6:	b002      	add	sp, #8
 800c9e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c9ec:	b003      	add	sp, #12
 800c9ee:	4770      	bx	lr
 800c9f0:	20000018 	.word	0x20000018

0800c9f4 <_fstat_r>:
 800c9f4:	b538      	push	{r3, r4, r5, lr}
 800c9f6:	4d07      	ldr	r5, [pc, #28]	; (800ca14 <_fstat_r+0x20>)
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	4604      	mov	r4, r0
 800c9fc:	4608      	mov	r0, r1
 800c9fe:	4611      	mov	r1, r2
 800ca00:	602b      	str	r3, [r5, #0]
 800ca02:	f7f7 fa20 	bl	8003e46 <_fstat>
 800ca06:	1c43      	adds	r3, r0, #1
 800ca08:	d102      	bne.n	800ca10 <_fstat_r+0x1c>
 800ca0a:	682b      	ldr	r3, [r5, #0]
 800ca0c:	b103      	cbz	r3, 800ca10 <_fstat_r+0x1c>
 800ca0e:	6023      	str	r3, [r4, #0]
 800ca10:	bd38      	pop	{r3, r4, r5, pc}
 800ca12:	bf00      	nop
 800ca14:	200051f0 	.word	0x200051f0

0800ca18 <_isatty_r>:
 800ca18:	b538      	push	{r3, r4, r5, lr}
 800ca1a:	4d06      	ldr	r5, [pc, #24]	; (800ca34 <_isatty_r+0x1c>)
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	4604      	mov	r4, r0
 800ca20:	4608      	mov	r0, r1
 800ca22:	602b      	str	r3, [r5, #0]
 800ca24:	f7f7 fa1f 	bl	8003e66 <_isatty>
 800ca28:	1c43      	adds	r3, r0, #1
 800ca2a:	d102      	bne.n	800ca32 <_isatty_r+0x1a>
 800ca2c:	682b      	ldr	r3, [r5, #0]
 800ca2e:	b103      	cbz	r3, 800ca32 <_isatty_r+0x1a>
 800ca30:	6023      	str	r3, [r4, #0]
 800ca32:	bd38      	pop	{r3, r4, r5, pc}
 800ca34:	200051f0 	.word	0x200051f0

0800ca38 <_lseek_r>:
 800ca38:	b538      	push	{r3, r4, r5, lr}
 800ca3a:	4d07      	ldr	r5, [pc, #28]	; (800ca58 <_lseek_r+0x20>)
 800ca3c:	4604      	mov	r4, r0
 800ca3e:	4608      	mov	r0, r1
 800ca40:	4611      	mov	r1, r2
 800ca42:	2200      	movs	r2, #0
 800ca44:	602a      	str	r2, [r5, #0]
 800ca46:	461a      	mov	r2, r3
 800ca48:	f7f7 fa18 	bl	8003e7c <_lseek>
 800ca4c:	1c43      	adds	r3, r0, #1
 800ca4e:	d102      	bne.n	800ca56 <_lseek_r+0x1e>
 800ca50:	682b      	ldr	r3, [r5, #0]
 800ca52:	b103      	cbz	r3, 800ca56 <_lseek_r+0x1e>
 800ca54:	6023      	str	r3, [r4, #0]
 800ca56:	bd38      	pop	{r3, r4, r5, pc}
 800ca58:	200051f0 	.word	0x200051f0

0800ca5c <_read_r>:
 800ca5c:	b538      	push	{r3, r4, r5, lr}
 800ca5e:	4d07      	ldr	r5, [pc, #28]	; (800ca7c <_read_r+0x20>)
 800ca60:	4604      	mov	r4, r0
 800ca62:	4608      	mov	r0, r1
 800ca64:	4611      	mov	r1, r2
 800ca66:	2200      	movs	r2, #0
 800ca68:	602a      	str	r2, [r5, #0]
 800ca6a:	461a      	mov	r2, r3
 800ca6c:	f7f7 f9a6 	bl	8003dbc <_read>
 800ca70:	1c43      	adds	r3, r0, #1
 800ca72:	d102      	bne.n	800ca7a <_read_r+0x1e>
 800ca74:	682b      	ldr	r3, [r5, #0]
 800ca76:	b103      	cbz	r3, 800ca7a <_read_r+0x1e>
 800ca78:	6023      	str	r3, [r4, #0]
 800ca7a:	bd38      	pop	{r3, r4, r5, pc}
 800ca7c:	200051f0 	.word	0x200051f0

0800ca80 <abort>:
 800ca80:	b508      	push	{r3, lr}
 800ca82:	2006      	movs	r0, #6
 800ca84:	f000 f82c 	bl	800cae0 <raise>
 800ca88:	2001      	movs	r0, #1
 800ca8a:	f7f7 f98d 	bl	8003da8 <_exit>

0800ca8e <_raise_r>:
 800ca8e:	291f      	cmp	r1, #31
 800ca90:	b538      	push	{r3, r4, r5, lr}
 800ca92:	4604      	mov	r4, r0
 800ca94:	460d      	mov	r5, r1
 800ca96:	d904      	bls.n	800caa2 <_raise_r+0x14>
 800ca98:	2316      	movs	r3, #22
 800ca9a:	6003      	str	r3, [r0, #0]
 800ca9c:	f04f 30ff 	mov.w	r0, #4294967295
 800caa0:	bd38      	pop	{r3, r4, r5, pc}
 800caa2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800caa4:	b112      	cbz	r2, 800caac <_raise_r+0x1e>
 800caa6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800caaa:	b94b      	cbnz	r3, 800cac0 <_raise_r+0x32>
 800caac:	4620      	mov	r0, r4
 800caae:	f000 f831 	bl	800cb14 <_getpid_r>
 800cab2:	462a      	mov	r2, r5
 800cab4:	4601      	mov	r1, r0
 800cab6:	4620      	mov	r0, r4
 800cab8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cabc:	f000 b818 	b.w	800caf0 <_kill_r>
 800cac0:	2b01      	cmp	r3, #1
 800cac2:	d00a      	beq.n	800cada <_raise_r+0x4c>
 800cac4:	1c59      	adds	r1, r3, #1
 800cac6:	d103      	bne.n	800cad0 <_raise_r+0x42>
 800cac8:	2316      	movs	r3, #22
 800caca:	6003      	str	r3, [r0, #0]
 800cacc:	2001      	movs	r0, #1
 800cace:	e7e7      	b.n	800caa0 <_raise_r+0x12>
 800cad0:	2400      	movs	r4, #0
 800cad2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cad6:	4628      	mov	r0, r5
 800cad8:	4798      	blx	r3
 800cada:	2000      	movs	r0, #0
 800cadc:	e7e0      	b.n	800caa0 <_raise_r+0x12>
	...

0800cae0 <raise>:
 800cae0:	4b02      	ldr	r3, [pc, #8]	; (800caec <raise+0xc>)
 800cae2:	4601      	mov	r1, r0
 800cae4:	6818      	ldr	r0, [r3, #0]
 800cae6:	f7ff bfd2 	b.w	800ca8e <_raise_r>
 800caea:	bf00      	nop
 800caec:	20000018 	.word	0x20000018

0800caf0 <_kill_r>:
 800caf0:	b538      	push	{r3, r4, r5, lr}
 800caf2:	4d07      	ldr	r5, [pc, #28]	; (800cb10 <_kill_r+0x20>)
 800caf4:	2300      	movs	r3, #0
 800caf6:	4604      	mov	r4, r0
 800caf8:	4608      	mov	r0, r1
 800cafa:	4611      	mov	r1, r2
 800cafc:	602b      	str	r3, [r5, #0]
 800cafe:	f7f7 f943 	bl	8003d88 <_kill>
 800cb02:	1c43      	adds	r3, r0, #1
 800cb04:	d102      	bne.n	800cb0c <_kill_r+0x1c>
 800cb06:	682b      	ldr	r3, [r5, #0]
 800cb08:	b103      	cbz	r3, 800cb0c <_kill_r+0x1c>
 800cb0a:	6023      	str	r3, [r4, #0]
 800cb0c:	bd38      	pop	{r3, r4, r5, pc}
 800cb0e:	bf00      	nop
 800cb10:	200051f0 	.word	0x200051f0

0800cb14 <_getpid_r>:
 800cb14:	f7f7 b930 	b.w	8003d78 <_getpid>

0800cb18 <_init>:
 800cb18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb1a:	bf00      	nop
 800cb1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb1e:	bc08      	pop	{r3}
 800cb20:	469e      	mov	lr, r3
 800cb22:	4770      	bx	lr

0800cb24 <_fini>:
 800cb24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb26:	bf00      	nop
 800cb28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb2a:	bc08      	pop	{r3}
 800cb2c:	469e      	mov	lr, r3
 800cb2e:	4770      	bx	lr
