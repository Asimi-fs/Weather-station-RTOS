
Weather-station-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4b8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004f98  0800d658  0800d658  0001d658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080125f0  080125f0  000300bc  2**0
                  CONTENTS
  4 .ARM          00000008  080125f0  080125f0  000225f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080125f8  080125f8  000300bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080125f8  080125f8  000225f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080125fc  080125fc  000225fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  08012600  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f38  200000bc  080126bc  000300bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ff4  080126bc  00030ff4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002206a  00000000  00000000  000300ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d64  00000000  00000000  00052156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d0  00000000  00000000  00056ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001280  00000000  00000000  00058390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a066  00000000  00000000  00059610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e418  00000000  00000000  00073676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009260c  00000000  00000000  00091a8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012409a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c60  00000000  00000000  001240f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000bc 	.word	0x200000bc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d640 	.word	0x0800d640

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000c0 	.word	0x200000c0
 80001dc:	0800d640 	.word	0x0800d640

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_ldivmod>:
 80005f8:	b97b      	cbnz	r3, 800061a <__aeabi_ldivmod+0x22>
 80005fa:	b972      	cbnz	r2, 800061a <__aeabi_ldivmod+0x22>
 80005fc:	2900      	cmp	r1, #0
 80005fe:	bfbe      	ittt	lt
 8000600:	2000      	movlt	r0, #0
 8000602:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000606:	e006      	blt.n	8000616 <__aeabi_ldivmod+0x1e>
 8000608:	bf08      	it	eq
 800060a:	2800      	cmpeq	r0, #0
 800060c:	bf1c      	itt	ne
 800060e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000612:	f04f 30ff 	movne.w	r0, #4294967295
 8000616:	f000 b9b9 	b.w	800098c <__aeabi_idiv0>
 800061a:	f1ad 0c08 	sub.w	ip, sp, #8
 800061e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000622:	2900      	cmp	r1, #0
 8000624:	db09      	blt.n	800063a <__aeabi_ldivmod+0x42>
 8000626:	2b00      	cmp	r3, #0
 8000628:	db1a      	blt.n	8000660 <__aeabi_ldivmod+0x68>
 800062a:	f000 f84d 	bl	80006c8 <__udivmoddi4>
 800062e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000632:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000636:	b004      	add	sp, #16
 8000638:	4770      	bx	lr
 800063a:	4240      	negs	r0, r0
 800063c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000640:	2b00      	cmp	r3, #0
 8000642:	db1b      	blt.n	800067c <__aeabi_ldivmod+0x84>
 8000644:	f000 f840 	bl	80006c8 <__udivmoddi4>
 8000648:	f8dd e004 	ldr.w	lr, [sp, #4]
 800064c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000650:	b004      	add	sp, #16
 8000652:	4240      	negs	r0, r0
 8000654:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000658:	4252      	negs	r2, r2
 800065a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800065e:	4770      	bx	lr
 8000660:	4252      	negs	r2, r2
 8000662:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000666:	f000 f82f 	bl	80006c8 <__udivmoddi4>
 800066a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800066e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000672:	b004      	add	sp, #16
 8000674:	4240      	negs	r0, r0
 8000676:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800067a:	4770      	bx	lr
 800067c:	4252      	negs	r2, r2
 800067e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000682:	f000 f821 	bl	80006c8 <__udivmoddi4>
 8000686:	f8dd e004 	ldr.w	lr, [sp, #4]
 800068a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800068e:	b004      	add	sp, #16
 8000690:	4252      	negs	r2, r2
 8000692:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000696:	4770      	bx	lr

08000698 <__aeabi_uldivmod>:
 8000698:	b953      	cbnz	r3, 80006b0 <__aeabi_uldivmod+0x18>
 800069a:	b94a      	cbnz	r2, 80006b0 <__aeabi_uldivmod+0x18>
 800069c:	2900      	cmp	r1, #0
 800069e:	bf08      	it	eq
 80006a0:	2800      	cmpeq	r0, #0
 80006a2:	bf1c      	itt	ne
 80006a4:	f04f 31ff 	movne.w	r1, #4294967295
 80006a8:	f04f 30ff 	movne.w	r0, #4294967295
 80006ac:	f000 b96e 	b.w	800098c <__aeabi_idiv0>
 80006b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006b8:	f000 f806 	bl	80006c8 <__udivmoddi4>
 80006bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006c4:	b004      	add	sp, #16
 80006c6:	4770      	bx	lr

080006c8 <__udivmoddi4>:
 80006c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006cc:	9d08      	ldr	r5, [sp, #32]
 80006ce:	4604      	mov	r4, r0
 80006d0:	468c      	mov	ip, r1
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	f040 8083 	bne.w	80007de <__udivmoddi4+0x116>
 80006d8:	428a      	cmp	r2, r1
 80006da:	4617      	mov	r7, r2
 80006dc:	d947      	bls.n	800076e <__udivmoddi4+0xa6>
 80006de:	fab2 f282 	clz	r2, r2
 80006e2:	b142      	cbz	r2, 80006f6 <__udivmoddi4+0x2e>
 80006e4:	f1c2 0020 	rsb	r0, r2, #32
 80006e8:	fa24 f000 	lsr.w	r0, r4, r0
 80006ec:	4091      	lsls	r1, r2
 80006ee:	4097      	lsls	r7, r2
 80006f0:	ea40 0c01 	orr.w	ip, r0, r1
 80006f4:	4094      	lsls	r4, r2
 80006f6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80006fa:	0c23      	lsrs	r3, r4, #16
 80006fc:	fbbc f6f8 	udiv	r6, ip, r8
 8000700:	fa1f fe87 	uxth.w	lr, r7
 8000704:	fb08 c116 	mls	r1, r8, r6, ip
 8000708:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800070c:	fb06 f10e 	mul.w	r1, r6, lr
 8000710:	4299      	cmp	r1, r3
 8000712:	d909      	bls.n	8000728 <__udivmoddi4+0x60>
 8000714:	18fb      	adds	r3, r7, r3
 8000716:	f106 30ff 	add.w	r0, r6, #4294967295
 800071a:	f080 8119 	bcs.w	8000950 <__udivmoddi4+0x288>
 800071e:	4299      	cmp	r1, r3
 8000720:	f240 8116 	bls.w	8000950 <__udivmoddi4+0x288>
 8000724:	3e02      	subs	r6, #2
 8000726:	443b      	add	r3, r7
 8000728:	1a5b      	subs	r3, r3, r1
 800072a:	b2a4      	uxth	r4, r4
 800072c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000730:	fb08 3310 	mls	r3, r8, r0, r3
 8000734:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000738:	fb00 fe0e 	mul.w	lr, r0, lr
 800073c:	45a6      	cmp	lr, r4
 800073e:	d909      	bls.n	8000754 <__udivmoddi4+0x8c>
 8000740:	193c      	adds	r4, r7, r4
 8000742:	f100 33ff 	add.w	r3, r0, #4294967295
 8000746:	f080 8105 	bcs.w	8000954 <__udivmoddi4+0x28c>
 800074a:	45a6      	cmp	lr, r4
 800074c:	f240 8102 	bls.w	8000954 <__udivmoddi4+0x28c>
 8000750:	3802      	subs	r0, #2
 8000752:	443c      	add	r4, r7
 8000754:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000758:	eba4 040e 	sub.w	r4, r4, lr
 800075c:	2600      	movs	r6, #0
 800075e:	b11d      	cbz	r5, 8000768 <__udivmoddi4+0xa0>
 8000760:	40d4      	lsrs	r4, r2
 8000762:	2300      	movs	r3, #0
 8000764:	e9c5 4300 	strd	r4, r3, [r5]
 8000768:	4631      	mov	r1, r6
 800076a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800076e:	b902      	cbnz	r2, 8000772 <__udivmoddi4+0xaa>
 8000770:	deff      	udf	#255	; 0xff
 8000772:	fab2 f282 	clz	r2, r2
 8000776:	2a00      	cmp	r2, #0
 8000778:	d150      	bne.n	800081c <__udivmoddi4+0x154>
 800077a:	1bcb      	subs	r3, r1, r7
 800077c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000780:	fa1f f887 	uxth.w	r8, r7
 8000784:	2601      	movs	r6, #1
 8000786:	fbb3 fcfe 	udiv	ip, r3, lr
 800078a:	0c21      	lsrs	r1, r4, #16
 800078c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000790:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000794:	fb08 f30c 	mul.w	r3, r8, ip
 8000798:	428b      	cmp	r3, r1
 800079a:	d907      	bls.n	80007ac <__udivmoddi4+0xe4>
 800079c:	1879      	adds	r1, r7, r1
 800079e:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007a2:	d202      	bcs.n	80007aa <__udivmoddi4+0xe2>
 80007a4:	428b      	cmp	r3, r1
 80007a6:	f200 80e9 	bhi.w	800097c <__udivmoddi4+0x2b4>
 80007aa:	4684      	mov	ip, r0
 80007ac:	1ac9      	subs	r1, r1, r3
 80007ae:	b2a3      	uxth	r3, r4
 80007b0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007b4:	fb0e 1110 	mls	r1, lr, r0, r1
 80007b8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80007bc:	fb08 f800 	mul.w	r8, r8, r0
 80007c0:	45a0      	cmp	r8, r4
 80007c2:	d907      	bls.n	80007d4 <__udivmoddi4+0x10c>
 80007c4:	193c      	adds	r4, r7, r4
 80007c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80007ca:	d202      	bcs.n	80007d2 <__udivmoddi4+0x10a>
 80007cc:	45a0      	cmp	r8, r4
 80007ce:	f200 80d9 	bhi.w	8000984 <__udivmoddi4+0x2bc>
 80007d2:	4618      	mov	r0, r3
 80007d4:	eba4 0408 	sub.w	r4, r4, r8
 80007d8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007dc:	e7bf      	b.n	800075e <__udivmoddi4+0x96>
 80007de:	428b      	cmp	r3, r1
 80007e0:	d909      	bls.n	80007f6 <__udivmoddi4+0x12e>
 80007e2:	2d00      	cmp	r5, #0
 80007e4:	f000 80b1 	beq.w	800094a <__udivmoddi4+0x282>
 80007e8:	2600      	movs	r6, #0
 80007ea:	e9c5 0100 	strd	r0, r1, [r5]
 80007ee:	4630      	mov	r0, r6
 80007f0:	4631      	mov	r1, r6
 80007f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007f6:	fab3 f683 	clz	r6, r3
 80007fa:	2e00      	cmp	r6, #0
 80007fc:	d14a      	bne.n	8000894 <__udivmoddi4+0x1cc>
 80007fe:	428b      	cmp	r3, r1
 8000800:	d302      	bcc.n	8000808 <__udivmoddi4+0x140>
 8000802:	4282      	cmp	r2, r0
 8000804:	f200 80b8 	bhi.w	8000978 <__udivmoddi4+0x2b0>
 8000808:	1a84      	subs	r4, r0, r2
 800080a:	eb61 0103 	sbc.w	r1, r1, r3
 800080e:	2001      	movs	r0, #1
 8000810:	468c      	mov	ip, r1
 8000812:	2d00      	cmp	r5, #0
 8000814:	d0a8      	beq.n	8000768 <__udivmoddi4+0xa0>
 8000816:	e9c5 4c00 	strd	r4, ip, [r5]
 800081a:	e7a5      	b.n	8000768 <__udivmoddi4+0xa0>
 800081c:	f1c2 0320 	rsb	r3, r2, #32
 8000820:	fa20 f603 	lsr.w	r6, r0, r3
 8000824:	4097      	lsls	r7, r2
 8000826:	fa01 f002 	lsl.w	r0, r1, r2
 800082a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800082e:	40d9      	lsrs	r1, r3
 8000830:	4330      	orrs	r0, r6
 8000832:	0c03      	lsrs	r3, r0, #16
 8000834:	fbb1 f6fe 	udiv	r6, r1, lr
 8000838:	fa1f f887 	uxth.w	r8, r7
 800083c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000840:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000844:	fb06 f108 	mul.w	r1, r6, r8
 8000848:	4299      	cmp	r1, r3
 800084a:	fa04 f402 	lsl.w	r4, r4, r2
 800084e:	d909      	bls.n	8000864 <__udivmoddi4+0x19c>
 8000850:	18fb      	adds	r3, r7, r3
 8000852:	f106 3cff 	add.w	ip, r6, #4294967295
 8000856:	f080 808d 	bcs.w	8000974 <__udivmoddi4+0x2ac>
 800085a:	4299      	cmp	r1, r3
 800085c:	f240 808a 	bls.w	8000974 <__udivmoddi4+0x2ac>
 8000860:	3e02      	subs	r6, #2
 8000862:	443b      	add	r3, r7
 8000864:	1a5b      	subs	r3, r3, r1
 8000866:	b281      	uxth	r1, r0
 8000868:	fbb3 f0fe 	udiv	r0, r3, lr
 800086c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000870:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000874:	fb00 f308 	mul.w	r3, r0, r8
 8000878:	428b      	cmp	r3, r1
 800087a:	d907      	bls.n	800088c <__udivmoddi4+0x1c4>
 800087c:	1879      	adds	r1, r7, r1
 800087e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000882:	d273      	bcs.n	800096c <__udivmoddi4+0x2a4>
 8000884:	428b      	cmp	r3, r1
 8000886:	d971      	bls.n	800096c <__udivmoddi4+0x2a4>
 8000888:	3802      	subs	r0, #2
 800088a:	4439      	add	r1, r7
 800088c:	1acb      	subs	r3, r1, r3
 800088e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000892:	e778      	b.n	8000786 <__udivmoddi4+0xbe>
 8000894:	f1c6 0c20 	rsb	ip, r6, #32
 8000898:	fa03 f406 	lsl.w	r4, r3, r6
 800089c:	fa22 f30c 	lsr.w	r3, r2, ip
 80008a0:	431c      	orrs	r4, r3
 80008a2:	fa20 f70c 	lsr.w	r7, r0, ip
 80008a6:	fa01 f306 	lsl.w	r3, r1, r6
 80008aa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80008ae:	fa21 f10c 	lsr.w	r1, r1, ip
 80008b2:	431f      	orrs	r7, r3
 80008b4:	0c3b      	lsrs	r3, r7, #16
 80008b6:	fbb1 f9fe 	udiv	r9, r1, lr
 80008ba:	fa1f f884 	uxth.w	r8, r4
 80008be:	fb0e 1119 	mls	r1, lr, r9, r1
 80008c2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80008c6:	fb09 fa08 	mul.w	sl, r9, r8
 80008ca:	458a      	cmp	sl, r1
 80008cc:	fa02 f206 	lsl.w	r2, r2, r6
 80008d0:	fa00 f306 	lsl.w	r3, r0, r6
 80008d4:	d908      	bls.n	80008e8 <__udivmoddi4+0x220>
 80008d6:	1861      	adds	r1, r4, r1
 80008d8:	f109 30ff 	add.w	r0, r9, #4294967295
 80008dc:	d248      	bcs.n	8000970 <__udivmoddi4+0x2a8>
 80008de:	458a      	cmp	sl, r1
 80008e0:	d946      	bls.n	8000970 <__udivmoddi4+0x2a8>
 80008e2:	f1a9 0902 	sub.w	r9, r9, #2
 80008e6:	4421      	add	r1, r4
 80008e8:	eba1 010a 	sub.w	r1, r1, sl
 80008ec:	b2bf      	uxth	r7, r7
 80008ee:	fbb1 f0fe 	udiv	r0, r1, lr
 80008f2:	fb0e 1110 	mls	r1, lr, r0, r1
 80008f6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80008fa:	fb00 f808 	mul.w	r8, r0, r8
 80008fe:	45b8      	cmp	r8, r7
 8000900:	d907      	bls.n	8000912 <__udivmoddi4+0x24a>
 8000902:	19e7      	adds	r7, r4, r7
 8000904:	f100 31ff 	add.w	r1, r0, #4294967295
 8000908:	d22e      	bcs.n	8000968 <__udivmoddi4+0x2a0>
 800090a:	45b8      	cmp	r8, r7
 800090c:	d92c      	bls.n	8000968 <__udivmoddi4+0x2a0>
 800090e:	3802      	subs	r0, #2
 8000910:	4427      	add	r7, r4
 8000912:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000916:	eba7 0708 	sub.w	r7, r7, r8
 800091a:	fba0 8902 	umull	r8, r9, r0, r2
 800091e:	454f      	cmp	r7, r9
 8000920:	46c6      	mov	lr, r8
 8000922:	4649      	mov	r1, r9
 8000924:	d31a      	bcc.n	800095c <__udivmoddi4+0x294>
 8000926:	d017      	beq.n	8000958 <__udivmoddi4+0x290>
 8000928:	b15d      	cbz	r5, 8000942 <__udivmoddi4+0x27a>
 800092a:	ebb3 020e 	subs.w	r2, r3, lr
 800092e:	eb67 0701 	sbc.w	r7, r7, r1
 8000932:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000936:	40f2      	lsrs	r2, r6
 8000938:	ea4c 0202 	orr.w	r2, ip, r2
 800093c:	40f7      	lsrs	r7, r6
 800093e:	e9c5 2700 	strd	r2, r7, [r5]
 8000942:	2600      	movs	r6, #0
 8000944:	4631      	mov	r1, r6
 8000946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800094a:	462e      	mov	r6, r5
 800094c:	4628      	mov	r0, r5
 800094e:	e70b      	b.n	8000768 <__udivmoddi4+0xa0>
 8000950:	4606      	mov	r6, r0
 8000952:	e6e9      	b.n	8000728 <__udivmoddi4+0x60>
 8000954:	4618      	mov	r0, r3
 8000956:	e6fd      	b.n	8000754 <__udivmoddi4+0x8c>
 8000958:	4543      	cmp	r3, r8
 800095a:	d2e5      	bcs.n	8000928 <__udivmoddi4+0x260>
 800095c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000960:	eb69 0104 	sbc.w	r1, r9, r4
 8000964:	3801      	subs	r0, #1
 8000966:	e7df      	b.n	8000928 <__udivmoddi4+0x260>
 8000968:	4608      	mov	r0, r1
 800096a:	e7d2      	b.n	8000912 <__udivmoddi4+0x24a>
 800096c:	4660      	mov	r0, ip
 800096e:	e78d      	b.n	800088c <__udivmoddi4+0x1c4>
 8000970:	4681      	mov	r9, r0
 8000972:	e7b9      	b.n	80008e8 <__udivmoddi4+0x220>
 8000974:	4666      	mov	r6, ip
 8000976:	e775      	b.n	8000864 <__udivmoddi4+0x19c>
 8000978:	4630      	mov	r0, r6
 800097a:	e74a      	b.n	8000812 <__udivmoddi4+0x14a>
 800097c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000980:	4439      	add	r1, r7
 8000982:	e713      	b.n	80007ac <__udivmoddi4+0xe4>
 8000984:	3802      	subs	r0, #2
 8000986:	443c      	add	r4, r7
 8000988:	e724      	b.n	80007d4 <__udivmoddi4+0x10c>
 800098a:	bf00      	nop

0800098c <__aeabi_idiv0>:
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop

08000990 <bme680_init>:
/*!
 *@brief This API is the entry point.
 *It reads the chip-id and calibration data from the sensor.
 */
int8_t bme680_init(struct bme680_dev *dev)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f001 fa31 	bl	8001e00 <null_ptr_check>
 800099e:	4603      	mov	r3, r0
 80009a0:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 80009a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d120      	bne.n	80009ec <bme680_init+0x5c>
		/* Soft reset to restore it to default values*/
		rslt = bme680_soft_reset(dev);
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f000 f8f1 	bl	8000b92 <bme680_soft_reset>
 80009b0:	4603      	mov	r3, r0
 80009b2:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME680_OK) {
 80009b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d117      	bne.n	80009ec <bme680_init+0x5c>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 80009bc:	6879      	ldr	r1, [r7, #4]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2201      	movs	r2, #1
 80009c2:	20d0      	movs	r0, #208	; 0xd0
 80009c4:	f000 f818 	bl	80009f8 <bme680_get_regs>
 80009c8:	4603      	mov	r3, r0
 80009ca:	73fb      	strb	r3, [r7, #15]
			if (rslt == BME680_OK) {
 80009cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d10b      	bne.n	80009ec <bme680_init+0x5c>
				if (dev->chip_id == BME680_CHIP_ID) {
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b61      	cmp	r3, #97	; 0x61
 80009da:	d105      	bne.n	80009e8 <bme680_init+0x58>
					/* Get the Calibration data */
					rslt = get_calib_data(dev);
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f000 fbdf 	bl	80011a0 <get_calib_data>
 80009e2:	4603      	mov	r3, r0
 80009e4:	73fb      	strb	r3, [r7, #15]
 80009e6:	e001      	b.n	80009ec <bme680_init+0x5c>
				} else {
					rslt = BME680_E_DEV_NOT_FOUND;
 80009e8:	23fd      	movs	r3, #253	; 0xfd
 80009ea:	73fb      	strb	r3, [r7, #15]
				}
			}
		}
	}

	return rslt;
 80009ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3710      	adds	r7, #16
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <bme680_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b087      	sub	sp, #28
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60b9      	str	r1, [r7, #8]
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	4603      	mov	r3, r0
 8000a04:	73fb      	strb	r3, [r7, #15]
 8000a06:	4613      	mov	r3, r2
 8000a08:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f001 f9f8 	bl	8001e00 <null_ptr_check>
 8000a10:	4603      	mov	r3, r0
 8000a12:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME680_OK) {
 8000a14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d126      	bne.n	8000a6a <bme680_get_regs+0x72>
		if (dev->intf == BME680_SPI_INTF) {
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	789b      	ldrb	r3, [r3, #2]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d10e      	bne.n	8000a42 <bme680_get_regs+0x4a>
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
 8000a24:	7bfb      	ldrb	r3, [r7, #15]
 8000a26:	6879      	ldr	r1, [r7, #4]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f001 f91a 	bl	8001c62 <set_mem_page>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	75fb      	strb	r3, [r7, #23]
			if (rslt == BME680_OK)
 8000a32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d103      	bne.n	8000a42 <bme680_get_regs+0x4a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
 8000a3a:	7bfb      	ldrb	r3, [r7, #15]
 8000a3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a40:	73fb      	strb	r3, [r7, #15]
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	7858      	ldrb	r0, [r3, #1]
 8000a4a:	89bb      	ldrh	r3, [r7, #12]
 8000a4c:	7bf9      	ldrb	r1, [r7, #15]
 8000a4e:	68ba      	ldr	r2, [r7, #8]
 8000a50:	47a0      	blx	r4
 8000a52:	4603      	mov	r3, r0
 8000a54:	461a      	mov	r2, r3
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		if (dev->com_rslt != 0)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <bme680_get_regs+0x72>
			rslt = BME680_E_COM_FAIL;
 8000a66:	23fe      	movs	r3, #254	; 0xfe
 8000a68:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8000a6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	371c      	adds	r7, #28
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd90      	pop	{r4, r7, pc}

08000a76 <bme680_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme680_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme680_dev *dev)
{
 8000a76:	b5b0      	push	{r4, r5, r7, lr}
 8000a78:	b090      	sub	sp, #64	; 0x40
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	60f8      	str	r0, [r7, #12]
 8000a7e:	60b9      	str	r1, [r7, #8]
 8000a80:	603b      	str	r3, [r7, #0]
 8000a82:	4613      	mov	r3, r2
 8000a84:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	/* Length of the temporary buffer is 2*(length of register)*/
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 8000a86:	2300      	movs	r3, #0
 8000a88:	617b      	str	r3, [r7, #20]
 8000a8a:	f107 0318 	add.w	r3, r7, #24
 8000a8e:	2224      	movs	r2, #36	; 0x24
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f00b fe00 	bl	800c698 <memset>
	uint16_t index;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000a98:	6838      	ldr	r0, [r7, #0]
 8000a9a:	f001 f9b1 	bl	8001e00 <null_ptr_check>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (rslt == BME680_OK) {
 8000aa4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d16c      	bne.n	8000b86 <bme680_set_regs+0x110>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d064      	beq.n	8000b7c <bme680_set_regs+0x106>
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	2b13      	cmp	r3, #19
 8000ab6:	d861      	bhi.n	8000b7c <bme680_set_regs+0x106>
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
 8000ab8:	2300      	movs	r3, #0
 8000aba:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8000abc:	e037      	b.n	8000b2e <bme680_set_regs+0xb8>
				if (dev->intf == BME680_SPI_INTF) {
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	789b      	ldrb	r3, [r3, #2]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d119      	bne.n	8000afa <bme680_set_regs+0x84>
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
 8000ac6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000ac8:	68fa      	ldr	r2, [r7, #12]
 8000aca:	4413      	add	r3, r2
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	6839      	ldr	r1, [r7, #0]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f001 f8c6 	bl	8001c62 <set_mem_page>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 8000adc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000ade:	68fa      	ldr	r2, [r7, #12]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	781a      	ldrb	r2, [r3, #0]
 8000ae4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000aec:	b2d2      	uxtb	r2, r2
 8000aee:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000af2:	440b      	add	r3, r1
 8000af4:	f803 2c2c 	strb.w	r2, [r3, #-44]
 8000af8:	e00a      	b.n	8000b10 <bme680_set_regs+0x9a>
				} else {
					tmp_buff[(2 * index)] = reg_addr[index];
 8000afa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000afc:	68fa      	ldr	r2, [r7, #12]
 8000afe:	441a      	add	r2, r3
 8000b00:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	7812      	ldrb	r2, [r2, #0]
 8000b06:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000b0a:	440b      	add	r3, r1
 8000b0c:	f803 2c2c 	strb.w	r2, [r3, #-44]
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
 8000b10:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	441a      	add	r2, r3
 8000b16:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	7812      	ldrb	r2, [r2, #0]
 8000b1e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000b22:	440b      	add	r3, r1
 8000b24:	f803 2c2c 	strb.w	r2, [r3, #-44]
			for (index = 0; index < len; index++) {
 8000b28:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d3c2      	bcc.n	8000abe <bme680_set_regs+0x48>
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
 8000b38:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d121      	bne.n	8000b84 <bme680_set_regs+0x10e>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	7858      	ldrb	r0, [r3, #1]
 8000b48:	7d39      	ldrb	r1, [r7, #20]
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	3b01      	subs	r3, #1
 8000b54:	b29d      	uxth	r5, r3
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	1c5a      	adds	r2, r3, #1
 8000b5c:	462b      	mov	r3, r5
 8000b5e:	47a0      	blx	r4
 8000b60:	4603      	mov	r3, r0
 8000b62:	461a      	mov	r2, r3
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
				if (dev->com_rslt != 0)
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d007      	beq.n	8000b84 <bme680_set_regs+0x10e>
					rslt = BME680_E_COM_FAIL;
 8000b74:	23fe      	movs	r3, #254	; 0xfe
 8000b76:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			if (rslt == BME680_OK) {
 8000b7a:	e003      	b.n	8000b84 <bme680_set_regs+0x10e>
			}
		} else {
			rslt = BME680_E_INVALID_LENGTH;
 8000b7c:	23fc      	movs	r3, #252	; 0xfc
 8000b7e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000b82:	e000      	b.n	8000b86 <bme680_set_regs+0x110>
			if (rslt == BME680_OK) {
 8000b84:	bf00      	nop
		}
	}

	return rslt;
 8000b86:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3740      	adds	r7, #64	; 0x40
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bdb0      	pop	{r4, r5, r7, pc}

08000b92 <bme680_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme680_soft_reset(struct bme680_dev *dev)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b084      	sub	sp, #16
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
 8000b9a:	23e0      	movs	r3, #224	; 0xe0
 8000b9c:	73bb      	strb	r3, [r7, #14]
	/* 0xb6 is the soft reset command */
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 8000b9e:	23b6      	movs	r3, #182	; 0xb6
 8000ba0:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f001 f92c 	bl	8001e00 <null_ptr_check>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8000bac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d127      	bne.n	8000c04 <bme680_soft_reset+0x72>
		if (dev->intf == BME680_SPI_INTF)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	789b      	ldrb	r3, [r3, #2]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d104      	bne.n	8000bc6 <bme680_soft_reset+0x34>
			rslt = get_mem_page(dev);
 8000bbc:	6878      	ldr	r0, [r7, #4]
 8000bbe:	f001 f8b5 	bl	8001d2c <get_mem_page>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	73fb      	strb	r3, [r7, #15]

		/* Reset the device */
		if (rslt == BME680_OK) {
 8000bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d11a      	bne.n	8000c04 <bme680_soft_reset+0x72>
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8000bce:	f107 010d 	add.w	r1, r7, #13
 8000bd2:	f107 000e 	add.w	r0, r7, #14
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2201      	movs	r2, #1
 8000bda:	f7ff ff4c 	bl	8000a76 <bme680_set_regs>
 8000bde:	4603      	mov	r3, r0
 8000be0:	73fb      	strb	r3, [r7, #15]
			/* Wait for 5ms */
			dev->delay_ms(BME680_RESET_PERIOD);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000be6:	200a      	movs	r0, #10
 8000be8:	4798      	blx	r3

			if (rslt == BME680_OK) {
 8000bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d108      	bne.n	8000c04 <bme680_soft_reset+0x72>
				/* After reset get the memory page */
				if (dev->intf == BME680_SPI_INTF)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	789b      	ldrb	r3, [r3, #2]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d104      	bne.n	8000c04 <bme680_soft_reset+0x72>
					rslt = get_mem_page(dev);
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f001 f896 	bl	8001d2c <get_mem_page>
 8000c00:	4603      	mov	r3, r0
 8000c02:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	return rslt;
 8000c04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <bme680_set_sensor_settings>:
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b088      	sub	sp, #32
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	6039      	str	r1, [r7, #0]
 8000c1a:	80fb      	strh	r3, [r7, #6]
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	76fb      	strb	r3, [r7, #27]
	uint8_t count = 0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	77bb      	strb	r3, [r7, #30]
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	2300      	movs	r3, #0
 8000c2a:	833b      	strh	r3, [r7, #24]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	2300      	movs	r3, #0
 8000c32:	823b      	strh	r3, [r7, #16]
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000c3a:	777b      	strb	r3, [r7, #29]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000c3c:	6838      	ldr	r0, [r7, #0]
 8000c3e:	f001 f8df 	bl	8001e00 <null_ptr_check>
 8000c42:	4603      	mov	r3, r0
 8000c44:	77fb      	strb	r3, [r7, #31]
	if (rslt == BME680_OK) {
 8000c46:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	f040 81ac 	bne.w	8000fa8 <bme680_set_sensor_settings+0x398>
		if (desired_settings & BME680_GAS_MEAS_SEL)
 8000c50:	88fb      	ldrh	r3, [r7, #6]
 8000c52:	f003 0308 	and.w	r3, r3, #8
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d004      	beq.n	8000c64 <bme680_set_sensor_settings+0x54>
			rslt = set_gas_config(dev);
 8000c5a:	6838      	ldr	r0, [r7, #0]
 8000c5c:	f000 fbcc 	bl	80013f8 <set_gas_config>
 8000c60:	4603      	mov	r3, r0
 8000c62:	77fb      	strb	r3, [r7, #31]

		dev->power_mode = BME680_SLEEP_MODE;
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	2200      	movs	r2, #0
 8000c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		if (rslt == BME680_OK)
 8000c6c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d104      	bne.n	8000c7e <bme680_set_sensor_settings+0x6e>
			rslt = bme680_set_sensor_mode(dev);
 8000c74:	6838      	ldr	r0, [r7, #0]
 8000c76:	f000 f99d 	bl	8000fb4 <bme680_set_sensor_mode>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	77fb      	strb	r3, [r7, #31]

		/* Selecting the filter */
		if (desired_settings & BME680_FILTER_SEL) {
 8000c7e:	88fb      	ldrh	r3, [r7, #6]
 8000c80:	f003 0310 	and.w	r3, r3, #16
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d03f      	beq.n	8000d08 <bme680_set_sensor_settings+0xf8>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	f103 003b 	add.w	r0, r3, #59	; 0x3b
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	2207      	movs	r2, #7
 8000c92:	2100      	movs	r1, #0
 8000c94:	f001 f879 	bl	8001d8a <boundary_check>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	77fb      	strb	r3, [r7, #31]
			reg_addr = BME680_CONF_ODR_FILT_ADDR;
 8000c9c:	2375      	movs	r3, #117	; 0x75
 8000c9e:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 8000ca0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d108      	bne.n	8000cba <bme680_set_sensor_settings+0xaa>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8000ca8:	f107 011b 	add.w	r1, r7, #27
 8000cac:	7f38      	ldrb	r0, [r7, #28]
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	f7ff fea1 	bl	80009f8 <bme680_get_regs>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	77fb      	strb	r3, [r7, #31]

			if (desired_settings & BME680_FILTER_SEL)
 8000cba:	88fb      	ldrh	r3, [r7, #6]
 8000cbc:	f003 0310 	and.w	r3, r3, #16
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d010      	beq.n	8000ce6 <bme680_set_sensor_settings+0xd6>
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 8000cc4:	7efb      	ldrb	r3, [r7, #27]
 8000cc6:	b25b      	sxtb	r3, r3
 8000cc8:	f023 031c 	bic.w	r3, r3, #28
 8000ccc:	b25a      	sxtb	r2, r3
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	b25b      	sxtb	r3, r3
 8000cd8:	f003 031c 	and.w	r3, r3, #28
 8000cdc:	b25b      	sxtb	r3, r3
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	b25b      	sxtb	r3, r3
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 8000ce6:	7fbb      	ldrb	r3, [r7, #30]
 8000ce8:	f107 0220 	add.w	r2, r7, #32
 8000cec:	4413      	add	r3, r2
 8000cee:	7f3a      	ldrb	r2, [r7, #28]
 8000cf0:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 8000cf4:	7fbb      	ldrb	r3, [r7, #30]
 8000cf6:	7efa      	ldrb	r2, [r7, #27]
 8000cf8:	f107 0120 	add.w	r1, r7, #32
 8000cfc:	440b      	add	r3, r1
 8000cfe:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 8000d02:	7fbb      	ldrb	r3, [r7, #30]
 8000d04:	3301      	adds	r3, #1
 8000d06:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting heater control for the sensor */
		if (desired_settings & BME680_HCNTRL_SEL) {
 8000d08:	88fb      	ldrh	r3, [r7, #6]
 8000d0a:	f003 0320 	and.w	r3, r3, #32
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d039      	beq.n	8000d86 <bme680_set_sensor_settings+0x176>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	f103 003d 	add.w	r0, r3, #61	; 0x3d
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	2208      	movs	r2, #8
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	f001 f834 	bl	8001d8a <boundary_check>
 8000d22:	4603      	mov	r3, r0
 8000d24:	77fb      	strb	r3, [r7, #31]
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;
 8000d26:	2370      	movs	r3, #112	; 0x70
 8000d28:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 8000d2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d108      	bne.n	8000d44 <bme680_set_sensor_settings+0x134>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8000d32:	f107 011b 	add.w	r1, r7, #27
 8000d36:	7f38      	ldrb	r0, [r7, #28]
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	f7ff fe5c 	bl	80009f8 <bme680_get_regs>
 8000d40:	4603      	mov	r3, r0
 8000d42:	77fb      	strb	r3, [r7, #31]
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 8000d44:	7efb      	ldrb	r3, [r7, #27]
 8000d46:	b25b      	sxtb	r3, r3
 8000d48:	f023 0308 	bic.w	r3, r3, #8
 8000d4c:	b25a      	sxtb	r2, r3
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000d54:	b25b      	sxtb	r3, r3
 8000d56:	f003 0308 	and.w	r3, r3, #8
 8000d5a:	b25b      	sxtb	r3, r3
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	b25b      	sxtb	r3, r3
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 8000d64:	7fbb      	ldrb	r3, [r7, #30]
 8000d66:	f107 0220 	add.w	r2, r7, #32
 8000d6a:	4413      	add	r3, r2
 8000d6c:	7f3a      	ldrb	r2, [r7, #28]
 8000d6e:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 8000d72:	7fbb      	ldrb	r3, [r7, #30]
 8000d74:	7efa      	ldrb	r2, [r7, #27]
 8000d76:	f107 0120 	add.w	r1, r7, #32
 8000d7a:	440b      	add	r3, r1
 8000d7c:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 8000d80:	7fbb      	ldrb	r3, [r7, #30]
 8000d82:	3301      	adds	r3, #1
 8000d84:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting heater T,P oversampling for the sensor */
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
 8000d86:	88fb      	ldrh	r3, [r7, #6]
 8000d88:	f003 0303 	and.w	r3, r3, #3
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d052      	beq.n	8000e36 <bme680_set_sensor_settings+0x226>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	f103 0039 	add.w	r0, r3, #57	; 0x39
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	2205      	movs	r2, #5
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	f000 fff5 	bl	8001d8a <boundary_check>
 8000da0:	4603      	mov	r3, r0
 8000da2:	77fb      	strb	r3, [r7, #31]
			reg_addr = BME680_CONF_T_P_MODE_ADDR;
 8000da4:	2374      	movs	r3, #116	; 0x74
 8000da6:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 8000da8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d108      	bne.n	8000dc2 <bme680_set_sensor_settings+0x1b2>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8000db0:	f107 011b 	add.w	r1, r7, #27
 8000db4:	7f38      	ldrb	r0, [r7, #28]
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	2201      	movs	r2, #1
 8000dba:	f7ff fe1d 	bl	80009f8 <bme680_get_regs>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	77fb      	strb	r3, [r7, #31]

			if (desired_settings & BME680_OST_SEL)
 8000dc2:	88fb      	ldrh	r3, [r7, #6]
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d00d      	beq.n	8000de8 <bme680_set_sensor_settings+0x1d8>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
 8000dcc:	7efb      	ldrb	r3, [r7, #27]
 8000dce:	b25b      	sxtb	r3, r3
 8000dd0:	f003 031f 	and.w	r3, r3, #31
 8000dd4:	b25a      	sxtb	r2, r3
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000ddc:	015b      	lsls	r3, r3, #5
 8000dde:	b25b      	sxtb	r3, r3
 8000de0:	4313      	orrs	r3, r2
 8000de2:	b25b      	sxtb	r3, r3
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	76fb      	strb	r3, [r7, #27]

			if (desired_settings & BME680_OSP_SEL)
 8000de8:	88fb      	ldrh	r3, [r7, #6]
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d010      	beq.n	8000e14 <bme680_set_sensor_settings+0x204>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
 8000df2:	7efb      	ldrb	r3, [r7, #27]
 8000df4:	b25b      	sxtb	r3, r3
 8000df6:	f023 031c 	bic.w	r3, r3, #28
 8000dfa:	b25a      	sxtb	r2, r3
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	b25b      	sxtb	r3, r3
 8000e06:	f003 031c 	and.w	r3, r3, #28
 8000e0a:	b25b      	sxtb	r3, r3
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	b25b      	sxtb	r3, r3
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr;
 8000e14:	7fbb      	ldrb	r3, [r7, #30]
 8000e16:	f107 0220 	add.w	r2, r7, #32
 8000e1a:	4413      	add	r3, r2
 8000e1c:	7f3a      	ldrb	r2, [r7, #28]
 8000e1e:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 8000e22:	7fbb      	ldrb	r3, [r7, #30]
 8000e24:	7efa      	ldrb	r2, [r7, #27]
 8000e26:	f107 0120 	add.w	r1, r7, #32
 8000e2a:	440b      	add	r3, r1
 8000e2c:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 8000e30:	7fbb      	ldrb	r3, [r7, #30]
 8000e32:	3301      	adds	r3, #1
 8000e34:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting humidity oversampling for the sensor */
		if (desired_settings & BME680_OSH_SEL) {
 8000e36:	88fb      	ldrh	r3, [r7, #6]
 8000e38:	f003 0304 	and.w	r3, r3, #4
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d039      	beq.n	8000eb4 <bme680_set_sensor_settings+0x2a4>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	2205      	movs	r2, #5
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	f000 ff9d 	bl	8001d8a <boundary_check>
 8000e50:	4603      	mov	r3, r0
 8000e52:	77fb      	strb	r3, [r7, #31]
			reg_addr = BME680_CONF_OS_H_ADDR;
 8000e54:	2372      	movs	r3, #114	; 0x72
 8000e56:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 8000e58:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d108      	bne.n	8000e72 <bme680_set_sensor_settings+0x262>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8000e60:	f107 011b 	add.w	r1, r7, #27
 8000e64:	7f38      	ldrb	r0, [r7, #28]
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	2201      	movs	r2, #1
 8000e6a:	f7ff fdc5 	bl	80009f8 <bme680_get_regs>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	77fb      	strb	r3, [r7, #31]
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 8000e72:	7efb      	ldrb	r3, [r7, #27]
 8000e74:	b25b      	sxtb	r3, r3
 8000e76:	f023 0307 	bic.w	r3, r3, #7
 8000e7a:	b25a      	sxtb	r2, r3
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000e82:	b25b      	sxtb	r3, r3
 8000e84:	f003 0307 	and.w	r3, r3, #7
 8000e88:	b25b      	sxtb	r3, r3
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	b25b      	sxtb	r3, r3
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 8000e92:	7fbb      	ldrb	r3, [r7, #30]
 8000e94:	f107 0220 	add.w	r2, r7, #32
 8000e98:	4413      	add	r3, r2
 8000e9a:	7f3a      	ldrb	r2, [r7, #28]
 8000e9c:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 8000ea0:	7fbb      	ldrb	r3, [r7, #30]
 8000ea2:	7efa      	ldrb	r2, [r7, #27]
 8000ea4:	f107 0120 	add.w	r1, r7, #32
 8000ea8:	440b      	add	r3, r1
 8000eaa:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 8000eae:	7fbb      	ldrb	r3, [r7, #30]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting the runGas and NB conversion settings for the sensor */
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
 8000eb4:	88fb      	ldrh	r3, [r7, #6]
 8000eb6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d062      	beq.n	8000f84 <bme680_set_sensor_settings+0x374>
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	f103 003e 	add.w	r0, r3, #62	; 0x3e
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	2100      	movs	r1, #0
 8000eca:	f000 ff5e 	bl	8001d8a <boundary_check>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	77fb      	strb	r3, [r7, #31]
				BME680_RUN_GAS_ENABLE, dev);
			if (rslt == BME680_OK) {
 8000ed2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d109      	bne.n	8000eee <bme680_set_sensor_settings+0x2de>
				/* Validate boundary conditions */
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	220a      	movs	r2, #10
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	f000 ff50 	bl	8001d8a <boundary_check>
 8000eea:	4603      	mov	r3, r0
 8000eec:	77fb      	strb	r3, [r7, #31]
					BME680_NBCONV_MAX, dev);
			}

			reg_addr = BME680_CONF_ODR_RUN_GAS_NBC_ADDR;
 8000eee:	2371      	movs	r3, #113	; 0x71
 8000ef0:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 8000ef2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d108      	bne.n	8000f0c <bme680_set_sensor_settings+0x2fc>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8000efa:	f107 011b 	add.w	r1, r7, #27
 8000efe:	7f38      	ldrb	r0, [r7, #28]
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	2201      	movs	r2, #1
 8000f04:	f7ff fd78 	bl	80009f8 <bme680_get_regs>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	77fb      	strb	r3, [r7, #31]

			if (desired_settings & BME680_RUN_GAS_SEL)
 8000f0c:	88fb      	ldrh	r3, [r7, #6]
 8000f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d010      	beq.n	8000f38 <bme680_set_sensor_settings+0x328>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
 8000f16:	7efb      	ldrb	r3, [r7, #27]
 8000f18:	b25b      	sxtb	r3, r3
 8000f1a:	f023 0310 	bic.w	r3, r3, #16
 8000f1e:	b25a      	sxtb	r2, r3
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	b25b      	sxtb	r3, r3
 8000f2a:	f003 0310 	and.w	r3, r3, #16
 8000f2e:	b25b      	sxtb	r3, r3
 8000f30:	4313      	orrs	r3, r2
 8000f32:	b25b      	sxtb	r3, r3
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	76fb      	strb	r3, [r7, #27]

			if (desired_settings & BME680_NBCONV_SEL)
 8000f38:	88fb      	ldrh	r3, [r7, #6]
 8000f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d00f      	beq.n	8000f62 <bme680_set_sensor_settings+0x352>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
 8000f42:	7efb      	ldrb	r3, [r7, #27]
 8000f44:	b25b      	sxtb	r3, r3
 8000f46:	f023 030f 	bic.w	r3, r3, #15
 8000f4a:	b25a      	sxtb	r2, r3
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f52:	b25b      	sxtb	r3, r3
 8000f54:	f003 030f 	and.w	r3, r3, #15
 8000f58:	b25b      	sxtb	r3, r3
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	b25b      	sxtb	r3, r3
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 8000f62:	7fbb      	ldrb	r3, [r7, #30]
 8000f64:	f107 0220 	add.w	r2, r7, #32
 8000f68:	4413      	add	r3, r2
 8000f6a:	7f3a      	ldrb	r2, [r7, #28]
 8000f6c:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 8000f70:	7fbb      	ldrb	r3, [r7, #30]
 8000f72:	7efa      	ldrb	r2, [r7, #27]
 8000f74:	f107 0120 	add.w	r1, r7, #32
 8000f78:	440b      	add	r3, r1
 8000f7a:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 8000f7e:	7fbb      	ldrb	r3, [r7, #30]
 8000f80:	3301      	adds	r3, #1
 8000f82:	77bb      	strb	r3, [r7, #30]
		}

		if (rslt == BME680_OK)
 8000f84:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d109      	bne.n	8000fa0 <bme680_set_sensor_settings+0x390>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
 8000f8c:	7fba      	ldrb	r2, [r7, #30]
 8000f8e:	f107 010c 	add.w	r1, r7, #12
 8000f92:	f107 0014 	add.w	r0, r7, #20
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	f7ff fd6d 	bl	8000a76 <bme680_set_regs>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	77fb      	strb	r3, [r7, #31]

		/* Restore previous intended power mode */
		dev->power_mode = intended_power_mode;
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	7f7a      	ldrb	r2, [r7, #29]
 8000fa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}

	return rslt;
 8000fa8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3720      	adds	r7, #32
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <bme680_set_sensor_mode>:

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	73bb      	strb	r3, [r7, #14]
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 8000fc0:	2374      	movs	r3, #116	; 0x74
 8000fc2:	733b      	strb	r3, [r7, #12]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f000 ff1b 	bl	8001e00 <null_ptr_check>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8000fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d14c      	bne.n	8001070 <bme680_set_sensor_mode+0xbc>
		/* Call repeatedly until in sleep */
		do {
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
 8000fd6:	f107 010d 	add.w	r1, r7, #13
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2201      	movs	r2, #1
 8000fde:	2074      	movs	r0, #116	; 0x74
 8000fe0:	f7ff fd0a 	bl	80009f8 <bme680_get_regs>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	73fb      	strb	r3, [r7, #15]
			if (rslt == BME680_OK) {
 8000fe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d119      	bne.n	8001024 <bme680_set_sensor_mode+0x70>
				/* Put to sleep before changing mode */
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
 8000ff0:	7b7b      	ldrb	r3, [r7, #13]
 8000ff2:	f003 0303 	and.w	r3, r3, #3
 8000ff6:	73bb      	strb	r3, [r7, #14]

				if (pow_mode != BME680_SLEEP_MODE) {
 8000ff8:	7bbb      	ldrb	r3, [r7, #14]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d012      	beq.n	8001024 <bme680_set_sensor_mode+0x70>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 8000ffe:	7b7b      	ldrb	r3, [r7, #13]
 8001000:	f023 0303 	bic.w	r3, r3, #3
 8001004:	b2db      	uxtb	r3, r3
 8001006:	737b      	strb	r3, [r7, #13]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8001008:	f107 010d 	add.w	r1, r7, #13
 800100c:	f107 000c 	add.w	r0, r7, #12
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2201      	movs	r2, #1
 8001014:	f7ff fd2f 	bl	8000a76 <bme680_set_regs>
 8001018:	4603      	mov	r3, r0
 800101a:	73fb      	strb	r3, [r7, #15]
					dev->delay_ms(BME680_POLL_PERIOD_MS);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001020:	200a      	movs	r0, #10
 8001022:	4798      	blx	r3
				}
			}
		} while (pow_mode != BME680_SLEEP_MODE);
 8001024:	7bbb      	ldrb	r3, [r7, #14]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d1d5      	bne.n	8000fd6 <bme680_set_sensor_mode+0x22>

		/* Already in sleep */
		if (dev->power_mode != BME680_SLEEP_MODE) {
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001030:	2b00      	cmp	r3, #0
 8001032:	d01d      	beq.n	8001070 <bme680_set_sensor_mode+0xbc>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
 8001034:	7b7b      	ldrb	r3, [r7, #13]
 8001036:	b25b      	sxtb	r3, r3
 8001038:	f023 0303 	bic.w	r3, r3, #3
 800103c:	b25a      	sxtb	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001044:	b25b      	sxtb	r3, r3
 8001046:	f003 0303 	and.w	r3, r3, #3
 800104a:	b25b      	sxtb	r3, r3
 800104c:	4313      	orrs	r3, r2
 800104e:	b25b      	sxtb	r3, r3
 8001050:	b2db      	uxtb	r3, r3
 8001052:	737b      	strb	r3, [r7, #13]
			if (rslt == BME680_OK)
 8001054:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d109      	bne.n	8001070 <bme680_set_sensor_mode+0xbc>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 800105c:	f107 010d 	add.w	r1, r7, #13
 8001060:	f107 000c 	add.w	r0, r7, #12
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2201      	movs	r2, #1
 8001068:	f7ff fd05 	bl	8000a76 <bme680_set_regs>
 800106c:	4603      	mov	r3, r0
 800106e:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 8001070:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <bme680_get_profile_dur>:

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
 800107c:	b480      	push	{r7}
 800107e:	b087      	sub	sp, #28
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 8001086:	4a2e      	ldr	r2, [pc, #184]	; (8001140 <bme680_get_profile_dur+0xc4>)
 8001088:	f107 0308 	add.w	r3, r7, #8
 800108c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001090:	6018      	str	r0, [r3, #0]
 8001092:	3304      	adds	r3, #4
 8001094:	8019      	strh	r1, [r3, #0]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800109c:	f107 0218 	add.w	r2, r7, #24
 80010a0:	4413      	add	r3, r2
 80010a2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80010a6:	617b      	str	r3, [r7, #20]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80010ae:	f107 0218 	add.w	r2, r7, #24
 80010b2:	4413      	add	r3, r2
 80010b4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80010b8:	461a      	mov	r2, r3
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	4413      	add	r3, r2
 80010be:	617b      	str	r3, [r7, #20]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80010c6:	f107 0218 	add.w	r2, r7, #24
 80010ca:	4413      	add	r3, r2
 80010cc:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80010d0:	461a      	mov	r2, r3
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	4413      	add	r3, r2
 80010d6:	617b      	str	r3, [r7, #20]

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	f240 72ab 	movw	r2, #1963	; 0x7ab
 80010de:	fb02 f303 	mul.w	r3, r2, r3
 80010e2:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	f203 7374 	addw	r3, r3, #1908	; 0x774
 80010ea:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	f603 1351 	addw	r3, r3, #2385	; 0x951
 80010f2:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80010fa:	613b      	str	r3, [r7, #16]
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	4a11      	ldr	r2, [pc, #68]	; (8001144 <bme680_get_profile_dur+0xc8>)
 8001100:	fba2 2303 	umull	r2, r3, r2, r3
 8001104:	099b      	lsrs	r3, r3, #6
 8001106:	613b      	str	r3, [r7, #16]

	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	3301      	adds	r3, #1
 800110c:	613b      	str	r3, [r7, #16]

	*duration = (uint16_t) tph_dur;
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	b29a      	uxth	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	801a      	strh	r2, [r3, #0]

	/* Get the gas duration only when the run gas is enabled */
	if (dev->gas_sett.run_gas) {
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800111c:	2b00      	cmp	r3, #0
 800111e:	d008      	beq.n	8001132 <bme680_get_profile_dur+0xb6>
		/* The remaining time should be used for heating */
		*duration += dev->gas_sett.heatr_dur;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	881a      	ldrh	r2, [r3, #0]
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800112a:	4413      	add	r3, r2
 800112c:	b29a      	uxth	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	801a      	strh	r2, [r3, #0]
	}
}
 8001132:	bf00      	nop
 8001134:	371c      	adds	r7, #28
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	0800d658 	.word	0x0800d658
 8001144:	10624dd3 	.word	0x10624dd3

08001148 <bme680_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001152:	6838      	ldr	r0, [r7, #0]
 8001154:	f000 fe54 	bl	8001e00 <null_ptr_check>
 8001158:	4603      	mov	r3, r0
 800115a:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 800115c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d117      	bne.n	8001194 <bme680_get_sensor_data+0x4c>
		/* Reading the sensor data in forced mode only */
		rslt = read_field_data(data, dev);
 8001164:	6839      	ldr	r1, [r7, #0]
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f000 fcc1 	bl	8001aee <read_field_data>
 800116c:	4603      	mov	r3, r0
 800116e:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME680_OK) {
 8001170:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d10d      	bne.n	8001194 <bme680_get_sensor_data+0x4c>
			if (data->status & BME680_NEW_DATA_MSK)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	b25b      	sxtb	r3, r3
 800117e:	2b00      	cmp	r3, #0
 8001180:	da04      	bge.n	800118c <bme680_get_sensor_data+0x44>
				dev->new_fields = 1;
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	2201      	movs	r2, #1
 8001186:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800118a:	e003      	b.n	8001194 <bme680_get_sensor_data+0x4c>
			else
				dev->new_fields = 0;
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	2200      	movs	r2, #0
 8001190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		}
	}

	return rslt;
 8001194:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <get_calib_data>:

/*!
 * @brief This internal API is used to read the calibrated data from the sensor.
 */
static int8_t get_calib_data(struct bme680_dev *dev)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08e      	sub	sp, #56	; 0x38
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	f107 0310 	add.w	r3, r7, #16
 80011b0:	2225      	movs	r2, #37	; 0x25
 80011b2:	2100      	movs	r1, #0
 80011b4:	4618      	mov	r0, r3
 80011b6:	f00b fa6f 	bl	800c698 <memset>
	uint8_t temp_var = 0; /* Temporary variable */
 80011ba:	2300      	movs	r3, #0
 80011bc:	72fb      	strb	r3, [r7, #11]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f000 fe1e 	bl	8001e00 <null_ptr_check>
 80011c4:	4603      	mov	r3, r0
 80011c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (rslt == BME680_OK) {
 80011ca:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f040 810c 	bne.w	80013ec <get_calib_data+0x24c>
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
 80011d4:	f107 010c 	add.w	r1, r7, #12
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2219      	movs	r2, #25
 80011dc:	2089      	movs	r0, #137	; 0x89
 80011de:	f7ff fc0b 	bl	80009f8 <bme680_get_regs>
 80011e2:	4603      	mov	r3, r0
 80011e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		/* Append the second half in the same array */
		if (rslt == BME680_OK)
 80011e8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d10b      	bne.n	8001208 <get_calib_data+0x68>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	f103 0119 	add.w	r1, r3, #25
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2210      	movs	r2, #16
 80011fc:	20e1      	movs	r0, #225	; 0xe1
 80011fe:	f7ff fbfb 	bl	80009f8 <bme680_get_regs>
 8001202:	4603      	mov	r3, r0
 8001204:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			, BME680_COEFF_ADDR2_LEN, dev);

		/* Temperature related coefficients */
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
 8001208:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800120c:	021b      	lsls	r3, r3, #8
 800120e:	b21a      	sxth	r2, r3
 8001210:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001214:	b21b      	sxth	r3, r3
 8001216:	4313      	orrs	r3, r2
 8001218:	b21b      	sxth	r3, r3
 800121a:	b29a      	uxth	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	82da      	strh	r2, [r3, #22]
			coeff_array[BME680_T1_LSB_REG]));
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
 8001220:	7bbb      	ldrb	r3, [r7, #14]
 8001222:	021b      	lsls	r3, r3, #8
 8001224:	b21a      	sxth	r2, r3
 8001226:	7b7b      	ldrb	r3, [r7, #13]
 8001228:	b21b      	sxth	r3, r3
 800122a:	4313      	orrs	r3, r2
 800122c:	b21a      	sxth	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	831a      	strh	r2, [r3, #24]
			coeff_array[BME680_T2_LSB_REG]));
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
 8001232:	7bfb      	ldrb	r3, [r7, #15]
 8001234:	b25a      	sxtb	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	769a      	strb	r2, [r3, #26]

		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
 800123a:	7cbb      	ldrb	r3, [r7, #18]
 800123c:	021b      	lsls	r3, r3, #8
 800123e:	b21a      	sxth	r2, r3
 8001240:	7c7b      	ldrb	r3, [r7, #17]
 8001242:	b21b      	sxth	r3, r3
 8001244:	4313      	orrs	r3, r2
 8001246:	b21b      	sxth	r3, r3
 8001248:	b29a      	uxth	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	839a      	strh	r2, [r3, #28]
			coeff_array[BME680_P1_LSB_REG]));
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
 800124e:	7d3b      	ldrb	r3, [r7, #20]
 8001250:	021b      	lsls	r3, r3, #8
 8001252:	b21a      	sxth	r2, r3
 8001254:	7cfb      	ldrb	r3, [r7, #19]
 8001256:	b21b      	sxth	r3, r3
 8001258:	4313      	orrs	r3, r2
 800125a:	b21a      	sxth	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	83da      	strh	r2, [r3, #30]
			coeff_array[BME680_P2_LSB_REG]));
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
 8001260:	7d7b      	ldrb	r3, [r7, #21]
 8001262:	b25a      	sxtb	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f883 2020 	strb.w	r2, [r3, #32]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
 800126a:	7e3b      	ldrb	r3, [r7, #24]
 800126c:	021b      	lsls	r3, r3, #8
 800126e:	b21a      	sxth	r2, r3
 8001270:	7dfb      	ldrb	r3, [r7, #23]
 8001272:	b21b      	sxth	r3, r3
 8001274:	4313      	orrs	r3, r2
 8001276:	b21a      	sxth	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	845a      	strh	r2, [r3, #34]	; 0x22
			coeff_array[BME680_P4_LSB_REG]));
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
 800127c:	7ebb      	ldrb	r3, [r7, #26]
 800127e:	021b      	lsls	r3, r3, #8
 8001280:	b21a      	sxth	r2, r3
 8001282:	7e7b      	ldrb	r3, [r7, #25]
 8001284:	b21b      	sxth	r3, r3
 8001286:	4313      	orrs	r3, r2
 8001288:	b21a      	sxth	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	849a      	strh	r2, [r3, #36]	; 0x24
			coeff_array[BME680_P5_LSB_REG]));
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
 800128e:	7f3b      	ldrb	r3, [r7, #28]
 8001290:	b25a      	sxtb	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
 8001298:	7efb      	ldrb	r3, [r7, #27]
 800129a:	b25a      	sxtb	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
 80012a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012a6:	021b      	lsls	r3, r3, #8
 80012a8:	b21a      	sxth	r2, r3
 80012aa:	7ffb      	ldrb	r3, [r7, #31]
 80012ac:	b21b      	sxth	r3, r3
 80012ae:	4313      	orrs	r3, r2
 80012b0:	b21a      	sxth	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	851a      	strh	r2, [r3, #40]	; 0x28
			coeff_array[BME680_P8_LSB_REG]));
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
 80012b6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80012ba:	021b      	lsls	r3, r3, #8
 80012bc:	b21a      	sxth	r2, r3
 80012be:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80012c2:	b21b      	sxth	r3, r3
 80012c4:	4313      	orrs	r3, r2
 80012c6:	b21a      	sxth	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	855a      	strh	r2, [r3, #42]	; 0x2a
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
 80012cc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80012d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012da:	011b      	lsls	r3, r3, #4
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
 80012dc:	b21a      	sxth	r2, r3
 80012de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012e2:	b21b      	sxth	r3, r3
 80012e4:	f003 030f 	and.w	r3, r3, #15
 80012e8:	b21b      	sxth	r3, r3
 80012ea:	4313      	orrs	r3, r2
 80012ec:	b21b      	sxth	r3, r3
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	811a      	strh	r2, [r3, #8]
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80012f4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80012f8:	011b      	lsls	r3, r3, #4
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
 80012fa:	b21a      	sxth	r2, r3
 80012fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001300:	091b      	lsrs	r3, r3, #4
 8001302:	b2db      	uxtb	r3, r3
 8001304:	b21b      	sxth	r3, r3
 8001306:	4313      	orrs	r3, r2
 8001308:	b21b      	sxth	r3, r3
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 800130a:	b29a      	uxth	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	815a      	strh	r2, [r3, #10]
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
 8001310:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001314:	b25a      	sxtb	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	731a      	strb	r2, [r3, #12]
		dev->calib.par_h4 = (int8_t) coeff_array[BME680_H4_REG];
 800131a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800131e:	b25a      	sxtb	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	735a      	strb	r2, [r3, #13]
		dev->calib.par_h5 = (int8_t) coeff_array[BME680_H5_REG];
 8001324:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001328:	b25a      	sxtb	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	739a      	strb	r2, [r3, #14]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME680_H6_REG];
 800132e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	73da      	strb	r2, [r3, #15]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
 8001336:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800133a:	b25a      	sxtb	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	741a      	strb	r2, [r3, #16]

		/* Gas heater related coefficients */
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
 8001340:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001344:	b25a      	sxtb	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	745a      	strb	r2, [r3, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
 800134a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800134e:	021b      	lsls	r3, r3, #8
 8001350:	b21a      	sxth	r2, r3
 8001352:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001356:	b21b      	sxth	r3, r3
 8001358:	4313      	orrs	r3, r2
 800135a:	b21a      	sxth	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	825a      	strh	r2, [r3, #18]
			coeff_array[BME680_GH2_LSB_REG]));
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
 8001360:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001364:	b25a      	sxtb	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	751a      	strb	r2, [r3, #20]

		/* Other coefficients */
		if (rslt == BME680_OK) {
 800136a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800136e:	2b00      	cmp	r3, #0
 8001370:	d135      	bne.n	80013de <get_calib_data+0x23e>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
 8001372:	f107 010b 	add.w	r1, r7, #11
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2201      	movs	r2, #1
 800137a:	2002      	movs	r0, #2
 800137c:	f7ff fb3c 	bl	80009f8 <bme680_get_regs>
 8001380:	4603      	mov	r3, r0
 8001382:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 8001386:	7afb      	ldrb	r3, [r7, #11]
 8001388:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800138c:	2b00      	cmp	r3, #0
 800138e:	da00      	bge.n	8001392 <get_calib_data+0x1f2>
 8001390:	330f      	adds	r3, #15
 8001392:	111b      	asrs	r3, r3, #4
 8001394:	b2da      	uxtb	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			if (rslt == BME680_OK) {
 800139c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d11c      	bne.n	80013de <get_calib_data+0x23e>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
 80013a4:	f107 010b 	add.w	r1, r7, #11
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2201      	movs	r2, #1
 80013ac:	2000      	movs	r0, #0
 80013ae:	f7ff fb23 	bl	80009f8 <bme680_get_regs>
 80013b2:	4603      	mov	r3, r0
 80013b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

				dev->calib.res_heat_val = (int8_t) temp_var;
 80013b8:	7afb      	ldrb	r3, [r7, #11]
 80013ba:	b25a      	sxtb	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				if (rslt == BME680_OK)
 80013c2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d109      	bne.n	80013de <get_calib_data+0x23e>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
 80013ca:	f107 010b 	add.w	r1, r7, #11
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2201      	movs	r2, #1
 80013d2:	2004      	movs	r0, #4
 80013d4:	f7ff fb10 	bl	80009f8 <bme680_get_regs>
 80013d8:	4603      	mov	r3, r0
 80013da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			}
		}
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
 80013de:	7afb      	ldrb	r3, [r7, #11]
 80013e0:	b25b      	sxtb	r3, r3
 80013e2:	111b      	asrs	r3, r3, #4
 80013e4:	b25a      	sxtb	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	}

	return rslt;
 80013ec:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3738      	adds	r7, #56	; 0x38
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <set_gas_config>:

/*!
 * @brief This internal API is used to set the gas configuration of the sensor.
 */
static int8_t set_gas_config(struct bme680_dev *dev)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f000 fcfd 	bl	8001e00 <null_ptr_check>
 8001406:	4603      	mov	r3, r0
 8001408:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 800140a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d132      	bne.n	8001478 <set_gas_config+0x80>

		uint8_t reg_addr[2] = {0};
 8001412:	2300      	movs	r3, #0
 8001414:	81bb      	strh	r3, [r7, #12]
		uint8_t reg_data[2] = {0};
 8001416:	2300      	movs	r3, #0
 8001418:	813b      	strh	r3, [r7, #8]

		if (dev->power_mode == BME680_FORCED_MODE) {
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001420:	2b01      	cmp	r3, #1
 8001422:	d119      	bne.n	8001458 <set_gas_config+0x60>
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
 8001424:	235a      	movs	r3, #90	; 0x5a
 8001426:	733b      	strb	r3, [r7, #12]
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	4618      	mov	r0, r3
 8001432:	f000 fabb 	bl	80019ac <calc_heater_res>
 8001436:	4603      	mov	r3, r0
 8001438:	723b      	strb	r3, [r7, #8]
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
 800143a:	2364      	movs	r3, #100	; 0x64
 800143c:	737b      	strb	r3, [r7, #13]
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001444:	4618      	mov	r0, r3
 8001446:	f000 fb2d 	bl	8001aa4 <calc_heater_dur>
 800144a:	4603      	mov	r3, r0
 800144c:	727b      	strb	r3, [r7, #9]
			dev->gas_sett.nb_conv = 0;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001456:	e001      	b.n	800145c <set_gas_config+0x64>
		} else {
			rslt = BME680_W_DEFINE_PWR_MODE;
 8001458:	2301      	movs	r3, #1
 800145a:	73fb      	strb	r3, [r7, #15]
		}
		if (rslt == BME680_OK)
 800145c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d109      	bne.n	8001478 <set_gas_config+0x80>
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 8001464:	f107 0108 	add.w	r1, r7, #8
 8001468:	f107 000c 	add.w	r0, r7, #12
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2202      	movs	r2, #2
 8001470:	f7ff fb01 	bl	8000a76 <bme680_set_regs>
 8001474:	4603      	mov	r3, r0
 8001476:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001478:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800147c:	4618      	mov	r0, r3
 800147e:	3710      	adds	r7, #16
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <calc_temperature>:

/*!
 * @brief This internal API is used to calculate the temperature value.
 */
static int16_t calc_temperature(uint32_t temp_adc, struct bme680_dev *dev)
{
 8001484:	b4b0      	push	{r4, r5, r7}
 8001486:	b08b      	sub	sp, #44	; 0x2c
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	10da      	asrs	r2, r3, #3
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	8adb      	ldrh	r3, [r3, #22]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	461a      	mov	r2, r3
 800149c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80014a0:	e9c7 2308 	strd	r2, r3, [r7, #32]
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80014aa:	b21a      	sxth	r2, r3
 80014ac:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80014b0:	6a39      	ldr	r1, [r7, #32]
 80014b2:	fb03 f001 	mul.w	r0, r3, r1
 80014b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014b8:	fb02 f101 	mul.w	r1, r2, r1
 80014bc:	1844      	adds	r4, r0, r1
 80014be:	6a39      	ldr	r1, [r7, #32]
 80014c0:	fba1 0102 	umull	r0, r1, r1, r2
 80014c4:	1863      	adds	r3, r4, r1
 80014c6:	4619      	mov	r1, r3
 80014c8:	f04f 0200 	mov.w	r2, #0
 80014cc:	f04f 0300 	mov.w	r3, #0
 80014d0:	0ac2      	lsrs	r2, r0, #11
 80014d2:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 80014d6:	12cb      	asrs	r3, r1, #11
 80014d8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 80014dc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80014e0:	f04f 0000 	mov.w	r0, #0
 80014e4:	f04f 0100 	mov.w	r1, #0
 80014e8:	0850      	lsrs	r0, r2, #1
 80014ea:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 80014ee:	1059      	asrs	r1, r3, #1
 80014f0:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80014f4:	f04f 0200 	mov.w	r2, #0
 80014f8:	f04f 0300 	mov.w	r3, #0
 80014fc:	0862      	lsrs	r2, r4, #1
 80014fe:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8001502:	106b      	asrs	r3, r5, #1
 8001504:	fb02 f501 	mul.w	r5, r2, r1
 8001508:	fb00 f403 	mul.w	r4, r0, r3
 800150c:	442c      	add	r4, r5
 800150e:	fba0 0102 	umull	r0, r1, r0, r2
 8001512:	1863      	adds	r3, r4, r1
 8001514:	4619      	mov	r1, r3
 8001516:	f04f 0200 	mov.w	r2, #0
 800151a:	f04f 0300 	mov.w	r3, #0
 800151e:	0b02      	lsrs	r2, r0, #12
 8001520:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8001524:	130b      	asrs	r3, r1, #12
 8001526:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	f993 301a 	ldrsb.w	r3, [r3, #26]
 8001530:	011b      	lsls	r3, r3, #4
 8001532:	461a      	mov	r2, r3
 8001534:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001538:	6939      	ldr	r1, [r7, #16]
 800153a:	fb03 f001 	mul.w	r0, r3, r1
 800153e:	6979      	ldr	r1, [r7, #20]
 8001540:	fb02 f101 	mul.w	r1, r2, r1
 8001544:	1844      	adds	r4, r0, r1
 8001546:	6939      	ldr	r1, [r7, #16]
 8001548:	fba1 0102 	umull	r0, r1, r1, r2
 800154c:	1863      	adds	r3, r4, r1
 800154e:	4619      	mov	r1, r3
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	f04f 0300 	mov.w	r3, #0
 8001558:	0b82      	lsrs	r2, r0, #14
 800155a:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 800155e:	138b      	asrs	r3, r1, #14
 8001560:	e9c7 2304 	strd	r2, r3, [r7, #16]
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	4413      	add	r3, r2
 800156a:	461a      	mov	r2, r3
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	631a      	str	r2, [r3, #48]	; 0x30
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001574:	4613      	mov	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4413      	add	r3, r2
 800157a:	3380      	adds	r3, #128	; 0x80
 800157c:	121b      	asrs	r3, r3, #8
 800157e:	81fb      	strh	r3, [r7, #14]

	return calc_temp;
 8001580:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001584:	4618      	mov	r0, r3
 8001586:	372c      	adds	r7, #44	; 0x2c
 8001588:	46bd      	mov	sp, r7
 800158a:	bcb0      	pop	{r4, r5, r7}
 800158c:	4770      	bx	lr

0800158e <calc_pressure>:

/*!
 * @brief This internal API is used to calculate the pressure value.
 */
static uint32_t calc_pressure(uint32_t pres_adc, const struct bme680_dev *dev)
{
 800158e:	b480      	push	{r7}
 8001590:	b087      	sub	sp, #28
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
 8001596:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int32_t var3;
	int32_t pressure_comp;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159c:	105b      	asrs	r3, r3, #1
 800159e:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 80015a2:	613b      	str	r3, [r7, #16]
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	109b      	asrs	r3, r3, #2
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	1092      	asrs	r2, r2, #2
 80015ac:	fb02 f303 	mul.w	r3, r2, r3
 80015b0:	12db      	asrs	r3, r3, #11
		(int32_t)dev->calib.par_p6) >> 2;
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	f992 2026 	ldrsb.w	r2, [r2, #38]	; 0x26
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 80015b8:	fb02 f303 	mul.w	r3, r2, r3
 80015bc:	109b      	asrs	r3, r3, #2
 80015be:	60fb      	str	r3, [r7, #12]
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80015c6:	461a      	mov	r2, r3
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	fb03 f302 	mul.w	r3, r3, r2
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	68fa      	ldr	r2, [r7, #12]
 80015d2:	4413      	add	r3, r2
 80015d4:	60fb      	str	r3, [r7, #12]
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	109a      	asrs	r2, r3, #2
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80015e0:	041b      	lsls	r3, r3, #16
 80015e2:	4413      	add	r3, r2
 80015e4:	60fb      	str	r3, [r7, #12]
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	109b      	asrs	r3, r3, #2
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	1092      	asrs	r2, r2, #2
 80015ee:	fb02 f303 	mul.w	r3, r2, r3
 80015f2:	135b      	asrs	r3, r3, #13
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 80015f4:	683a      	ldr	r2, [r7, #0]
 80015f6:	f992 2020 	ldrsb.w	r2, [r2, #32]
 80015fa:	0152      	lsls	r2, r2, #5
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 80015fc:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8001600:	10da      	asrs	r2, r3, #3
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001608:	4619      	mov	r1, r3
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	fb03 f301 	mul.w	r3, r3, r1
 8001610:	105b      	asrs	r3, r3, #1
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8001612:	4413      	add	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
	var1 = var1 >> 18;
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	149b      	asrs	r3, r3, #18
 800161a:	613b      	str	r3, [r7, #16]
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	8b92      	ldrh	r2, [r2, #28]
 8001626:	fb02 f303 	mul.w	r3, r2, r3
 800162a:	13db      	asrs	r3, r3, #15
 800162c:	613b      	str	r3, [r7, #16]
	pressure_comp = 1048576 - pres_adc;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001634:	617b      	str	r3, [r7, #20]
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	131b      	asrs	r3, r3, #12
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	461a      	mov	r2, r3
 8001640:	f640 4335 	movw	r3, #3125	; 0xc35
 8001644:	fb03 f302 	mul.w	r3, r3, r2
 8001648:	617b      	str	r3, [r7, #20]
	if (pressure_comp >= BME680_MAX_OVERFLOW_VAL)
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001650:	db06      	blt.n	8001660 <calc_pressure+0xd2>
		pressure_comp = ((pressure_comp / var1) << 1);
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	fb92 f3f3 	sdiv	r3, r2, r3
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	617b      	str	r3, [r7, #20]
 800165e:	e005      	b.n	800166c <calc_pressure+0xde>
	else
		pressure_comp = ((pressure_comp << 1) / var1);
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	005a      	lsls	r2, r3, #1
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	fb92 f3f3 	sdiv	r3, r2, r3
 800166a:	617b      	str	r3, [r7, #20]
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001672:	4619      	mov	r1, r3
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	10db      	asrs	r3, r3, #3
		(pressure_comp >> 3)) >> 13)) >> 12;
 8001678:	697a      	ldr	r2, [r7, #20]
 800167a:	10d2      	asrs	r2, r2, #3
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 800167c:	fb02 f303 	mul.w	r3, r2, r3
		(pressure_comp >> 3)) >> 13)) >> 12;
 8001680:	135b      	asrs	r3, r3, #13
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8001682:	fb03 f301 	mul.w	r3, r3, r1
 8001686:	131b      	asrs	r3, r3, #12
 8001688:	613b      	str	r3, [r7, #16]
	var2 = ((int32_t)(pressure_comp >> 2) *
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	109b      	asrs	r3, r3, #2
		(int32_t)dev->calib.par_p8) >> 13;
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	f9b2 2028 	ldrsh.w	r2, [r2, #40]	; 0x28
	var2 = ((int32_t)(pressure_comp >> 2) *
 8001694:	fb02 f303 	mul.w	r3, r2, r3
 8001698:	135b      	asrs	r3, r3, #13
 800169a:	60fb      	str	r3, [r7, #12]
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	121b      	asrs	r3, r3, #8
 80016a0:	697a      	ldr	r2, [r7, #20]
 80016a2:	1212      	asrs	r2, r2, #8
 80016a4:	fb02 f303 	mul.w	r3, r2, r3
		(int32_t)(pressure_comp >> 8) *
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	1212      	asrs	r2, r2, #8
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 80016ac:	fb02 f303 	mul.w	r3, r2, r3
		(int32_t)dev->calib.par_p10) >> 17;
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
		(int32_t)(pressure_comp >> 8) *
 80016b6:	fb02 f303 	mul.w	r3, r2, r3
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 80016ba:	145b      	asrs	r3, r3, #17
 80016bc:	60bb      	str	r3, [r7, #8]

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	441a      	add	r2, r3
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	441a      	add	r2, r3
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	f993 3027 	ldrsb.w	r3, [r3, #39]	; 0x27
 80016ce:	01db      	lsls	r3, r3, #7
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 80016d0:	4413      	add	r3, r2
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 80016d2:	111b      	asrs	r3, r3, #4
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 80016d4:	697a      	ldr	r2, [r7, #20]
 80016d6:	4413      	add	r3, r2
 80016d8:	617b      	str	r3, [r7, #20]

	return (uint32_t)pressure_comp;
 80016da:	697b      	ldr	r3, [r7, #20]

}
 80016dc:	4618      	mov	r0, r3
 80016de:	371c      	adds	r7, #28
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <calc_humidity>:

/*!
 * @brief This internal API is used to calculate the humidity value.
 */
static uint32_t calc_humidity(uint16_t hum_adc, const struct bme680_dev *dev)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b08b      	sub	sp, #44	; 0x2c
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	6039      	str	r1, [r7, #0]
 80016f2:	80fb      	strh	r3, [r7, #6]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016f8:	4613      	mov	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	3380      	adds	r3, #128	; 0x80
 8001700:	121b      	asrs	r3, r3, #8
 8001702:	623b      	str	r3, [r7, #32]
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8001704:	88fa      	ldrh	r2, [r7, #6]
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	891b      	ldrh	r3, [r3, #8]
 800170a:	011b      	lsls	r3, r3, #4
 800170c:	1ad2      	subs	r2, r2, r3
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001714:	4619      	mov	r1, r3
 8001716:	6a3b      	ldr	r3, [r7, #32]
 8001718:	fb03 f301 	mul.w	r3, r3, r1
 800171c:	493d      	ldr	r1, [pc, #244]	; (8001814 <calc_humidity+0x12c>)
 800171e:	fb81 0103 	smull	r0, r1, r1, r3
 8001722:	1149      	asrs	r1, r1, #5
 8001724:	17db      	asrs	r3, r3, #31
 8001726:	1acb      	subs	r3, r1, r3
 8001728:	105b      	asrs	r3, r3, #1
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	61fb      	str	r3, [r7, #28]
	var2 = ((int32_t) dev->calib.par_h2
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	895b      	ldrh	r3, [r3, #10]
 8001732:	4618      	mov	r0, r3
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	f993 300d 	ldrsb.w	r3, [r3, #13]
 800173a:	461a      	mov	r2, r3
 800173c:	6a3b      	ldr	r3, [r7, #32]
 800173e:	fb03 f302 	mul.w	r3, r3, r2
 8001742:	4a34      	ldr	r2, [pc, #208]	; (8001814 <calc_humidity+0x12c>)
 8001744:	fb82 1203 	smull	r1, r2, r2, r3
 8001748:	1152      	asrs	r2, r2, #5
 800174a:	17db      	asrs	r3, r3, #31
 800174c:	1ad2      	subs	r2, r2, r3
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8001754:	4619      	mov	r1, r3
 8001756:	6a3b      	ldr	r3, [r7, #32]
 8001758:	fb03 f301 	mul.w	r3, r3, r1
 800175c:	492d      	ldr	r1, [pc, #180]	; (8001814 <calc_humidity+0x12c>)
 800175e:	fb81 c103 	smull	ip, r1, r1, r3
 8001762:	1149      	asrs	r1, r1, #5
 8001764:	17db      	asrs	r3, r3, #31
 8001766:	1acb      	subs	r3, r1, r3
 8001768:	6a39      	ldr	r1, [r7, #32]
 800176a:	fb01 f303 	mul.w	r3, r1, r3
 800176e:	119b      	asrs	r3, r3, #6
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 8001770:	4928      	ldr	r1, [pc, #160]	; (8001814 <calc_humidity+0x12c>)
 8001772:	fb81 c103 	smull	ip, r1, r1, r3
 8001776:	1149      	asrs	r1, r1, #5
 8001778:	17db      	asrs	r3, r3, #31
 800177a:	1acb      	subs	r3, r1, r3
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 800177c:	4413      	add	r3, r2
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 800177e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8001782:	fb03 f300 	mul.w	r3, r3, r0
	var2 = ((int32_t) dev->calib.par_h2
 8001786:	129b      	asrs	r3, r3, #10
 8001788:	61bb      	str	r3, [r7, #24]
	var3 = var1 * var2;
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	fb02 f303 	mul.w	r3, r2, r3
 8001792:	617b      	str	r3, [r7, #20]
	var4 = (int32_t) dev->calib.par_h6 << 7;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	7bdb      	ldrb	r3, [r3, #15]
 8001798:	01db      	lsls	r3, r3, #7
 800179a:	613b      	str	r3, [r7, #16]
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80017a2:	461a      	mov	r2, r3
 80017a4:	6a3b      	ldr	r3, [r7, #32]
 80017a6:	fb03 f302 	mul.w	r3, r3, r2
 80017aa:	4a1a      	ldr	r2, [pc, #104]	; (8001814 <calc_humidity+0x12c>)
 80017ac:	fb82 1203 	smull	r1, r2, r2, r3
 80017b0:	1152      	asrs	r2, r2, #5
 80017b2:	17db      	asrs	r3, r3, #31
 80017b4:	1ad2      	subs	r2, r2, r3
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	4413      	add	r3, r2
 80017ba:	111b      	asrs	r3, r3, #4
 80017bc:	613b      	str	r3, [r7, #16]
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	139b      	asrs	r3, r3, #14
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	1392      	asrs	r2, r2, #14
 80017c6:	fb02 f303 	mul.w	r3, r2, r3
 80017ca:	129b      	asrs	r3, r3, #10
 80017cc:	60fb      	str	r3, [r7, #12]
	var6 = (var4 * var5) >> 1;
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	fb02 f303 	mul.w	r3, r2, r3
 80017d6:	105b      	asrs	r3, r3, #1
 80017d8:	60bb      	str	r3, [r7, #8]
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	4413      	add	r3, r2
 80017e0:	129b      	asrs	r3, r3, #10
 80017e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017e6:	fb02 f303 	mul.w	r3, r2, r3
 80017ea:	131b      	asrs	r3, r3, #12
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24

	if (calc_hum > 100000) /* Cap at 100%rH */
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	4a09      	ldr	r2, [pc, #36]	; (8001818 <calc_humidity+0x130>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	dd02      	ble.n	80017fc <calc_humidity+0x114>
		calc_hum = 100000;
 80017f6:	4b08      	ldr	r3, [pc, #32]	; (8001818 <calc_humidity+0x130>)
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
 80017fa:	e004      	b.n	8001806 <calc_humidity+0x11e>
	else if (calc_hum < 0)
 80017fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fe:	2b00      	cmp	r3, #0
 8001800:	da01      	bge.n	8001806 <calc_humidity+0x11e>
		calc_hum = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	627b      	str	r3, [r7, #36]	; 0x24

	return (uint32_t) calc_hum;
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001808:	4618      	mov	r0, r3
 800180a:	372c      	adds	r7, #44	; 0x2c
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	51eb851f 	.word	0x51eb851f
 8001818:	000186a0 	.word	0x000186a0

0800181c <calc_gas_resistance>:

/*!
 * @brief This internal API is used to calculate the Gas Resistance value.
 */
static uint32_t calc_gas_resistance(uint16_t gas_res_adc, uint8_t gas_range, const struct bme680_dev *dev)
{
 800181c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001820:	b0b0      	sub	sp, #192	; 0xc0
 8001822:	af00      	add	r7, sp, #0
 8001824:	4603      	mov	r3, r0
 8001826:	61ba      	str	r2, [r7, #24]
 8001828:	83fb      	strh	r3, [r7, #30]
 800182a:	460b      	mov	r3, r1
 800182c:	777b      	strb	r3, [r7, #29]
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;
	/**Look up table 1 for the possible gas range values */
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 800182e:	4b5d      	ldr	r3, [pc, #372]	; (80019a4 <calc_gas_resistance+0x188>)
 8001830:	f107 0564 	add.w	r5, r7, #100	; 0x64
 8001834:	461c      	mov	r4, r3
 8001836:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001838:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800183a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800183c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800183e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001840:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001842:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001846:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2130303777),
		UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2143188679), UINT32_C(2136746228),
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2147483647) };
	/**Look up table 2 for the possible gas range values */
	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
 800184a:	4b57      	ldr	r3, [pc, #348]	; (80019a8 <calc_gas_resistance+0x18c>)
 800184c:	f107 0524 	add.w	r5, r7, #36	; 0x24
 8001850:	461c      	mov	r4, r3
 8001852:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001854:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001856:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001858:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800185a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800185c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800185e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001862:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		UINT32_C(255744255), UINT32_C(127110228), UINT32_C(64000000), UINT32_C(32258064), UINT32_C(16016016),
		UINT32_C(8000000), UINT32_C(4000000), UINT32_C(2000000), UINT32_C(1000000), UINT32_C(500000),
		UINT32_C(250000), UINT32_C(125000) };

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	f993 3036 	ldrsb.w	r3, [r3, #54]	; 0x36
 800186c:	b25c      	sxtb	r4, r3
 800186e:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8001872:	4622      	mov	r2, r4
 8001874:	462b      	mov	r3, r5
 8001876:	f04f 0000 	mov.w	r0, #0
 800187a:	f04f 0100 	mov.w	r1, #0
 800187e:	0099      	lsls	r1, r3, #2
 8001880:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001884:	0090      	lsls	r0, r2, #2
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	1911      	adds	r1, r2, r4
 800188c:	6139      	str	r1, [r7, #16]
 800188e:	416b      	adcs	r3, r5
 8001890:	617b      	str	r3, [r7, #20]
 8001892:	f240 523c 	movw	r2, #1340	; 0x53c
 8001896:	f04f 0300 	mov.w	r3, #0
 800189a:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800189e:	4621      	mov	r1, r4
 80018a0:	eb11 0802 	adds.w	r8, r1, r2
 80018a4:	4629      	mov	r1, r5
 80018a6:	eb41 0903 	adc.w	r9, r1, r3
		((int64_t) lookupTable1[gas_range])) >> 16;
 80018aa:	7f7b      	ldrb	r3, [r7, #29]
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80018b2:	4413      	add	r3, r2
 80018b4:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 80018b8:	461a      	mov	r2, r3
 80018ba:	f04f 0300 	mov.w	r3, #0
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 80018be:	fb02 f009 	mul.w	r0, r2, r9
 80018c2:	fb08 f103 	mul.w	r1, r8, r3
 80018c6:	1844      	adds	r4, r0, r1
 80018c8:	fba8 0102 	umull	r0, r1, r8, r2
 80018cc:	1863      	adds	r3, r4, r1
 80018ce:	4619      	mov	r1, r3
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	f04f 0300 	mov.w	r3, #0
 80018d8:	0c02      	lsrs	r2, r0, #16
 80018da:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80018de:	140b      	asrs	r3, r1, #16
 80018e0:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 80018e4:	8bf8      	ldrh	r0, [r7, #30]
 80018e6:	f04f 0100 	mov.w	r1, #0
 80018ea:	f04f 0200 	mov.w	r2, #0
 80018ee:	f04f 0300 	mov.w	r3, #0
 80018f2:	03cb      	lsls	r3, r1, #15
 80018f4:	ea43 4350 	orr.w	r3, r3, r0, lsr #17
 80018f8:	03c2      	lsls	r2, r0, #15
 80018fa:	f112 4a7f 	adds.w	sl, r2, #4278190080	; 0xff000000
 80018fe:	f143 3bff 	adc.w	fp, r3, #4294967295
 8001902:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8001906:	eb1a 0102 	adds.w	r1, sl, r2
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	eb4b 0303 	adc.w	r3, fp, r3
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001916:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 800191a:	7f7b      	ldrb	r3, [r7, #29]
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8001922:	4413      	add	r3, r2
 8001924:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001928:	461a      	mov	r2, r3
 800192a:	f04f 0300 	mov.w	r3, #0
 800192e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001932:	fb03 f001 	mul.w	r0, r3, r1
 8001936:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 800193a:	fb02 f101 	mul.w	r1, r2, r1
 800193e:	1844      	adds	r4, r0, r1
 8001940:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001944:	fba1 0102 	umull	r0, r1, r1, r2
 8001948:	1863      	adds	r3, r4, r1
 800194a:	4619      	mov	r1, r3
 800194c:	f04f 0200 	mov.w	r2, #0
 8001950:	f04f 0300 	mov.w	r3, #0
 8001954:	0a42      	lsrs	r2, r0, #9
 8001956:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800195a:	124b      	asrs	r3, r1, #9
 800195c:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 8001960:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001964:	f04f 0200 	mov.w	r2, #0
 8001968:	f04f 0300 	mov.w	r3, #0
 800196c:	0842      	lsrs	r2, r0, #1
 800196e:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8001972:	104b      	asrs	r3, r1, #1
 8001974:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8001978:	1814      	adds	r4, r2, r0
 800197a:	603c      	str	r4, [r7, #0]
 800197c:	414b      	adcs	r3, r1
 800197e:	607b      	str	r3, [r7, #4]
 8001980:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8001984:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001988:	f7fe fe36 	bl	80005f8 <__aeabi_ldivmod>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	4613      	mov	r3, r2
 8001992:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	return calc_gas_res;
 8001996:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
}
 800199a:	4618      	mov	r0, r3
 800199c:	37c0      	adds	r7, #192	; 0xc0
 800199e:	46bd      	mov	sp, r7
 80019a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019a4:	0800d660 	.word	0x0800d660
 80019a8:	0800d6a0 	.word	0x0800d6a0

080019ac <calc_heater_res>:

/*!
 * @brief This internal API is used to calculate the Heat Resistance value.
 */
static uint8_t calc_heater_res(uint16_t temp, const struct bme680_dev *dev)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b08b      	sub	sp, #44	; 0x2c
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	6039      	str	r1, [r7, #0]
 80019b6:	80fb      	strh	r3, [r7, #6]
	int32_t var3;
	int32_t var4;
	int32_t var5;
	int32_t heatr_res_x100;

	if (temp > 400) /* Cap temperature */
 80019b8:	88fb      	ldrh	r3, [r7, #6]
 80019ba:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80019be:	d902      	bls.n	80019c6 <calc_heater_res+0x1a>
		temp = 400;
 80019c0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80019c4:	80fb      	strh	r3, [r7, #6]

	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80019cc:	461a      	mov	r2, r3
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80019d4:	fb03 f302 	mul.w	r3, r3, r2
 80019d8:	4a2f      	ldr	r2, [pc, #188]	; (8001a98 <calc_heater_res+0xec>)
 80019da:	fb82 1203 	smull	r1, r2, r2, r3
 80019de:	1192      	asrs	r2, r2, #6
 80019e0:	17db      	asrs	r3, r3, #31
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	021b      	lsls	r3, r3, #8
 80019e6:	627b      	str	r3, [r7, #36]	; 0x24
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80019ee:	f503 7244 	add.w	r2, r3, #784	; 0x310
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80019f8:	f503 3316 	add.w	r3, r3, #153600	; 0x25800
 80019fc:	f203 1399 	addw	r3, r3, #409	; 0x199
 8001a00:	88f9      	ldrh	r1, [r7, #6]
 8001a02:	fb01 f303 	mul.w	r3, r1, r3
 8001a06:	4925      	ldr	r1, [pc, #148]	; (8001a9c <calc_heater_res+0xf0>)
 8001a08:	fb81 0103 	smull	r0, r1, r1, r3
 8001a0c:	10c9      	asrs	r1, r1, #3
 8001a0e:	17db      	asrs	r3, r3, #31
 8001a10:	1acb      	subs	r3, r1, r3
 8001a12:	f503 1348 	add.w	r3, r3, #3276800	; 0x320000
 8001a16:	4921      	ldr	r1, [pc, #132]	; (8001a9c <calc_heater_res+0xf0>)
 8001a18:	fb81 0103 	smull	r0, r1, r1, r3
 8001a1c:	1089      	asrs	r1, r1, #2
 8001a1e:	17db      	asrs	r3, r3, #31
 8001a20:	1acb      	subs	r3, r1, r3
 8001a22:	fb03 f302 	mul.w	r3, r3, r2
 8001a26:	623b      	str	r3, [r7, #32]
	var3 = var1 + (var2 / 2);
 8001a28:	6a3b      	ldr	r3, [r7, #32]
 8001a2a:	0fda      	lsrs	r2, r3, #31
 8001a2c:	4413      	add	r3, r2
 8001a2e:	105b      	asrs	r3, r3, #1
 8001a30:	461a      	mov	r2, r3
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	4413      	add	r3, r2
 8001a36:	61fb      	str	r3, [r7, #28]
	var4 = (var3 / (dev->calib.res_heat_range + 4));
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a3e:	3304      	adds	r3, #4
 8001a40:	69fa      	ldr	r2, [r7, #28]
 8001a42:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a46:	61bb      	str	r3, [r7, #24]
	var5 = (131 * dev->calib.res_heat_val) + 65536;
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	f993 3035 	ldrsb.w	r3, [r3, #53]	; 0x35
 8001a4e:	461a      	mov	r2, r3
 8001a50:	4613      	mov	r3, r2
 8001a52:	019b      	lsls	r3, r3, #6
 8001a54:	4413      	add	r3, r2
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	4413      	add	r3, r2
 8001a5a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001a5e:	617b      	str	r3, [r7, #20]
	heatr_res_x100 = (int32_t) (((var4 / var5) - 250) * 34);
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a68:	f1a3 02fa 	sub.w	r2, r3, #250	; 0xfa
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	011b      	lsls	r3, r3, #4
 8001a70:	4413      	add	r3, r2
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	613b      	str	r3, [r7, #16]
	heatr_res = (uint8_t) ((heatr_res_x100 + 50) / 100);
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	3332      	adds	r3, #50	; 0x32
 8001a7a:	4a09      	ldr	r2, [pc, #36]	; (8001aa0 <calc_heater_res+0xf4>)
 8001a7c:	fb82 1203 	smull	r1, r2, r2, r3
 8001a80:	1152      	asrs	r2, r2, #5
 8001a82:	17db      	asrs	r3, r3, #31
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	73fb      	strb	r3, [r7, #15]

	return heatr_res;
 8001a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	372c      	adds	r7, #44	; 0x2c
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	10624dd3 	.word	0x10624dd3
 8001a9c:	66666667 	.word	0x66666667
 8001aa0:	51eb851f 	.word	0x51eb851f

08001aa4 <calc_heater_dur>:

/*!
 * @brief This internal API is used to calculate the Heat duration value.
 */
static uint8_t calc_heater_dur(uint16_t dur)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	80fb      	strh	r3, [r7, #6]
	uint8_t factor = 0;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	73fb      	strb	r3, [r7, #15]
	uint8_t durval;

	if (dur >= 0xfc0) {
 8001ab2:	88fb      	ldrh	r3, [r7, #6]
 8001ab4:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
 8001ab8:	d308      	bcc.n	8001acc <calc_heater_dur+0x28>
		durval = 0xff; /* Max duration*/
 8001aba:	23ff      	movs	r3, #255	; 0xff
 8001abc:	73bb      	strb	r3, [r7, #14]
 8001abe:	e00f      	b.n	8001ae0 <calc_heater_dur+0x3c>
	} else {
		while (dur > 0x3F) {
			dur = dur / 4;
 8001ac0:	88fb      	ldrh	r3, [r7, #6]
 8001ac2:	089b      	lsrs	r3, r3, #2
 8001ac4:	80fb      	strh	r3, [r7, #6]
			factor += 1;
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	73fb      	strb	r3, [r7, #15]
		while (dur > 0x3F) {
 8001acc:	88fb      	ldrh	r3, [r7, #6]
 8001ace:	2b3f      	cmp	r3, #63	; 0x3f
 8001ad0:	d8f6      	bhi.n	8001ac0 <calc_heater_dur+0x1c>
		}
		durval = (uint8_t) (dur + (factor * 64));
 8001ad2:	88fb      	ldrh	r3, [r7, #6]
 8001ad4:	b2da      	uxtb	r2, r3
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
 8001ad8:	019b      	lsls	r3, r3, #6
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	4413      	add	r3, r2
 8001ade:	73bb      	strb	r3, [r7, #14]
	}

	return durval;
 8001ae0:	7bbb      	ldrb	r3, [r7, #14]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3714      	adds	r7, #20
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <read_field_data>:

/*!
 * @brief This internal API is used to calculate the field data of sensor.
 */
static int8_t read_field_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b08a      	sub	sp, #40	; 0x28
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
 8001af8:	2300      	movs	r3, #0
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	f107 030c 	add.w	r3, r7, #12
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t gas_range;
	uint32_t adc_temp;
	uint32_t adc_pres;
	uint16_t adc_hum;
	uint16_t adc_gas_res;
	uint8_t tries = 10;
 8001b0a:	230a      	movs	r3, #10
 8001b0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001b10:	6838      	ldr	r0, [r7, #0]
 8001b12:	f000 f975 	bl	8001e00 <null_ptr_check>
 8001b16:	4603      	mov	r3, r0
 8001b18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	do {
		if (rslt == BME680_OK) {
 8001b1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f040 8087 	bne.w	8001c34 <read_field_data+0x146>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 8001b26:	f107 0108 	add.w	r1, r7, #8
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	220f      	movs	r2, #15
 8001b2e:	201d      	movs	r0, #29
 8001b30:	f7fe ff62 	bl	80009f8 <bme680_get_regs>
 8001b34:	4603      	mov	r3, r0
 8001b36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
 8001b3a:	7a3b      	ldrb	r3, [r7, #8]
 8001b3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	701a      	strb	r2, [r3, #0]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 8001b46:	7a3b      	ldrb	r3, [r7, #8]
 8001b48:	f003 030f 	and.w	r3, r3, #15
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	705a      	strb	r2, [r3, #1]
			data->meas_index = buff[1];
 8001b52:	7a7a      	ldrb	r2, [r7, #9]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	709a      	strb	r2, [r3, #2]

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 8001b58:	7abb      	ldrb	r3, [r7, #10]
 8001b5a:	031a      	lsls	r2, r3, #12
 8001b5c:	7afb      	ldrb	r3, [r7, #11]
 8001b5e:	011b      	lsls	r3, r3, #4
 8001b60:	4313      	orrs	r3, r2
				| ((uint32_t) buff[4] / 16));
 8001b62:	7b3a      	ldrb	r2, [r7, #12]
 8001b64:	0912      	lsrs	r2, r2, #4
 8001b66:	b2d2      	uxtb	r2, r2
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	623b      	str	r3, [r7, #32]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 8001b6c:	7b7b      	ldrb	r3, [r7, #13]
 8001b6e:	031a      	lsls	r2, r3, #12
 8001b70:	7bbb      	ldrb	r3, [r7, #14]
 8001b72:	011b      	lsls	r3, r3, #4
 8001b74:	4313      	orrs	r3, r2
				| ((uint32_t) buff[7] / 16));
 8001b76:	7bfa      	ldrb	r2, [r7, #15]
 8001b78:	0912      	lsrs	r2, r2, #4
 8001b7a:	b2d2      	uxtb	r2, r2
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	61fb      	str	r3, [r7, #28]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8001b80:	7c3b      	ldrb	r3, [r7, #16]
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	021b      	lsls	r3, r3, #8
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	7c7b      	ldrb	r3, [r7, #17]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	837b      	strh	r3, [r7, #26]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 8001b90:	7d7b      	ldrb	r3, [r7, #21]
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	7dbb      	ldrb	r3, [r7, #22]
 8001b9a:	099b      	lsrs	r3, r3, #6
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	833b      	strh	r3, [r7, #24]
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;
 8001ba4:	7dbb      	ldrb	r3, [r7, #22]
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	75fb      	strb	r3, [r7, #23]

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	b25a      	sxtb	r2, r3
 8001bb2:	7dbb      	ldrb	r3, [r7, #22]
 8001bb4:	b25b      	sxtb	r3, r3
 8001bb6:	f003 0320 	and.w	r3, r3, #32
 8001bba:	b25b      	sxtb	r3, r3
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	b25b      	sxtb	r3, r3
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	701a      	strb	r2, [r3, #0]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	b25a      	sxtb	r2, r3
 8001bcc:	7dbb      	ldrb	r3, [r7, #22]
 8001bce:	b25b      	sxtb	r3, r3
 8001bd0:	f003 0310 	and.w	r3, r3, #16
 8001bd4:	b25b      	sxtb	r3, r3
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	b25b      	sxtb	r3, r3
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	701a      	strb	r2, [r3, #0]

			if (data->status & BME680_NEW_DATA_MSK) {
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	b25b      	sxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	da20      	bge.n	8001c2c <read_field_data+0x13e>
				data->temperature = calc_temperature(adc_temp, dev);
 8001bea:	6839      	ldr	r1, [r7, #0]
 8001bec:	69f8      	ldr	r0, [r7, #28]
 8001bee:	f7ff fc49 	bl	8001484 <calc_temperature>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	809a      	strh	r2, [r3, #4]
				data->pressure = calc_pressure(adc_pres, dev);
 8001bfa:	6839      	ldr	r1, [r7, #0]
 8001bfc:	6a38      	ldr	r0, [r7, #32]
 8001bfe:	f7ff fcc6 	bl	800158e <calc_pressure>
 8001c02:	4602      	mov	r2, r0
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	609a      	str	r2, [r3, #8]
				data->humidity = calc_humidity(adc_hum, dev);
 8001c08:	8b7b      	ldrh	r3, [r7, #26]
 8001c0a:	6839      	ldr	r1, [r7, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff fd6b 	bl	80016e8 <calc_humidity>
 8001c12:	4602      	mov	r2, r0
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	60da      	str	r2, [r3, #12]
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 8001c18:	7df9      	ldrb	r1, [r7, #23]
 8001c1a:	8b3b      	ldrh	r3, [r7, #24]
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff fdfc 	bl	800181c <calc_gas_resistance>
 8001c24:	4602      	mov	r2, r0
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	611a      	str	r2, [r3, #16]
				break;
 8001c2a:	e00d      	b.n	8001c48 <read_field_data+0x15a>
			}
			/* Delay to poll the data */
			dev->delay_ms(BME680_POLL_PERIOD_MS);
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c30:	200a      	movs	r0, #10
 8001c32:	4798      	blx	r3
		}
		tries--;
 8001c34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	} while (tries);
 8001c3e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f47f af6a 	bne.w	8001b1c <read_field_data+0x2e>

	if (!tries)
 8001c48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d102      	bne.n	8001c56 <read_field_data+0x168>
		rslt = BME680_W_NO_NEW_DATA;
 8001c50:	2302      	movs	r3, #2
 8001c52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return rslt;
 8001c56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3728      	adds	r7, #40	; 0x28
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <set_mem_page>:

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
 8001c62:	b590      	push	{r4, r7, lr}
 8001c64:	b085      	sub	sp, #20
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	4603      	mov	r3, r0
 8001c6a:	6039      	str	r1, [r7, #0]
 8001c6c:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
 8001c6e:	6838      	ldr	r0, [r7, #0]
 8001c70:	f000 f8c6 	bl	8001e00 <null_ptr_check>
 8001c74:	4603      	mov	r3, r0
 8001c76:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8001c78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d14f      	bne.n	8001d20 <set_mem_page+0xbe>
		if (reg_addr > 0x7f)
 8001c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	da02      	bge.n	8001c8e <set_mem_page+0x2c>
			mem_page = BME680_MEM_PAGE1;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	73bb      	strb	r3, [r7, #14]
 8001c8c:	e001      	b.n	8001c92 <set_mem_page+0x30>
		else
			mem_page = BME680_MEM_PAGE0;
 8001c8e:	2310      	movs	r3, #16
 8001c90:	73bb      	strb	r3, [r7, #14]

		if (mem_page != dev->mem_page) {
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	78db      	ldrb	r3, [r3, #3]
 8001c96:	7bba      	ldrb	r2, [r7, #14]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d041      	beq.n	8001d20 <set_mem_page+0xbe>
			dev->mem_page = mem_page;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	7bba      	ldrb	r2, [r7, #14]
 8001ca0:	70da      	strb	r2, [r3, #3]

			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	7858      	ldrb	r0, [r3, #1]
 8001caa:	f107 020d 	add.w	r2, r7, #13
 8001cae:	2301      	movs	r3, #1
 8001cb0:	21f3      	movs	r1, #243	; 0xf3
 8001cb2:	47a0      	blx	r4
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			if (dev->com_rslt != 0)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <set_mem_page+0x6a>
				rslt = BME680_E_COM_FAIL;
 8001cc8:	23fe      	movs	r3, #254	; 0xfe
 8001cca:	73fb      	strb	r3, [r7, #15]

			if (rslt == BME680_OK) {
 8001ccc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d125      	bne.n	8001d20 <set_mem_page+0xbe>
				reg = reg & (~BME680_MEM_PAGE_MSK);
 8001cd4:	7b7b      	ldrb	r3, [r7, #13]
 8001cd6:	f023 0310 	bic.w	r3, r3, #16
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	737b      	strb	r3, [r7, #13]
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	78db      	ldrb	r3, [r3, #3]
 8001ce2:	b25b      	sxtb	r3, r3
 8001ce4:	f003 0310 	and.w	r3, r3, #16
 8001ce8:	b25a      	sxtb	r2, r3
 8001cea:	7b7b      	ldrb	r3, [r7, #13]
 8001cec:	b25b      	sxtb	r3, r3
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	b25b      	sxtb	r3, r3
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	737b      	strb	r3, [r7, #13]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	7858      	ldrb	r0, [r3, #1]
 8001cfe:	f107 020d 	add.w	r2, r7, #13
 8001d02:	2301      	movs	r3, #1
 8001d04:	2173      	movs	r1, #115	; 0x73
 8001d06:	47a0      	blx	r4
 8001d08:	4603      	mov	r3, r0
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
					&reg, 1);
				if (dev->com_rslt != 0)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <set_mem_page+0xbe>
					rslt = BME680_E_COM_FAIL;
 8001d1c:	23fe      	movs	r3, #254	; 0xfe
 8001d1e:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	return rslt;
 8001d20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd90      	pop	{r4, r7, pc}

08001d2c <get_mem_page>:

/*!
 * @brief This internal API is used to get the memory page based on register address.
 */
static int8_t get_mem_page(struct bme680_dev *dev)
{
 8001d2c:	b590      	push	{r4, r7, lr}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 f863 	bl	8001e00 <null_ptr_check>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8001d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d11b      	bne.n	8001d7e <get_mem_page+0x52>
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	7858      	ldrb	r0, [r3, #1]
 8001d4e:	f107 020e 	add.w	r2, r7, #14
 8001d52:	2301      	movs	r3, #1
 8001d54:	21f3      	movs	r1, #243	; 0xf3
 8001d56:	47a0      	blx	r4
 8001d58:	4603      	mov	r3, r0
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		if (dev->com_rslt != 0)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d002      	beq.n	8001d72 <get_mem_page+0x46>
			rslt = BME680_E_COM_FAIL;
 8001d6c:	23fe      	movs	r3, #254	; 0xfe
 8001d6e:	73fb      	strb	r3, [r7, #15]
 8001d70:	e005      	b.n	8001d7e <get_mem_page+0x52>
		else
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
 8001d72:	7bbb      	ldrb	r3, [r7, #14]
 8001d74:	f003 0310 	and.w	r3, r3, #16
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	70da      	strb	r2, [r3, #3]
	}

	return rslt;
 8001d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd90      	pop	{r4, r7, pc}

08001d8a <boundary_check>:
/*!
 * @brief This internal API is used to validate the boundary
 * conditions.
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b087      	sub	sp, #28
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	60f8      	str	r0, [r7, #12]
 8001d92:	607b      	str	r3, [r7, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	72fb      	strb	r3, [r7, #11]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	72bb      	strb	r3, [r7, #10]
	int8_t rslt = BME680_OK;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	75fb      	strb	r3, [r7, #23]

	if (value != NULL) {
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d022      	beq.n	8001dec <boundary_check+0x62>
		/* Check if value is below minimum value */
		if (*value < min) {
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	7afa      	ldrb	r2, [r7, #11]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d90b      	bls.n	8001dc8 <boundary_check+0x3e>
			/* Auto correct the invalid value to minimum value */
			*value = min;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	7afa      	ldrb	r2, [r7, #11]
 8001db4:	701a      	strb	r2, [r3, #0]
			dev->info_msg |= BME680_I_MIN_CORRECTION;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		}
		/* Check if value is above maximum value */
		if (*value > max) {
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	7aba      	ldrb	r2, [r7, #10]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d20e      	bcs.n	8001df0 <boundary_check+0x66>
			/* Auto correct the invalid value to maximum value */
			*value = max;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	7aba      	ldrb	r2, [r7, #10]
 8001dd6:	701a      	strb	r2, [r3, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001dde:	f043 0302 	orr.w	r3, r3, #2
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001dea:	e001      	b.n	8001df0 <boundary_check+0x66>
		}
	} else {
		rslt = BME680_E_NULL_PTR;
 8001dec:	23ff      	movs	r3, #255	; 0xff
 8001dee:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001df0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	371c      	adds	r7, #28
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00b      	beq.n	8001e26 <null_ptr_check+0x26>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d007      	beq.n	8001e26 <null_ptr_check+0x26>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <null_ptr_check+0x26>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d102      	bne.n	8001e2c <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
 8001e26:	23ff      	movs	r3, #255	; 0xff
 8001e28:	73fb      	strb	r3, [r7, #15]
 8001e2a:	e001      	b.n	8001e30 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME680_OK;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001e30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <DEV_SPI_WriteByte>:
******************************************************************************/
#include "DEV_Config.h"

extern SPI_HandleTypeDef hspi4;
void DEV_SPI_WriteByte(UBYTE value)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi4, &value, 1, 1000);
 8001e4a:	1df9      	adds	r1, r7, #7
 8001e4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e50:	2201      	movs	r2, #1
 8001e52:	4803      	ldr	r0, [pc, #12]	; (8001e60 <DEV_SPI_WriteByte+0x20>)
 8001e54:	f006 fec7 	bl	8008be6 <HAL_SPI_Transmit>
}
 8001e58:	bf00      	nop
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	200003c4 	.word	0x200003c4

08001e64 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	2180      	movs	r1, #128	; 0x80
 8001e6c:	4808      	ldr	r0, [pc, #32]	; (8001e90 <DEV_Module_Init+0x2c>)
 8001e6e:	f002 fecd 	bl	8004c0c <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8001e72:	2200      	movs	r2, #0
 8001e74:	2104      	movs	r1, #4
 8001e76:	4807      	ldr	r0, [pc, #28]	; (8001e94 <DEV_Module_Init+0x30>)
 8001e78:	f002 fec8 	bl	8004c0c <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e82:	4803      	ldr	r0, [pc, #12]	; (8001e90 <DEV_Module_Init+0x2c>)
 8001e84:	f002 fec2 	bl	8004c0c <HAL_GPIO_WritePin>
		return 0;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40021000 	.word	0x40021000
 8001e94:	40020400 	.word	0x40020400

08001e98 <EPD_2in13bc_test>:
#include "EPD_Test.h"
#include "EPD_2IN13BC.h"
#include "ImageData2.c"

int EPD_2in13bc_test(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b088      	sub	sp, #32
 8001e9c:	af04      	add	r7, sp, #16
    printf("EPD_2IN13BC_test Demo\r\n");
 8001e9e:	489e      	ldr	r0, [pc, #632]	; (8002118 <EPD_2in13bc_test+0x280>)
 8001ea0:	f00a fd32 	bl	800c908 <puts>
    DEV_Module_Init();
 8001ea4:	f7ff ffde 	bl	8001e64 <DEV_Module_Init>

    printf("e-Paper Init and Clear...\r\n");
 8001ea8:	489c      	ldr	r0, [pc, #624]	; (800211c <EPD_2in13bc_test+0x284>)
 8001eaa:	f00a fd2d 	bl	800c908 <puts>
    EPD_2IN13BC_Init();
 8001eae:	f001 faab 	bl	8003408 <EPD_2IN13BC_Init>
    EPD_2IN13BC_Clear();
 8001eb2:	f001 fad8 	bl	8003466 <EPD_2IN13BC_Clear>
    DEV_Delay_ms(500);
 8001eb6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001eba:	f002 fbd5 	bl	8004668 <HAL_Delay>

    //Create a new image cache named IMAGE_BW and fill it with white
    UBYTE *BlackImage, *RYImage; // Red or Yellow
    UWORD Imagesize = ((EPD_2IN13BC_WIDTH % 8 == 0)? (EPD_2IN13BC_WIDTH / 8 ): (EPD_2IN13BC_WIDTH / 8 + 1)) * EPD_2IN13BC_HEIGHT;
 8001ebe:	f640 23c4 	movw	r3, #2756	; 0xac4
 8001ec2:	81fb      	strh	r3, [r7, #14]
    if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 8001ec4:	89fb      	ldrh	r3, [r7, #14]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f00a fbc8 	bl	800c65c <malloc>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d105      	bne.n	8001ee2 <EPD_2in13bc_test+0x4a>
        printf("Failed to apply for black memory...\r\n");
 8001ed6:	4892      	ldr	r0, [pc, #584]	; (8002120 <EPD_2in13bc_test+0x288>)
 8001ed8:	f00a fd16 	bl	800c908 <puts>
        return -1;
 8001edc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee0:	e116      	b.n	8002110 <EPD_2in13bc_test+0x278>
    }
    if((RYImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 8001ee2:	89fb      	ldrh	r3, [r7, #14]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f00a fbb9 	bl	800c65c <malloc>
 8001eea:	4603      	mov	r3, r0
 8001eec:	607b      	str	r3, [r7, #4]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d105      	bne.n	8001f00 <EPD_2in13bc_test+0x68>
        printf("Failed to apply for red memory...\r\n");
 8001ef4:	488b      	ldr	r0, [pc, #556]	; (8002124 <EPD_2in13bc_test+0x28c>)
 8001ef6:	f00a fd07 	bl	800c908 <puts>
        return -1;
 8001efa:	f04f 33ff 	mov.w	r3, #4294967295
 8001efe:	e107      	b.n	8002110 <EPD_2in13bc_test+0x278>
    }
    printf("NewImage:BlackImage and RYImage\r\n");
 8001f00:	4889      	ldr	r0, [pc, #548]	; (8002128 <EPD_2in13bc_test+0x290>)
 8001f02:	f00a fd01 	bl	800c908 <puts>
    Paint_NewImage(BlackImage, EPD_2IN13BC_WIDTH, EPD_2IN13BC_HEIGHT, 270, WHITE);
 8001f06:	23ff      	movs	r3, #255	; 0xff
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001f0e:	22d4      	movs	r2, #212	; 0xd4
 8001f10:	2168      	movs	r1, #104	; 0x68
 8001f12:	68b8      	ldr	r0, [r7, #8]
 8001f14:	f000 f928 	bl	8002168 <Paint_NewImage>
    Paint_NewImage(RYImage, EPD_2IN13BC_WIDTH, EPD_2IN13BC_HEIGHT, 270, WHITE);
 8001f18:	23ff      	movs	r3, #255	; 0xff
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001f20:	22d4      	movs	r2, #212	; 0xd4
 8001f22:	2168      	movs	r1, #104	; 0x68
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 f91f 	bl	8002168 <Paint_NewImage>

    //Select Image
    Paint_SelectImage(BlackImage);
 8001f2a:	68b8      	ldr	r0, [r7, #8]
 8001f2c:	f000 f972 	bl	8002214 <Paint_SelectImage>
    Paint_Clear(WHITE);
 8001f30:	20ff      	movs	r0, #255	; 0xff
 8001f32:	f000 facb 	bl	80024cc <Paint_Clear>
    Paint_SelectImage(RYImage);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f96c 	bl	8002214 <Paint_SelectImage>
    Paint_Clear(WHITE);
 8001f3c:	20ff      	movs	r0, #255	; 0xff
 8001f3e:	f000 fac5 	bl	80024cc <Paint_Clear>

#if 1   // show image for array    
    printf("show image for array\r\n");
 8001f42:	487a      	ldr	r0, [pc, #488]	; (800212c <EPD_2in13bc_test+0x294>)
 8001f44:	f00a fce0 	bl	800c908 <puts>
//    EPD_2IN13BC_Display(gImage_2in13b_b, gImage_2in13b_r);

    EPD_2IN13BC_Display(gImage_2in13c_b, gImage_2in13c_y);
 8001f48:	4979      	ldr	r1, [pc, #484]	; (8002130 <EPD_2in13bc_test+0x298>)
 8001f4a:	487a      	ldr	r0, [pc, #488]	; (8002134 <EPD_2in13bc_test+0x29c>)
 8001f4c:	f001 fad2 	bl	80034f4 <EPD_2IN13BC_Display>
    DEV_Delay_ms(2000);
 8001f50:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001f54:	f002 fb88 	bl	8004668 <HAL_Delay>
#endif

#if 1   // Drawing on the image
    /*Horizontal screen*/
    //1.Draw black image
    printf("Draw black image\r\n");
 8001f58:	4877      	ldr	r0, [pc, #476]	; (8002138 <EPD_2in13bc_test+0x2a0>)
 8001f5a:	f00a fcd5 	bl	800c908 <puts>
    Paint_SelectImage(BlackImage);
 8001f5e:	68b8      	ldr	r0, [r7, #8]
 8001f60:	f000 f958 	bl	8002214 <Paint_SelectImage>
    Paint_Clear(WHITE);
 8001f64:	20ff      	movs	r0, #255	; 0xff
 8001f66:	f000 fab1 	bl	80024cc <Paint_Clear>
    Paint_DrawPoint(5, 70, BLACK, DOT_PIXEL_1X1, DOT_STYLE_DFT);
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	2301      	movs	r3, #1
 8001f70:	2200      	movs	r2, #0
 8001f72:	2146      	movs	r1, #70	; 0x46
 8001f74:	2005      	movs	r0, #5
 8001f76:	f000 fb15 	bl	80025a4 <Paint_DrawPoint>
    Paint_DrawPoint(5, 80, BLACK, DOT_PIXEL_2X2, DOT_STYLE_DFT);
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	2302      	movs	r3, #2
 8001f80:	2200      	movs	r2, #0
 8001f82:	2150      	movs	r1, #80	; 0x50
 8001f84:	2005      	movs	r0, #5
 8001f86:	f000 fb0d 	bl	80025a4 <Paint_DrawPoint>
    Paint_DrawLine(20, 70, 50, 100, BLACK, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	9302      	str	r3, [sp, #8]
 8001f8e:	2301      	movs	r3, #1
 8001f90:	9301      	str	r3, [sp, #4]
 8001f92:	2300      	movs	r3, #0
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	2364      	movs	r3, #100	; 0x64
 8001f98:	2232      	movs	r2, #50	; 0x32
 8001f9a:	2146      	movs	r1, #70	; 0x46
 8001f9c:	2014      	movs	r0, #20
 8001f9e:	f000 fbad 	bl	80026fc <Paint_DrawLine>
    Paint_DrawLine(50, 70, 20, 100, BLACK, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	9302      	str	r3, [sp, #8]
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	9301      	str	r3, [sp, #4]
 8001faa:	2300      	movs	r3, #0
 8001fac:	9300      	str	r3, [sp, #0]
 8001fae:	2364      	movs	r3, #100	; 0x64
 8001fb0:	2214      	movs	r2, #20
 8001fb2:	2146      	movs	r1, #70	; 0x46
 8001fb4:	2032      	movs	r0, #50	; 0x32
 8001fb6:	f000 fba1 	bl	80026fc <Paint_DrawLine>
    Paint_DrawRectangle(60, 70, 90, 100, BLACK, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 8001fba:	2301      	movs	r3, #1
 8001fbc:	9302      	str	r3, [sp, #8]
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	9301      	str	r3, [sp, #4]
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	9300      	str	r3, [sp, #0]
 8001fc6:	2364      	movs	r3, #100	; 0x64
 8001fc8:	225a      	movs	r2, #90	; 0x5a
 8001fca:	2146      	movs	r1, #70	; 0x46
 8001fcc:	203c      	movs	r0, #60	; 0x3c
 8001fce:	f000 fc41 	bl	8002854 <Paint_DrawRectangle>
    Paint_DrawCircle(125, 85, 15, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	9301      	str	r3, [sp, #4]
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	2300      	movs	r3, #0
 8001fdc:	220f      	movs	r2, #15
 8001fde:	2155      	movs	r1, #85	; 0x55
 8001fe0:	207d      	movs	r0, #125	; 0x7d
 8001fe2:	f000 fcbb 	bl	800295c <Paint_DrawCircle>
    Paint_DrawString_CN(5, 15, "���abc", &Font12CN, WHITE, BLACK);
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	9301      	str	r3, [sp, #4]
 8001fea:	23ff      	movs	r3, #255	; 0xff
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	4b53      	ldr	r3, [pc, #332]	; (800213c <EPD_2in13bc_test+0x2a4>)
 8001ff0:	4a53      	ldr	r2, [pc, #332]	; (8002140 <EPD_2in13bc_test+0x2a8>)
 8001ff2:	210f      	movs	r1, #15
 8001ff4:	2005      	movs	r0, #5
 8001ff6:	f000 ff39 	bl	8002e6c <Paint_DrawString_CN>

    //2.Draw red image
    printf("Draw red image\r\n");
 8001ffa:	4852      	ldr	r0, [pc, #328]	; (8002144 <EPD_2in13bc_test+0x2ac>)
 8001ffc:	f00a fc84 	bl	800c908 <puts>
    Paint_SelectImage(RYImage);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f000 f907 	bl	8002214 <Paint_SelectImage>
    Paint_Clear(WHITE);
 8002006:	20ff      	movs	r0, #255	; 0xff
 8002008:	f000 fa60 	bl	80024cc <Paint_Clear>
    Paint_DrawPoint(5, 90, RED, DOT_PIXEL_3X3, DOT_STYLE_DFT);
 800200c:	2301      	movs	r3, #1
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	2303      	movs	r3, #3
 8002012:	2200      	movs	r2, #0
 8002014:	215a      	movs	r1, #90	; 0x5a
 8002016:	2005      	movs	r0, #5
 8002018:	f000 fac4 	bl	80025a4 <Paint_DrawPoint>
    Paint_DrawPoint(5, 100, RED, DOT_PIXEL_4X4, DOT_STYLE_DFT);
 800201c:	2301      	movs	r3, #1
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	2304      	movs	r3, #4
 8002022:	2200      	movs	r2, #0
 8002024:	2164      	movs	r1, #100	; 0x64
 8002026:	2005      	movs	r0, #5
 8002028:	f000 fabc 	bl	80025a4 <Paint_DrawPoint>
    Paint_DrawLine(125, 70, 125, 100, RED, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);
 800202c:	2301      	movs	r3, #1
 800202e:	9302      	str	r3, [sp, #8]
 8002030:	2301      	movs	r3, #1
 8002032:	9301      	str	r3, [sp, #4]
 8002034:	2300      	movs	r3, #0
 8002036:	9300      	str	r3, [sp, #0]
 8002038:	2364      	movs	r3, #100	; 0x64
 800203a:	227d      	movs	r2, #125	; 0x7d
 800203c:	2146      	movs	r1, #70	; 0x46
 800203e:	207d      	movs	r0, #125	; 0x7d
 8002040:	f000 fb5c 	bl	80026fc <Paint_DrawLine>
    Paint_DrawLine(110, 85, 140, 85, RED, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);
 8002044:	2301      	movs	r3, #1
 8002046:	9302      	str	r3, [sp, #8]
 8002048:	2301      	movs	r3, #1
 800204a:	9301      	str	r3, [sp, #4]
 800204c:	2300      	movs	r3, #0
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	2355      	movs	r3, #85	; 0x55
 8002052:	228c      	movs	r2, #140	; 0x8c
 8002054:	2155      	movs	r1, #85	; 0x55
 8002056:	206e      	movs	r0, #110	; 0x6e
 8002058:	f000 fb50 	bl	80026fc <Paint_DrawLine>
    Paint_DrawRectangle(20, 70, 50, 100, RED, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 800205c:	2300      	movs	r3, #0
 800205e:	9302      	str	r3, [sp, #8]
 8002060:	2301      	movs	r3, #1
 8002062:	9301      	str	r3, [sp, #4]
 8002064:	2300      	movs	r3, #0
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	2364      	movs	r3, #100	; 0x64
 800206a:	2232      	movs	r2, #50	; 0x32
 800206c:	2146      	movs	r1, #70	; 0x46
 800206e:	2014      	movs	r0, #20
 8002070:	f000 fbf0 	bl	8002854 <Paint_DrawRectangle>
    Paint_DrawCircle(165, 85, 15, RED, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 8002074:	2301      	movs	r3, #1
 8002076:	9301      	str	r3, [sp, #4]
 8002078:	2301      	movs	r3, #1
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	2300      	movs	r3, #0
 800207e:	220f      	movs	r2, #15
 8002080:	2155      	movs	r1, #85	; 0x55
 8002082:	20a5      	movs	r0, #165	; 0xa5
 8002084:	f000 fc6a 	bl	800295c <Paint_DrawCircle>
    Paint_DrawString_EN(5, 0, "waveshare Electronics", &Font12, BLACK, WHITE);
 8002088:	23ff      	movs	r3, #255	; 0xff
 800208a:	9301      	str	r3, [sp, #4]
 800208c:	2300      	movs	r3, #0
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	4b2d      	ldr	r3, [pc, #180]	; (8002148 <EPD_2in13bc_test+0x2b0>)
 8002092:	4a2e      	ldr	r2, [pc, #184]	; (800214c <EPD_2in13bc_test+0x2b4>)
 8002094:	2100      	movs	r1, #0
 8002096:	2005      	movs	r0, #5
 8002098:	f000 fe94 	bl	8002dc4 <Paint_DrawString_EN>
    Paint_DrawNum(5, 50, 987654321, &Font16, WHITE, RED);
 800209c:	2300      	movs	r3, #0
 800209e:	9301      	str	r3, [sp, #4]
 80020a0:	23ff      	movs	r3, #255	; 0xff
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	4b2a      	ldr	r3, [pc, #168]	; (8002150 <EPD_2in13bc_test+0x2b8>)
 80020a6:	4a2b      	ldr	r2, [pc, #172]	; (8002154 <EPD_2in13bc_test+0x2bc>)
 80020a8:	2132      	movs	r1, #50	; 0x32
 80020aa:	2005      	movs	r0, #5
 80020ac:	f001 f876 	bl	800319c <Paint_DrawNum>

    printf("EPD_Display\r\n");
 80020b0:	4829      	ldr	r0, [pc, #164]	; (8002158 <EPD_2in13bc_test+0x2c0>)
 80020b2:	f00a fc29 	bl	800c908 <puts>
    EPD_2IN13BC_Display(BlackImage, RYImage);
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	68b8      	ldr	r0, [r7, #8]
 80020ba:	f001 fa1b 	bl	80034f4 <EPD_2IN13BC_Display>
    DEV_Delay_ms(500);
 80020be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020c2:	f002 fad1 	bl	8004668 <HAL_Delay>

    Paint_SelectImage(BlackImage);
 80020c6:	68b8      	ldr	r0, [r7, #8]
 80020c8:	f000 f8a4 	bl	8002214 <Paint_SelectImage>
    Paint_Clear(WHITE);
 80020cc:	20ff      	movs	r0, #255	; 0xff
 80020ce:	f000 f9fd 	bl	80024cc <Paint_Clear>
    Paint_DrawString_EN(5, 20, "*****", &Font24, WHITE, BLACK);
 80020d2:	2300      	movs	r3, #0
 80020d4:	9301      	str	r3, [sp, #4]
 80020d6:	23ff      	movs	r3, #255	; 0xff
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	4b20      	ldr	r3, [pc, #128]	; (800215c <EPD_2in13bc_test+0x2c4>)
 80020dc:	4a20      	ldr	r2, [pc, #128]	; (8002160 <EPD_2in13bc_test+0x2c8>)
 80020de:	2114      	movs	r1, #20
 80020e0:	2005      	movs	r0, #5
 80020e2:	f000 fe6f 	bl	8002dc4 <Paint_DrawString_EN>

    Paint_SelectImage(RYImage);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f894 	bl	8002214 <Paint_SelectImage>
    Paint_Clear(WHITE);
 80020ec:	20ff      	movs	r0, #255	; 0xff
 80020ee:	f000 f9ed 	bl	80024cc <Paint_Clear>
    Paint_DrawString_EN(5, 50, "***", &Font24, WHITE, RED);
 80020f2:	2300      	movs	r3, #0
 80020f4:	9301      	str	r3, [sp, #4]
 80020f6:	23ff      	movs	r3, #255	; 0xff
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	4b18      	ldr	r3, [pc, #96]	; (800215c <EPD_2in13bc_test+0x2c4>)
 80020fc:	4a19      	ldr	r2, [pc, #100]	; (8002164 <EPD_2in13bc_test+0x2cc>)
 80020fe:	2132      	movs	r1, #50	; 0x32
 8002100:	2005      	movs	r0, #5
 8002102:	f000 fe5f 	bl	8002dc4 <Paint_DrawString_EN>
    EPD_2IN13BC_Display(BlackImage, RYImage);
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	68b8      	ldr	r0, [r7, #8]
 800210a:	f001 f9f3 	bl	80034f4 <EPD_2IN13BC_Display>

    // close 5V
    printf("close 5V, Module enters 0 power consumption ...\r\n");
    DEV_Module_Exit();*/
    
    return 0;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	0800d6e0 	.word	0x0800d6e0
 800211c:	0800d6f8 	.word	0x0800d6f8
 8002120:	0800d714 	.word	0x0800d714
 8002124:	0800d73c 	.word	0x0800d73c
 8002128:	0800d760 	.word	0x0800d760
 800212c:	0800d784 	.word	0x0800d784
 8002130:	0800e6a0 	.word	0x0800e6a0
 8002134:	0800dbdc 	.word	0x0800dbdc
 8002138:	0800d79c 	.word	0x0800d79c
 800213c:	20000008 	.word	0x20000008
 8002140:	0800d7b0 	.word	0x0800d7b0
 8002144:	0800d7c0 	.word	0x0800d7c0
 8002148:	20000000 	.word	0x20000000
 800214c:	0800d7d0 	.word	0x0800d7d0
 8002150:	20000014 	.word	0x20000014
 8002154:	3ade68b1 	.word	0x3ade68b1
 8002158:	0800d7e8 	.word	0x0800d7e8
 800215c:	2000001c 	.word	0x2000001c
 8002160:	0800d7f8 	.word	0x0800d7f8
 8002164:	0800d800 	.word	0x0800d800

08002168 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	4608      	mov	r0, r1
 8002172:	4611      	mov	r1, r2
 8002174:	461a      	mov	r2, r3
 8002176:	4603      	mov	r3, r0
 8002178:	817b      	strh	r3, [r7, #10]
 800217a:	460b      	mov	r3, r1
 800217c:	813b      	strh	r3, [r7, #8]
 800217e:	4613      	mov	r3, r2
 8002180:	80fb      	strh	r3, [r7, #6]
    Paint.Image = NULL;
 8002182:	4b23      	ldr	r3, [pc, #140]	; (8002210 <Paint_NewImage+0xa8>)
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 8002188:	4a21      	ldr	r2, [pc, #132]	; (8002210 <Paint_NewImage+0xa8>)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6013      	str	r3, [r2, #0]

    Paint.WidthMemory = Width;
 800218e:	4a20      	ldr	r2, [pc, #128]	; (8002210 <Paint_NewImage+0xa8>)
 8002190:	897b      	ldrh	r3, [r7, #10]
 8002192:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8002194:	4a1e      	ldr	r2, [pc, #120]	; (8002210 <Paint_NewImage+0xa8>)
 8002196:	893b      	ldrh	r3, [r7, #8]
 8002198:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 800219a:	4a1d      	ldr	r2, [pc, #116]	; (8002210 <Paint_NewImage+0xa8>)
 800219c:	8b3b      	ldrh	r3, [r7, #24]
 800219e:	8193      	strh	r3, [r2, #12]
	Paint.Scale = 2;
 80021a0:	4b1b      	ldr	r3, [pc, #108]	; (8002210 <Paint_NewImage+0xa8>)
 80021a2:	2202      	movs	r2, #2
 80021a4:	82da      	strh	r2, [r3, #22]
		
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 80021a6:	897b      	ldrh	r3, [r7, #10]
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d103      	bne.n	80021ba <Paint_NewImage+0x52>
 80021b2:	897b      	ldrh	r3, [r7, #10]
 80021b4:	08db      	lsrs	r3, r3, #3
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	e004      	b.n	80021c4 <Paint_NewImage+0x5c>
 80021ba:	897b      	ldrh	r3, [r7, #10]
 80021bc:	08db      	lsrs	r3, r3, #3
 80021be:	b29b      	uxth	r3, r3
 80021c0:	3301      	adds	r3, #1
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	4a12      	ldr	r2, [pc, #72]	; (8002210 <Paint_NewImage+0xa8>)
 80021c6:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 80021c8:	4a11      	ldr	r2, [pc, #68]	; (8002210 <Paint_NewImage+0xa8>)
 80021ca:	893b      	ldrh	r3, [r7, #8]
 80021cc:	8293      	strh	r3, [r2, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);
   
    Paint.Rotate = Rotate;
 80021ce:	4a10      	ldr	r2, [pc, #64]	; (8002210 <Paint_NewImage+0xa8>)
 80021d0:	88fb      	ldrh	r3, [r7, #6]
 80021d2:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 80021d4:	4b0e      	ldr	r3, [pc, #56]	; (8002210 <Paint_NewImage+0xa8>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 80021da:	88fb      	ldrh	r3, [r7, #6]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d002      	beq.n	80021e6 <Paint_NewImage+0x7e>
 80021e0:	88fb      	ldrh	r3, [r7, #6]
 80021e2:	2bb4      	cmp	r3, #180	; 0xb4
 80021e4:	d106      	bne.n	80021f4 <Paint_NewImage+0x8c>
        Paint.Width = Width;
 80021e6:	4a0a      	ldr	r2, [pc, #40]	; (8002210 <Paint_NewImage+0xa8>)
 80021e8:	897b      	ldrh	r3, [r7, #10]
 80021ea:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 80021ec:	4a08      	ldr	r2, [pc, #32]	; (8002210 <Paint_NewImage+0xa8>)
 80021ee:	893b      	ldrh	r3, [r7, #8]
 80021f0:	80d3      	strh	r3, [r2, #6]
 80021f2:	e006      	b.n	8002202 <Paint_NewImage+0x9a>
    } else {
        Paint.Width = Height;
 80021f4:	4a06      	ldr	r2, [pc, #24]	; (8002210 <Paint_NewImage+0xa8>)
 80021f6:	893b      	ldrh	r3, [r7, #8]
 80021f8:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 80021fa:	4a05      	ldr	r2, [pc, #20]	; (8002210 <Paint_NewImage+0xa8>)
 80021fc:	897b      	ldrh	r3, [r7, #10]
 80021fe:	80d3      	strh	r3, [r2, #6]
    }
}
 8002200:	bf00      	nop
 8002202:	bf00      	nop
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	200000ec 	.word	0x200000ec

08002214 <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(UBYTE *image)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 800221c:	4a04      	ldr	r2, [pc, #16]	; (8002230 <Paint_SelectImage+0x1c>)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6013      	str	r3, [r2, #0]
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	200000ec 	.word	0x200000ec

08002234 <Paint_SetPixel>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b08a      	sub	sp, #40	; 0x28
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	80fb      	strh	r3, [r7, #6]
 800223e:	460b      	mov	r3, r1
 8002240:	80bb      	strh	r3, [r7, #4]
 8002242:	4613      	mov	r3, r2
 8002244:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8002246:	4b9f      	ldr	r3, [pc, #636]	; (80024c4 <Paint_SetPixel+0x290>)
 8002248:	889b      	ldrh	r3, [r3, #4]
 800224a:	88fa      	ldrh	r2, [r7, #6]
 800224c:	429a      	cmp	r2, r3
 800224e:	d804      	bhi.n	800225a <Paint_SetPixel+0x26>
 8002250:	4b9c      	ldr	r3, [pc, #624]	; (80024c4 <Paint_SetPixel+0x290>)
 8002252:	88db      	ldrh	r3, [r3, #6]
 8002254:	88ba      	ldrh	r2, [r7, #4]
 8002256:	429a      	cmp	r2, r3
 8002258:	d903      	bls.n	8002262 <Paint_SetPixel+0x2e>
        Debug("Exceeding display boundaries\r\n");
 800225a:	489b      	ldr	r0, [pc, #620]	; (80024c8 <Paint_SetPixel+0x294>)
 800225c:	f00a fb54 	bl	800c908 <puts>
        return;
 8002260:	e12d      	b.n	80024be <Paint_SetPixel+0x28a>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 8002262:	4b98      	ldr	r3, [pc, #608]	; (80024c4 <Paint_SetPixel+0x290>)
 8002264:	89db      	ldrh	r3, [r3, #14]
 8002266:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800226a:	d02b      	beq.n	80022c4 <Paint_SetPixel+0x90>
 800226c:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8002270:	f300 8122 	bgt.w	80024b8 <Paint_SetPixel+0x284>
 8002274:	2bb4      	cmp	r3, #180	; 0xb4
 8002276:	d016      	beq.n	80022a6 <Paint_SetPixel+0x72>
 8002278:	2bb4      	cmp	r3, #180	; 0xb4
 800227a:	f300 811d 	bgt.w	80024b8 <Paint_SetPixel+0x284>
 800227e:	2b00      	cmp	r3, #0
 8002280:	d002      	beq.n	8002288 <Paint_SetPixel+0x54>
 8002282:	2b5a      	cmp	r3, #90	; 0x5a
 8002284:	d005      	beq.n	8002292 <Paint_SetPixel+0x5e>
    case 270:
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
    default:
        return;
 8002286:	e117      	b.n	80024b8 <Paint_SetPixel+0x284>
        X = Xpoint;
 8002288:	88fb      	ldrh	r3, [r7, #6]
 800228a:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Ypoint;  
 800228c:	88bb      	ldrh	r3, [r7, #4]
 800228e:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8002290:	e022      	b.n	80022d8 <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Ypoint - 1;
 8002292:	4b8c      	ldr	r3, [pc, #560]	; (80024c4 <Paint_SetPixel+0x290>)
 8002294:	891a      	ldrh	r2, [r3, #8]
 8002296:	88bb      	ldrh	r3, [r7, #4]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	b29b      	uxth	r3, r3
 800229c:	3b01      	subs	r3, #1
 800229e:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Xpoint;
 80022a0:	88fb      	ldrh	r3, [r7, #6]
 80022a2:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 80022a4:	e018      	b.n	80022d8 <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Xpoint - 1;
 80022a6:	4b87      	ldr	r3, [pc, #540]	; (80024c4 <Paint_SetPixel+0x290>)
 80022a8:	891a      	ldrh	r2, [r3, #8]
 80022aa:	88fb      	ldrh	r3, [r7, #6]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	3b01      	subs	r3, #1
 80022b2:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Ypoint - 1;
 80022b4:	4b83      	ldr	r3, [pc, #524]	; (80024c4 <Paint_SetPixel+0x290>)
 80022b6:	895a      	ldrh	r2, [r3, #10]
 80022b8:	88bb      	ldrh	r3, [r7, #4]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	b29b      	uxth	r3, r3
 80022be:	3b01      	subs	r3, #1
 80022c0:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 80022c2:	e009      	b.n	80022d8 <Paint_SetPixel+0xa4>
        X = Ypoint;
 80022c4:	88bb      	ldrh	r3, [r7, #4]
 80022c6:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Xpoint - 1;
 80022c8:	4b7e      	ldr	r3, [pc, #504]	; (80024c4 <Paint_SetPixel+0x290>)
 80022ca:	895a      	ldrh	r2, [r3, #10]
 80022cc:	88fb      	ldrh	r3, [r7, #6]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	3b01      	subs	r3, #1
 80022d4:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 80022d6:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 80022d8:	4b7a      	ldr	r3, [pc, #488]	; (80024c4 <Paint_SetPixel+0x290>)
 80022da:	8a1b      	ldrh	r3, [r3, #16]
 80022dc:	2b03      	cmp	r3, #3
 80022de:	f200 80ed 	bhi.w	80024bc <Paint_SetPixel+0x288>
 80022e2:	a201      	add	r2, pc, #4	; (adr r2, 80022e8 <Paint_SetPixel+0xb4>)
 80022e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e8:	08002337 	.word	0x08002337
 80022ec:	080022f9 	.word	0x080022f9
 80022f0:	08002309 	.word	0x08002309
 80022f4:	08002319 	.word	0x08002319
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 80022f8:	4b72      	ldr	r3, [pc, #456]	; (80024c4 <Paint_SetPixel+0x290>)
 80022fa:	891a      	ldrh	r2, [r3, #8]
 80022fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	b29b      	uxth	r3, r3
 8002302:	3b01      	subs	r3, #1
 8002304:	84fb      	strh	r3, [r7, #38]	; 0x26
        break;
 8002306:	e017      	b.n	8002338 <Paint_SetPixel+0x104>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 8002308:	4b6e      	ldr	r3, [pc, #440]	; (80024c4 <Paint_SetPixel+0x290>)
 800230a:	895a      	ldrh	r2, [r3, #10]
 800230c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	b29b      	uxth	r3, r3
 8002312:	3b01      	subs	r3, #1
 8002314:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8002316:	e00f      	b.n	8002338 <Paint_SetPixel+0x104>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8002318:	4b6a      	ldr	r3, [pc, #424]	; (80024c4 <Paint_SetPixel+0x290>)
 800231a:	891a      	ldrh	r2, [r3, #8]
 800231c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	b29b      	uxth	r3, r3
 8002322:	3b01      	subs	r3, #1
 8002324:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Y - 1;
 8002326:	4b67      	ldr	r3, [pc, #412]	; (80024c4 <Paint_SetPixel+0x290>)
 8002328:	895a      	ldrh	r2, [r3, #10]
 800232a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	b29b      	uxth	r3, r3
 8002330:	3b01      	subs	r3, #1
 8002332:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8002334:	e000      	b.n	8002338 <Paint_SetPixel+0x104>
        break;
 8002336:	bf00      	nop
    default:
        return;
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8002338:	4b62      	ldr	r3, [pc, #392]	; (80024c4 <Paint_SetPixel+0x290>)
 800233a:	891b      	ldrh	r3, [r3, #8]
 800233c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800233e:	429a      	cmp	r2, r3
 8002340:	d804      	bhi.n	800234c <Paint_SetPixel+0x118>
 8002342:	4b60      	ldr	r3, [pc, #384]	; (80024c4 <Paint_SetPixel+0x290>)
 8002344:	895b      	ldrh	r3, [r3, #10]
 8002346:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002348:	429a      	cmp	r2, r3
 800234a:	d903      	bls.n	8002354 <Paint_SetPixel+0x120>
        Debug("Exceeding display boundaries\r\n");
 800234c:	485e      	ldr	r0, [pc, #376]	; (80024c8 <Paint_SetPixel+0x294>)
 800234e:	f00a fadb 	bl	800c908 <puts>
        return;
 8002352:	e0b4      	b.n	80024be <Paint_SetPixel+0x28a>
    }
    
    if(Paint.Scale == 2){
 8002354:	4b5b      	ldr	r3, [pc, #364]	; (80024c4 <Paint_SetPixel+0x290>)
 8002356:	8adb      	ldrh	r3, [r3, #22]
 8002358:	2b02      	cmp	r3, #2
 800235a:	d139      	bne.n	80023d0 <Paint_SetPixel+0x19c>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 800235c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800235e:	08db      	lsrs	r3, r3, #3
 8002360:	b29b      	uxth	r3, r3
 8002362:	4619      	mov	r1, r3
 8002364:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002366:	4a57      	ldr	r2, [pc, #348]	; (80024c4 <Paint_SetPixel+0x290>)
 8002368:	8a52      	ldrh	r2, [r2, #18]
 800236a:	fb02 f303 	mul.w	r3, r2, r3
 800236e:	440b      	add	r3, r1
 8002370:	613b      	str	r3, [r7, #16]
        UBYTE Rdata = Paint.Image[Addr];
 8002372:	4b54      	ldr	r3, [pc, #336]	; (80024c4 <Paint_SetPixel+0x290>)
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	4413      	add	r3, r2
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	73fb      	strb	r3, [r7, #15]
        if(Color == BLACK)
 800237e:	887b      	ldrh	r3, [r7, #2]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d113      	bne.n	80023ac <Paint_SetPixel+0x178>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 8002384:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	2280      	movs	r2, #128	; 0x80
 800238c:	fa42 f303 	asr.w	r3, r2, r3
 8002390:	b25b      	sxtb	r3, r3
 8002392:	43db      	mvns	r3, r3
 8002394:	b25a      	sxtb	r2, r3
 8002396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800239a:	4013      	ands	r3, r2
 800239c:	b259      	sxtb	r1, r3
 800239e:	4b49      	ldr	r3, [pc, #292]	; (80024c4 <Paint_SetPixel+0x290>)
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	4413      	add	r3, r2
 80023a6:	b2ca      	uxtb	r2, r1
 80023a8:	701a      	strb	r2, [r3, #0]
 80023aa:	e088      	b.n	80024be <Paint_SetPixel+0x28a>
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 80023ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	2280      	movs	r2, #128	; 0x80
 80023b4:	fa42 f303 	asr.w	r3, r2, r3
 80023b8:	b25a      	sxtb	r2, r3
 80023ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023be:	4313      	orrs	r3, r2
 80023c0:	b259      	sxtb	r1, r3
 80023c2:	4b40      	ldr	r3, [pc, #256]	; (80024c4 <Paint_SetPixel+0x290>)
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4413      	add	r3, r2
 80023ca:	b2ca      	uxtb	r2, r1
 80023cc:	701a      	strb	r2, [r3, #0]
 80023ce:	e076      	b.n	80024be <Paint_SetPixel+0x28a>
    }else if(Paint.Scale == 4){
 80023d0:	4b3c      	ldr	r3, [pc, #240]	; (80024c4 <Paint_SetPixel+0x290>)
 80023d2:	8adb      	ldrh	r3, [r3, #22]
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	d137      	bne.n	8002448 <Paint_SetPixel+0x214>
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 80023d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80023da:	089b      	lsrs	r3, r3, #2
 80023dc:	b29b      	uxth	r3, r3
 80023de:	4619      	mov	r1, r3
 80023e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80023e2:	4a38      	ldr	r2, [pc, #224]	; (80024c4 <Paint_SetPixel+0x290>)
 80023e4:	8a52      	ldrh	r2, [r2, #18]
 80023e6:	fb02 f303 	mul.w	r3, r2, r3
 80023ea:	440b      	add	r3, r1
 80023ec:	61bb      	str	r3, [r7, #24]
        Color = Color % 4;//Guaranteed color scale is 4  --- 0~3
 80023ee:	887b      	ldrh	r3, [r7, #2]
 80023f0:	f003 0303 	and.w	r3, r3, #3
 80023f4:	807b      	strh	r3, [r7, #2]
        UBYTE Rdata = Paint.Image[Addr];
 80023f6:	4b33      	ldr	r3, [pc, #204]	; (80024c4 <Paint_SetPixel+0x290>)
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	4413      	add	r3, r2
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	75fb      	strb	r3, [r7, #23]
        
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 8002402:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002404:	f003 0303 	and.w	r3, r3, #3
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	22c0      	movs	r2, #192	; 0xc0
 800240c:	fa42 f303 	asr.w	r3, r2, r3
 8002410:	b25b      	sxtb	r3, r3
 8002412:	43db      	mvns	r3, r3
 8002414:	b25a      	sxtb	r2, r3
 8002416:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800241a:	4013      	ands	r3, r2
 800241c:	b25b      	sxtb	r3, r3
 800241e:	75fb      	strb	r3, [r7, #23]
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 8002420:	887b      	ldrh	r3, [r7, #2]
 8002422:	019a      	lsls	r2, r3, #6
 8002424:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	fa42 f303 	asr.w	r3, r2, r3
 8002430:	b25a      	sxtb	r2, r3
 8002432:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002436:	4313      	orrs	r3, r2
 8002438:	b259      	sxtb	r1, r3
 800243a:	4b22      	ldr	r3, [pc, #136]	; (80024c4 <Paint_SetPixel+0x290>)
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	4413      	add	r3, r2
 8002442:	b2ca      	uxtb	r2, r1
 8002444:	701a      	strb	r2, [r3, #0]
 8002446:	e03a      	b.n	80024be <Paint_SetPixel+0x28a>
    }else if(Paint.Scale == 7){
 8002448:	4b1e      	ldr	r3, [pc, #120]	; (80024c4 <Paint_SetPixel+0x290>)
 800244a:	8adb      	ldrh	r3, [r3, #22]
 800244c:	2b07      	cmp	r3, #7
 800244e:	d136      	bne.n	80024be <Paint_SetPixel+0x28a>
		UDOUBLE Addr = X / 2  + Y * Paint.WidthByte;
 8002450:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002452:	085b      	lsrs	r3, r3, #1
 8002454:	b29b      	uxth	r3, r3
 8002456:	4619      	mov	r1, r3
 8002458:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800245a:	4a1a      	ldr	r2, [pc, #104]	; (80024c4 <Paint_SetPixel+0x290>)
 800245c:	8a52      	ldrh	r2, [r2, #18]
 800245e:	fb02 f303 	mul.w	r3, r2, r3
 8002462:	440b      	add	r3, r1
 8002464:	623b      	str	r3, [r7, #32]
		UBYTE Rdata = Paint.Image[Addr];
 8002466:	4b17      	ldr	r3, [pc, #92]	; (80024c4 <Paint_SetPixel+0x290>)
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	6a3b      	ldr	r3, [r7, #32]
 800246c:	4413      	add	r3, r2
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	77fb      	strb	r3, [r7, #31]
		Rdata = Rdata & (~(0xF0 >> ((X % 2)*4)));//Clear first, then set value
 8002472:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	22f0      	movs	r2, #240	; 0xf0
 800247c:	fa42 f303 	asr.w	r3, r2, r3
 8002480:	b25b      	sxtb	r3, r3
 8002482:	43db      	mvns	r3, r3
 8002484:	b25a      	sxtb	r2, r3
 8002486:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800248a:	4013      	ands	r3, r2
 800248c:	b25b      	sxtb	r3, r3
 800248e:	77fb      	strb	r3, [r7, #31]
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 8002490:	887b      	ldrh	r3, [r7, #2]
 8002492:	011a      	lsls	r2, r3, #4
 8002494:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	fa42 f303 	asr.w	r3, r2, r3
 80024a0:	b25a      	sxtb	r2, r3
 80024a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	b259      	sxtb	r1, r3
 80024aa:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <Paint_SetPixel+0x290>)
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	6a3b      	ldr	r3, [r7, #32]
 80024b0:	4413      	add	r3, r2
 80024b2:	b2ca      	uxtb	r2, r1
 80024b4:	701a      	strb	r2, [r3, #0]
 80024b6:	e002      	b.n	80024be <Paint_SetPixel+0x28a>
        return;
 80024b8:	bf00      	nop
 80024ba:	e000      	b.n	80024be <Paint_SetPixel+0x28a>
        return;
 80024bc:	bf00      	nop
		//printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
		}
}
 80024be:	3728      	adds	r7, #40	; 0x28
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	200000ec 	.word	0x200000ec
 80024c8:	0800d92c 	.word	0x0800d92c

080024cc <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b087      	sub	sp, #28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	80fb      	strh	r3, [r7, #6]
	if(Paint.Scale == 2 || Paint.Scale == 4){
 80024d6:	4b32      	ldr	r3, [pc, #200]	; (80025a0 <Paint_Clear+0xd4>)
 80024d8:	8adb      	ldrh	r3, [r3, #22]
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d003      	beq.n	80024e6 <Paint_Clear+0x1a>
 80024de:	4b30      	ldr	r3, [pc, #192]	; (80025a0 <Paint_Clear+0xd4>)
 80024e0:	8adb      	ldrh	r3, [r3, #22]
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	d125      	bne.n	8002532 <Paint_Clear+0x66>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80024e6:	2300      	movs	r3, #0
 80024e8:	82fb      	strh	r3, [r7, #22]
 80024ea:	e01c      	b.n	8002526 <Paint_Clear+0x5a>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 80024ec:	2300      	movs	r3, #0
 80024ee:	82bb      	strh	r3, [r7, #20]
 80024f0:	e011      	b.n	8002516 <Paint_Clear+0x4a>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 80024f2:	8aba      	ldrh	r2, [r7, #20]
 80024f4:	8afb      	ldrh	r3, [r7, #22]
 80024f6:	492a      	ldr	r1, [pc, #168]	; (80025a0 <Paint_Clear+0xd4>)
 80024f8:	8a49      	ldrh	r1, [r1, #18]
 80024fa:	fb01 f303 	mul.w	r3, r1, r3
 80024fe:	4413      	add	r3, r2
 8002500:	60bb      	str	r3, [r7, #8]
				Paint.Image[Addr] = Color;
 8002502:	4b27      	ldr	r3, [pc, #156]	; (80025a0 <Paint_Clear+0xd4>)
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	4413      	add	r3, r2
 800250a:	88fa      	ldrh	r2, [r7, #6]
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8002510:	8abb      	ldrh	r3, [r7, #20]
 8002512:	3301      	adds	r3, #1
 8002514:	82bb      	strh	r3, [r7, #20]
 8002516:	4b22      	ldr	r3, [pc, #136]	; (80025a0 <Paint_Clear+0xd4>)
 8002518:	8a5b      	ldrh	r3, [r3, #18]
 800251a:	8aba      	ldrh	r2, [r7, #20]
 800251c:	429a      	cmp	r2, r3
 800251e:	d3e8      	bcc.n	80024f2 <Paint_Clear+0x26>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8002520:	8afb      	ldrh	r3, [r7, #22]
 8002522:	3301      	adds	r3, #1
 8002524:	82fb      	strh	r3, [r7, #22]
 8002526:	4b1e      	ldr	r3, [pc, #120]	; (80025a0 <Paint_Clear+0xd4>)
 8002528:	8a9b      	ldrh	r3, [r3, #20]
 800252a:	8afa      	ldrh	r2, [r7, #22]
 800252c:	429a      	cmp	r2, r3
 800252e:	d3dd      	bcc.n	80024ec <Paint_Clear+0x20>
 8002530:	e02f      	b.n	8002592 <Paint_Clear+0xc6>
			}
		}		
	}else if(Paint.Scale == 7){
 8002532:	4b1b      	ldr	r3, [pc, #108]	; (80025a0 <Paint_Clear+0xd4>)
 8002534:	8adb      	ldrh	r3, [r3, #22]
 8002536:	2b07      	cmp	r3, #7
 8002538:	d12b      	bne.n	8002592 <Paint_Clear+0xc6>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800253a:	2300      	movs	r3, #0
 800253c:	827b      	strh	r3, [r7, #18]
 800253e:	e022      	b.n	8002586 <Paint_Clear+0xba>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8002540:	2300      	movs	r3, #0
 8002542:	823b      	strh	r3, [r7, #16]
 8002544:	e017      	b.n	8002576 <Paint_Clear+0xaa>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8002546:	8a3a      	ldrh	r2, [r7, #16]
 8002548:	8a7b      	ldrh	r3, [r7, #18]
 800254a:	4915      	ldr	r1, [pc, #84]	; (80025a0 <Paint_Clear+0xd4>)
 800254c:	8a49      	ldrh	r1, [r1, #18]
 800254e:	fb01 f303 	mul.w	r3, r1, r3
 8002552:	4413      	add	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]
				Paint.Image[Addr] = (Color<<4)|Color;
 8002556:	88fb      	ldrh	r3, [r7, #6]
 8002558:	011b      	lsls	r3, r3, #4
 800255a:	b25a      	sxtb	r2, r3
 800255c:	88fb      	ldrh	r3, [r7, #6]
 800255e:	b25b      	sxtb	r3, r3
 8002560:	4313      	orrs	r3, r2
 8002562:	b259      	sxtb	r1, r3
 8002564:	4b0e      	ldr	r3, [pc, #56]	; (80025a0 <Paint_Clear+0xd4>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4413      	add	r3, r2
 800256c:	b2ca      	uxtb	r2, r1
 800256e:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8002570:	8a3b      	ldrh	r3, [r7, #16]
 8002572:	3301      	adds	r3, #1
 8002574:	823b      	strh	r3, [r7, #16]
 8002576:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <Paint_Clear+0xd4>)
 8002578:	8a5b      	ldrh	r3, [r3, #18]
 800257a:	8a3a      	ldrh	r2, [r7, #16]
 800257c:	429a      	cmp	r2, r3
 800257e:	d3e2      	bcc.n	8002546 <Paint_Clear+0x7a>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8002580:	8a7b      	ldrh	r3, [r7, #18]
 8002582:	3301      	adds	r3, #1
 8002584:	827b      	strh	r3, [r7, #18]
 8002586:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <Paint_Clear+0xd4>)
 8002588:	8a9b      	ldrh	r3, [r3, #20]
 800258a:	8a7a      	ldrh	r2, [r7, #18]
 800258c:	429a      	cmp	r2, r3
 800258e:	d3d7      	bcc.n	8002540 <Paint_Clear+0x74>
			}
		}		
	}
}
 8002590:	e7ff      	b.n	8002592 <Paint_Clear+0xc6>
 8002592:	bf00      	nop
 8002594:	371c      	adds	r7, #28
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	200000ec 	.word	0x200000ec

080025a4 <Paint_DrawPoint>:
    Dot_Pixel	: point size
    Dot_Style	: point Style
******************************************************************************/
void Paint_DrawPoint(UWORD Xpoint, UWORD Ypoint, UWORD Color,
                     DOT_PIXEL Dot_Pixel, DOT_STYLE Dot_Style)
{
 80025a4:	b590      	push	{r4, r7, lr}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4604      	mov	r4, r0
 80025ac:	4608      	mov	r0, r1
 80025ae:	4611      	mov	r1, r2
 80025b0:	461a      	mov	r2, r3
 80025b2:	4623      	mov	r3, r4
 80025b4:	80fb      	strh	r3, [r7, #6]
 80025b6:	4603      	mov	r3, r0
 80025b8:	80bb      	strh	r3, [r7, #4]
 80025ba:	460b      	mov	r3, r1
 80025bc:	807b      	strh	r3, [r7, #2]
 80025be:	4613      	mov	r3, r2
 80025c0:	707b      	strb	r3, [r7, #1]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 80025c2:	4b4a      	ldr	r3, [pc, #296]	; (80026ec <Paint_DrawPoint+0x148>)
 80025c4:	889b      	ldrh	r3, [r3, #4]
 80025c6:	88fa      	ldrh	r2, [r7, #6]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d804      	bhi.n	80025d6 <Paint_DrawPoint+0x32>
 80025cc:	4b47      	ldr	r3, [pc, #284]	; (80026ec <Paint_DrawPoint+0x148>)
 80025ce:	88db      	ldrh	r3, [r3, #6]
 80025d0:	88ba      	ldrh	r2, [r7, #4]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d911      	bls.n	80025fa <Paint_DrawPoint+0x56>
        Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
 80025d6:	4846      	ldr	r0, [pc, #280]	; (80026f0 <Paint_DrawPoint+0x14c>)
 80025d8:	f00a f996 	bl	800c908 <puts>
				printf("Xpoint = %d , Paint.Width = %d  \r\n ",Xpoint,Paint.Width);
 80025dc:	88fb      	ldrh	r3, [r7, #6]
 80025de:	4a43      	ldr	r2, [pc, #268]	; (80026ec <Paint_DrawPoint+0x148>)
 80025e0:	8892      	ldrh	r2, [r2, #4]
 80025e2:	4619      	mov	r1, r3
 80025e4:	4843      	ldr	r0, [pc, #268]	; (80026f4 <Paint_DrawPoint+0x150>)
 80025e6:	f00a f909 	bl	800c7fc <iprintf>
				printf("Ypoint = %d , Paint.Height = %d  \r\n ",Ypoint,Paint.Height);
 80025ea:	88bb      	ldrh	r3, [r7, #4]
 80025ec:	4a3f      	ldr	r2, [pc, #252]	; (80026ec <Paint_DrawPoint+0x148>)
 80025ee:	88d2      	ldrh	r2, [r2, #6]
 80025f0:	4619      	mov	r1, r3
 80025f2:	4841      	ldr	r0, [pc, #260]	; (80026f8 <Paint_DrawPoint+0x154>)
 80025f4:	f00a f902 	bl	800c7fc <iprintf>
        return;
 80025f8:	e074      	b.n	80026e4 <Paint_DrawPoint+0x140>
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_Style == DOT_FILL_AROUND) {
 80025fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d144      	bne.n	800268c <Paint_DrawPoint+0xe8>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 8002602:	2300      	movs	r3, #0
 8002604:	81fb      	strh	r3, [r7, #14]
 8002606:	e039      	b.n	800267c <Paint_DrawPoint+0xd8>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8002608:	2300      	movs	r3, #0
 800260a:	81bb      	strh	r3, [r7, #12]
 800260c:	e029      	b.n	8002662 <Paint_DrawPoint+0xbe>
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 800260e:	88fa      	ldrh	r2, [r7, #6]
 8002610:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002614:	441a      	add	r2, r3
 8002616:	787b      	ldrb	r3, [r7, #1]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	db28      	blt.n	8002670 <Paint_DrawPoint+0xcc>
 800261e:	88ba      	ldrh	r2, [r7, #4]
 8002620:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002624:	441a      	add	r2, r3
 8002626:	787b      	ldrb	r3, [r7, #1]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	db20      	blt.n	8002670 <Paint_DrawPoint+0xcc>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 800262e:	89fa      	ldrh	r2, [r7, #14]
 8002630:	88fb      	ldrh	r3, [r7, #6]
 8002632:	4413      	add	r3, r2
 8002634:	b29a      	uxth	r2, r3
 8002636:	787b      	ldrb	r3, [r7, #1]
 8002638:	b29b      	uxth	r3, r3
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	b298      	uxth	r0, r3
 800263e:	89ba      	ldrh	r2, [r7, #12]
 8002640:	88bb      	ldrh	r3, [r7, #4]
 8002642:	4413      	add	r3, r2
 8002644:	b29a      	uxth	r2, r3
 8002646:	787b      	ldrb	r3, [r7, #1]
 8002648:	b29b      	uxth	r3, r3
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	b29b      	uxth	r3, r3
 800264e:	887a      	ldrh	r2, [r7, #2]
 8002650:	4619      	mov	r1, r3
 8002652:	f7ff fdef 	bl	8002234 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8002656:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800265a:	b29b      	uxth	r3, r3
 800265c:	3301      	adds	r3, #1
 800265e:	b29b      	uxth	r3, r3
 8002660:	81bb      	strh	r3, [r7, #12]
 8002662:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002666:	787b      	ldrb	r3, [r7, #1]
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	3b01      	subs	r3, #1
 800266c:	429a      	cmp	r2, r3
 800266e:	dbce      	blt.n	800260e <Paint_DrawPoint+0x6a>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 8002670:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002674:	b29b      	uxth	r3, r3
 8002676:	3301      	adds	r3, #1
 8002678:	b29b      	uxth	r3, r3
 800267a:	81fb      	strh	r3, [r7, #14]
 800267c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002680:	787b      	ldrb	r3, [r7, #1]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	3b01      	subs	r3, #1
 8002686:	429a      	cmp	r2, r3
 8002688:	dbbe      	blt.n	8002608 <Paint_DrawPoint+0x64>
 800268a:	e02b      	b.n	80026e4 <Paint_DrawPoint+0x140>
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 800268c:	2300      	movs	r3, #0
 800268e:	81fb      	strh	r3, [r7, #14]
 8002690:	e023      	b.n	80026da <Paint_DrawPoint+0x136>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 8002692:	2300      	movs	r3, #0
 8002694:	81bb      	strh	r3, [r7, #12]
 8002696:	e015      	b.n	80026c4 <Paint_DrawPoint+0x120>
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 8002698:	89fa      	ldrh	r2, [r7, #14]
 800269a:	88fb      	ldrh	r3, [r7, #6]
 800269c:	4413      	add	r3, r2
 800269e:	b29b      	uxth	r3, r3
 80026a0:	3b01      	subs	r3, #1
 80026a2:	b298      	uxth	r0, r3
 80026a4:	89ba      	ldrh	r2, [r7, #12]
 80026a6:	88bb      	ldrh	r3, [r7, #4]
 80026a8:	4413      	add	r3, r2
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	3b01      	subs	r3, #1
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	887a      	ldrh	r2, [r7, #2]
 80026b2:	4619      	mov	r1, r3
 80026b4:	f7ff fdbe 	bl	8002234 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 80026b8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80026bc:	b29b      	uxth	r3, r3
 80026be:	3301      	adds	r3, #1
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	81bb      	strh	r3, [r7, #12]
 80026c4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80026c8:	787b      	ldrb	r3, [r7, #1]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	dbe4      	blt.n	8002698 <Paint_DrawPoint+0xf4>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 80026ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	3301      	adds	r3, #1
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	81fb      	strh	r3, [r7, #14]
 80026da:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80026de:	787b      	ldrb	r3, [r7, #1]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	dbd6      	blt.n	8002692 <Paint_DrawPoint+0xee>
            }
        }
    }
}
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd90      	pop	{r4, r7, pc}
 80026ea:	bf00      	nop
 80026ec:	200000ec 	.word	0x200000ec
 80026f0:	0800d954 	.word	0x0800d954
 80026f4:	0800d994 	.word	0x0800d994
 80026f8:	0800d9b8 	.word	0x0800d9b8

080026fc <Paint_DrawLine>:
    Line_width : Line width
    Line_Style: Solid and dotted lines
******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 80026fc:	b590      	push	{r4, r7, lr}
 80026fe:	b08d      	sub	sp, #52	; 0x34
 8002700:	af02      	add	r7, sp, #8
 8002702:	4604      	mov	r4, r0
 8002704:	4608      	mov	r0, r1
 8002706:	4611      	mov	r1, r2
 8002708:	461a      	mov	r2, r3
 800270a:	4623      	mov	r3, r4
 800270c:	80fb      	strh	r3, [r7, #6]
 800270e:	4603      	mov	r3, r0
 8002710:	80bb      	strh	r3, [r7, #4]
 8002712:	460b      	mov	r3, r1
 8002714:	807b      	strh	r3, [r7, #2]
 8002716:	4613      	mov	r3, r2
 8002718:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800271a:	4b4b      	ldr	r3, [pc, #300]	; (8002848 <Paint_DrawLine+0x14c>)
 800271c:	889b      	ldrh	r3, [r3, #4]
 800271e:	88fa      	ldrh	r2, [r7, #6]
 8002720:	429a      	cmp	r2, r3
 8002722:	d80e      	bhi.n	8002742 <Paint_DrawLine+0x46>
 8002724:	4b48      	ldr	r3, [pc, #288]	; (8002848 <Paint_DrawLine+0x14c>)
 8002726:	88db      	ldrh	r3, [r3, #6]
 8002728:	88ba      	ldrh	r2, [r7, #4]
 800272a:	429a      	cmp	r2, r3
 800272c:	d809      	bhi.n	8002742 <Paint_DrawLine+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 800272e:	4b46      	ldr	r3, [pc, #280]	; (8002848 <Paint_DrawLine+0x14c>)
 8002730:	889b      	ldrh	r3, [r3, #4]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8002732:	887a      	ldrh	r2, [r7, #2]
 8002734:	429a      	cmp	r2, r3
 8002736:	d804      	bhi.n	8002742 <Paint_DrawLine+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 8002738:	4b43      	ldr	r3, [pc, #268]	; (8002848 <Paint_DrawLine+0x14c>)
 800273a:	88db      	ldrh	r3, [r3, #6]
 800273c:	883a      	ldrh	r2, [r7, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d903      	bls.n	800274a <Paint_DrawLine+0x4e>
        Debug("Paint_DrawLine Input exceeds the normal display range\r\n");
 8002742:	4842      	ldr	r0, [pc, #264]	; (800284c <Paint_DrawLine+0x150>)
 8002744:	f00a f8e0 	bl	800c908 <puts>
        return;
 8002748:	e07a      	b.n	8002840 <Paint_DrawLine+0x144>
    }

    UWORD Xpoint = Xstart;
 800274a:	88fb      	ldrh	r3, [r7, #6]
 800274c:	84fb      	strh	r3, [r7, #38]	; 0x26
    UWORD Ypoint = Ystart;
 800274e:	88bb      	ldrh	r3, [r7, #4]
 8002750:	84bb      	strh	r3, [r7, #36]	; 0x24
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 8002752:	887a      	ldrh	r2, [r7, #2]
 8002754:	88fb      	ldrh	r3, [r7, #6]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b00      	cmp	r3, #0
 800275a:	bfb8      	it	lt
 800275c:	425b      	neglt	r3, r3
 800275e:	61bb      	str	r3, [r7, #24]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 8002760:	883a      	ldrh	r2, [r7, #0]
 8002762:	88bb      	ldrh	r3, [r7, #4]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	bfb8      	it	lt
 800276a:	425b      	neglt	r3, r3
 800276c:	425b      	negs	r3, r3
 800276e:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 8002770:	88fa      	ldrh	r2, [r7, #6]
 8002772:	887b      	ldrh	r3, [r7, #2]
 8002774:	429a      	cmp	r2, r3
 8002776:	d201      	bcs.n	800277c <Paint_DrawLine+0x80>
 8002778:	2301      	movs	r3, #1
 800277a:	e001      	b.n	8002780 <Paint_DrawLine+0x84>
 800277c:	f04f 33ff 	mov.w	r3, #4294967295
 8002780:	613b      	str	r3, [r7, #16]
    int YAddway = Ystart < Yend ? 1 : -1;
 8002782:	88ba      	ldrh	r2, [r7, #4]
 8002784:	883b      	ldrh	r3, [r7, #0]
 8002786:	429a      	cmp	r2, r3
 8002788:	d201      	bcs.n	800278e <Paint_DrawLine+0x92>
 800278a:	2301      	movs	r3, #1
 800278c:	e001      	b.n	8002792 <Paint_DrawLine+0x96>
 800278e:	f04f 33ff 	mov.w	r3, #4294967295
 8002792:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int Esp = dx + dy;
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	4413      	add	r3, r2
 800279a:	623b      	str	r3, [r7, #32]
    char Dotted_Len = 0;
 800279c:	2300      	movs	r3, #0
 800279e:	77fb      	strb	r3, [r7, #31]

    for (;;) {
        Dotted_Len++;
 80027a0:	7ffb      	ldrb	r3, [r7, #31]
 80027a2:	3301      	adds	r3, #1
 80027a4:	77fb      	strb	r3, [r7, #31]
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 80027a6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d117      	bne.n	80027de <Paint_DrawLine+0xe2>
 80027ae:	7ffa      	ldrb	r2, [r7, #31]
 80027b0:	4b27      	ldr	r3, [pc, #156]	; (8002850 <Paint_DrawLine+0x154>)
 80027b2:	fba3 1302 	umull	r1, r3, r3, r2
 80027b6:	0859      	lsrs	r1, r3, #1
 80027b8:	460b      	mov	r3, r1
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	440b      	add	r3, r1
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10b      	bne.n	80027de <Paint_DrawLine+0xe2>
            //Debug("LINE_DOTTED\r\n");
            Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
 80027c6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80027ca:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80027cc:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80027ce:	2201      	movs	r2, #1
 80027d0:	9200      	str	r2, [sp, #0]
 80027d2:	22ff      	movs	r2, #255	; 0xff
 80027d4:	f7ff fee6 	bl	80025a4 <Paint_DrawPoint>
            Dotted_Len = 0;
 80027d8:	2300      	movs	r3, #0
 80027da:	77fb      	strb	r3, [r7, #31]
 80027dc:	e008      	b.n	80027f0 <Paint_DrawLine+0xf4>
        } else {
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 80027de:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80027e2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80027e4:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80027e6:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80027e8:	2401      	movs	r4, #1
 80027ea:	9400      	str	r4, [sp, #0]
 80027ec:	f7ff feda 	bl	80025a4 <Paint_DrawPoint>
        }
        if (2 * Esp >= dy) {
 80027f0:	6a3b      	ldr	r3, [r7, #32]
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	dc0c      	bgt.n	8002814 <Paint_DrawLine+0x118>
            if (Xpoint == Xend)
 80027fa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80027fc:	887b      	ldrh	r3, [r7, #2]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d01b      	beq.n	800283a <Paint_DrawLine+0x13e>
                break;
            Esp += dy;
 8002802:	6a3a      	ldr	r2, [r7, #32]
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	4413      	add	r3, r2
 8002808:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	b29a      	uxth	r2, r3
 800280e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002810:	4413      	add	r3, r2
 8002812:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        if (2 * Esp <= dx) {
 8002814:	6a3b      	ldr	r3, [r7, #32]
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	429a      	cmp	r2, r3
 800281c:	dbc0      	blt.n	80027a0 <Paint_DrawLine+0xa4>
            if (Ypoint == Yend)
 800281e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002820:	883b      	ldrh	r3, [r7, #0]
 8002822:	429a      	cmp	r2, r3
 8002824:	d00b      	beq.n	800283e <Paint_DrawLine+0x142>
                break;
            Esp += dx;
 8002826:	6a3a      	ldr	r2, [r7, #32]
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	4413      	add	r3, r2
 800282c:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	b29a      	uxth	r2, r3
 8002832:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002834:	4413      	add	r3, r2
 8002836:	84bb      	strh	r3, [r7, #36]	; 0x24
        Dotted_Len++;
 8002838:	e7b2      	b.n	80027a0 <Paint_DrawLine+0xa4>
                break;
 800283a:	bf00      	nop
 800283c:	e000      	b.n	8002840 <Paint_DrawLine+0x144>
                break;
 800283e:	bf00      	nop
        }
    }
}
 8002840:	372c      	adds	r7, #44	; 0x2c
 8002842:	46bd      	mov	sp, r7
 8002844:	bd90      	pop	{r4, r7, pc}
 8002846:	bf00      	nop
 8002848:	200000ec 	.word	0x200000ec
 800284c:	0800d9e0 	.word	0x0800d9e0
 8002850:	aaaaaaab 	.word	0xaaaaaaab

08002854 <Paint_DrawRectangle>:
    Line_width: Line width
    Draw_Fill : Whether to fill the inside of the rectangle
******************************************************************************/
void Paint_DrawRectangle(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
                         UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill)
{
 8002854:	b590      	push	{r4, r7, lr}
 8002856:	b089      	sub	sp, #36	; 0x24
 8002858:	af04      	add	r7, sp, #16
 800285a:	4604      	mov	r4, r0
 800285c:	4608      	mov	r0, r1
 800285e:	4611      	mov	r1, r2
 8002860:	461a      	mov	r2, r3
 8002862:	4623      	mov	r3, r4
 8002864:	80fb      	strh	r3, [r7, #6]
 8002866:	4603      	mov	r3, r0
 8002868:	80bb      	strh	r3, [r7, #4]
 800286a:	460b      	mov	r3, r1
 800286c:	807b      	strh	r3, [r7, #2]
 800286e:	4613      	mov	r3, r2
 8002870:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8002872:	4b38      	ldr	r3, [pc, #224]	; (8002954 <Paint_DrawRectangle+0x100>)
 8002874:	889b      	ldrh	r3, [r3, #4]
 8002876:	88fa      	ldrh	r2, [r7, #6]
 8002878:	429a      	cmp	r2, r3
 800287a:	d80e      	bhi.n	800289a <Paint_DrawRectangle+0x46>
 800287c:	4b35      	ldr	r3, [pc, #212]	; (8002954 <Paint_DrawRectangle+0x100>)
 800287e:	88db      	ldrh	r3, [r3, #6]
 8002880:	88ba      	ldrh	r2, [r7, #4]
 8002882:	429a      	cmp	r2, r3
 8002884:	d809      	bhi.n	800289a <Paint_DrawRectangle+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 8002886:	4b33      	ldr	r3, [pc, #204]	; (8002954 <Paint_DrawRectangle+0x100>)
 8002888:	889b      	ldrh	r3, [r3, #4]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800288a:	887a      	ldrh	r2, [r7, #2]
 800288c:	429a      	cmp	r2, r3
 800288e:	d804      	bhi.n	800289a <Paint_DrawRectangle+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 8002890:	4b30      	ldr	r3, [pc, #192]	; (8002954 <Paint_DrawRectangle+0x100>)
 8002892:	88db      	ldrh	r3, [r3, #6]
 8002894:	883a      	ldrh	r2, [r7, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d903      	bls.n	80028a2 <Paint_DrawRectangle+0x4e>
        Debug("Input exceeds the normal display range\r\n");
 800289a:	482f      	ldr	r0, [pc, #188]	; (8002958 <Paint_DrawRectangle+0x104>)
 800289c:	f00a f834 	bl	800c908 <puts>
        return;
 80028a0:	e054      	b.n	800294c <Paint_DrawRectangle+0xf8>
    }

    if (Draw_Fill) {
 80028a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d018      	beq.n	80028dc <Paint_DrawRectangle+0x88>
        UWORD Ypoint;
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 80028aa:	88bb      	ldrh	r3, [r7, #4]
 80028ac:	81fb      	strh	r3, [r7, #14]
 80028ae:	e010      	b.n	80028d2 <Paint_DrawRectangle+0x7e>
            Paint_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color , Line_width, LINE_STYLE_SOLID);
 80028b0:	89fc      	ldrh	r4, [r7, #14]
 80028b2:	887a      	ldrh	r2, [r7, #2]
 80028b4:	89f9      	ldrh	r1, [r7, #14]
 80028b6:	88f8      	ldrh	r0, [r7, #6]
 80028b8:	2300      	movs	r3, #0
 80028ba:	9302      	str	r3, [sp, #8]
 80028bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80028c0:	9301      	str	r3, [sp, #4]
 80028c2:	8c3b      	ldrh	r3, [r7, #32]
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	4623      	mov	r3, r4
 80028c8:	f7ff ff18 	bl	80026fc <Paint_DrawLine>
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 80028cc:	89fb      	ldrh	r3, [r7, #14]
 80028ce:	3301      	adds	r3, #1
 80028d0:	81fb      	strh	r3, [r7, #14]
 80028d2:	89fa      	ldrh	r2, [r7, #14]
 80028d4:	883b      	ldrh	r3, [r7, #0]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d3ea      	bcc.n	80028b0 <Paint_DrawRectangle+0x5c>
 80028da:	e037      	b.n	800294c <Paint_DrawRectangle+0xf8>
        }
    } else {
        Paint_DrawLine(Xstart, Ystart, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
 80028dc:	88bc      	ldrh	r4, [r7, #4]
 80028de:	887a      	ldrh	r2, [r7, #2]
 80028e0:	88b9      	ldrh	r1, [r7, #4]
 80028e2:	88f8      	ldrh	r0, [r7, #6]
 80028e4:	2300      	movs	r3, #0
 80028e6:	9302      	str	r3, [sp, #8]
 80028e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80028ec:	9301      	str	r3, [sp, #4]
 80028ee:	8c3b      	ldrh	r3, [r7, #32]
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	4623      	mov	r3, r4
 80028f4:	f7ff ff02 	bl	80026fc <Paint_DrawLine>
        Paint_DrawLine(Xstart, Ystart, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
 80028f8:	883c      	ldrh	r4, [r7, #0]
 80028fa:	88fa      	ldrh	r2, [r7, #6]
 80028fc:	88b9      	ldrh	r1, [r7, #4]
 80028fe:	88f8      	ldrh	r0, [r7, #6]
 8002900:	2300      	movs	r3, #0
 8002902:	9302      	str	r3, [sp, #8]
 8002904:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002908:	9301      	str	r3, [sp, #4]
 800290a:	8c3b      	ldrh	r3, [r7, #32]
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	4623      	mov	r3, r4
 8002910:	f7ff fef4 	bl	80026fc <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
 8002914:	88bc      	ldrh	r4, [r7, #4]
 8002916:	887a      	ldrh	r2, [r7, #2]
 8002918:	8839      	ldrh	r1, [r7, #0]
 800291a:	8878      	ldrh	r0, [r7, #2]
 800291c:	2300      	movs	r3, #0
 800291e:	9302      	str	r3, [sp, #8]
 8002920:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002924:	9301      	str	r3, [sp, #4]
 8002926:	8c3b      	ldrh	r3, [r7, #32]
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	4623      	mov	r3, r4
 800292c:	f7ff fee6 	bl	80026fc <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
 8002930:	883c      	ldrh	r4, [r7, #0]
 8002932:	88fa      	ldrh	r2, [r7, #6]
 8002934:	8839      	ldrh	r1, [r7, #0]
 8002936:	8878      	ldrh	r0, [r7, #2]
 8002938:	2300      	movs	r3, #0
 800293a:	9302      	str	r3, [sp, #8]
 800293c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002940:	9301      	str	r3, [sp, #4]
 8002942:	8c3b      	ldrh	r3, [r7, #32]
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	4623      	mov	r3, r4
 8002948:	f7ff fed8 	bl	80026fc <Paint_DrawLine>
    }
}
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	bd90      	pop	{r4, r7, pc}
 8002952:	bf00      	nop
 8002954:	200000ec 	.word	0x200000ec
 8002958:	0800da20 	.word	0x0800da20

0800295c <Paint_DrawCircle>:
    Line_width: Line width
    Draw_Fill : Whether to fill the inside of the Circle
******************************************************************************/
void Paint_DrawCircle(UWORD X_Center, UWORD Y_Center, UWORD Radius,
                      UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill)
{
 800295c:	b590      	push	{r4, r7, lr}
 800295e:	b087      	sub	sp, #28
 8002960:	af02      	add	r7, sp, #8
 8002962:	4604      	mov	r4, r0
 8002964:	4608      	mov	r0, r1
 8002966:	4611      	mov	r1, r2
 8002968:	461a      	mov	r2, r3
 800296a:	4623      	mov	r3, r4
 800296c:	80fb      	strh	r3, [r7, #6]
 800296e:	4603      	mov	r3, r0
 8002970:	80bb      	strh	r3, [r7, #4]
 8002972:	460b      	mov	r3, r1
 8002974:	807b      	strh	r3, [r7, #2]
 8002976:	4613      	mov	r3, r2
 8002978:	803b      	strh	r3, [r7, #0]
    if (X_Center > Paint.Width || Y_Center >= Paint.Height) {
 800297a:	4b67      	ldr	r3, [pc, #412]	; (8002b18 <Paint_DrawCircle+0x1bc>)
 800297c:	889b      	ldrh	r3, [r3, #4]
 800297e:	88fa      	ldrh	r2, [r7, #6]
 8002980:	429a      	cmp	r2, r3
 8002982:	d804      	bhi.n	800298e <Paint_DrawCircle+0x32>
 8002984:	4b64      	ldr	r3, [pc, #400]	; (8002b18 <Paint_DrawCircle+0x1bc>)
 8002986:	88db      	ldrh	r3, [r3, #6]
 8002988:	88ba      	ldrh	r2, [r7, #4]
 800298a:	429a      	cmp	r2, r3
 800298c:	d303      	bcc.n	8002996 <Paint_DrawCircle+0x3a>
        Debug("Paint_DrawCircle Input exceeds the normal display range\r\n");
 800298e:	4863      	ldr	r0, [pc, #396]	; (8002b1c <Paint_DrawCircle+0x1c0>)
 8002990:	f009 ffba 	bl	800c908 <puts>
        return;
 8002994:	e16b      	b.n	8002c6e <Paint_DrawCircle+0x312>
    }

    //Draw a circle from(0, R) as a starting point
    int16_t XCurrent, YCurrent;
    XCurrent = 0;
 8002996:	2300      	movs	r3, #0
 8002998:	81fb      	strh	r3, [r7, #14]
    YCurrent = Radius;
 800299a:	887b      	ldrh	r3, [r7, #2]
 800299c:	81bb      	strh	r3, [r7, #12]

    //Cumulative error,judge the next point of the logo
    int16_t Esp = 3 - (Radius << 1 );
 800299e:	887b      	ldrh	r3, [r7, #2]
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	f1c3 0303 	rsb	r3, r3, #3
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	817b      	strh	r3, [r7, #10]

    int16_t sCountY;
    if (Draw_Fill == DRAW_FILL_FULL) {
 80029ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	f040 8155 	bne.w	8002c60 <Paint_DrawCircle+0x304>
        while (XCurrent <= YCurrent ) { //Realistic circles
 80029b6:	e0a6      	b.n	8002b06 <Paint_DrawCircle+0x1aa>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 80029b8:	89fb      	ldrh	r3, [r7, #14]
 80029ba:	813b      	strh	r3, [r7, #8]
 80029bc:	e075      	b.n	8002aaa <Paint_DrawCircle+0x14e>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//1
 80029be:	89fa      	ldrh	r2, [r7, #14]
 80029c0:	88fb      	ldrh	r3, [r7, #6]
 80029c2:	4413      	add	r3, r2
 80029c4:	b298      	uxth	r0, r3
 80029c6:	893a      	ldrh	r2, [r7, #8]
 80029c8:	88bb      	ldrh	r3, [r7, #4]
 80029ca:	4413      	add	r3, r2
 80029cc:	b299      	uxth	r1, r3
 80029ce:	883a      	ldrh	r2, [r7, #0]
 80029d0:	2301      	movs	r3, #1
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	2301      	movs	r3, #1
 80029d6:	f7ff fde5 	bl	80025a4 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//2
 80029da:	89fb      	ldrh	r3, [r7, #14]
 80029dc:	88fa      	ldrh	r2, [r7, #6]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	b298      	uxth	r0, r3
 80029e2:	893a      	ldrh	r2, [r7, #8]
 80029e4:	88bb      	ldrh	r3, [r7, #4]
 80029e6:	4413      	add	r3, r2
 80029e8:	b299      	uxth	r1, r3
 80029ea:	883a      	ldrh	r2, [r7, #0]
 80029ec:	2301      	movs	r3, #1
 80029ee:	9300      	str	r3, [sp, #0]
 80029f0:	2301      	movs	r3, #1
 80029f2:	f7ff fdd7 	bl	80025a4 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//3
 80029f6:	893b      	ldrh	r3, [r7, #8]
 80029f8:	88fa      	ldrh	r2, [r7, #6]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	b298      	uxth	r0, r3
 80029fe:	89fa      	ldrh	r2, [r7, #14]
 8002a00:	88bb      	ldrh	r3, [r7, #4]
 8002a02:	4413      	add	r3, r2
 8002a04:	b299      	uxth	r1, r3
 8002a06:	883a      	ldrh	r2, [r7, #0]
 8002a08:	2301      	movs	r3, #1
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	f7ff fdc9 	bl	80025a4 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//4
 8002a12:	893b      	ldrh	r3, [r7, #8]
 8002a14:	88fa      	ldrh	r2, [r7, #6]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	b298      	uxth	r0, r3
 8002a1a:	89fb      	ldrh	r3, [r7, #14]
 8002a1c:	88ba      	ldrh	r2, [r7, #4]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	b299      	uxth	r1, r3
 8002a22:	883a      	ldrh	r2, [r7, #0]
 8002a24:	2301      	movs	r3, #1
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	2301      	movs	r3, #1
 8002a2a:	f7ff fdbb 	bl	80025a4 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//5
 8002a2e:	89fb      	ldrh	r3, [r7, #14]
 8002a30:	88fa      	ldrh	r2, [r7, #6]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	b298      	uxth	r0, r3
 8002a36:	893b      	ldrh	r3, [r7, #8]
 8002a38:	88ba      	ldrh	r2, [r7, #4]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	b299      	uxth	r1, r3
 8002a3e:	883a      	ldrh	r2, [r7, #0]
 8002a40:	2301      	movs	r3, #1
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	2301      	movs	r3, #1
 8002a46:	f7ff fdad 	bl	80025a4 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//6
 8002a4a:	89fa      	ldrh	r2, [r7, #14]
 8002a4c:	88fb      	ldrh	r3, [r7, #6]
 8002a4e:	4413      	add	r3, r2
 8002a50:	b298      	uxth	r0, r3
 8002a52:	893b      	ldrh	r3, [r7, #8]
 8002a54:	88ba      	ldrh	r2, [r7, #4]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	b299      	uxth	r1, r3
 8002a5a:	883a      	ldrh	r2, [r7, #0]
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	2301      	movs	r3, #1
 8002a62:	f7ff fd9f 	bl	80025a4 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//7
 8002a66:	893a      	ldrh	r2, [r7, #8]
 8002a68:	88fb      	ldrh	r3, [r7, #6]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	b298      	uxth	r0, r3
 8002a6e:	89fb      	ldrh	r3, [r7, #14]
 8002a70:	88ba      	ldrh	r2, [r7, #4]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	b299      	uxth	r1, r3
 8002a76:	883a      	ldrh	r2, [r7, #0]
 8002a78:	2301      	movs	r3, #1
 8002a7a:	9300      	str	r3, [sp, #0]
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	f7ff fd91 	bl	80025a4 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 8002a82:	893a      	ldrh	r2, [r7, #8]
 8002a84:	88fb      	ldrh	r3, [r7, #6]
 8002a86:	4413      	add	r3, r2
 8002a88:	b298      	uxth	r0, r3
 8002a8a:	89fa      	ldrh	r2, [r7, #14]
 8002a8c:	88bb      	ldrh	r3, [r7, #4]
 8002a8e:	4413      	add	r3, r2
 8002a90:	b299      	uxth	r1, r3
 8002a92:	883a      	ldrh	r2, [r7, #0]
 8002a94:	2301      	movs	r3, #1
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	2301      	movs	r3, #1
 8002a9a:	f7ff fd83 	bl	80025a4 <Paint_DrawPoint>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 8002a9e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	813b      	strh	r3, [r7, #8]
 8002aaa:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002aae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	dd83      	ble.n	80029be <Paint_DrawCircle+0x62>
            }
            if (Esp < 0 )
 8002ab6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	da09      	bge.n	8002ad2 <Paint_DrawCircle+0x176>
                Esp += 4 * XCurrent + 6;
 8002abe:	89fb      	ldrh	r3, [r7, #14]
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	897b      	ldrh	r3, [r7, #10]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	3306      	adds	r3, #6
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	817b      	strh	r3, [r7, #10]
 8002ad0:	e013      	b.n	8002afa <Paint_DrawCircle+0x19e>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 8002ad2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002ad6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	897b      	ldrh	r3, [r7, #10]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	330a      	adds	r3, #10
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 8002aee:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	3b01      	subs	r3, #1
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 8002afa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	3301      	adds	r3, #1
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) { //Realistic circles
 8002b06:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002b0a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	f77f af52 	ble.w	80029b8 <Paint_DrawCircle+0x5c>
 8002b14:	e0ab      	b.n	8002c6e <Paint_DrawCircle+0x312>
 8002b16:	bf00      	nop
 8002b18:	200000ec 	.word	0x200000ec
 8002b1c:	0800da50 	.word	0x0800da50
        }
    } else { //Draw a hollow circle
        while (XCurrent <= YCurrent ) {
            Paint_DrawPoint(X_Center + XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//1
 8002b20:	89fa      	ldrh	r2, [r7, #14]
 8002b22:	88fb      	ldrh	r3, [r7, #6]
 8002b24:	4413      	add	r3, r2
 8002b26:	b298      	uxth	r0, r3
 8002b28:	89ba      	ldrh	r2, [r7, #12]
 8002b2a:	88bb      	ldrh	r3, [r7, #4]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	b299      	uxth	r1, r3
 8002b30:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b34:	883a      	ldrh	r2, [r7, #0]
 8002b36:	2401      	movs	r4, #1
 8002b38:	9400      	str	r4, [sp, #0]
 8002b3a:	f7ff fd33 	bl	80025a4 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//2
 8002b3e:	89fb      	ldrh	r3, [r7, #14]
 8002b40:	88fa      	ldrh	r2, [r7, #6]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	b298      	uxth	r0, r3
 8002b46:	89ba      	ldrh	r2, [r7, #12]
 8002b48:	88bb      	ldrh	r3, [r7, #4]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	b299      	uxth	r1, r3
 8002b4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b52:	883a      	ldrh	r2, [r7, #0]
 8002b54:	2401      	movs	r4, #1
 8002b56:	9400      	str	r4, [sp, #0]
 8002b58:	f7ff fd24 	bl	80025a4 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//3
 8002b5c:	89bb      	ldrh	r3, [r7, #12]
 8002b5e:	88fa      	ldrh	r2, [r7, #6]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	b298      	uxth	r0, r3
 8002b64:	89fa      	ldrh	r2, [r7, #14]
 8002b66:	88bb      	ldrh	r3, [r7, #4]
 8002b68:	4413      	add	r3, r2
 8002b6a:	b299      	uxth	r1, r3
 8002b6c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b70:	883a      	ldrh	r2, [r7, #0]
 8002b72:	2401      	movs	r4, #1
 8002b74:	9400      	str	r4, [sp, #0]
 8002b76:	f7ff fd15 	bl	80025a4 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//4
 8002b7a:	89bb      	ldrh	r3, [r7, #12]
 8002b7c:	88fa      	ldrh	r2, [r7, #6]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	b298      	uxth	r0, r3
 8002b82:	89fb      	ldrh	r3, [r7, #14]
 8002b84:	88ba      	ldrh	r2, [r7, #4]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	b299      	uxth	r1, r3
 8002b8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b8e:	883a      	ldrh	r2, [r7, #0]
 8002b90:	2401      	movs	r4, #1
 8002b92:	9400      	str	r4, [sp, #0]
 8002b94:	f7ff fd06 	bl	80025a4 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//5
 8002b98:	89fb      	ldrh	r3, [r7, #14]
 8002b9a:	88fa      	ldrh	r2, [r7, #6]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	b298      	uxth	r0, r3
 8002ba0:	89bb      	ldrh	r3, [r7, #12]
 8002ba2:	88ba      	ldrh	r2, [r7, #4]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	b299      	uxth	r1, r3
 8002ba8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002bac:	883a      	ldrh	r2, [r7, #0]
 8002bae:	2401      	movs	r4, #1
 8002bb0:	9400      	str	r4, [sp, #0]
 8002bb2:	f7ff fcf7 	bl	80025a4 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//6
 8002bb6:	89fa      	ldrh	r2, [r7, #14]
 8002bb8:	88fb      	ldrh	r3, [r7, #6]
 8002bba:	4413      	add	r3, r2
 8002bbc:	b298      	uxth	r0, r3
 8002bbe:	89bb      	ldrh	r3, [r7, #12]
 8002bc0:	88ba      	ldrh	r2, [r7, #4]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	b299      	uxth	r1, r3
 8002bc6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002bca:	883a      	ldrh	r2, [r7, #0]
 8002bcc:	2401      	movs	r4, #1
 8002bce:	9400      	str	r4, [sp, #0]
 8002bd0:	f7ff fce8 	bl	80025a4 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//7
 8002bd4:	89ba      	ldrh	r2, [r7, #12]
 8002bd6:	88fb      	ldrh	r3, [r7, #6]
 8002bd8:	4413      	add	r3, r2
 8002bda:	b298      	uxth	r0, r3
 8002bdc:	89fb      	ldrh	r3, [r7, #14]
 8002bde:	88ba      	ldrh	r2, [r7, #4]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	b299      	uxth	r1, r3
 8002be4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002be8:	883a      	ldrh	r2, [r7, #0]
 8002bea:	2401      	movs	r4, #1
 8002bec:	9400      	str	r4, [sp, #0]
 8002bee:	f7ff fcd9 	bl	80025a4 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//0
 8002bf2:	89ba      	ldrh	r2, [r7, #12]
 8002bf4:	88fb      	ldrh	r3, [r7, #6]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	b298      	uxth	r0, r3
 8002bfa:	89fa      	ldrh	r2, [r7, #14]
 8002bfc:	88bb      	ldrh	r3, [r7, #4]
 8002bfe:	4413      	add	r3, r2
 8002c00:	b299      	uxth	r1, r3
 8002c02:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002c06:	883a      	ldrh	r2, [r7, #0]
 8002c08:	2401      	movs	r4, #1
 8002c0a:	9400      	str	r4, [sp, #0]
 8002c0c:	f7ff fcca 	bl	80025a4 <Paint_DrawPoint>

            if (Esp < 0 )
 8002c10:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	da09      	bge.n	8002c2c <Paint_DrawCircle+0x2d0>
                Esp += 4 * XCurrent + 6;
 8002c18:	89fb      	ldrh	r3, [r7, #14]
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	897b      	ldrh	r3, [r7, #10]
 8002c20:	4413      	add	r3, r2
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	3306      	adds	r3, #6
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	817b      	strh	r3, [r7, #10]
 8002c2a:	e013      	b.n	8002c54 <Paint_DrawCircle+0x2f8>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 8002c2c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002c30:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	897b      	ldrh	r3, [r7, #10]
 8002c3e:	4413      	add	r3, r2
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	330a      	adds	r3, #10
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 8002c48:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 8002c54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) {
 8002c60:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002c64:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	f77f af59 	ble.w	8002b20 <Paint_DrawCircle+0x1c4>
        }
    }
}
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd90      	pop	{r4, r7, pc}

08002c74 <Paint_DrawChar>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b088      	sub	sp, #32
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	607b      	str	r3, [r7, #4]
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	81fb      	strh	r3, [r7, #14]
 8002c80:	460b      	mov	r3, r1
 8002c82:	81bb      	strh	r3, [r7, #12]
 8002c84:	4613      	mov	r3, r2
 8002c86:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8002c88:	4b4c      	ldr	r3, [pc, #304]	; (8002dbc <Paint_DrawChar+0x148>)
 8002c8a:	889b      	ldrh	r3, [r3, #4]
 8002c8c:	89fa      	ldrh	r2, [r7, #14]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d804      	bhi.n	8002c9c <Paint_DrawChar+0x28>
 8002c92:	4b4a      	ldr	r3, [pc, #296]	; (8002dbc <Paint_DrawChar+0x148>)
 8002c94:	88db      	ldrh	r3, [r3, #6]
 8002c96:	89ba      	ldrh	r2, [r7, #12]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d903      	bls.n	8002ca4 <Paint_DrawChar+0x30>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 8002c9c:	4848      	ldr	r0, [pc, #288]	; (8002dc0 <Paint_DrawChar+0x14c>)
 8002c9e:	f009 fe33 	bl	800c908 <puts>
        return;
 8002ca2:	e087      	b.n	8002db4 <Paint_DrawChar+0x140>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8002ca4:	7afb      	ldrb	r3, [r7, #11]
 8002ca6:	3b20      	subs	r3, #32
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	88d2      	ldrh	r2, [r2, #6]
 8002cac:	fb02 f303 	mul.w	r3, r2, r3
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	8892      	ldrh	r2, [r2, #4]
 8002cb4:	08d2      	lsrs	r2, r2, #3
 8002cb6:	b292      	uxth	r2, r2
 8002cb8:	4611      	mov	r1, r2
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	8892      	ldrh	r2, [r2, #4]
 8002cbe:	f002 0207 	and.w	r2, r2, #7
 8002cc2:	b292      	uxth	r2, r2
 8002cc4:	2a00      	cmp	r2, #0
 8002cc6:	bf14      	ite	ne
 8002cc8:	2201      	movne	r2, #1
 8002cca:	2200      	moveq	r2, #0
 8002ccc:	b2d2      	uxtb	r2, r2
 8002cce:	440a      	add	r2, r1
 8002cd0:	fb02 f303 	mul.w	r3, r2, r3
 8002cd4:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	4413      	add	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	83fb      	strh	r3, [r7, #30]
 8002ce4:	e061      	b.n	8002daa <Paint_DrawChar+0x136>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	83bb      	strh	r3, [r7, #28]
 8002cea:	e04c      	b.n	8002d86 <Paint_DrawChar+0x112>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8002cec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002cee:	2bff      	cmp	r3, #255	; 0xff
 8002cf0:	d118      	bne.n	8002d24 <Paint_DrawChar+0xb0>
                if (*ptr & (0x80 >> (Column % 8)))
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	8bbb      	ldrh	r3, [r7, #28]
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	2280      	movs	r2, #128	; 0x80
 8002d00:	fa42 f303 	asr.w	r3, r2, r3
 8002d04:	400b      	ands	r3, r1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d031      	beq.n	8002d6e <Paint_DrawChar+0xfa>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8002d0a:	89fa      	ldrh	r2, [r7, #14]
 8002d0c:	8bbb      	ldrh	r3, [r7, #28]
 8002d0e:	4413      	add	r3, r2
 8002d10:	b298      	uxth	r0, r3
 8002d12:	89ba      	ldrh	r2, [r7, #12]
 8002d14:	8bfb      	ldrh	r3, [r7, #30]
 8002d16:	4413      	add	r3, r2
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	f7ff fa89 	bl	8002234 <Paint_SetPixel>
 8002d22:	e024      	b.n	8002d6e <Paint_DrawChar+0xfa>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	4619      	mov	r1, r3
 8002d2a:	8bbb      	ldrh	r3, [r7, #28]
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	2280      	movs	r2, #128	; 0x80
 8002d32:	fa42 f303 	asr.w	r3, r2, r3
 8002d36:	400b      	ands	r3, r1
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00c      	beq.n	8002d56 <Paint_DrawChar+0xe2>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8002d3c:	89fa      	ldrh	r2, [r7, #14]
 8002d3e:	8bbb      	ldrh	r3, [r7, #28]
 8002d40:	4413      	add	r3, r2
 8002d42:	b298      	uxth	r0, r3
 8002d44:	89ba      	ldrh	r2, [r7, #12]
 8002d46:	8bfb      	ldrh	r3, [r7, #30]
 8002d48:	4413      	add	r3, r2
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002d4e:	4619      	mov	r1, r3
 8002d50:	f7ff fa70 	bl	8002234 <Paint_SetPixel>
 8002d54:	e00b      	b.n	8002d6e <Paint_DrawChar+0xfa>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8002d56:	89fa      	ldrh	r2, [r7, #14]
 8002d58:	8bbb      	ldrh	r3, [r7, #28]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	b298      	uxth	r0, r3
 8002d5e:	89ba      	ldrh	r2, [r7, #12]
 8002d60:	8bfb      	ldrh	r3, [r7, #30]
 8002d62:	4413      	add	r3, r2
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002d68:	4619      	mov	r1, r3
 8002d6a:	f7ff fa63 	bl	8002234 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8002d6e:	8bbb      	ldrh	r3, [r7, #28]
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	2b07      	cmp	r3, #7
 8002d78:	d102      	bne.n	8002d80 <Paint_DrawChar+0x10c>
                ptr++;
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8002d80:	8bbb      	ldrh	r3, [r7, #28]
 8002d82:	3301      	adds	r3, #1
 8002d84:	83bb      	strh	r3, [r7, #28]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	889b      	ldrh	r3, [r3, #4]
 8002d8a:	8bba      	ldrh	r2, [r7, #28]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d3ad      	bcc.n	8002cec <Paint_DrawChar+0x78>
        }// Write a line
        if (Font->Width % 8 != 0)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	889b      	ldrh	r3, [r3, #4]
 8002d94:	f003 0307 	and.w	r3, r3, #7
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d002      	beq.n	8002da4 <Paint_DrawChar+0x130>
            ptr++;
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	3301      	adds	r3, #1
 8002da2:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8002da4:	8bfb      	ldrh	r3, [r7, #30]
 8002da6:	3301      	adds	r3, #1
 8002da8:	83fb      	strh	r3, [r7, #30]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	88db      	ldrh	r3, [r3, #6]
 8002dae:	8bfa      	ldrh	r2, [r7, #30]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d398      	bcc.n	8002ce6 <Paint_DrawChar+0x72>
    }// Write all
}
 8002db4:	3720      	adds	r7, #32
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	200000ec 	.word	0x200000ec
 8002dc0:	0800da90 	.word	0x0800da90

08002dc4 <Paint_DrawString_EN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b088      	sub	sp, #32
 8002dc8:	af02      	add	r7, sp, #8
 8002dca:	60ba      	str	r2, [r7, #8]
 8002dcc:	607b      	str	r3, [r7, #4]
 8002dce:	4603      	mov	r3, r0
 8002dd0:	81fb      	strh	r3, [r7, #14]
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 8002dd6:	89fb      	ldrh	r3, [r7, #14]
 8002dd8:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 8002dda:	89bb      	ldrh	r3, [r7, #12]
 8002ddc:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 8002dde:	4b21      	ldr	r3, [pc, #132]	; (8002e64 <Paint_DrawString_EN+0xa0>)
 8002de0:	889b      	ldrh	r3, [r3, #4]
 8002de2:	89fa      	ldrh	r2, [r7, #14]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d804      	bhi.n	8002df2 <Paint_DrawString_EN+0x2e>
 8002de8:	4b1e      	ldr	r3, [pc, #120]	; (8002e64 <Paint_DrawString_EN+0xa0>)
 8002dea:	88db      	ldrh	r3, [r3, #6]
 8002dec:	89ba      	ldrh	r2, [r7, #12]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d931      	bls.n	8002e56 <Paint_DrawString_EN+0x92>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 8002df2:	481d      	ldr	r0, [pc, #116]	; (8002e68 <Paint_DrawString_EN+0xa4>)
 8002df4:	f009 fd88 	bl	800c908 <puts>
        return;
 8002df8:	e031      	b.n	8002e5e <Paint_DrawString_EN+0x9a>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 8002dfa:	8afb      	ldrh	r3, [r7, #22]
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	8892      	ldrh	r2, [r2, #4]
 8002e00:	4413      	add	r3, r2
 8002e02:	4a18      	ldr	r2, [pc, #96]	; (8002e64 <Paint_DrawString_EN+0xa0>)
 8002e04:	8892      	ldrh	r2, [r2, #4]
 8002e06:	4293      	cmp	r3, r2
 8002e08:	dd06      	ble.n	8002e18 <Paint_DrawString_EN+0x54>
            Xpoint = Xstart;
 8002e0a:	89fb      	ldrh	r3, [r7, #14]
 8002e0c:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	88da      	ldrh	r2, [r3, #6]
 8002e12:	8abb      	ldrh	r3, [r7, #20]
 8002e14:	4413      	add	r3, r2
 8002e16:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 8002e18:	8abb      	ldrh	r3, [r7, #20]
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	88d2      	ldrh	r2, [r2, #6]
 8002e1e:	4413      	add	r3, r2
 8002e20:	4a10      	ldr	r2, [pc, #64]	; (8002e64 <Paint_DrawString_EN+0xa0>)
 8002e22:	88d2      	ldrh	r2, [r2, #6]
 8002e24:	4293      	cmp	r3, r2
 8002e26:	dd03      	ble.n	8002e30 <Paint_DrawString_EN+0x6c>
            Xpoint = Xstart;
 8002e28:	89fb      	ldrh	r3, [r7, #14]
 8002e2a:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8002e2c:	89bb      	ldrh	r3, [r7, #12]
 8002e2e:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	781a      	ldrb	r2, [r3, #0]
 8002e34:	8ab9      	ldrh	r1, [r7, #20]
 8002e36:	8af8      	ldrh	r0, [r7, #22]
 8002e38:	8c3b      	ldrh	r3, [r7, #32]
 8002e3a:	9301      	str	r3, [sp, #4]
 8002e3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f7ff ff17 	bl	8002c74 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	889a      	ldrh	r2, [r3, #4]
 8002e50:	8afb      	ldrh	r3, [r7, #22]
 8002e52:	4413      	add	r3, r2
 8002e54:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1cd      	bne.n	8002dfa <Paint_DrawString_EN+0x36>
    }
}
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	200000ec 	.word	0x200000ec
 8002e68:	0800dad0 	.word	0x0800dad0

08002e6c <Paint_DrawString_CN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_CN(UWORD Xstart, UWORD Ystart, const char * pString, cFONT* font,
                        UWORD Color_Foreground, UWORD Color_Background)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08c      	sub	sp, #48	; 0x30
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60ba      	str	r2, [r7, #8]
 8002e74:	607b      	str	r3, [r7, #4]
 8002e76:	4603      	mov	r3, r0
 8002e78:	81fb      	strh	r3, [r7, #14]
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	81bb      	strh	r3, [r7, #12]
    const char* p_text = pString;
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	62fb      	str	r3, [r7, #44]	; 0x2c
    int x = Xstart, y = Ystart;
 8002e82:	89fb      	ldrh	r3, [r7, #14]
 8002e84:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e86:	89bb      	ldrh	r3, [r7, #12]
 8002e88:	613b      	str	r3, [r7, #16]
    int i, j,Num;

    /* Send the string character by character on EPD */
    while (*p_text != 0) {
 8002e8a:	e17c      	b.n	8003186 <Paint_DrawString_CN+0x31a>
        if(*p_text <= 0x7F) {  //ASCII < 126
 8002e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	b25b      	sxtb	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f2c0 80b5 	blt.w	8003002 <Paint_DrawString_CN+0x196>
            for(Num = 0; Num < font->size; Num++) {
 8002e98:	2300      	movs	r3, #0
 8002e9a:	61fb      	str	r3, [r7, #28]
 8002e9c:	e0a0      	b.n	8002fe0 <Paint_DrawString_CN+0x174>
                if(*p_text== font->table[Num].index[0]) {
 8002e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea0:	781a      	ldrb	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6819      	ldr	r1, [r3, #0]
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	20a6      	movs	r0, #166	; 0xa6
 8002eaa:	fb00 f303 	mul.w	r3, r0, r3
 8002eae:	440b      	add	r3, r1
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	f040 8091 	bne.w	8002fda <Paint_DrawString_CN+0x16e>
                    const char* ptr = &font->table[Num].matrix[0];
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	21a6      	movs	r1, #166	; 0xa6
 8002ec0:	fb01 f303 	mul.w	r3, r1, r3
 8002ec4:	4413      	add	r3, r2
 8002ec6:	3302      	adds	r3, #2
 8002ec8:	61bb      	str	r3, [r7, #24]

                    for (j = 0; j < font->Height; j++) {
 8002eca:	2300      	movs	r3, #0
 8002ecc:	623b      	str	r3, [r7, #32]
 8002ece:	e07c      	b.n	8002fca <Paint_DrawString_CN+0x15e>
                        for (i = 0; i < font->Width; i++) {
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ed4:	e066      	b.n	8002fa4 <Paint_DrawString_CN+0x138>
                            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8002ed6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002ed8:	2bff      	cmp	r3, #255	; 0xff
 8002eda:	d121      	bne.n	8002f20 <Paint_DrawString_CN+0xb4>
                                if (*ptr & (0x80 >> (i % 8))) {
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	425a      	negs	r2, r3
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	f002 0207 	and.w	r2, r2, #7
 8002eee:	bf58      	it	pl
 8002ef0:	4253      	negpl	r3, r2
 8002ef2:	2280      	movs	r2, #128	; 0x80
 8002ef4:	fa42 f303 	asr.w	r3, r2, r3
 8002ef8:	400b      	ands	r3, r1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d042      	beq.n	8002f84 <Paint_DrawString_CN+0x118>
                                    Paint_SetPixel(x + i, y + j, Color_Foreground);
 8002efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	4413      	add	r3, r2
 8002f08:	b298      	uxth	r0, r3
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	4413      	add	r3, r2
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002f18:	4619      	mov	r1, r3
 8002f1a:	f7ff f98b 	bl	8002234 <Paint_SetPixel>
 8002f1e:	e031      	b.n	8002f84 <Paint_DrawString_CN+0x118>
                                    // Paint_DrawPoint(x + i, y + j, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                }
                            } else {
                                if (*ptr & (0x80 >> (i % 8))) {
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	4619      	mov	r1, r3
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	425a      	negs	r2, r3
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	f002 0207 	and.w	r2, r2, #7
 8002f32:	bf58      	it	pl
 8002f34:	4253      	negpl	r3, r2
 8002f36:	2280      	movs	r2, #128	; 0x80
 8002f38:	fa42 f303 	asr.w	r3, r2, r3
 8002f3c:	400b      	ands	r3, r1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d010      	beq.n	8002f64 <Paint_DrawString_CN+0xf8>
                                    Paint_SetPixel(x + i, y + j, Color_Foreground);
 8002f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	4413      	add	r3, r2
 8002f4c:	b298      	uxth	r0, r3
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	6a3b      	ldr	r3, [r7, #32]
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	4413      	add	r3, r2
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	f7ff f969 	bl	8002234 <Paint_SetPixel>
 8002f62:	e00f      	b.n	8002f84 <Paint_DrawString_CN+0x118>
                                    // Paint_DrawPoint(x + i, y + j, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                } else {
                                    Paint_SetPixel(x + i, y + j, Color_Background);
 8002f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	4413      	add	r3, r2
 8002f6e:	b298      	uxth	r0, r3
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	6a3b      	ldr	r3, [r7, #32]
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	4413      	add	r3, r2
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8002f7e:	4619      	mov	r1, r3
 8002f80:	f7ff f958 	bl	8002234 <Paint_SetPixel>
                                    // Paint_DrawPoint(x + i, y + j, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                }
                            }
                            if (i % 8 == 7) {
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	425a      	negs	r2, r3
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	f002 0207 	and.w	r2, r2, #7
 8002f90:	bf58      	it	pl
 8002f92:	4253      	negpl	r3, r2
 8002f94:	2b07      	cmp	r3, #7
 8002f96:	d102      	bne.n	8002f9e <Paint_DrawString_CN+0x132>
                                ptr++;
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	61bb      	str	r3, [r7, #24]
                        for (i = 0; i < font->Width; i++) {
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	891b      	ldrh	r3, [r3, #8]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fac:	4293      	cmp	r3, r2
 8002fae:	db92      	blt.n	8002ed6 <Paint_DrawString_CN+0x6a>
                            }
                        }
                        if (font->Width % 8 != 0) {
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	891b      	ldrh	r3, [r3, #8]
 8002fb4:	f003 0307 	and.w	r3, r3, #7
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d002      	beq.n	8002fc4 <Paint_DrawString_CN+0x158>
                            ptr++;
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	61bb      	str	r3, [r7, #24]
                    for (j = 0; j < font->Height; j++) {
 8002fc4:	6a3b      	ldr	r3, [r7, #32]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	623b      	str	r3, [r7, #32]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	895b      	ldrh	r3, [r3, #10]
 8002fce:	461a      	mov	r2, r3
 8002fd0:	6a3b      	ldr	r3, [r7, #32]
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	f6ff af7c 	blt.w	8002ed0 <Paint_DrawString_CN+0x64>
                        }
                    }
                    break;
 8002fd8:	e009      	b.n	8002fee <Paint_DrawString_CN+0x182>
            for(Num = 0; Num < font->size; Num++) {
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	61fb      	str	r3, [r7, #28]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	889b      	ldrh	r3, [r3, #4]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	f6ff af58 	blt.w	8002e9e <Paint_DrawString_CN+0x32>
                }
            }
            /* Point on the next character */
            p_text += 1;
 8002fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Decrement the column position by 16 */
            x += font->ASCII_Width;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	88db      	ldrh	r3, [r3, #6]
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffc:	4413      	add	r3, r2
 8002ffe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003000:	e0c1      	b.n	8003186 <Paint_DrawString_CN+0x31a>
        } else {        //Chinese
            for(Num = 0; Num < font->size; Num++) {
 8003002:	2300      	movs	r3, #0
 8003004:	61fb      	str	r3, [r7, #28]
 8003006:	e0ae      	b.n	8003166 <Paint_DrawString_CN+0x2fa>
                if((*p_text== font->table[Num].index[0]) && (*(p_text+1) == font->table[Num].index[1])) {
 8003008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800300a:	781a      	ldrb	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6819      	ldr	r1, [r3, #0]
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	20a6      	movs	r0, #166	; 0xa6
 8003014:	fb00 f303 	mul.w	r3, r0, r3
 8003018:	440b      	add	r3, r1
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	429a      	cmp	r2, r3
 800301e:	f040 809f 	bne.w	8003160 <Paint_DrawString_CN+0x2f4>
 8003022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003024:	3301      	adds	r3, #1
 8003026:	781a      	ldrb	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6819      	ldr	r1, [r3, #0]
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	20a6      	movs	r0, #166	; 0xa6
 8003030:	fb00 f303 	mul.w	r3, r0, r3
 8003034:	440b      	add	r3, r1
 8003036:	785b      	ldrb	r3, [r3, #1]
 8003038:	429a      	cmp	r2, r3
 800303a:	f040 8091 	bne.w	8003160 <Paint_DrawString_CN+0x2f4>
                    const char* ptr = &font->table[Num].matrix[0];
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	21a6      	movs	r1, #166	; 0xa6
 8003046:	fb01 f303 	mul.w	r3, r1, r3
 800304a:	4413      	add	r3, r2
 800304c:	3302      	adds	r3, #2
 800304e:	617b      	str	r3, [r7, #20]

                    for (j = 0; j < font->Height; j++) {
 8003050:	2300      	movs	r3, #0
 8003052:	623b      	str	r3, [r7, #32]
 8003054:	e07c      	b.n	8003150 <Paint_DrawString_CN+0x2e4>
                        for (i = 0; i < font->Width; i++) {
 8003056:	2300      	movs	r3, #0
 8003058:	627b      	str	r3, [r7, #36]	; 0x24
 800305a:	e066      	b.n	800312a <Paint_DrawString_CN+0x2be>
                            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 800305c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800305e:	2bff      	cmp	r3, #255	; 0xff
 8003060:	d121      	bne.n	80030a6 <Paint_DrawString_CN+0x23a>
                                if (*ptr & (0x80 >> (i % 8))) {
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	4619      	mov	r1, r3
 8003068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306a:	425a      	negs	r2, r3
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	f002 0207 	and.w	r2, r2, #7
 8003074:	bf58      	it	pl
 8003076:	4253      	negpl	r3, r2
 8003078:	2280      	movs	r2, #128	; 0x80
 800307a:	fa42 f303 	asr.w	r3, r2, r3
 800307e:	400b      	ands	r3, r1
 8003080:	2b00      	cmp	r3, #0
 8003082:	d042      	beq.n	800310a <Paint_DrawString_CN+0x29e>
                                    Paint_SetPixel(x + i, y + j, Color_Foreground);
 8003084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003086:	b29a      	uxth	r2, r3
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	b29b      	uxth	r3, r3
 800308c:	4413      	add	r3, r2
 800308e:	b298      	uxth	r0, r3
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	b29a      	uxth	r2, r3
 8003094:	6a3b      	ldr	r3, [r7, #32]
 8003096:	b29b      	uxth	r3, r3
 8003098:	4413      	add	r3, r2
 800309a:	b29b      	uxth	r3, r3
 800309c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800309e:	4619      	mov	r1, r3
 80030a0:	f7ff f8c8 	bl	8002234 <Paint_SetPixel>
 80030a4:	e031      	b.n	800310a <Paint_DrawString_CN+0x29e>
                                    // Paint_DrawPoint(x + i, y + j, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                }
                            } else {
                                if (*ptr & (0x80 >> (i % 8))) {
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	4619      	mov	r1, r3
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	425a      	negs	r2, r3
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	f002 0207 	and.w	r2, r2, #7
 80030b8:	bf58      	it	pl
 80030ba:	4253      	negpl	r3, r2
 80030bc:	2280      	movs	r2, #128	; 0x80
 80030be:	fa42 f303 	asr.w	r3, r2, r3
 80030c2:	400b      	ands	r3, r1
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d010      	beq.n	80030ea <Paint_DrawString_CN+0x27e>
                                    Paint_SetPixel(x + i, y + j, Color_Foreground);
 80030c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	4413      	add	r3, r2
 80030d2:	b298      	uxth	r0, r3
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	6a3b      	ldr	r3, [r7, #32]
 80030da:	b29b      	uxth	r3, r3
 80030dc:	4413      	add	r3, r2
 80030de:	b29b      	uxth	r3, r3
 80030e0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80030e2:	4619      	mov	r1, r3
 80030e4:	f7ff f8a6 	bl	8002234 <Paint_SetPixel>
 80030e8:	e00f      	b.n	800310a <Paint_DrawString_CN+0x29e>
                                    // Paint_DrawPoint(x + i, y + j, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                } else {
                                    Paint_SetPixel(x + i, y + j, Color_Background);
 80030ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	4413      	add	r3, r2
 80030f4:	b298      	uxth	r0, r3
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	6a3b      	ldr	r3, [r7, #32]
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	4413      	add	r3, r2
 8003100:	b29b      	uxth	r3, r3
 8003102:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8003104:	4619      	mov	r1, r3
 8003106:	f7ff f895 	bl	8002234 <Paint_SetPixel>
                                    // Paint_DrawPoint(x + i, y + j, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                }
                            }
                            if (i % 8 == 7) {
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	425a      	negs	r2, r3
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	f002 0207 	and.w	r2, r2, #7
 8003116:	bf58      	it	pl
 8003118:	4253      	negpl	r3, r2
 800311a:	2b07      	cmp	r3, #7
 800311c:	d102      	bne.n	8003124 <Paint_DrawString_CN+0x2b8>
                                ptr++;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	3301      	adds	r3, #1
 8003122:	617b      	str	r3, [r7, #20]
                        for (i = 0; i < font->Width; i++) {
 8003124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003126:	3301      	adds	r3, #1
 8003128:	627b      	str	r3, [r7, #36]	; 0x24
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	891b      	ldrh	r3, [r3, #8]
 800312e:	461a      	mov	r2, r3
 8003130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003132:	4293      	cmp	r3, r2
 8003134:	db92      	blt.n	800305c <Paint_DrawString_CN+0x1f0>
                            }
                        }
                        if (font->Width % 8 != 0) {
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	891b      	ldrh	r3, [r3, #8]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	b29b      	uxth	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	d002      	beq.n	800314a <Paint_DrawString_CN+0x2de>
                            ptr++;
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	3301      	adds	r3, #1
 8003148:	617b      	str	r3, [r7, #20]
                    for (j = 0; j < font->Height; j++) {
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	3301      	adds	r3, #1
 800314e:	623b      	str	r3, [r7, #32]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	895b      	ldrh	r3, [r3, #10]
 8003154:	461a      	mov	r2, r3
 8003156:	6a3b      	ldr	r3, [r7, #32]
 8003158:	4293      	cmp	r3, r2
 800315a:	f6ff af7c 	blt.w	8003056 <Paint_DrawString_CN+0x1ea>
                        }
                    }
                    break;
 800315e:	e009      	b.n	8003174 <Paint_DrawString_CN+0x308>
            for(Num = 0; Num < font->size; Num++) {
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	3301      	adds	r3, #1
 8003164:	61fb      	str	r3, [r7, #28]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	889b      	ldrh	r3, [r3, #4]
 800316a:	461a      	mov	r2, r3
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	4293      	cmp	r3, r2
 8003170:	f6ff af4a 	blt.w	8003008 <Paint_DrawString_CN+0x19c>
                }
            }
            /* Point on the next character */
            p_text += 2;
 8003174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003176:	3302      	adds	r3, #2
 8003178:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Decrement the column position by 16 */
            x += font->Width;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	891b      	ldrh	r3, [r3, #8]
 800317e:	461a      	mov	r2, r3
 8003180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003182:	4413      	add	r3, r2
 8003184:	62bb      	str	r3, [r7, #40]	; 0x28
    while (*p_text != 0) {
 8003186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	f47f ae7e 	bne.w	8002e8c <Paint_DrawString_CN+0x20>
        }
    }
}
 8003190:	bf00      	nop
 8003192:	bf00      	nop
 8003194:	3730      	adds	r7, #48	; 0x30
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
	...

0800319c <Paint_DrawNum>:
    Color_Background : Select the background color
******************************************************************************/
#define  ARRAY_LEN 255
void Paint_DrawNum(UWORD Xpoint, UWORD Ypoint, int32_t Nummber,
                   sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 800319c:	b590      	push	{r4, r7, lr}
 800319e:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 80031a2:	af02      	add	r7, sp, #8
 80031a4:	4604      	mov	r4, r0
 80031a6:	4608      	mov	r0, r1
 80031a8:	f107 0108 	add.w	r1, r7, #8
 80031ac:	600a      	str	r2, [r1, #0]
 80031ae:	1d3a      	adds	r2, r7, #4
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	f107 030e 	add.w	r3, r7, #14
 80031b6:	4622      	mov	r2, r4
 80031b8:	801a      	strh	r2, [r3, #0]
 80031ba:	f107 030c 	add.w	r3, r7, #12
 80031be:	4602      	mov	r2, r0
 80031c0:	801a      	strh	r2, [r3, #0]

    int16_t Num_Bit = 0, Str_Bit = 0;
 80031c2:	2300      	movs	r3, #0
 80031c4:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80031c8:	2300      	movs	r3, #0
 80031ca:	f8a7 3214 	strh.w	r3, [r7, #532]	; 0x214
    uint8_t Str_Array[ARRAY_LEN] = {0}, Num_Array[ARRAY_LEN] = {0};
 80031ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	3304      	adds	r3, #4
 80031d8:	22fb      	movs	r2, #251	; 0xfb
 80031da:	2100      	movs	r1, #0
 80031dc:	4618      	mov	r0, r3
 80031de:	f009 fa5b 	bl	800c698 <memset>
 80031e2:	f107 0310 	add.w	r3, r7, #16
 80031e6:	2200      	movs	r2, #0
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	3304      	adds	r3, #4
 80031ec:	22fb      	movs	r2, #251	; 0xfb
 80031ee:	2100      	movs	r1, #0
 80031f0:	4618      	mov	r0, r3
 80031f2:	f009 fa51 	bl	800c698 <memset>
    uint8_t *pStr = Str_Array;
 80031f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80031fa:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 80031fe:	4b3a      	ldr	r3, [pc, #232]	; (80032e8 <Paint_DrawNum+0x14c>)
 8003200:	889b      	ldrh	r3, [r3, #4]
 8003202:	f107 020e 	add.w	r2, r7, #14
 8003206:	8812      	ldrh	r2, [r2, #0]
 8003208:	429a      	cmp	r2, r3
 800320a:	d806      	bhi.n	800321a <Paint_DrawNum+0x7e>
 800320c:	4b36      	ldr	r3, [pc, #216]	; (80032e8 <Paint_DrawNum+0x14c>)
 800320e:	88db      	ldrh	r3, [r3, #6]
 8003210:	f107 020c 	add.w	r2, r7, #12
 8003214:	8812      	ldrh	r2, [r2, #0]
 8003216:	429a      	cmp	r2, r3
 8003218:	d92c      	bls.n	8003274 <Paint_DrawNum+0xd8>
        Debug("Paint_DisNum Input exceeds the normal display range\r\n");
 800321a:	4834      	ldr	r0, [pc, #208]	; (80032ec <Paint_DrawNum+0x150>)
 800321c:	f009 fb74 	bl	800c908 <puts>
 8003220:	e05d      	b.n	80032de <Paint_DrawNum+0x142>
        return;
    }

    //Converts a number to a string
    while (Nummber) {
        Num_Array[Num_Bit] = Nummber % 10 + '0';
 8003222:	f107 0308 	add.w	r3, r7, #8
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	4b31      	ldr	r3, [pc, #196]	; (80032f0 <Paint_DrawNum+0x154>)
 800322a:	fb83 1302 	smull	r1, r3, r3, r2
 800322e:	1099      	asrs	r1, r3, #2
 8003230:	17d3      	asrs	r3, r2, #31
 8003232:	1ac9      	subs	r1, r1, r3
 8003234:	460b      	mov	r3, r1
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	440b      	add	r3, r1
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	1ad1      	subs	r1, r2, r3
 800323e:	b2ca      	uxtb	r2, r1
 8003240:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 8003244:	3230      	adds	r2, #48	; 0x30
 8003246:	b2d1      	uxtb	r1, r2
 8003248:	f107 0210 	add.w	r2, r7, #16
 800324c:	54d1      	strb	r1, [r2, r3]
        Num_Bit++;
 800324e:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 8003252:	b29b      	uxth	r3, r3
 8003254:	3301      	adds	r3, #1
 8003256:	b29b      	uxth	r3, r3
 8003258:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
        Nummber /= 10;
 800325c:	f107 0208 	add.w	r2, r7, #8
 8003260:	f107 0308 	add.w	r3, r7, #8
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4922      	ldr	r1, [pc, #136]	; (80032f0 <Paint_DrawNum+0x154>)
 8003268:	fb81 0103 	smull	r0, r1, r1, r3
 800326c:	1089      	asrs	r1, r1, #2
 800326e:	17db      	asrs	r3, r3, #31
 8003270:	1acb      	subs	r3, r1, r3
 8003272:	6013      	str	r3, [r2, #0]
    while (Nummber) {
 8003274:	f107 0308 	add.w	r3, r7, #8
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1d1      	bne.n	8003222 <Paint_DrawNum+0x86>
    }

    //The string is inverted
    while (Num_Bit > 0) {
 800327e:	e018      	b.n	80032b2 <Paint_DrawNum+0x116>
        Str_Array[Str_Bit] = Num_Array[Num_Bit - 1];
 8003280:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 8003284:	1e5a      	subs	r2, r3, #1
 8003286:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	; 0x214
 800328a:	f107 0110 	add.w	r1, r7, #16
 800328e:	5c89      	ldrb	r1, [r1, r2]
 8003290:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003294:	54d1      	strb	r1, [r2, r3]
        Str_Bit ++;
 8003296:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	; 0x214
 800329a:	b29b      	uxth	r3, r3
 800329c:	3301      	adds	r3, #1
 800329e:	b29b      	uxth	r3, r3
 80032a0:	f8a7 3214 	strh.w	r3, [r7, #532]	; 0x214
        Num_Bit --;
 80032a4:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	3b01      	subs	r3, #1
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    while (Num_Bit > 0) {
 80032b2:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	dce2      	bgt.n	8003280 <Paint_DrawNum+0xe4>
    }

    //show
    Paint_DrawString_EN(Xpoint, Ypoint, (const char*)pStr, Font, Color_Background, Color_Foreground);
 80032ba:	1d3b      	adds	r3, r7, #4
 80032bc:	f107 020c 	add.w	r2, r7, #12
 80032c0:	8811      	ldrh	r1, [r2, #0]
 80032c2:	f107 020e 	add.w	r2, r7, #14
 80032c6:	8810      	ldrh	r0, [r2, #0]
 80032c8:	f8b7 2228 	ldrh.w	r2, [r7, #552]	; 0x228
 80032cc:	9201      	str	r2, [sp, #4]
 80032ce:	f8b7 222c 	ldrh.w	r2, [r7, #556]	; 0x22c
 80032d2:	9200      	str	r2, [sp, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80032da:	f7ff fd73 	bl	8002dc4 <Paint_DrawString_EN>
}
 80032de:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd90      	pop	{r4, r7, pc}
 80032e6:	bf00      	nop
 80032e8:	200000ec 	.word	0x200000ec
 80032ec:	0800db14 	.word	0x0800db14
 80032f0:	66666667 	.word	0x66666667

080032f4 <EPD_2IN13BC_Reset>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
static void EPD_2IN13BC_Reset(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_RST_PIN, 1);
 80032f8:	2201      	movs	r2, #1
 80032fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032fe:	480d      	ldr	r0, [pc, #52]	; (8003334 <EPD_2IN13BC_Reset+0x40>)
 8003300:	f001 fc84 	bl	8004c0c <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 8003304:	20c8      	movs	r0, #200	; 0xc8
 8003306:	f001 f9af 	bl	8004668 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 0);
 800330a:	2200      	movs	r2, #0
 800330c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003310:	4808      	ldr	r0, [pc, #32]	; (8003334 <EPD_2IN13BC_Reset+0x40>)
 8003312:	f001 fc7b 	bl	8004c0c <HAL_GPIO_WritePin>
    DEV_Delay_ms(2);
 8003316:	2002      	movs	r0, #2
 8003318:	f001 f9a6 	bl	8004668 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 800331c:	2201      	movs	r2, #1
 800331e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003322:	4804      	ldr	r0, [pc, #16]	; (8003334 <EPD_2IN13BC_Reset+0x40>)
 8003324:	f001 fc72 	bl	8004c0c <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 8003328:	20c8      	movs	r0, #200	; 0xc8
 800332a:	f001 f99d 	bl	8004668 <HAL_Delay>
}
 800332e:	bf00      	nop
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40021000 	.word	0x40021000

08003338 <EPD_2IN13BC_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void EPD_2IN13BC_SendCommand(UBYTE Reg)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	4603      	mov	r3, r0
 8003340:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8003342:	2200      	movs	r2, #0
 8003344:	2180      	movs	r1, #128	; 0x80
 8003346:	480a      	ldr	r0, [pc, #40]	; (8003370 <EPD_2IN13BC_SendCommand+0x38>)
 8003348:	f001 fc60 	bl	8004c0c <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 800334c:	2200      	movs	r2, #0
 800334e:	2104      	movs	r1, #4
 8003350:	4808      	ldr	r0, [pc, #32]	; (8003374 <EPD_2IN13BC_SendCommand+0x3c>)
 8003352:	f001 fc5b 	bl	8004c0c <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 8003356:	79fb      	ldrb	r3, [r7, #7]
 8003358:	4618      	mov	r0, r3
 800335a:	f7fe fd71 	bl	8001e40 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 800335e:	2201      	movs	r2, #1
 8003360:	2104      	movs	r1, #4
 8003362:	4804      	ldr	r0, [pc, #16]	; (8003374 <EPD_2IN13BC_SendCommand+0x3c>)
 8003364:	f001 fc52 	bl	8004c0c <HAL_GPIO_WritePin>
}
 8003368:	bf00      	nop
 800336a:	3708      	adds	r7, #8
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40021000 	.word	0x40021000
 8003374:	40020400 	.word	0x40020400

08003378 <EPD_2IN13BC_SendData>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void EPD_2IN13BC_SendData(UBYTE Data)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	4603      	mov	r3, r0
 8003380:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 1);
 8003382:	2201      	movs	r2, #1
 8003384:	2180      	movs	r1, #128	; 0x80
 8003386:	480a      	ldr	r0, [pc, #40]	; (80033b0 <EPD_2IN13BC_SendData+0x38>)
 8003388:	f001 fc40 	bl	8004c0c <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 800338c:	2200      	movs	r2, #0
 800338e:	2104      	movs	r1, #4
 8003390:	4808      	ldr	r0, [pc, #32]	; (80033b4 <EPD_2IN13BC_SendData+0x3c>)
 8003392:	f001 fc3b 	bl	8004c0c <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 8003396:	79fb      	ldrb	r3, [r7, #7]
 8003398:	4618      	mov	r0, r3
 800339a:	f7fe fd51 	bl	8001e40 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 800339e:	2201      	movs	r2, #1
 80033a0:	2104      	movs	r1, #4
 80033a2:	4804      	ldr	r0, [pc, #16]	; (80033b4 <EPD_2IN13BC_SendData+0x3c>)
 80033a4:	f001 fc32 	bl	8004c0c <HAL_GPIO_WritePin>
}
 80033a8:	bf00      	nop
 80033aa:	3708      	adds	r7, #8
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	40021000 	.word	0x40021000
 80033b4:	40020400 	.word	0x40020400

080033b8 <EPD_2IN13BC_ReadBusy>:
/******************************************************************************
function :	Wait until the busy_pin goes LOW
parameter:
******************************************************************************/
void EPD_2IN13BC_ReadBusy(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
    Debug("e-Paper busy\r\n");
 80033bc:	4809      	ldr	r0, [pc, #36]	; (80033e4 <EPD_2IN13BC_ReadBusy+0x2c>)
 80033be:	f009 faa3 	bl	800c908 <puts>
    while(DEV_Digital_Read(EPD_BUSY_PIN) == 0) {
 80033c2:	e002      	b.n	80033ca <EPD_2IN13BC_ReadBusy+0x12>
        DEV_Delay_ms(100);
 80033c4:	2064      	movs	r0, #100	; 0x64
 80033c6:	f001 f94f 	bl	8004668 <HAL_Delay>
    while(DEV_Digital_Read(EPD_BUSY_PIN) == 0) {
 80033ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033ce:	4806      	ldr	r0, [pc, #24]	; (80033e8 <EPD_2IN13BC_ReadBusy+0x30>)
 80033d0:	f001 fc04 	bl	8004bdc <HAL_GPIO_ReadPin>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0f4      	beq.n	80033c4 <EPD_2IN13BC_ReadBusy+0xc>
    }
    Debug("e-Paper busy release\r\n");
 80033da:	4804      	ldr	r0, [pc, #16]	; (80033ec <EPD_2IN13BC_ReadBusy+0x34>)
 80033dc:	f009 fa94 	bl	800c908 <puts>
}
 80033e0:	bf00      	nop
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	0800db5c 	.word	0x0800db5c
 80033e8:	40021000 	.word	0x40021000
 80033ec:	0800db74 	.word	0x0800db74

080033f0 <EPD_2IN13BC_TurnOnDisplay>:
/******************************************************************************
function :	Turn On Display
parameter:
******************************************************************************/
static void EPD_2IN13BC_TurnOnDisplay(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
    EPD_2IN13BC_SendCommand(0x12);		 //DISPLAY REFRESH
 80033f4:	2012      	movs	r0, #18
 80033f6:	f7ff ff9f 	bl	8003338 <EPD_2IN13BC_SendCommand>
    DEV_Delay_ms(10);
 80033fa:	200a      	movs	r0, #10
 80033fc:	f001 f934 	bl	8004668 <HAL_Delay>

    EPD_2IN13BC_ReadBusy();
 8003400:	f7ff ffda 	bl	80033b8 <EPD_2IN13BC_ReadBusy>
}
 8003404:	bf00      	nop
 8003406:	bd80      	pop	{r7, pc}

08003408 <EPD_2IN13BC_Init>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
void EPD_2IN13BC_Init(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
    EPD_2IN13BC_Reset();
 800340c:	f7ff ff72 	bl	80032f4 <EPD_2IN13BC_Reset>

    EPD_2IN13BC_SendCommand(0x06); // BOOSTER_SOFT_START
 8003410:	2006      	movs	r0, #6
 8003412:	f7ff ff91 	bl	8003338 <EPD_2IN13BC_SendCommand>
    EPD_2IN13BC_SendData(0x17);
 8003416:	2017      	movs	r0, #23
 8003418:	f7ff ffae 	bl	8003378 <EPD_2IN13BC_SendData>
    EPD_2IN13BC_SendData(0x17);
 800341c:	2017      	movs	r0, #23
 800341e:	f7ff ffab 	bl	8003378 <EPD_2IN13BC_SendData>
    EPD_2IN13BC_SendData(0x17);
 8003422:	2017      	movs	r0, #23
 8003424:	f7ff ffa8 	bl	8003378 <EPD_2IN13BC_SendData>
	
    EPD_2IN13BC_SendCommand(0x04); // POWER_ON
 8003428:	2004      	movs	r0, #4
 800342a:	f7ff ff85 	bl	8003338 <EPD_2IN13BC_SendCommand>
    EPD_2IN13BC_ReadBusy();
 800342e:	f7ff ffc3 	bl	80033b8 <EPD_2IN13BC_ReadBusy>
	
    EPD_2IN13BC_SendCommand(0x00); // PANEL_SETTING
 8003432:	2000      	movs	r0, #0
 8003434:	f7ff ff80 	bl	8003338 <EPD_2IN13BC_SendCommand>
    EPD_2IN13BC_SendData(0x8F);
 8003438:	208f      	movs	r0, #143	; 0x8f
 800343a:	f7ff ff9d 	bl	8003378 <EPD_2IN13BC_SendData>
	
    EPD_2IN13BC_SendCommand(0x50); // VCOM_AND_DATA_INTERVAL_SETTING
 800343e:	2050      	movs	r0, #80	; 0x50
 8003440:	f7ff ff7a 	bl	8003338 <EPD_2IN13BC_SendCommand>
    EPD_2IN13BC_SendData(0xF0);
 8003444:	20f0      	movs	r0, #240	; 0xf0
 8003446:	f7ff ff97 	bl	8003378 <EPD_2IN13BC_SendData>
    EPD_2IN13BC_SendCommand(0x61); // RESOLUTION_SETTING
 800344a:	2061      	movs	r0, #97	; 0x61
 800344c:	f7ff ff74 	bl	8003338 <EPD_2IN13BC_SendCommand>
    EPD_2IN13BC_SendData(EPD_2IN13BC_WIDTH); // width: 104
 8003450:	2068      	movs	r0, #104	; 0x68
 8003452:	f7ff ff91 	bl	8003378 <EPD_2IN13BC_SendData>
    EPD_2IN13BC_SendData(EPD_2IN13BC_HEIGHT >> 8); // height: 212
 8003456:	2000      	movs	r0, #0
 8003458:	f7ff ff8e 	bl	8003378 <EPD_2IN13BC_SendData>
    EPD_2IN13BC_SendData(EPD_2IN13BC_HEIGHT & 0xFF);
 800345c:	20d4      	movs	r0, #212	; 0xd4
 800345e:	f7ff ff8b 	bl	8003378 <EPD_2IN13BC_SendData>
}
 8003462:	bf00      	nop
 8003464:	bd80      	pop	{r7, pc}

08003466 <EPD_2IN13BC_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void EPD_2IN13BC_Clear(void)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b084      	sub	sp, #16
 800346a:	af00      	add	r7, sp, #0
    UWORD Width = (EPD_2IN13BC_WIDTH % 8 == 0)? (EPD_2IN13BC_WIDTH / 8 ): (EPD_2IN13BC_WIDTH / 8 + 1);
 800346c:	230d      	movs	r3, #13
 800346e:	80fb      	strh	r3, [r7, #6]
    UWORD Height = EPD_2IN13BC_HEIGHT;
 8003470:	23d4      	movs	r3, #212	; 0xd4
 8003472:	80bb      	strh	r3, [r7, #4]
    
    //send black data
    EPD_2IN13BC_SendCommand(0x10);
 8003474:	2010      	movs	r0, #16
 8003476:	f7ff ff5f 	bl	8003338 <EPD_2IN13BC_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 800347a:	2300      	movs	r3, #0
 800347c:	81fb      	strh	r3, [r7, #14]
 800347e:	e00f      	b.n	80034a0 <EPD_2IN13BC_Clear+0x3a>
        for (UWORD i = 0; i < Width; i++) {
 8003480:	2300      	movs	r3, #0
 8003482:	81bb      	strh	r3, [r7, #12]
 8003484:	e005      	b.n	8003492 <EPD_2IN13BC_Clear+0x2c>
            EPD_2IN13BC_SendData(0xFF);
 8003486:	20ff      	movs	r0, #255	; 0xff
 8003488:	f7ff ff76 	bl	8003378 <EPD_2IN13BC_SendData>
        for (UWORD i = 0; i < Width; i++) {
 800348c:	89bb      	ldrh	r3, [r7, #12]
 800348e:	3301      	adds	r3, #1
 8003490:	81bb      	strh	r3, [r7, #12]
 8003492:	89ba      	ldrh	r2, [r7, #12]
 8003494:	88fb      	ldrh	r3, [r7, #6]
 8003496:	429a      	cmp	r2, r3
 8003498:	d3f5      	bcc.n	8003486 <EPD_2IN13BC_Clear+0x20>
    for (UWORD j = 0; j < Height; j++) {
 800349a:	89fb      	ldrh	r3, [r7, #14]
 800349c:	3301      	adds	r3, #1
 800349e:	81fb      	strh	r3, [r7, #14]
 80034a0:	89fa      	ldrh	r2, [r7, #14]
 80034a2:	88bb      	ldrh	r3, [r7, #4]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d3eb      	bcc.n	8003480 <EPD_2IN13BC_Clear+0x1a>
        }
    }
    EPD_2IN13BC_SendCommand(0x92); 
 80034a8:	2092      	movs	r0, #146	; 0x92
 80034aa:	f7ff ff45 	bl	8003338 <EPD_2IN13BC_SendCommand>

    //send red data
    EPD_2IN13BC_SendCommand(0x13);
 80034ae:	2013      	movs	r0, #19
 80034b0:	f7ff ff42 	bl	8003338 <EPD_2IN13BC_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 80034b4:	2300      	movs	r3, #0
 80034b6:	817b      	strh	r3, [r7, #10]
 80034b8:	e00f      	b.n	80034da <EPD_2IN13BC_Clear+0x74>
        for (UWORD i = 0; i < Width; i++) {
 80034ba:	2300      	movs	r3, #0
 80034bc:	813b      	strh	r3, [r7, #8]
 80034be:	e005      	b.n	80034cc <EPD_2IN13BC_Clear+0x66>
            EPD_2IN13BC_SendData(0xFF);
 80034c0:	20ff      	movs	r0, #255	; 0xff
 80034c2:	f7ff ff59 	bl	8003378 <EPD_2IN13BC_SendData>
        for (UWORD i = 0; i < Width; i++) {
 80034c6:	893b      	ldrh	r3, [r7, #8]
 80034c8:	3301      	adds	r3, #1
 80034ca:	813b      	strh	r3, [r7, #8]
 80034cc:	893a      	ldrh	r2, [r7, #8]
 80034ce:	88fb      	ldrh	r3, [r7, #6]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d3f5      	bcc.n	80034c0 <EPD_2IN13BC_Clear+0x5a>
    for (UWORD j = 0; j < Height; j++) {
 80034d4:	897b      	ldrh	r3, [r7, #10]
 80034d6:	3301      	adds	r3, #1
 80034d8:	817b      	strh	r3, [r7, #10]
 80034da:	897a      	ldrh	r2, [r7, #10]
 80034dc:	88bb      	ldrh	r3, [r7, #4]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d3eb      	bcc.n	80034ba <EPD_2IN13BC_Clear+0x54>
        }
    }
    EPD_2IN13BC_SendCommand(0x92); 
 80034e2:	2092      	movs	r0, #146	; 0x92
 80034e4:	f7ff ff28 	bl	8003338 <EPD_2IN13BC_SendCommand>
    
    EPD_2IN13BC_TurnOnDisplay();
 80034e8:	f7ff ff82 	bl	80033f0 <EPD_2IN13BC_TurnOnDisplay>
}
 80034ec:	bf00      	nop
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <EPD_2IN13BC_Display>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void EPD_2IN13BC_Display(const UBYTE *blackimage, const UBYTE *ryimage)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
    UWORD Width, Height;
    Width = (EPD_2IN13BC_WIDTH % 8 == 0)? (EPD_2IN13BC_WIDTH / 8 ): (EPD_2IN13BC_WIDTH / 8 + 1);
 80034fe:	230d      	movs	r3, #13
 8003500:	81fb      	strh	r3, [r7, #14]
    Height = EPD_2IN13BC_HEIGHT;
 8003502:	23d4      	movs	r3, #212	; 0xd4
 8003504:	81bb      	strh	r3, [r7, #12]
    
    EPD_2IN13BC_SendCommand(0x10);
 8003506:	2010      	movs	r0, #16
 8003508:	f7ff ff16 	bl	8003338 <EPD_2IN13BC_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 800350c:	2300      	movs	r3, #0
 800350e:	82fb      	strh	r3, [r7, #22]
 8003510:	e019      	b.n	8003546 <EPD_2IN13BC_Display+0x52>
        for (UWORD i = 0; i < Width; i++) {
 8003512:	2300      	movs	r3, #0
 8003514:	82bb      	strh	r3, [r7, #20]
 8003516:	e00f      	b.n	8003538 <EPD_2IN13BC_Display+0x44>
            EPD_2IN13BC_SendData(blackimage[i + j * Width]);
 8003518:	8aba      	ldrh	r2, [r7, #20]
 800351a:	8afb      	ldrh	r3, [r7, #22]
 800351c:	89f9      	ldrh	r1, [r7, #14]
 800351e:	fb01 f303 	mul.w	r3, r1, r3
 8003522:	4413      	add	r3, r2
 8003524:	461a      	mov	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4413      	add	r3, r2
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff ff23 	bl	8003378 <EPD_2IN13BC_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8003532:	8abb      	ldrh	r3, [r7, #20]
 8003534:	3301      	adds	r3, #1
 8003536:	82bb      	strh	r3, [r7, #20]
 8003538:	8aba      	ldrh	r2, [r7, #20]
 800353a:	89fb      	ldrh	r3, [r7, #14]
 800353c:	429a      	cmp	r2, r3
 800353e:	d3eb      	bcc.n	8003518 <EPD_2IN13BC_Display+0x24>
    for (UWORD j = 0; j < Height; j++) {
 8003540:	8afb      	ldrh	r3, [r7, #22]
 8003542:	3301      	adds	r3, #1
 8003544:	82fb      	strh	r3, [r7, #22]
 8003546:	8afa      	ldrh	r2, [r7, #22]
 8003548:	89bb      	ldrh	r3, [r7, #12]
 800354a:	429a      	cmp	r2, r3
 800354c:	d3e1      	bcc.n	8003512 <EPD_2IN13BC_Display+0x1e>
        }
    }
    EPD_2IN13BC_SendCommand(0x92); 
 800354e:	2092      	movs	r0, #146	; 0x92
 8003550:	f7ff fef2 	bl	8003338 <EPD_2IN13BC_SendCommand>
    
    EPD_2IN13BC_SendCommand(0x13);
 8003554:	2013      	movs	r0, #19
 8003556:	f7ff feef 	bl	8003338 <EPD_2IN13BC_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 800355a:	2300      	movs	r3, #0
 800355c:	827b      	strh	r3, [r7, #18]
 800355e:	e019      	b.n	8003594 <EPD_2IN13BC_Display+0xa0>
        for (UWORD i = 0; i < Width; i++) {
 8003560:	2300      	movs	r3, #0
 8003562:	823b      	strh	r3, [r7, #16]
 8003564:	e00f      	b.n	8003586 <EPD_2IN13BC_Display+0x92>
            EPD_2IN13BC_SendData(ryimage[i + j * Width]);
 8003566:	8a3a      	ldrh	r2, [r7, #16]
 8003568:	8a7b      	ldrh	r3, [r7, #18]
 800356a:	89f9      	ldrh	r1, [r7, #14]
 800356c:	fb01 f303 	mul.w	r3, r1, r3
 8003570:	4413      	add	r3, r2
 8003572:	461a      	mov	r2, r3
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	4413      	add	r3, r2
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff fefc 	bl	8003378 <EPD_2IN13BC_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8003580:	8a3b      	ldrh	r3, [r7, #16]
 8003582:	3301      	adds	r3, #1
 8003584:	823b      	strh	r3, [r7, #16]
 8003586:	8a3a      	ldrh	r2, [r7, #16]
 8003588:	89fb      	ldrh	r3, [r7, #14]
 800358a:	429a      	cmp	r2, r3
 800358c:	d3eb      	bcc.n	8003566 <EPD_2IN13BC_Display+0x72>
    for (UWORD j = 0; j < Height; j++) {
 800358e:	8a7b      	ldrh	r3, [r7, #18]
 8003590:	3301      	adds	r3, #1
 8003592:	827b      	strh	r3, [r7, #18]
 8003594:	8a7a      	ldrh	r2, [r7, #18]
 8003596:	89bb      	ldrh	r3, [r7, #12]
 8003598:	429a      	cmp	r2, r3
 800359a:	d3e1      	bcc.n	8003560 <EPD_2IN13BC_Display+0x6c>
        }
    }
    EPD_2IN13BC_SendCommand(0x92); 
 800359c:	2092      	movs	r0, #146	; 0x92
 800359e:	f7ff fecb 	bl	8003338 <EPD_2IN13BC_SendCommand>
    
    EPD_2IN13BC_TurnOnDisplay();
 80035a2:	f7ff ff25 	bl	80033f0 <EPD_2IN13BC_TurnOnDisplay>
}
 80035a6:	bf00      	nop
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
	...

080035b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80035b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80035b4:	b088      	sub	sp, #32
 80035b6:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80035b8:	f000 ffe4 	bl	8004584 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80035bc:	f000 f8b2 	bl	8003724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80035c0:	f000 fa2c 	bl	8003a1c <MX_GPIO_Init>
  MX_I2S2_Init();
 80035c4:	f000 f960 	bl	8003888 <MX_I2S2_Init>
  MX_I2S3_Init();
 80035c8:	f000 f98c 	bl	80038e4 <MX_I2S3_Init>
  MX_SPI1_Init();
 80035cc:	f000 f9ba 	bl	8003944 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80035d0:	f008 fd12 	bl	800bff8 <MX_USB_HOST_Init>
  MX_SPI4_Init();
 80035d4:	f000 f9ec 	bl	80039b0 <MX_SPI4_Init>
  MX_I2C3_Init();
 80035d8:	f000 f928 	bl	800382c <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  int8_t status[10];
  set_senosr_struct(&gas_sensor, 0, 20);
 80035dc:	2214      	movs	r2, #20
 80035de:	2100      	movs	r1, #0
 80035e0:	4846      	ldr	r0, [pc, #280]	; (80036fc <main+0x14c>)
 80035e2:	f000 fb31 	bl	8003c48 <set_senosr_struct>
  HAL_Delay(100);
 80035e6:	2064      	movs	r0, #100	; 0x64
 80035e8:	f001 f83e 	bl	8004668 <HAL_Delay>

  rslt = bme680_init(&gas_sensor);
 80035ec:	4843      	ldr	r0, [pc, #268]	; (80036fc <main+0x14c>)
 80035ee:	f7fd f9cf 	bl	8000990 <bme680_init>
 80035f2:	4603      	mov	r3, r0
 80035f4:	461a      	mov	r2, r3
 80035f6:	4b42      	ldr	r3, [pc, #264]	; (8003700 <main+0x150>)
 80035f8:	701a      	strb	r2, [r3, #0]
  uint16_t meas_period = 180;
 80035fa:	23b4      	movs	r3, #180	; 0xb4
 80035fc:	807b      	strh	r3, [r7, #2]
  bme680_get_profile_dur(&meas_period, &gas_sensor);
 80035fe:	1cbb      	adds	r3, r7, #2
 8003600:	493e      	ldr	r1, [pc, #248]	; (80036fc <main+0x14c>)
 8003602:	4618      	mov	r0, r3
 8003604:	f7fd fd3a 	bl	800107c <bme680_get_profile_dur>
  HAL_Delay(meas_period);
 8003608:	887b      	ldrh	r3, [r7, #2]
 800360a:	4618      	mov	r0, r3
 800360c:	f001 f82c 	bl	8004668 <HAL_Delay>
  bme680_start(&gas_sensor);
 8003610:	483a      	ldr	r0, [pc, #232]	; (80036fc <main+0x14c>)
 8003612:	f000 fc81 	bl	8003f18 <bme680_start>

   EPD_2in13bc_test();
 8003616:	f7fe fc3f 	bl	8001e98 <EPD_2in13bc_test>
   Paint_Clear(WHITE);
 800361a:	20ff      	movs	r0, #255	; 0xff
 800361c:	f7fe ff56 	bl	80024cc <Paint_Clear>
   Paint_DrawString_EN(5, 20, "*****", &Font8, WHITE, BLACK);
 8003620:	2300      	movs	r3, #0
 8003622:	9301      	str	r3, [sp, #4]
 8003624:	23ff      	movs	r3, #255	; 0xff
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	4b36      	ldr	r3, [pc, #216]	; (8003704 <main+0x154>)
 800362a:	4a37      	ldr	r2, [pc, #220]	; (8003708 <main+0x158>)
 800362c:	2114      	movs	r1, #20
 800362e:	2005      	movs	r0, #5
 8003630:	f7ff fbc8 	bl	8002dc4 <Paint_DrawString_EN>
  {
//	  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
//	  HAL_SPI_Transmit(&hspi4, 0x1C, 1, BUS_TIMEOUT);
//	  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
//	  HAL_Delay(100);
      user_delay_ms(meas_period); /* Delay till the measurement is ready */
 8003634:	887b      	ldrh	r3, [r7, #2]
 8003636:	4618      	mov	r0, r3
 8003638:	f000 fb56 	bl	8003ce8 <user_delay_ms>
      rslt = bme680_get_sensor_data(&gas_sensor_data, &gas_sensor);
 800363c:	492f      	ldr	r1, [pc, #188]	; (80036fc <main+0x14c>)
 800363e:	4833      	ldr	r0, [pc, #204]	; (800370c <main+0x15c>)
 8003640:	f7fd fd82 	bl	8001148 <bme680_get_sensor_data>
 8003644:	4603      	mov	r3, r0
 8003646:	461a      	mov	r2, r3
 8003648:	4b2d      	ldr	r3, [pc, #180]	; (8003700 <main+0x150>)
 800364a:	701a      	strb	r2, [r3, #0]

      printf("T: %.2f degC, P: %.2f hPa, H %.2f %%rH ", gas_sensor_data.temperature / 100.0f, // @suppress("Float formatting support")
 800364c:	4b2f      	ldr	r3, [pc, #188]	; (800370c <main+0x15c>)
 800364e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003652:	ee07 3a90 	vmov	s15, r3
 8003656:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800365a:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8003710 <main+0x160>
 800365e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003662:	ee16 0a90 	vmov	r0, s13
 8003666:	f7fc ff6f 	bl	8000548 <__aeabi_f2d>
 800366a:	4680      	mov	r8, r0
 800366c:	4689      	mov	r9, r1
          gas_sensor_data.pressure / 100.0f, gas_sensor_data.humidity / 1000.0f );
 800366e:	4b27      	ldr	r3, [pc, #156]	; (800370c <main+0x15c>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	ee07 3a90 	vmov	s15, r3
 8003676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800367a:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8003710 <main+0x160>
 800367e:	eec7 6a87 	vdiv.f32	s13, s15, s14
      printf("T: %.2f degC, P: %.2f hPa, H %.2f %%rH ", gas_sensor_data.temperature / 100.0f, // @suppress("Float formatting support")
 8003682:	ee16 0a90 	vmov	r0, s13
 8003686:	f7fc ff5f 	bl	8000548 <__aeabi_f2d>
 800368a:	4604      	mov	r4, r0
 800368c:	460d      	mov	r5, r1
          gas_sensor_data.pressure / 100.0f, gas_sensor_data.humidity / 1000.0f );
 800368e:	4b1f      	ldr	r3, [pc, #124]	; (800370c <main+0x15c>)
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	ee07 3a90 	vmov	s15, r3
 8003696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800369a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003714 <main+0x164>
 800369e:	eec7 6a87 	vdiv.f32	s13, s15, s14
      printf("T: %.2f degC, P: %.2f hPa, H %.2f %%rH ", gas_sensor_data.temperature / 100.0f, // @suppress("Float formatting support")
 80036a2:	ee16 0a90 	vmov	r0, s13
 80036a6:	f7fc ff4f 	bl	8000548 <__aeabi_f2d>
 80036aa:	4602      	mov	r2, r0
 80036ac:	460b      	mov	r3, r1
 80036ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80036b2:	e9cd 4500 	strd	r4, r5, [sp]
 80036b6:	4642      	mov	r2, r8
 80036b8:	464b      	mov	r3, r9
 80036ba:	4817      	ldr	r0, [pc, #92]	; (8003718 <main+0x168>)
 80036bc:	f009 f89e 	bl	800c7fc <iprintf>
      /* Avoid using measurements from an unstable heating setup */
      if(gas_sensor_data.status & BME680_GASM_VALID_MSK)
 80036c0:	4b12      	ldr	r3, [pc, #72]	; (800370c <main+0x15c>)
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	f003 0320 	and.w	r3, r3, #32
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d005      	beq.n	80036d8 <main+0x128>
          printf(", G: %d ohms", gas_sensor_data.gas_resistance);
 80036cc:	4b0f      	ldr	r3, [pc, #60]	; (800370c <main+0x15c>)
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	4619      	mov	r1, r3
 80036d2:	4812      	ldr	r0, [pc, #72]	; (800371c <main+0x16c>)
 80036d4:	f009 f892 	bl	800c7fc <iprintf>

      printf("\r\n");
 80036d8:	4811      	ldr	r0, [pc, #68]	; (8003720 <main+0x170>)
 80036da:	f009 f915 	bl	800c908 <puts>

      /* Trigger the next measurement if you would like to read data out continuously */
      if (gas_sensor.power_mode == BME680_FORCED_MODE) {
 80036de:	4b07      	ldr	r3, [pc, #28]	; (80036fc <main+0x14c>)
 80036e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d106      	bne.n	80036f6 <main+0x146>
          rslt = bme680_set_sensor_mode(&gas_sensor);
 80036e8:	4804      	ldr	r0, [pc, #16]	; (80036fc <main+0x14c>)
 80036ea:	f7fd fc63 	bl	8000fb4 <bme680_set_sensor_mode>
 80036ee:	4603      	mov	r3, r0
 80036f0:	461a      	mov	r2, r3
 80036f2:	4b03      	ldr	r3, [pc, #12]	; (8003700 <main+0x150>)
 80036f4:	701a      	strb	r2, [r3, #0]
//	  rslt = bme680_self_test(&gas_sensor);
//	  bme680_get_sensor_settings(BME680_REG_FILTER_INDEX, &gas_sensor);
//
//	  HAL_Delay(1000);
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80036f6:	f008 fca5 	bl	800c044 <MX_USB_HOST_Process>
      user_delay_ms(meas_period); /* Delay till the measurement is ready */
 80036fa:	e79b      	b.n	8003634 <main+0x84>
 80036fc:	2000036c 	.word	0x2000036c
 8003700:	200000d8 	.word	0x200000d8
 8003704:	20000024 	.word	0x20000024
 8003708:	0800db94 	.word	0x0800db94
 800370c:	20000358 	.word	0x20000358
 8003710:	42c80000 	.word	0x42c80000
 8003714:	447a0000 	.word	0x447a0000
 8003718:	0800db9c 	.word	0x0800db9c
 800371c:	0800dbc4 	.word	0x0800dbc4
 8003720:	0800dbd4 	.word	0x0800dbd4

08003724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b09a      	sub	sp, #104	; 0x68
 8003728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800372a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800372e:	2230      	movs	r2, #48	; 0x30
 8003730:	2100      	movs	r1, #0
 8003732:	4618      	mov	r0, r3
 8003734:	f008 ffb0 	bl	800c698 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	605a      	str	r2, [r3, #4]
 8003742:	609a      	str	r2, [r3, #8]
 8003744:	60da      	str	r2, [r3, #12]
 8003746:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003748:	f107 030c 	add.w	r3, r7, #12
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	605a      	str	r2, [r3, #4]
 8003752:	609a      	str	r2, [r3, #8]
 8003754:	60da      	str	r2, [r3, #12]
 8003756:	611a      	str	r2, [r3, #16]
 8003758:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800375a:	2300      	movs	r3, #0
 800375c:	60bb      	str	r3, [r7, #8]
 800375e:	4b31      	ldr	r3, [pc, #196]	; (8003824 <SystemClock_Config+0x100>)
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	4a30      	ldr	r2, [pc, #192]	; (8003824 <SystemClock_Config+0x100>)
 8003764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003768:	6413      	str	r3, [r2, #64]	; 0x40
 800376a:	4b2e      	ldr	r3, [pc, #184]	; (8003824 <SystemClock_Config+0x100>)
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003772:	60bb      	str	r3, [r7, #8]
 8003774:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003776:	2300      	movs	r3, #0
 8003778:	607b      	str	r3, [r7, #4]
 800377a:	4b2b      	ldr	r3, [pc, #172]	; (8003828 <SystemClock_Config+0x104>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a2a      	ldr	r2, [pc, #168]	; (8003828 <SystemClock_Config+0x104>)
 8003780:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003784:	6013      	str	r3, [r2, #0]
 8003786:	4b28      	ldr	r3, [pc, #160]	; (8003828 <SystemClock_Config+0x104>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800378e:	607b      	str	r3, [r7, #4]
 8003790:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003792:	2301      	movs	r3, #1
 8003794:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003796:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800379a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800379c:	2302      	movs	r3, #2
 800379e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80037a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80037a4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 80037a6:	2304      	movs	r3, #4
 80037a8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 80037aa:	23c0      	movs	r3, #192	; 0xc0
 80037ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80037ae:	2304      	movs	r3, #4
 80037b0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80037b2:	2308      	movs	r3, #8
 80037b4:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80037ba:	4618      	mov	r0, r3
 80037bc:	f004 fbda 	bl	8007f74 <HAL_RCC_OscConfig>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80037c6:	f000 fbe5 	bl	8003f94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037ca:	230f      	movs	r3, #15
 80037cc:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037ce:	2302      	movs	r3, #2
 80037d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037d2:	2300      	movs	r3, #0
 80037d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80037d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80037da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80037dc:	2300      	movs	r3, #0
 80037de:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80037e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037e4:	2103      	movs	r1, #3
 80037e6:	4618      	mov	r0, r3
 80037e8:	f004 fe3c 	bl	8008464 <HAL_RCC_ClockConfig>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80037f2:	f000 fbcf 	bl	8003f94 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80037f6:	2301      	movs	r3, #1
 80037f8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80037fa:	23c8      	movs	r3, #200	; 0xc8
 80037fc:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80037fe:	2305      	movs	r3, #5
 8003800:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8003802:	2302      	movs	r3, #2
 8003804:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003806:	f107 030c 	add.w	r3, r7, #12
 800380a:	4618      	mov	r0, r3
 800380c:	f005 f812 	bl	8008834 <HAL_RCCEx_PeriphCLKConfig>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8003816:	f000 fbbd 	bl	8003f94 <Error_Handler>
  }
}
 800381a:	bf00      	nop
 800381c:	3768      	adds	r7, #104	; 0x68
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	40023800 	.word	0x40023800
 8003828:	40007000 	.word	0x40007000

0800382c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003830:	4b12      	ldr	r3, [pc, #72]	; (800387c <MX_I2C3_Init+0x50>)
 8003832:	4a13      	ldr	r2, [pc, #76]	; (8003880 <MX_I2C3_Init+0x54>)
 8003834:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8003836:	4b11      	ldr	r3, [pc, #68]	; (800387c <MX_I2C3_Init+0x50>)
 8003838:	4a12      	ldr	r2, [pc, #72]	; (8003884 <MX_I2C3_Init+0x58>)
 800383a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800383c:	4b0f      	ldr	r3, [pc, #60]	; (800387c <MX_I2C3_Init+0x50>)
 800383e:	2200      	movs	r2, #0
 8003840:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003842:	4b0e      	ldr	r3, [pc, #56]	; (800387c <MX_I2C3_Init+0x50>)
 8003844:	2200      	movs	r2, #0
 8003846:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003848:	4b0c      	ldr	r3, [pc, #48]	; (800387c <MX_I2C3_Init+0x50>)
 800384a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800384e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003850:	4b0a      	ldr	r3, [pc, #40]	; (800387c <MX_I2C3_Init+0x50>)
 8003852:	2200      	movs	r2, #0
 8003854:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003856:	4b09      	ldr	r3, [pc, #36]	; (800387c <MX_I2C3_Init+0x50>)
 8003858:	2200      	movs	r2, #0
 800385a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800385c:	4b07      	ldr	r3, [pc, #28]	; (800387c <MX_I2C3_Init+0x50>)
 800385e:	2200      	movs	r2, #0
 8003860:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003862:	4b06      	ldr	r3, [pc, #24]	; (800387c <MX_I2C3_Init+0x50>)
 8003864:	2200      	movs	r2, #0
 8003866:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003868:	4804      	ldr	r0, [pc, #16]	; (800387c <MX_I2C3_Init+0x50>)
 800386a:	f002 ff4d 	bl	8006708 <HAL_I2C_Init>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003874:	f000 fb8e 	bl	8003f94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003878:	bf00      	nop
 800387a:	bd80      	pop	{r7, pc}
 800387c:	20000104 	.word	0x20000104
 8003880:	40005c00 	.word	0x40005c00
 8003884:	000186a0 	.word	0x000186a0

08003888 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800388c:	4b12      	ldr	r3, [pc, #72]	; (80038d8 <MX_I2S2_Init+0x50>)
 800388e:	4a13      	ldr	r2, [pc, #76]	; (80038dc <MX_I2S2_Init+0x54>)
 8003890:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8003892:	4b11      	ldr	r3, [pc, #68]	; (80038d8 <MX_I2S2_Init+0x50>)
 8003894:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003898:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800389a:	4b0f      	ldr	r3, [pc, #60]	; (80038d8 <MX_I2S2_Init+0x50>)
 800389c:	2200      	movs	r2, #0
 800389e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80038a0:	4b0d      	ldr	r3, [pc, #52]	; (80038d8 <MX_I2S2_Init+0x50>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80038a6:	4b0c      	ldr	r3, [pc, #48]	; (80038d8 <MX_I2S2_Init+0x50>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80038ac:	4b0a      	ldr	r3, [pc, #40]	; (80038d8 <MX_I2S2_Init+0x50>)
 80038ae:	4a0c      	ldr	r2, [pc, #48]	; (80038e0 <MX_I2S2_Init+0x58>)
 80038b0:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80038b2:	4b09      	ldr	r3, [pc, #36]	; (80038d8 <MX_I2S2_Init+0x50>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80038b8:	4b07      	ldr	r3, [pc, #28]	; (80038d8 <MX_I2S2_Init+0x50>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80038be:	4b06      	ldr	r3, [pc, #24]	; (80038d8 <MX_I2S2_Init+0x50>)
 80038c0:	2201      	movs	r2, #1
 80038c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80038c4:	4804      	ldr	r0, [pc, #16]	; (80038d8 <MX_I2S2_Init+0x50>)
 80038c6:	f003 feb5 	bl	8007634 <HAL_I2S_Init>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80038d0:	f000 fb60 	bl	8003f94 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80038d4:	bf00      	nop
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	20000674 	.word	0x20000674
 80038dc:	40003800 	.word	0x40003800
 80038e0:	00017700 	.word	0x00017700

080038e4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80038e8:	4b13      	ldr	r3, [pc, #76]	; (8003938 <MX_I2S3_Init+0x54>)
 80038ea:	4a14      	ldr	r2, [pc, #80]	; (800393c <MX_I2S3_Init+0x58>)
 80038ec:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80038ee:	4b12      	ldr	r3, [pc, #72]	; (8003938 <MX_I2S3_Init+0x54>)
 80038f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038f4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80038f6:	4b10      	ldr	r3, [pc, #64]	; (8003938 <MX_I2S3_Init+0x54>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80038fc:	4b0e      	ldr	r3, [pc, #56]	; (8003938 <MX_I2S3_Init+0x54>)
 80038fe:	2200      	movs	r2, #0
 8003900:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8003902:	4b0d      	ldr	r3, [pc, #52]	; (8003938 <MX_I2S3_Init+0x54>)
 8003904:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003908:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800390a:	4b0b      	ldr	r3, [pc, #44]	; (8003938 <MX_I2S3_Init+0x54>)
 800390c:	4a0c      	ldr	r2, [pc, #48]	; (8003940 <MX_I2S3_Init+0x5c>)
 800390e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8003910:	4b09      	ldr	r3, [pc, #36]	; (8003938 <MX_I2S3_Init+0x54>)
 8003912:	2200      	movs	r2, #0
 8003914:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8003916:	4b08      	ldr	r3, [pc, #32]	; (8003938 <MX_I2S3_Init+0x54>)
 8003918:	2200      	movs	r2, #0
 800391a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800391c:	4b06      	ldr	r3, [pc, #24]	; (8003938 <MX_I2S3_Init+0x54>)
 800391e:	2200      	movs	r2, #0
 8003920:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8003922:	4805      	ldr	r0, [pc, #20]	; (8003938 <MX_I2S3_Init+0x54>)
 8003924:	f003 fe86 	bl	8007634 <HAL_I2S_Init>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800392e:	f000 fb31 	bl	8003f94 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8003932:	bf00      	nop
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	200006bc 	.word	0x200006bc
 800393c:	40003c00 	.word	0x40003c00
 8003940:	00017700 	.word	0x00017700

08003944 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003948:	4b17      	ldr	r3, [pc, #92]	; (80039a8 <MX_SPI1_Init+0x64>)
 800394a:	4a18      	ldr	r2, [pc, #96]	; (80039ac <MX_SPI1_Init+0x68>)
 800394c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800394e:	4b16      	ldr	r3, [pc, #88]	; (80039a8 <MX_SPI1_Init+0x64>)
 8003950:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003954:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003956:	4b14      	ldr	r3, [pc, #80]	; (80039a8 <MX_SPI1_Init+0x64>)
 8003958:	2200      	movs	r2, #0
 800395a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800395c:	4b12      	ldr	r3, [pc, #72]	; (80039a8 <MX_SPI1_Init+0x64>)
 800395e:	2200      	movs	r2, #0
 8003960:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003962:	4b11      	ldr	r3, [pc, #68]	; (80039a8 <MX_SPI1_Init+0x64>)
 8003964:	2200      	movs	r2, #0
 8003966:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003968:	4b0f      	ldr	r3, [pc, #60]	; (80039a8 <MX_SPI1_Init+0x64>)
 800396a:	2200      	movs	r2, #0
 800396c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800396e:	4b0e      	ldr	r3, [pc, #56]	; (80039a8 <MX_SPI1_Init+0x64>)
 8003970:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003974:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003976:	4b0c      	ldr	r3, [pc, #48]	; (80039a8 <MX_SPI1_Init+0x64>)
 8003978:	2200      	movs	r2, #0
 800397a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800397c:	4b0a      	ldr	r3, [pc, #40]	; (80039a8 <MX_SPI1_Init+0x64>)
 800397e:	2200      	movs	r2, #0
 8003980:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003982:	4b09      	ldr	r3, [pc, #36]	; (80039a8 <MX_SPI1_Init+0x64>)
 8003984:	2200      	movs	r2, #0
 8003986:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003988:	4b07      	ldr	r3, [pc, #28]	; (80039a8 <MX_SPI1_Init+0x64>)
 800398a:	2200      	movs	r2, #0
 800398c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800398e:	4b06      	ldr	r3, [pc, #24]	; (80039a8 <MX_SPI1_Init+0x64>)
 8003990:	220a      	movs	r2, #10
 8003992:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003994:	4804      	ldr	r0, [pc, #16]	; (80039a8 <MX_SPI1_Init+0x64>)
 8003996:	f005 f89d 	bl	8008ad4 <HAL_SPI_Init>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80039a0:	f000 faf8 	bl	8003f94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80039a4:	bf00      	nop
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	2000061c 	.word	0x2000061c
 80039ac:	40013000 	.word	0x40013000

080039b0 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80039b4:	4b17      	ldr	r3, [pc, #92]	; (8003a14 <MX_SPI4_Init+0x64>)
 80039b6:	4a18      	ldr	r2, [pc, #96]	; (8003a18 <MX_SPI4_Init+0x68>)
 80039b8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80039ba:	4b16      	ldr	r3, [pc, #88]	; (8003a14 <MX_SPI4_Init+0x64>)
 80039bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80039c0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80039c2:	4b14      	ldr	r3, [pc, #80]	; (8003a14 <MX_SPI4_Init+0x64>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80039c8:	4b12      	ldr	r3, [pc, #72]	; (8003a14 <MX_SPI4_Init+0x64>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80039ce:	4b11      	ldr	r3, [pc, #68]	; (8003a14 <MX_SPI4_Init+0x64>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80039d4:	4b0f      	ldr	r3, [pc, #60]	; (8003a14 <MX_SPI4_Init+0x64>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80039da:	4b0e      	ldr	r3, [pc, #56]	; (8003a14 <MX_SPI4_Init+0x64>)
 80039dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039e0:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039e2:	4b0c      	ldr	r3, [pc, #48]	; (8003a14 <MX_SPI4_Init+0x64>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80039e8:	4b0a      	ldr	r3, [pc, #40]	; (8003a14 <MX_SPI4_Init+0x64>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80039ee:	4b09      	ldr	r3, [pc, #36]	; (8003a14 <MX_SPI4_Init+0x64>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039f4:	4b07      	ldr	r3, [pc, #28]	; (8003a14 <MX_SPI4_Init+0x64>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 80039fa:	4b06      	ldr	r3, [pc, #24]	; (8003a14 <MX_SPI4_Init+0x64>)
 80039fc:	220a      	movs	r2, #10
 80039fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8003a00:	4804      	ldr	r0, [pc, #16]	; (8003a14 <MX_SPI4_Init+0x64>)
 8003a02:	f005 f867 	bl	8008ad4 <HAL_SPI_Init>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8003a0c:	f000 fac2 	bl	8003f94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8003a10:	bf00      	nop
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	200003c4 	.word	0x200003c4
 8003a18:	40013400 	.word	0x40013400

08003a1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b08c      	sub	sp, #48	; 0x30
 8003a20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a22:	f107 031c 	add.w	r3, r7, #28
 8003a26:	2200      	movs	r2, #0
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	605a      	str	r2, [r3, #4]
 8003a2c:	609a      	str	r2, [r3, #8]
 8003a2e:	60da      	str	r2, [r3, #12]
 8003a30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a32:	2300      	movs	r3, #0
 8003a34:	61bb      	str	r3, [r7, #24]
 8003a36:	4b7d      	ldr	r3, [pc, #500]	; (8003c2c <MX_GPIO_Init+0x210>)
 8003a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3a:	4a7c      	ldr	r2, [pc, #496]	; (8003c2c <MX_GPIO_Init+0x210>)
 8003a3c:	f043 0310 	orr.w	r3, r3, #16
 8003a40:	6313      	str	r3, [r2, #48]	; 0x30
 8003a42:	4b7a      	ldr	r3, [pc, #488]	; (8003c2c <MX_GPIO_Init+0x210>)
 8003a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a46:	f003 0310 	and.w	r3, r3, #16
 8003a4a:	61bb      	str	r3, [r7, #24]
 8003a4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a4e:	2300      	movs	r3, #0
 8003a50:	617b      	str	r3, [r7, #20]
 8003a52:	4b76      	ldr	r3, [pc, #472]	; (8003c2c <MX_GPIO_Init+0x210>)
 8003a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a56:	4a75      	ldr	r2, [pc, #468]	; (8003c2c <MX_GPIO_Init+0x210>)
 8003a58:	f043 0304 	orr.w	r3, r3, #4
 8003a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a5e:	4b73      	ldr	r3, [pc, #460]	; (8003c2c <MX_GPIO_Init+0x210>)
 8003a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a62:	f003 0304 	and.w	r3, r3, #4
 8003a66:	617b      	str	r3, [r7, #20]
 8003a68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	613b      	str	r3, [r7, #16]
 8003a6e:	4b6f      	ldr	r3, [pc, #444]	; (8003c2c <MX_GPIO_Init+0x210>)
 8003a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a72:	4a6e      	ldr	r2, [pc, #440]	; (8003c2c <MX_GPIO_Init+0x210>)
 8003a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a78:	6313      	str	r3, [r2, #48]	; 0x30
 8003a7a:	4b6c      	ldr	r3, [pc, #432]	; (8003c2c <MX_GPIO_Init+0x210>)
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a82:	613b      	str	r3, [r7, #16]
 8003a84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a86:	2300      	movs	r3, #0
 8003a88:	60fb      	str	r3, [r7, #12]
 8003a8a:	4b68      	ldr	r3, [pc, #416]	; (8003c2c <MX_GPIO_Init+0x210>)
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8e:	4a67      	ldr	r2, [pc, #412]	; (8003c2c <MX_GPIO_Init+0x210>)
 8003a90:	f043 0301 	orr.w	r3, r3, #1
 8003a94:	6313      	str	r3, [r2, #48]	; 0x30
 8003a96:	4b65      	ldr	r3, [pc, #404]	; (8003c2c <MX_GPIO_Init+0x210>)
 8003a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	60bb      	str	r3, [r7, #8]
 8003aa6:	4b61      	ldr	r3, [pc, #388]	; (8003c2c <MX_GPIO_Init+0x210>)
 8003aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aaa:	4a60      	ldr	r2, [pc, #384]	; (8003c2c <MX_GPIO_Init+0x210>)
 8003aac:	f043 0302 	orr.w	r3, r3, #2
 8003ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ab2:	4b5e      	ldr	r3, [pc, #376]	; (8003c2c <MX_GPIO_Init+0x210>)
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	60bb      	str	r3, [r7, #8]
 8003abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003abe:	2300      	movs	r3, #0
 8003ac0:	607b      	str	r3, [r7, #4]
 8003ac2:	4b5a      	ldr	r3, [pc, #360]	; (8003c2c <MX_GPIO_Init+0x210>)
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac6:	4a59      	ldr	r2, [pc, #356]	; (8003c2c <MX_GPIO_Init+0x210>)
 8003ac8:	f043 0308 	orr.w	r3, r3, #8
 8003acc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ace:	4b57      	ldr	r3, [pc, #348]	; (8003c2c <MX_GPIO_Init+0x210>)
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad2:	f003 0308 	and.w	r3, r3, #8
 8003ad6:	607b      	str	r3, [r7, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|DataCommand_Pin|RST_Pin, GPIO_PIN_RESET);
 8003ada:	2200      	movs	r2, #0
 8003adc:	f44f 7122 	mov.w	r1, #648	; 0x288
 8003ae0:	4853      	ldr	r0, [pc, #332]	; (8003c30 <MX_GPIO_Init+0x214>)
 8003ae2:	f001 f893 	bl	8004c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	2101      	movs	r1, #1
 8003aea:	4852      	ldr	r0, [pc, #328]	; (8003c34 <MX_GPIO_Init+0x218>)
 8003aec:	f001 f88e 	bl	8004c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8003af0:	2200      	movs	r2, #0
 8003af2:	2104      	movs	r1, #4
 8003af4:	4850      	ldr	r0, [pc, #320]	; (8003c38 <MX_GPIO_Init+0x21c>)
 8003af6:	f001 f889 	bl	8004c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8003afa:	2200      	movs	r2, #0
 8003afc:	2104      	movs	r1, #4
 8003afe:	484f      	ldr	r0, [pc, #316]	; (8003c3c <MX_GPIO_Init+0x220>)
 8003b00:	f001 f884 	bl	8004c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8003b04:	2200      	movs	r2, #0
 8003b06:	f24f 0110 	movw	r1, #61456	; 0xf010
 8003b0a:	484d      	ldr	r0, [pc, #308]	; (8003c40 <MX_GPIO_Init+0x224>)
 8003b0c:	f001 f87e 	bl	8004c0c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DATA_Ready_Pin BUSY_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin|BUSY_Pin;
 8003b10:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b16:	2300      	movs	r3, #0
 8003b18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b1e:	f107 031c 	add.w	r3, r7, #28
 8003b22:	4619      	mov	r1, r3
 8003b24:	4842      	ldr	r0, [pc, #264]	; (8003c30 <MX_GPIO_Init+0x214>)
 8003b26:	f000 fed5 	bl	80048d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin DataCommand_Pin RST_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|DataCommand_Pin|RST_Pin;
 8003b2a:	f44f 7322 	mov.w	r3, #648	; 0x288
 8003b2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b30:	2301      	movs	r3, #1
 8003b32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b34:	2300      	movs	r3, #0
 8003b36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b3c:	f107 031c 	add.w	r3, r7, #28
 8003b40:	4619      	mov	r1, r3
 8003b42:	483b      	ldr	r0, [pc, #236]	; (8003c30 <MX_GPIO_Init+0x214>)
 8003b44:	f000 fec6 	bl	80048d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8003b48:	2332      	movs	r3, #50	; 0x32
 8003b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003b4c:	4b3d      	ldr	r3, [pc, #244]	; (8003c44 <MX_GPIO_Init+0x228>)
 8003b4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b50:	2300      	movs	r3, #0
 8003b52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b54:	f107 031c 	add.w	r3, r7, #28
 8003b58:	4619      	mov	r1, r3
 8003b5a:	4835      	ldr	r0, [pc, #212]	; (8003c30 <MX_GPIO_Init+0x214>)
 8003b5c:	f000 feba 	bl	80048d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8003b60:	2301      	movs	r3, #1
 8003b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b64:	2301      	movs	r3, #1
 8003b66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003b70:	f107 031c 	add.w	r3, r7, #28
 8003b74:	4619      	mov	r1, r3
 8003b76:	482f      	ldr	r0, [pc, #188]	; (8003c34 <MX_GPIO_Init+0x218>)
 8003b78:	f000 feac 	bl	80048d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003b80:	4b30      	ldr	r3, [pc, #192]	; (8003c44 <MX_GPIO_Init+0x228>)
 8003b82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b84:	2300      	movs	r3, #0
 8003b86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b88:	f107 031c 	add.w	r3, r7, #28
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	482a      	ldr	r0, [pc, #168]	; (8003c38 <MX_GPIO_Init+0x21c>)
 8003b90:	f000 fea0 	bl	80048d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8003b94:	2304      	movs	r3, #4
 8003b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8003ba4:	f107 031c 	add.w	r3, r7, #28
 8003ba8:	4619      	mov	r1, r3
 8003baa:	4823      	ldr	r0, [pc, #140]	; (8003c38 <MX_GPIO_Init+0x21c>)
 8003bac:	f000 fe92 	bl	80048d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8003bb0:	2304      	movs	r3, #4
 8003bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8003bc0:	f107 031c 	add.w	r3, r7, #28
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	481d      	ldr	r0, [pc, #116]	; (8003c3c <MX_GPIO_Init+0x220>)
 8003bc8:	f000 fe84 	bl	80048d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8003bcc:	f24f 0310 	movw	r3, #61456	; 0xf010
 8003bd0:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003bde:	f107 031c 	add.w	r3, r7, #28
 8003be2:	4619      	mov	r1, r3
 8003be4:	4816      	ldr	r0, [pc, #88]	; (8003c40 <MX_GPIO_Init+0x224>)
 8003be6:	f000 fe75 	bl	80048d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8003bea:	2320      	movs	r3, #32
 8003bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003bf6:	f107 031c 	add.w	r3, r7, #28
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	4810      	ldr	r0, [pc, #64]	; (8003c40 <MX_GPIO_Init+0x224>)
 8003bfe:	f000 fe69 	bl	80048d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8003c02:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c08:	2312      	movs	r3, #18
 8003c0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c10:	2300      	movs	r3, #0
 8003c12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003c14:	2304      	movs	r3, #4
 8003c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c18:	f107 031c 	add.w	r3, r7, #28
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4807      	ldr	r0, [pc, #28]	; (8003c3c <MX_GPIO_Init+0x220>)
 8003c20:	f000 fe58 	bl	80048d4 <HAL_GPIO_Init>

}
 8003c24:	bf00      	nop
 8003c26:	3730      	adds	r7, #48	; 0x30
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	40021000 	.word	0x40021000
 8003c34:	40020800 	.word	0x40020800
 8003c38:	40020000 	.word	0x40020000
 8003c3c:	40020400 	.word	0x40020400
 8003c40:	40020c00 	.word	0x40020c00
 8003c44:	10120000 	.word	0x10120000

08003c48 <set_senosr_struct>:
void set_senosr_struct(struct bme680_dev *gas_sensor, uint8_t type, uint8_t amb_temp)
/*
 * @param type: 1 for SPI, 0 for I2C
 *
 */
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	460b      	mov	r3, r1
 8003c52:	70fb      	strb	r3, [r7, #3]
 8003c54:	4613      	mov	r3, r2
 8003c56:	70bb      	strb	r3, [r7, #2]
	if(type == 1)
 8003c58:	78fb      	ldrb	r3, [r7, #3]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d118      	bne.n	8003c90 <set_senosr_struct+0x48>
	{
		HAL_GPIO_WritePin(GPIOA, SPI_CS_Pin, GPIO_PIN_RESET);
 8003c5e:	2200      	movs	r2, #0
 8003c60:	2104      	movs	r1, #4
 8003c62:	481b      	ldr	r0, [pc, #108]	; (8003cd0 <set_senosr_struct+0x88>)
 8003c64:	f000 ffd2 	bl	8004c0c <HAL_GPIO_WritePin>
		gas_sensor->dev_id = 0;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	705a      	strb	r2, [r3, #1]
		gas_sensor->intf = BME680_SPI_INTF;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	709a      	strb	r2, [r3, #2]
		gas_sensor->read = user_spi_read;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a17      	ldr	r2, [pc, #92]	; (8003cd4 <set_senosr_struct+0x8c>)
 8003c78:	649a      	str	r2, [r3, #72]	; 0x48
		gas_sensor->write = user_spi_write;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a16      	ldr	r2, [pc, #88]	; (8003cd8 <set_senosr_struct+0x90>)
 8003c7e:	64da      	str	r2, [r3, #76]	; 0x4c
		gas_sensor->delay_ms = user_delay_ms;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a16      	ldr	r2, [pc, #88]	; (8003cdc <set_senosr_struct+0x94>)
 8003c84:	651a      	str	r2, [r3, #80]	; 0x50
		gas_sensor->amb_temp = amb_temp;
 8003c86:	f997 2002 	ldrsb.w	r2, [r7, #2]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	711a      	strb	r2, [r3, #4]
		gas_sensor->read = user_i2c_read;
		gas_sensor->write = user_i2c_write;
		gas_sensor->delay_ms = user_delay_ms;
		gas_sensor->amb_temp = amb_temp;
	}
}
 8003c8e:	e01a      	b.n	8003cc6 <set_senosr_struct+0x7e>
	else if(type == 0)
 8003c90:	78fb      	ldrb	r3, [r7, #3]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d117      	bne.n	8003cc6 <set_senosr_struct+0x7e>
		HAL_GPIO_WritePin(GPIOA, SPI_CS_Pin, GPIO_PIN_RESET);
 8003c96:	2200      	movs	r2, #0
 8003c98:	2104      	movs	r1, #4
 8003c9a:	480d      	ldr	r0, [pc, #52]	; (8003cd0 <set_senosr_struct+0x88>)
 8003c9c:	f000 ffb6 	bl	8004c0c <HAL_GPIO_WritePin>
		gas_sensor->dev_id = BME680_I2C_ADDR_PRIMARY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2276      	movs	r2, #118	; 0x76
 8003ca4:	705a      	strb	r2, [r3, #1]
		gas_sensor->intf = BME680_I2C_INTF;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	709a      	strb	r2, [r3, #2]
		gas_sensor->read = user_i2c_read;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a0c      	ldr	r2, [pc, #48]	; (8003ce0 <set_senosr_struct+0x98>)
 8003cb0:	649a      	str	r2, [r3, #72]	; 0x48
		gas_sensor->write = user_i2c_write;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a0b      	ldr	r2, [pc, #44]	; (8003ce4 <set_senosr_struct+0x9c>)
 8003cb6:	64da      	str	r2, [r3, #76]	; 0x4c
		gas_sensor->delay_ms = user_delay_ms;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a08      	ldr	r2, [pc, #32]	; (8003cdc <set_senosr_struct+0x94>)
 8003cbc:	651a      	str	r2, [r3, #80]	; 0x50
		gas_sensor->amb_temp = amb_temp;
 8003cbe:	f997 2002 	ldrsb.w	r2, [r7, #2]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	711a      	strb	r2, [r3, #4]
}
 8003cc6:	bf00      	nop
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	40020000 	.word	0x40020000
 8003cd4:	08003d01 	.word	0x08003d01
 8003cd8:	08003d91 	.word	0x08003d91
 8003cdc:	08003ce9 	.word	0x08003ce9
 8003ce0:	08003e15 	.word	0x08003e15
 8003ce4:	08003ea5 	.word	0x08003ea5

08003ce8 <user_delay_ms>:

void user_delay_ms(uint32_t period)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
    /*
     * Return control or wait,
     * for a period amount of milliseconds
     */
	HAL_Delay(period);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 fcb9 	bl	8004668 <HAL_Delay>
}
 8003cf6:	bf00      	nop
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
	...

08003d00 <user_spi_read>:

int8_t user_spi_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af02      	add	r7, sp, #8
 8003d06:	603a      	str	r2, [r7, #0]
 8003d08:	461a      	mov	r2, r3
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	71fb      	strb	r3, [r7, #7]
 8003d0e:	460b      	mov	r3, r1
 8003d10:	71bb      	strb	r3, [r7, #6]
 8003d12:	4613      	mov	r3, r2
 8003d14:	80bb      	strh	r3, [r7, #4]
    int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
 8003d16:	2300      	movs	r3, #0
 8003d18:	73fb      	strb	r3, [r7, #15]
     * | (don't care)   | (reg_data[len - 1]) | LOW         |
     * | (don't care)   | (don't care)        | HIGH        |
     * |----------------+---------------------|-------------|
     */

    GTXBuffer[0] = reg_addr | 0x80;
 8003d1a:	79bb      	ldrb	r3, [r7, #6]
 8003d1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	4b16      	ldr	r3, [pc, #88]	; (8003d7c <user_spi_read+0x7c>)
 8003d24:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8003d26:	2200      	movs	r2, #0
 8003d28:	2104      	movs	r1, #4
 8003d2a:	4815      	ldr	r0, [pc, #84]	; (8003d80 <user_spi_read+0x80>)
 8003d2c:	f000 ff6e 	bl	8004c0c <HAL_GPIO_WritePin>
    rslt = HAL_SPI_TransmitReceive(&hspi4, GTXBuffer, GRXBuffer, len+1, 1000);
 8003d30:	88bb      	ldrh	r3, [r7, #4]
 8003d32:	3301      	adds	r3, #1
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d3a:	9200      	str	r2, [sp, #0]
 8003d3c:	4a11      	ldr	r2, [pc, #68]	; (8003d84 <user_spi_read+0x84>)
 8003d3e:	490f      	ldr	r1, [pc, #60]	; (8003d7c <user_spi_read+0x7c>)
 8003d40:	4811      	ldr	r0, [pc, #68]	; (8003d88 <user_spi_read+0x88>)
 8003d42:	f005 f88c 	bl	8008e5e <HAL_SPI_TransmitReceive>
 8003d46:	4603      	mov	r3, r0
 8003d48:	73fb      	strb	r3, [r7, #15]
    while(hspi4.State == HAL_SPI_STATE_BUSY);
 8003d4a:	bf00      	nop
 8003d4c:	4b0e      	ldr	r3, [pc, #56]	; (8003d88 <user_spi_read+0x88>)
 8003d4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d0f9      	beq.n	8003d4c <user_spi_read+0x4c>
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8003d58:	2201      	movs	r2, #1
 8003d5a:	2104      	movs	r1, #4
 8003d5c:	4808      	ldr	r0, [pc, #32]	; (8003d80 <user_spi_read+0x80>)
 8003d5e:	f000 ff55 	bl	8004c0c <HAL_GPIO_WritePin>
    memcpy(reg_data, GRXBuffer+1, len);
 8003d62:	490a      	ldr	r1, [pc, #40]	; (8003d8c <user_spi_read+0x8c>)
 8003d64:	88bb      	ldrh	r3, [r7, #4]
 8003d66:	461a      	mov	r2, r3
 8003d68:	6838      	ldr	r0, [r7, #0]
 8003d6a:	f008 fc87 	bl	800c67c <memcpy>
    return rslt;
 8003d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	2000041c 	.word	0x2000041c
 8003d80:	40020000 	.word	0x40020000
 8003d84:	20000158 	.word	0x20000158
 8003d88:	200003c4 	.word	0x200003c4
 8003d8c:	20000159 	.word	0x20000159

08003d90 <user_spi_write>:

int8_t user_spi_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	603a      	str	r2, [r7, #0]
 8003d98:	461a      	mov	r2, r3
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	71fb      	strb	r3, [r7, #7]
 8003d9e:	460b      	mov	r3, r1
 8003da0:	71bb      	strb	r3, [r7, #6]
 8003da2:	4613      	mov	r3, r2
 8003da4:	80bb      	strh	r3, [r7, #4]
    int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
 8003da6:	2300      	movs	r3, #0
 8003da8:	73fb      	strb	r3, [r7, #15]
     * | (don't care)        | (don't care) | HIGH        |
     * |---------------------+--------------|-------------|
     *
     */

    GTXBuffer[0] = reg_addr & 0x7F;
 8003daa:	79bb      	ldrb	r3, [r7, #6]
 8003dac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	4b14      	ldr	r3, [pc, #80]	; (8003e04 <user_spi_write+0x74>)
 8003db4:	701a      	strb	r2, [r3, #0]
    memcpy(&GTXBuffer[1], reg_data, len);
 8003db6:	88bb      	ldrh	r3, [r7, #4]
 8003db8:	461a      	mov	r2, r3
 8003dba:	6839      	ldr	r1, [r7, #0]
 8003dbc:	4812      	ldr	r0, [pc, #72]	; (8003e08 <user_spi_write+0x78>)
 8003dbe:	f008 fc5d 	bl	800c67c <memcpy>

    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	2104      	movs	r1, #4
 8003dc6:	4811      	ldr	r0, [pc, #68]	; (8003e0c <user_spi_write+0x7c>)
 8003dc8:	f000 ff20 	bl	8004c0c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi4, GTXBuffer, len+1, 1000);
 8003dcc:	88bb      	ldrh	r3, [r7, #4]
 8003dce:	3301      	adds	r3, #1
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dd6:	490b      	ldr	r1, [pc, #44]	; (8003e04 <user_spi_write+0x74>)
 8003dd8:	480d      	ldr	r0, [pc, #52]	; (8003e10 <user_spi_write+0x80>)
 8003dda:	f004 ff04 	bl	8008be6 <HAL_SPI_Transmit>
    while(hspi4.State == HAL_SPI_STATE_BUSY);
 8003dde:	bf00      	nop
 8003de0:	4b0b      	ldr	r3, [pc, #44]	; (8003e10 <user_spi_write+0x80>)
 8003de2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d0f9      	beq.n	8003de0 <user_spi_write+0x50>
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8003dec:	2201      	movs	r2, #1
 8003dee:	2104      	movs	r1, #4
 8003df0:	4806      	ldr	r0, [pc, #24]	; (8003e0c <user_spi_write+0x7c>)
 8003df2:	f000 ff0b 	bl	8004c0c <HAL_GPIO_WritePin>

    return rslt;
 8003df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	2000041c 	.word	0x2000041c
 8003e08:	2000041d 	.word	0x2000041d
 8003e0c:	40020000 	.word	0x40020000
 8003e10:	200003c4 	.word	0x200003c4

08003e14 <user_i2c_read>:

int8_t user_i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af02      	add	r7, sp, #8
 8003e1a:	603a      	str	r2, [r7, #0]
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	4603      	mov	r3, r0
 8003e20:	71fb      	strb	r3, [r7, #7]
 8003e22:	460b      	mov	r3, r1
 8003e24:	71bb      	strb	r3, [r7, #6]
 8003e26:	4613      	mov	r3, r2
 8003e28:	80bb      	strh	r3, [r7, #4]
    int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	73fb      	strb	r3, [r7, #15]
     * | Stop       | -                   |
     * |------------+---------------------|
     */


    rslt = HAL_I2C_Master_Transmit(&hi2c3, dev_id<<1, &reg_addr, 1, 1000);
 8003e2e:	79fb      	ldrb	r3, [r7, #7]
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	b299      	uxth	r1, r3
 8003e36:	1dba      	adds	r2, r7, #6
 8003e38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e3c:	9300      	str	r3, [sp, #0]
 8003e3e:	2301      	movs	r3, #1
 8003e40:	4816      	ldr	r0, [pc, #88]	; (8003e9c <user_i2c_read+0x88>)
 8003e42:	f002 fda5 	bl	8006990 <HAL_I2C_Master_Transmit>
 8003e46:	4603      	mov	r3, r0
 8003e48:	73fb      	strb	r3, [r7, #15]
    while(hi2c3.State != HAL_I2C_STATE_READY);
 8003e4a:	bf00      	nop
 8003e4c:	4b13      	ldr	r3, [pc, #76]	; (8003e9c <user_i2c_read+0x88>)
 8003e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b20      	cmp	r3, #32
 8003e56:	d1f9      	bne.n	8003e4c <user_i2c_read+0x38>
    rslt = HAL_I2C_Master_Receive(&hi2c3, dev_id<<1, GRXBuffer, len, 1000);
 8003e58:	79fb      	ldrb	r3, [r7, #7]
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	005b      	lsls	r3, r3, #1
 8003e5e:	b299      	uxth	r1, r3
 8003e60:	88bb      	ldrh	r3, [r7, #4]
 8003e62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e66:	9200      	str	r2, [sp, #0]
 8003e68:	4a0d      	ldr	r2, [pc, #52]	; (8003ea0 <user_i2c_read+0x8c>)
 8003e6a:	480c      	ldr	r0, [pc, #48]	; (8003e9c <user_i2c_read+0x88>)
 8003e6c:	f002 fe8e 	bl	8006b8c <HAL_I2C_Master_Receive>
 8003e70:	4603      	mov	r3, r0
 8003e72:	73fb      	strb	r3, [r7, #15]
    while(hi2c3.State != HAL_I2C_STATE_READY);
 8003e74:	bf00      	nop
 8003e76:	4b09      	ldr	r3, [pc, #36]	; (8003e9c <user_i2c_read+0x88>)
 8003e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b20      	cmp	r3, #32
 8003e80:	d1f9      	bne.n	8003e76 <user_i2c_read+0x62>
    memcpy(reg_data, GRXBuffer, len);
 8003e82:	88bb      	ldrh	r3, [r7, #4]
 8003e84:	461a      	mov	r2, r3
 8003e86:	4906      	ldr	r1, [pc, #24]	; (8003ea0 <user_i2c_read+0x8c>)
 8003e88:	6838      	ldr	r0, [r7, #0]
 8003e8a:	f008 fbf7 	bl	800c67c <memcpy>
    return rslt;
 8003e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	20000104 	.word	0x20000104
 8003ea0:	20000158 	.word	0x20000158

08003ea4 <user_i2c_write>:

int8_t user_i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af02      	add	r7, sp, #8
 8003eaa:	603a      	str	r2, [r7, #0]
 8003eac:	461a      	mov	r2, r3
 8003eae:	4603      	mov	r3, r0
 8003eb0:	71fb      	strb	r3, [r7, #7]
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	71bb      	strb	r3, [r7, #6]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	80bb      	strh	r3, [r7, #4]
    int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
 8003eba:	2300      	movs	r3, #0
 8003ebc:	73fb      	strb	r3, [r7, #15]
     * |------------+---------------------|
     */



    GTXBuffer[0] = reg_addr;
 8003ebe:	4a13      	ldr	r2, [pc, #76]	; (8003f0c <user_i2c_write+0x68>)
 8003ec0:	79bb      	ldrb	r3, [r7, #6]
 8003ec2:	7013      	strb	r3, [r2, #0]
    memcpy(&GTXBuffer[1], reg_data, len);
 8003ec4:	88bb      	ldrh	r3, [r7, #4]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	6839      	ldr	r1, [r7, #0]
 8003eca:	4811      	ldr	r0, [pc, #68]	; (8003f10 <user_i2c_write+0x6c>)
 8003ecc:	f008 fbd6 	bl	800c67c <memcpy>
    rslt = HAL_I2C_Master_Transmit(&hi2c3, dev_id<<1, GTXBuffer, len+1, 1000);
 8003ed0:	79fb      	ldrb	r3, [r7, #7]
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	b299      	uxth	r1, r3
 8003ed8:	88bb      	ldrh	r3, [r7, #4]
 8003eda:	3301      	adds	r3, #1
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ee2:	9200      	str	r2, [sp, #0]
 8003ee4:	4a09      	ldr	r2, [pc, #36]	; (8003f0c <user_i2c_write+0x68>)
 8003ee6:	480b      	ldr	r0, [pc, #44]	; (8003f14 <user_i2c_write+0x70>)
 8003ee8:	f002 fd52 	bl	8006990 <HAL_I2C_Master_Transmit>
 8003eec:	4603      	mov	r3, r0
 8003eee:	73fb      	strb	r3, [r7, #15]
//    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
//    HAL_SPI_Transmit(&hspi4, GTXBuffer, len+1, 1000);
//    while(hspi4.State == HAL_SPI_STATE_BUSY);
//    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
    while(hi2c3.State != HAL_I2C_STATE_READY);
 8003ef0:	bf00      	nop
 8003ef2:	4b08      	ldr	r3, [pc, #32]	; (8003f14 <user_i2c_write+0x70>)
 8003ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b20      	cmp	r3, #32
 8003efc:	d1f9      	bne.n	8003ef2 <user_i2c_write+0x4e>

    return rslt;
 8003efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	2000041c 	.word	0x2000041c
 8003f10:	2000041d 	.word	0x2000041d
 8003f14:	20000104 	.word	0x20000104

08003f18 <bme680_start>:

return 0;
}
*/

void bme680_start(struct bme680_dev * gas_sensor){
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]

/* You may assign a chip select identifier to be handled later */

/* Set the temperature, pressure and humidity settings */
gas_sensor->tph_sett.os_hum = BME680_OS_2X;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2202      	movs	r2, #2
 8003f24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
gas_sensor->tph_sett.os_pres = BME680_OS_4X;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2203      	movs	r2, #3
 8003f2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
gas_sensor->tph_sett.os_temp = BME680_OS_8X;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2204      	movs	r2, #4
 8003f34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
gas_sensor->tph_sett.filter = BME680_FILTER_SIZE_3;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
/* Set the remaining gas sensor settings and link the heating profile */
gas_sensor->gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
/* Create a ramp heat waveform in 3 steps */
gas_sensor->gas_sett.heatr_temp = 320; /* degree Celsius */
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003f4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
gas_sensor->gas_sett.heatr_dur = 150; /* milliseconds */
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2296      	movs	r2, #150	; 0x96
 8003f56:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

/* Select the power mode */
/* Must be set before writing the sensor configuration */
gas_sensor->power_mode = BME680_FORCED_MODE;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

/* Set the required sensor settings needed */
uint8_t set_required_settings;
set_required_settings = BME680_OST_SEL | BME680_OSP_SEL | BME680_OSH_SEL | BME680_GAS_SENSOR_SEL | BME680_FILTER_SEL;
 8003f62:	23df      	movs	r3, #223	; 0xdf
 8003f64:	73fb      	strb	r3, [r7, #15]


/* Set the desired sensor configuration */
rslt = bme680_set_sensor_settings(set_required_settings,gas_sensor);
 8003f66:	7bfb      	ldrb	r3, [r7, #15]
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	6879      	ldr	r1, [r7, #4]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7fc fe4f 	bl	8000c10 <bme680_set_sensor_settings>
 8003f72:	4603      	mov	r3, r0
 8003f74:	461a      	mov	r2, r3
 8003f76:	4b06      	ldr	r3, [pc, #24]	; (8003f90 <bme680_start+0x78>)
 8003f78:	701a      	strb	r2, [r3, #0]




/* Set the power mode */
rslt = bme680_set_sensor_mode(gas_sensor);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7fd f81a 	bl	8000fb4 <bme680_set_sensor_mode>
 8003f80:	4603      	mov	r3, r0
 8003f82:	461a      	mov	r2, r3
 8003f84:	4b02      	ldr	r3, [pc, #8]	; (8003f90 <bme680_start+0x78>)
 8003f86:	701a      	strb	r2, [r3, #0]
}
 8003f88:	bf00      	nop
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	200000d8 	.word	0x200000d8

08003f94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f98:	b672      	cpsid	i
}
 8003f9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003f9c:	e7fe      	b.n	8003f9c <Error_Handler+0x8>
	...

08003fa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	607b      	str	r3, [r7, #4]
 8003faa:	4b10      	ldr	r3, [pc, #64]	; (8003fec <HAL_MspInit+0x4c>)
 8003fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fae:	4a0f      	ldr	r2, [pc, #60]	; (8003fec <HAL_MspInit+0x4c>)
 8003fb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8003fb6:	4b0d      	ldr	r3, [pc, #52]	; (8003fec <HAL_MspInit+0x4c>)
 8003fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fbe:	607b      	str	r3, [r7, #4]
 8003fc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	603b      	str	r3, [r7, #0]
 8003fc6:	4b09      	ldr	r3, [pc, #36]	; (8003fec <HAL_MspInit+0x4c>)
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	4a08      	ldr	r2, [pc, #32]	; (8003fec <HAL_MspInit+0x4c>)
 8003fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8003fd2:	4b06      	ldr	r3, [pc, #24]	; (8003fec <HAL_MspInit+0x4c>)
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fda:	603b      	str	r3, [r7, #0]
 8003fdc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003fde:	2007      	movs	r0, #7
 8003fe0:	f000 fc36 	bl	8004850 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003fe4:	bf00      	nop
 8003fe6:	3708      	adds	r7, #8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	40023800 	.word	0x40023800

08003ff0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b08a      	sub	sp, #40	; 0x28
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ff8:	f107 0314 	add.w	r3, r7, #20
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	605a      	str	r2, [r3, #4]
 8004002:	609a      	str	r2, [r3, #8]
 8004004:	60da      	str	r2, [r3, #12]
 8004006:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a29      	ldr	r2, [pc, #164]	; (80040b4 <HAL_I2C_MspInit+0xc4>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d14b      	bne.n	80040aa <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004012:	2300      	movs	r3, #0
 8004014:	613b      	str	r3, [r7, #16]
 8004016:	4b28      	ldr	r3, [pc, #160]	; (80040b8 <HAL_I2C_MspInit+0xc8>)
 8004018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401a:	4a27      	ldr	r2, [pc, #156]	; (80040b8 <HAL_I2C_MspInit+0xc8>)
 800401c:	f043 0304 	orr.w	r3, r3, #4
 8004020:	6313      	str	r3, [r2, #48]	; 0x30
 8004022:	4b25      	ldr	r3, [pc, #148]	; (80040b8 <HAL_I2C_MspInit+0xc8>)
 8004024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004026:	f003 0304 	and.w	r3, r3, #4
 800402a:	613b      	str	r3, [r7, #16]
 800402c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800402e:	2300      	movs	r3, #0
 8004030:	60fb      	str	r3, [r7, #12]
 8004032:	4b21      	ldr	r3, [pc, #132]	; (80040b8 <HAL_I2C_MspInit+0xc8>)
 8004034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004036:	4a20      	ldr	r2, [pc, #128]	; (80040b8 <HAL_I2C_MspInit+0xc8>)
 8004038:	f043 0301 	orr.w	r3, r3, #1
 800403c:	6313      	str	r3, [r2, #48]	; 0x30
 800403e:	4b1e      	ldr	r3, [pc, #120]	; (80040b8 <HAL_I2C_MspInit+0xc8>)
 8004040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	60fb      	str	r3, [r7, #12]
 8004048:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800404a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800404e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004050:	2312      	movs	r3, #18
 8004052:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004054:	2301      	movs	r3, #1
 8004056:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004058:	2303      	movs	r3, #3
 800405a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800405c:	2304      	movs	r3, #4
 800405e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004060:	f107 0314 	add.w	r3, r7, #20
 8004064:	4619      	mov	r1, r3
 8004066:	4815      	ldr	r0, [pc, #84]	; (80040bc <HAL_I2C_MspInit+0xcc>)
 8004068:	f000 fc34 	bl	80048d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800406c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004070:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004072:	2312      	movs	r3, #18
 8004074:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004076:	2301      	movs	r3, #1
 8004078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800407a:	2303      	movs	r3, #3
 800407c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800407e:	2304      	movs	r3, #4
 8004080:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004082:	f107 0314 	add.w	r3, r7, #20
 8004086:	4619      	mov	r1, r3
 8004088:	480d      	ldr	r0, [pc, #52]	; (80040c0 <HAL_I2C_MspInit+0xd0>)
 800408a:	f000 fc23 	bl	80048d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800408e:	2300      	movs	r3, #0
 8004090:	60bb      	str	r3, [r7, #8]
 8004092:	4b09      	ldr	r3, [pc, #36]	; (80040b8 <HAL_I2C_MspInit+0xc8>)
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	4a08      	ldr	r2, [pc, #32]	; (80040b8 <HAL_I2C_MspInit+0xc8>)
 8004098:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800409c:	6413      	str	r3, [r2, #64]	; 0x40
 800409e:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <HAL_I2C_MspInit+0xc8>)
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040a6:	60bb      	str	r3, [r7, #8]
 80040a8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80040aa:	bf00      	nop
 80040ac:	3728      	adds	r7, #40	; 0x28
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	40005c00 	.word	0x40005c00
 80040b8:	40023800 	.word	0x40023800
 80040bc:	40020800 	.word	0x40020800
 80040c0:	40020000 	.word	0x40020000

080040c4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b08e      	sub	sp, #56	; 0x38
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	605a      	str	r2, [r3, #4]
 80040d6:	609a      	str	r2, [r3, #8]
 80040d8:	60da      	str	r2, [r3, #12]
 80040da:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a59      	ldr	r2, [pc, #356]	; (8004248 <HAL_I2S_MspInit+0x184>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d15b      	bne.n	800419e <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80040e6:	2300      	movs	r3, #0
 80040e8:	623b      	str	r3, [r7, #32]
 80040ea:	4b58      	ldr	r3, [pc, #352]	; (800424c <HAL_I2S_MspInit+0x188>)
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	4a57      	ldr	r2, [pc, #348]	; (800424c <HAL_I2S_MspInit+0x188>)
 80040f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040f4:	6413      	str	r3, [r2, #64]	; 0x40
 80040f6:	4b55      	ldr	r3, [pc, #340]	; (800424c <HAL_I2S_MspInit+0x188>)
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040fe:	623b      	str	r3, [r7, #32]
 8004100:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004102:	2300      	movs	r3, #0
 8004104:	61fb      	str	r3, [r7, #28]
 8004106:	4b51      	ldr	r3, [pc, #324]	; (800424c <HAL_I2S_MspInit+0x188>)
 8004108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410a:	4a50      	ldr	r2, [pc, #320]	; (800424c <HAL_I2S_MspInit+0x188>)
 800410c:	f043 0304 	orr.w	r3, r3, #4
 8004110:	6313      	str	r3, [r2, #48]	; 0x30
 8004112:	4b4e      	ldr	r3, [pc, #312]	; (800424c <HAL_I2S_MspInit+0x188>)
 8004114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004116:	f003 0304 	and.w	r3, r3, #4
 800411a:	61fb      	str	r3, [r7, #28]
 800411c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800411e:	2300      	movs	r3, #0
 8004120:	61bb      	str	r3, [r7, #24]
 8004122:	4b4a      	ldr	r3, [pc, #296]	; (800424c <HAL_I2S_MspInit+0x188>)
 8004124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004126:	4a49      	ldr	r2, [pc, #292]	; (800424c <HAL_I2S_MspInit+0x188>)
 8004128:	f043 0302 	orr.w	r3, r3, #2
 800412c:	6313      	str	r3, [r2, #48]	; 0x30
 800412e:	4b47      	ldr	r3, [pc, #284]	; (800424c <HAL_I2S_MspInit+0x188>)
 8004130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	61bb      	str	r3, [r7, #24]
 8004138:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800413a:	2304      	movs	r3, #4
 800413c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800413e:	2302      	movs	r3, #2
 8004140:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004142:	2300      	movs	r3, #0
 8004144:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004146:	2300      	movs	r3, #0
 8004148:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 800414a:	2306      	movs	r3, #6
 800414c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800414e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004152:	4619      	mov	r1, r3
 8004154:	483e      	ldr	r0, [pc, #248]	; (8004250 <HAL_I2S_MspInit+0x18c>)
 8004156:	f000 fbbd 	bl	80048d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800415a:	2308      	movs	r3, #8
 800415c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800415e:	2302      	movs	r3, #2
 8004160:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004162:	2300      	movs	r3, #0
 8004164:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004166:	2300      	movs	r3, #0
 8004168:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800416a:	2305      	movs	r3, #5
 800416c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800416e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004172:	4619      	mov	r1, r3
 8004174:	4836      	ldr	r0, [pc, #216]	; (8004250 <HAL_I2S_MspInit+0x18c>)
 8004176:	f000 fbad 	bl	80048d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800417a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800417e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004180:	2302      	movs	r3, #2
 8004182:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004184:	2300      	movs	r3, #0
 8004186:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004188:	2300      	movs	r3, #0
 800418a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800418c:	2305      	movs	r3, #5
 800418e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004190:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004194:	4619      	mov	r1, r3
 8004196:	482f      	ldr	r0, [pc, #188]	; (8004254 <HAL_I2S_MspInit+0x190>)
 8004198:	f000 fb9c 	bl	80048d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800419c:	e04f      	b.n	800423e <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a2d      	ldr	r2, [pc, #180]	; (8004258 <HAL_I2S_MspInit+0x194>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d14a      	bne.n	800423e <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80041a8:	2300      	movs	r3, #0
 80041aa:	617b      	str	r3, [r7, #20]
 80041ac:	4b27      	ldr	r3, [pc, #156]	; (800424c <HAL_I2S_MspInit+0x188>)
 80041ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b0:	4a26      	ldr	r2, [pc, #152]	; (800424c <HAL_I2S_MspInit+0x188>)
 80041b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041b6:	6413      	str	r3, [r2, #64]	; 0x40
 80041b8:	4b24      	ldr	r3, [pc, #144]	; (800424c <HAL_I2S_MspInit+0x188>)
 80041ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041c0:	617b      	str	r3, [r7, #20]
 80041c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041c4:	2300      	movs	r3, #0
 80041c6:	613b      	str	r3, [r7, #16]
 80041c8:	4b20      	ldr	r3, [pc, #128]	; (800424c <HAL_I2S_MspInit+0x188>)
 80041ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041cc:	4a1f      	ldr	r2, [pc, #124]	; (800424c <HAL_I2S_MspInit+0x188>)
 80041ce:	f043 0301 	orr.w	r3, r3, #1
 80041d2:	6313      	str	r3, [r2, #48]	; 0x30
 80041d4:	4b1d      	ldr	r3, [pc, #116]	; (800424c <HAL_I2S_MspInit+0x188>)
 80041d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	613b      	str	r3, [r7, #16]
 80041de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041e0:	2300      	movs	r3, #0
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	4b19      	ldr	r3, [pc, #100]	; (800424c <HAL_I2S_MspInit+0x188>)
 80041e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e8:	4a18      	ldr	r2, [pc, #96]	; (800424c <HAL_I2S_MspInit+0x188>)
 80041ea:	f043 0304 	orr.w	r3, r3, #4
 80041ee:	6313      	str	r3, [r2, #48]	; 0x30
 80041f0:	4b16      	ldr	r3, [pc, #88]	; (800424c <HAL_I2S_MspInit+0x188>)
 80041f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f4:	f003 0304 	and.w	r3, r3, #4
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80041fc:	2310      	movs	r3, #16
 80041fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004200:	2302      	movs	r3, #2
 8004202:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004204:	2300      	movs	r3, #0
 8004206:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004208:	2300      	movs	r3, #0
 800420a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800420c:	2306      	movs	r3, #6
 800420e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8004210:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004214:	4619      	mov	r1, r3
 8004216:	4811      	ldr	r0, [pc, #68]	; (800425c <HAL_I2S_MspInit+0x198>)
 8004218:	f000 fb5c 	bl	80048d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800421c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8004220:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004222:	2302      	movs	r3, #2
 8004224:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004226:	2300      	movs	r3, #0
 8004228:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800422a:	2300      	movs	r3, #0
 800422c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800422e:	2306      	movs	r3, #6
 8004230:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004236:	4619      	mov	r1, r3
 8004238:	4805      	ldr	r0, [pc, #20]	; (8004250 <HAL_I2S_MspInit+0x18c>)
 800423a:	f000 fb4b 	bl	80048d4 <HAL_GPIO_Init>
}
 800423e:	bf00      	nop
 8004240:	3738      	adds	r7, #56	; 0x38
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	40003800 	.word	0x40003800
 800424c:	40023800 	.word	0x40023800
 8004250:	40020800 	.word	0x40020800
 8004254:	40020400 	.word	0x40020400
 8004258:	40003c00 	.word	0x40003c00
 800425c:	40020000 	.word	0x40020000

08004260 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b08c      	sub	sp, #48	; 0x30
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004268:	f107 031c 	add.w	r3, r7, #28
 800426c:	2200      	movs	r2, #0
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	605a      	str	r2, [r3, #4]
 8004272:	609a      	str	r2, [r3, #8]
 8004274:	60da      	str	r2, [r3, #12]
 8004276:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a32      	ldr	r2, [pc, #200]	; (8004348 <HAL_SPI_MspInit+0xe8>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d12c      	bne.n	80042dc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004282:	2300      	movs	r3, #0
 8004284:	61bb      	str	r3, [r7, #24]
 8004286:	4b31      	ldr	r3, [pc, #196]	; (800434c <HAL_SPI_MspInit+0xec>)
 8004288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428a:	4a30      	ldr	r2, [pc, #192]	; (800434c <HAL_SPI_MspInit+0xec>)
 800428c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004290:	6453      	str	r3, [r2, #68]	; 0x44
 8004292:	4b2e      	ldr	r3, [pc, #184]	; (800434c <HAL_SPI_MspInit+0xec>)
 8004294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004296:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800429a:	61bb      	str	r3, [r7, #24]
 800429c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800429e:	2300      	movs	r3, #0
 80042a0:	617b      	str	r3, [r7, #20]
 80042a2:	4b2a      	ldr	r3, [pc, #168]	; (800434c <HAL_SPI_MspInit+0xec>)
 80042a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a6:	4a29      	ldr	r2, [pc, #164]	; (800434c <HAL_SPI_MspInit+0xec>)
 80042a8:	f043 0301 	orr.w	r3, r3, #1
 80042ac:	6313      	str	r3, [r2, #48]	; 0x30
 80042ae:	4b27      	ldr	r3, [pc, #156]	; (800434c <HAL_SPI_MspInit+0xec>)
 80042b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	617b      	str	r3, [r7, #20]
 80042b8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80042ba:	23e0      	movs	r3, #224	; 0xe0
 80042bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042be:	2302      	movs	r3, #2
 80042c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042c2:	2300      	movs	r3, #0
 80042c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042c6:	2303      	movs	r3, #3
 80042c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80042ca:	2305      	movs	r3, #5
 80042cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042ce:	f107 031c 	add.w	r3, r7, #28
 80042d2:	4619      	mov	r1, r3
 80042d4:	481e      	ldr	r0, [pc, #120]	; (8004350 <HAL_SPI_MspInit+0xf0>)
 80042d6:	f000 fafd 	bl	80048d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80042da:	e031      	b.n	8004340 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI4)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a1c      	ldr	r2, [pc, #112]	; (8004354 <HAL_SPI_MspInit+0xf4>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d12c      	bne.n	8004340 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80042e6:	2300      	movs	r3, #0
 80042e8:	613b      	str	r3, [r7, #16]
 80042ea:	4b18      	ldr	r3, [pc, #96]	; (800434c <HAL_SPI_MspInit+0xec>)
 80042ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ee:	4a17      	ldr	r2, [pc, #92]	; (800434c <HAL_SPI_MspInit+0xec>)
 80042f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80042f4:	6453      	str	r3, [r2, #68]	; 0x44
 80042f6:	4b15      	ldr	r3, [pc, #84]	; (800434c <HAL_SPI_MspInit+0xec>)
 80042f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042fe:	613b      	str	r3, [r7, #16]
 8004300:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004302:	2300      	movs	r3, #0
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	4b11      	ldr	r3, [pc, #68]	; (800434c <HAL_SPI_MspInit+0xec>)
 8004308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430a:	4a10      	ldr	r2, [pc, #64]	; (800434c <HAL_SPI_MspInit+0xec>)
 800430c:	f043 0310 	orr.w	r3, r3, #16
 8004310:	6313      	str	r3, [r2, #48]	; 0x30
 8004312:	4b0e      	ldr	r3, [pc, #56]	; (800434c <HAL_SPI_MspInit+0xec>)
 8004314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004316:	f003 0310 	and.w	r3, r3, #16
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_13;
 800431e:	f44f 5341 	mov.w	r3, #12352	; 0x3040
 8004322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004324:	2302      	movs	r3, #2
 8004326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004328:	2300      	movs	r3, #0
 800432a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800432c:	2303      	movs	r3, #3
 800432e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8004330:	2305      	movs	r3, #5
 8004332:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004334:	f107 031c 	add.w	r3, r7, #28
 8004338:	4619      	mov	r1, r3
 800433a:	4807      	ldr	r0, [pc, #28]	; (8004358 <HAL_SPI_MspInit+0xf8>)
 800433c:	f000 faca 	bl	80048d4 <HAL_GPIO_Init>
}
 8004340:	bf00      	nop
 8004342:	3730      	adds	r7, #48	; 0x30
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	40013000 	.word	0x40013000
 800434c:	40023800 	.word	0x40023800
 8004350:	40020000 	.word	0x40020000
 8004354:	40013400 	.word	0x40013400
 8004358:	40021000 	.word	0x40021000

0800435c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800435c:	b480      	push	{r7}
 800435e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004360:	e7fe      	b.n	8004360 <NMI_Handler+0x4>

08004362 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004362:	b480      	push	{r7}
 8004364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004366:	e7fe      	b.n	8004366 <HardFault_Handler+0x4>

08004368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004368:	b480      	push	{r7}
 800436a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800436c:	e7fe      	b.n	800436c <MemManage_Handler+0x4>

0800436e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800436e:	b480      	push	{r7}
 8004370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004372:	e7fe      	b.n	8004372 <BusFault_Handler+0x4>

08004374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004374:	b480      	push	{r7}
 8004376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004378:	e7fe      	b.n	8004378 <UsageFault_Handler+0x4>

0800437a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800437a:	b480      	push	{r7}
 800437c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800437e:	bf00      	nop
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800438c:	bf00      	nop
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004396:	b480      	push	{r7}
 8004398:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800439a:	bf00      	nop
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80043a8:	f000 f93e 	bl	8004628 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80043ac:	bf00      	nop
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80043b4:	4802      	ldr	r0, [pc, #8]	; (80043c0 <OTG_FS_IRQHandler+0x10>)
 80043b6:	f000 fead 	bl	8005114 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80043ba:	bf00      	nop
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	20000ce0 	.word	0x20000ce0

080043c4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043d0:	2300      	movs	r3, #0
 80043d2:	617b      	str	r3, [r7, #20]
 80043d4:	e00a      	b.n	80043ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80043d6:	f3af 8000 	nop.w
 80043da:	4601      	mov	r1, r0
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	1c5a      	adds	r2, r3, #1
 80043e0:	60ba      	str	r2, [r7, #8]
 80043e2:	b2ca      	uxtb	r2, r1
 80043e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	3301      	adds	r3, #1
 80043ea:	617b      	str	r3, [r7, #20]
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	dbf0      	blt.n	80043d6 <_read+0x12>
	}

return len;
 80043f4:	687b      	ldr	r3, [r7, #4]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3718      	adds	r7, #24
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	b086      	sub	sp, #24
 8004402:	af00      	add	r7, sp, #0
 8004404:	60f8      	str	r0, [r7, #12]
 8004406:	60b9      	str	r1, [r7, #8]
 8004408:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800440a:	2300      	movs	r3, #0
 800440c:	617b      	str	r3, [r7, #20]
 800440e:	e009      	b.n	8004424 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	1c5a      	adds	r2, r3, #1
 8004414:	60ba      	str	r2, [r7, #8]
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	4618      	mov	r0, r3
 800441a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	3301      	adds	r3, #1
 8004422:	617b      	str	r3, [r7, #20]
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	429a      	cmp	r2, r3
 800442a:	dbf1      	blt.n	8004410 <_write+0x12>
	}
	return len;
 800442c:	687b      	ldr	r3, [r7, #4]
}
 800442e:	4618      	mov	r0, r3
 8004430:	3718      	adds	r7, #24
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <_close>:

int _close(int file)
{
 8004436:	b480      	push	{r7}
 8004438:	b083      	sub	sp, #12
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
	return -1;
 800443e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004442:	4618      	mov	r0, r3
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
 8004456:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800445e:	605a      	str	r2, [r3, #4]
	return 0;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr

0800446e <_isatty>:

int _isatty(int file)
{
 800446e:	b480      	push	{r7}
 8004470:	b083      	sub	sp, #12
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
	return 1;
 8004476:	2301      	movs	r3, #1
}
 8004478:	4618      	mov	r0, r3
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
	return 0;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3714      	adds	r7, #20
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
	...

080044a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80044a8:	4a14      	ldr	r2, [pc, #80]	; (80044fc <_sbrk+0x5c>)
 80044aa:	4b15      	ldr	r3, [pc, #84]	; (8004500 <_sbrk+0x60>)
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80044b4:	4b13      	ldr	r3, [pc, #76]	; (8004504 <_sbrk+0x64>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d102      	bne.n	80044c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80044bc:	4b11      	ldr	r3, [pc, #68]	; (8004504 <_sbrk+0x64>)
 80044be:	4a12      	ldr	r2, [pc, #72]	; (8004508 <_sbrk+0x68>)
 80044c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80044c2:	4b10      	ldr	r3, [pc, #64]	; (8004504 <_sbrk+0x64>)
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4413      	add	r3, r2
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d207      	bcs.n	80044e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80044d0:	f008 f89a 	bl	800c608 <__errno>
 80044d4:	4603      	mov	r3, r0
 80044d6:	220c      	movs	r2, #12
 80044d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80044da:	f04f 33ff 	mov.w	r3, #4294967295
 80044de:	e009      	b.n	80044f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80044e0:	4b08      	ldr	r3, [pc, #32]	; (8004504 <_sbrk+0x64>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80044e6:	4b07      	ldr	r3, [pc, #28]	; (8004504 <_sbrk+0x64>)
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4413      	add	r3, r2
 80044ee:	4a05      	ldr	r2, [pc, #20]	; (8004504 <_sbrk+0x64>)
 80044f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80044f2:	68fb      	ldr	r3, [r7, #12]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3718      	adds	r7, #24
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	20020000 	.word	0x20020000
 8004500:	00000400 	.word	0x00000400
 8004504:	200000dc 	.word	0x200000dc
 8004508:	20000ff8 	.word	0x20000ff8

0800450c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800450c:	b480      	push	{r7}
 800450e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004510:	4b06      	ldr	r3, [pc, #24]	; (800452c <SystemInit+0x20>)
 8004512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004516:	4a05      	ldr	r2, [pc, #20]	; (800452c <SystemInit+0x20>)
 8004518:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800451c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004520:	bf00      	nop
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	e000ed00 	.word	0xe000ed00

08004530 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004530:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004568 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004534:	480d      	ldr	r0, [pc, #52]	; (800456c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004536:	490e      	ldr	r1, [pc, #56]	; (8004570 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004538:	4a0e      	ldr	r2, [pc, #56]	; (8004574 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800453a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800453c:	e002      	b.n	8004544 <LoopCopyDataInit>

0800453e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800453e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004542:	3304      	adds	r3, #4

08004544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004548:	d3f9      	bcc.n	800453e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800454a:	4a0b      	ldr	r2, [pc, #44]	; (8004578 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800454c:	4c0b      	ldr	r4, [pc, #44]	; (800457c <LoopFillZerobss+0x26>)
  movs r3, #0
 800454e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004550:	e001      	b.n	8004556 <LoopFillZerobss>

08004552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004554:	3204      	adds	r2, #4

08004556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004558:	d3fb      	bcc.n	8004552 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800455a:	f7ff ffd7 	bl	800450c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800455e:	f008 f859 	bl	800c614 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004562:	f7ff f825 	bl	80035b0 <main>
  bx  lr    
 8004566:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004568:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800456c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004570:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8004574:	08012600 	.word	0x08012600
  ldr r2, =_sbss
 8004578:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 800457c:	20000ff4 	.word	0x20000ff4

08004580 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004580:	e7fe      	b.n	8004580 <ADC_IRQHandler>
	...

08004584 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004588:	4b0e      	ldr	r3, [pc, #56]	; (80045c4 <HAL_Init+0x40>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a0d      	ldr	r2, [pc, #52]	; (80045c4 <HAL_Init+0x40>)
 800458e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004592:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004594:	4b0b      	ldr	r3, [pc, #44]	; (80045c4 <HAL_Init+0x40>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a0a      	ldr	r2, [pc, #40]	; (80045c4 <HAL_Init+0x40>)
 800459a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800459e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80045a0:	4b08      	ldr	r3, [pc, #32]	; (80045c4 <HAL_Init+0x40>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a07      	ldr	r2, [pc, #28]	; (80045c4 <HAL_Init+0x40>)
 80045a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045ac:	2003      	movs	r0, #3
 80045ae:	f000 f94f 	bl	8004850 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80045b2:	2000      	movs	r0, #0
 80045b4:	f000 f808 	bl	80045c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80045b8:	f7ff fcf2 	bl	8003fa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	40023c00 	.word	0x40023c00

080045c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80045d0:	4b12      	ldr	r3, [pc, #72]	; (800461c <HAL_InitTick+0x54>)
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	4b12      	ldr	r3, [pc, #72]	; (8004620 <HAL_InitTick+0x58>)
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	4619      	mov	r1, r3
 80045da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045de:	fbb3 f3f1 	udiv	r3, r3, r1
 80045e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 f967 	bl	80048ba <HAL_SYSTICK_Config>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d001      	beq.n	80045f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e00e      	b.n	8004614 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2b0f      	cmp	r3, #15
 80045fa:	d80a      	bhi.n	8004612 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80045fc:	2200      	movs	r2, #0
 80045fe:	6879      	ldr	r1, [r7, #4]
 8004600:	f04f 30ff 	mov.w	r0, #4294967295
 8004604:	f000 f92f 	bl	8004866 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004608:	4a06      	ldr	r2, [pc, #24]	; (8004624 <HAL_InitTick+0x5c>)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800460e:	2300      	movs	r3, #0
 8004610:	e000      	b.n	8004614 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
}
 8004614:	4618      	mov	r0, r3
 8004616:	3708      	adds	r7, #8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	2000002c 	.word	0x2000002c
 8004620:	20000034 	.word	0x20000034
 8004624:	20000030 	.word	0x20000030

08004628 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004628:	b480      	push	{r7}
 800462a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800462c:	4b06      	ldr	r3, [pc, #24]	; (8004648 <HAL_IncTick+0x20>)
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	461a      	mov	r2, r3
 8004632:	4b06      	ldr	r3, [pc, #24]	; (800464c <HAL_IncTick+0x24>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4413      	add	r3, r2
 8004638:	4a04      	ldr	r2, [pc, #16]	; (800464c <HAL_IncTick+0x24>)
 800463a:	6013      	str	r3, [r2, #0]
}
 800463c:	bf00      	nop
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	20000034 	.word	0x20000034
 800464c:	20000904 	.word	0x20000904

08004650 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004650:	b480      	push	{r7}
 8004652:	af00      	add	r7, sp, #0
  return uwTick;
 8004654:	4b03      	ldr	r3, [pc, #12]	; (8004664 <HAL_GetTick+0x14>)
 8004656:	681b      	ldr	r3, [r3, #0]
}
 8004658:	4618      	mov	r0, r3
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	20000904 	.word	0x20000904

08004668 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004670:	f7ff ffee 	bl	8004650 <HAL_GetTick>
 8004674:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004680:	d005      	beq.n	800468e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004682:	4b0a      	ldr	r3, [pc, #40]	; (80046ac <HAL_Delay+0x44>)
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	461a      	mov	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	4413      	add	r3, r2
 800468c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800468e:	bf00      	nop
 8004690:	f7ff ffde 	bl	8004650 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	429a      	cmp	r2, r3
 800469e:	d8f7      	bhi.n	8004690 <HAL_Delay+0x28>
  {
  }
}
 80046a0:	bf00      	nop
 80046a2:	bf00      	nop
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	20000034 	.word	0x20000034

080046b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f003 0307 	and.w	r3, r3, #7
 80046be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046c0:	4b0c      	ldr	r3, [pc, #48]	; (80046f4 <__NVIC_SetPriorityGrouping+0x44>)
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046c6:	68ba      	ldr	r2, [r7, #8]
 80046c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80046cc:	4013      	ands	r3, r2
 80046ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80046dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80046e2:	4a04      	ldr	r2, [pc, #16]	; (80046f4 <__NVIC_SetPriorityGrouping+0x44>)
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	60d3      	str	r3, [r2, #12]
}
 80046e8:	bf00      	nop
 80046ea:	3714      	adds	r7, #20
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr
 80046f4:	e000ed00 	.word	0xe000ed00

080046f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046f8:	b480      	push	{r7}
 80046fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046fc:	4b04      	ldr	r3, [pc, #16]	; (8004710 <__NVIC_GetPriorityGrouping+0x18>)
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	0a1b      	lsrs	r3, r3, #8
 8004702:	f003 0307 	and.w	r3, r3, #7
}
 8004706:	4618      	mov	r0, r3
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr
 8004710:	e000ed00 	.word	0xe000ed00

08004714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	4603      	mov	r3, r0
 800471c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800471e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004722:	2b00      	cmp	r3, #0
 8004724:	db0b      	blt.n	800473e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004726:	79fb      	ldrb	r3, [r7, #7]
 8004728:	f003 021f 	and.w	r2, r3, #31
 800472c:	4907      	ldr	r1, [pc, #28]	; (800474c <__NVIC_EnableIRQ+0x38>)
 800472e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004732:	095b      	lsrs	r3, r3, #5
 8004734:	2001      	movs	r0, #1
 8004736:	fa00 f202 	lsl.w	r2, r0, r2
 800473a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800473e:	bf00      	nop
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	e000e100 	.word	0xe000e100

08004750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	4603      	mov	r3, r0
 8004758:	6039      	str	r1, [r7, #0]
 800475a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800475c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004760:	2b00      	cmp	r3, #0
 8004762:	db0a      	blt.n	800477a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	b2da      	uxtb	r2, r3
 8004768:	490c      	ldr	r1, [pc, #48]	; (800479c <__NVIC_SetPriority+0x4c>)
 800476a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800476e:	0112      	lsls	r2, r2, #4
 8004770:	b2d2      	uxtb	r2, r2
 8004772:	440b      	add	r3, r1
 8004774:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004778:	e00a      	b.n	8004790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	b2da      	uxtb	r2, r3
 800477e:	4908      	ldr	r1, [pc, #32]	; (80047a0 <__NVIC_SetPriority+0x50>)
 8004780:	79fb      	ldrb	r3, [r7, #7]
 8004782:	f003 030f 	and.w	r3, r3, #15
 8004786:	3b04      	subs	r3, #4
 8004788:	0112      	lsls	r2, r2, #4
 800478a:	b2d2      	uxtb	r2, r2
 800478c:	440b      	add	r3, r1
 800478e:	761a      	strb	r2, [r3, #24]
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	e000e100 	.word	0xe000e100
 80047a0:	e000ed00 	.word	0xe000ed00

080047a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b089      	sub	sp, #36	; 0x24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f003 0307 	and.w	r3, r3, #7
 80047b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	f1c3 0307 	rsb	r3, r3, #7
 80047be:	2b04      	cmp	r3, #4
 80047c0:	bf28      	it	cs
 80047c2:	2304      	movcs	r3, #4
 80047c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	3304      	adds	r3, #4
 80047ca:	2b06      	cmp	r3, #6
 80047cc:	d902      	bls.n	80047d4 <NVIC_EncodePriority+0x30>
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	3b03      	subs	r3, #3
 80047d2:	e000      	b.n	80047d6 <NVIC_EncodePriority+0x32>
 80047d4:	2300      	movs	r3, #0
 80047d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047d8:	f04f 32ff 	mov.w	r2, #4294967295
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	fa02 f303 	lsl.w	r3, r2, r3
 80047e2:	43da      	mvns	r2, r3
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	401a      	ands	r2, r3
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047ec:	f04f 31ff 	mov.w	r1, #4294967295
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	fa01 f303 	lsl.w	r3, r1, r3
 80047f6:	43d9      	mvns	r1, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047fc:	4313      	orrs	r3, r2
         );
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3724      	adds	r7, #36	; 0x24
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
	...

0800480c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	3b01      	subs	r3, #1
 8004818:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800481c:	d301      	bcc.n	8004822 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800481e:	2301      	movs	r3, #1
 8004820:	e00f      	b.n	8004842 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004822:	4a0a      	ldr	r2, [pc, #40]	; (800484c <SysTick_Config+0x40>)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	3b01      	subs	r3, #1
 8004828:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800482a:	210f      	movs	r1, #15
 800482c:	f04f 30ff 	mov.w	r0, #4294967295
 8004830:	f7ff ff8e 	bl	8004750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004834:	4b05      	ldr	r3, [pc, #20]	; (800484c <SysTick_Config+0x40>)
 8004836:	2200      	movs	r2, #0
 8004838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800483a:	4b04      	ldr	r3, [pc, #16]	; (800484c <SysTick_Config+0x40>)
 800483c:	2207      	movs	r2, #7
 800483e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	e000e010 	.word	0xe000e010

08004850 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f7ff ff29 	bl	80046b0 <__NVIC_SetPriorityGrouping>
}
 800485e:	bf00      	nop
 8004860:	3708      	adds	r7, #8
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004866:	b580      	push	{r7, lr}
 8004868:	b086      	sub	sp, #24
 800486a:	af00      	add	r7, sp, #0
 800486c:	4603      	mov	r3, r0
 800486e:	60b9      	str	r1, [r7, #8]
 8004870:	607a      	str	r2, [r7, #4]
 8004872:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004874:	2300      	movs	r3, #0
 8004876:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004878:	f7ff ff3e 	bl	80046f8 <__NVIC_GetPriorityGrouping>
 800487c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	68b9      	ldr	r1, [r7, #8]
 8004882:	6978      	ldr	r0, [r7, #20]
 8004884:	f7ff ff8e 	bl	80047a4 <NVIC_EncodePriority>
 8004888:	4602      	mov	r2, r0
 800488a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800488e:	4611      	mov	r1, r2
 8004890:	4618      	mov	r0, r3
 8004892:	f7ff ff5d 	bl	8004750 <__NVIC_SetPriority>
}
 8004896:	bf00      	nop
 8004898:	3718      	adds	r7, #24
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b082      	sub	sp, #8
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	4603      	mov	r3, r0
 80048a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ac:	4618      	mov	r0, r3
 80048ae:	f7ff ff31 	bl	8004714 <__NVIC_EnableIRQ>
}
 80048b2:	bf00      	nop
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b082      	sub	sp, #8
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7ff ffa2 	bl	800480c <SysTick_Config>
 80048c8:	4603      	mov	r3, r0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3708      	adds	r7, #8
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
	...

080048d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b089      	sub	sp, #36	; 0x24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80048de:	2300      	movs	r3, #0
 80048e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80048e2:	2300      	movs	r3, #0
 80048e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80048e6:	2300      	movs	r3, #0
 80048e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048ea:	2300      	movs	r3, #0
 80048ec:	61fb      	str	r3, [r7, #28]
 80048ee:	e159      	b.n	8004ba4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80048f0:	2201      	movs	r2, #1
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	fa02 f303 	lsl.w	r3, r2, r3
 80048f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	4013      	ands	r3, r2
 8004902:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	429a      	cmp	r2, r3
 800490a:	f040 8148 	bne.w	8004b9e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f003 0303 	and.w	r3, r3, #3
 8004916:	2b01      	cmp	r3, #1
 8004918:	d005      	beq.n	8004926 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004922:	2b02      	cmp	r3, #2
 8004924:	d130      	bne.n	8004988 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	2203      	movs	r2, #3
 8004932:	fa02 f303 	lsl.w	r3, r2, r3
 8004936:	43db      	mvns	r3, r3
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	4013      	ands	r3, r2
 800493c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	68da      	ldr	r2, [r3, #12]
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	fa02 f303 	lsl.w	r3, r2, r3
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	4313      	orrs	r3, r2
 800494e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	69ba      	ldr	r2, [r7, #24]
 8004954:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800495c:	2201      	movs	r2, #1
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	fa02 f303 	lsl.w	r3, r2, r3
 8004964:	43db      	mvns	r3, r3
 8004966:	69ba      	ldr	r2, [r7, #24]
 8004968:	4013      	ands	r3, r2
 800496a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	091b      	lsrs	r3, r3, #4
 8004972:	f003 0201 	and.w	r2, r3, #1
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	fa02 f303 	lsl.w	r3, r2, r3
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	4313      	orrs	r3, r2
 8004980:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f003 0303 	and.w	r3, r3, #3
 8004990:	2b03      	cmp	r3, #3
 8004992:	d017      	beq.n	80049c4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	2203      	movs	r2, #3
 80049a0:	fa02 f303 	lsl.w	r3, r2, r3
 80049a4:	43db      	mvns	r3, r3
 80049a6:	69ba      	ldr	r2, [r7, #24]
 80049a8:	4013      	ands	r3, r2
 80049aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	689a      	ldr	r2, [r3, #8]
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	005b      	lsls	r3, r3, #1
 80049b4:	fa02 f303 	lsl.w	r3, r2, r3
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f003 0303 	and.w	r3, r3, #3
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d123      	bne.n	8004a18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	08da      	lsrs	r2, r3, #3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	3208      	adds	r2, #8
 80049d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	f003 0307 	and.w	r3, r3, #7
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	220f      	movs	r2, #15
 80049e8:	fa02 f303 	lsl.w	r3, r2, r3
 80049ec:	43db      	mvns	r3, r3
 80049ee:	69ba      	ldr	r2, [r7, #24]
 80049f0:	4013      	ands	r3, r2
 80049f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	691a      	ldr	r2, [r3, #16]
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	f003 0307 	and.w	r3, r3, #7
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	fa02 f303 	lsl.w	r3, r2, r3
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	08da      	lsrs	r2, r3, #3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	3208      	adds	r2, #8
 8004a12:	69b9      	ldr	r1, [r7, #24]
 8004a14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	005b      	lsls	r3, r3, #1
 8004a22:	2203      	movs	r2, #3
 8004a24:	fa02 f303 	lsl.w	r3, r2, r3
 8004a28:	43db      	mvns	r3, r3
 8004a2a:	69ba      	ldr	r2, [r7, #24]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f003 0203 	and.w	r2, r3, #3
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	005b      	lsls	r3, r3, #1
 8004a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f000 80a2 	beq.w	8004b9e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	60fb      	str	r3, [r7, #12]
 8004a5e:	4b57      	ldr	r3, [pc, #348]	; (8004bbc <HAL_GPIO_Init+0x2e8>)
 8004a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a62:	4a56      	ldr	r2, [pc, #344]	; (8004bbc <HAL_GPIO_Init+0x2e8>)
 8004a64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a68:	6453      	str	r3, [r2, #68]	; 0x44
 8004a6a:	4b54      	ldr	r3, [pc, #336]	; (8004bbc <HAL_GPIO_Init+0x2e8>)
 8004a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a72:	60fb      	str	r3, [r7, #12]
 8004a74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a76:	4a52      	ldr	r2, [pc, #328]	; (8004bc0 <HAL_GPIO_Init+0x2ec>)
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	089b      	lsrs	r3, r3, #2
 8004a7c:	3302      	adds	r3, #2
 8004a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	f003 0303 	and.w	r3, r3, #3
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	220f      	movs	r2, #15
 8004a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a92:	43db      	mvns	r3, r3
 8004a94:	69ba      	ldr	r2, [r7, #24]
 8004a96:	4013      	ands	r3, r2
 8004a98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a49      	ldr	r2, [pc, #292]	; (8004bc4 <HAL_GPIO_Init+0x2f0>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d019      	beq.n	8004ad6 <HAL_GPIO_Init+0x202>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a48      	ldr	r2, [pc, #288]	; (8004bc8 <HAL_GPIO_Init+0x2f4>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d013      	beq.n	8004ad2 <HAL_GPIO_Init+0x1fe>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a47      	ldr	r2, [pc, #284]	; (8004bcc <HAL_GPIO_Init+0x2f8>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d00d      	beq.n	8004ace <HAL_GPIO_Init+0x1fa>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a46      	ldr	r2, [pc, #280]	; (8004bd0 <HAL_GPIO_Init+0x2fc>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d007      	beq.n	8004aca <HAL_GPIO_Init+0x1f6>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a45      	ldr	r2, [pc, #276]	; (8004bd4 <HAL_GPIO_Init+0x300>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d101      	bne.n	8004ac6 <HAL_GPIO_Init+0x1f2>
 8004ac2:	2304      	movs	r3, #4
 8004ac4:	e008      	b.n	8004ad8 <HAL_GPIO_Init+0x204>
 8004ac6:	2307      	movs	r3, #7
 8004ac8:	e006      	b.n	8004ad8 <HAL_GPIO_Init+0x204>
 8004aca:	2303      	movs	r3, #3
 8004acc:	e004      	b.n	8004ad8 <HAL_GPIO_Init+0x204>
 8004ace:	2302      	movs	r3, #2
 8004ad0:	e002      	b.n	8004ad8 <HAL_GPIO_Init+0x204>
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e000      	b.n	8004ad8 <HAL_GPIO_Init+0x204>
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	69fa      	ldr	r2, [r7, #28]
 8004ada:	f002 0203 	and.w	r2, r2, #3
 8004ade:	0092      	lsls	r2, r2, #2
 8004ae0:	4093      	lsls	r3, r2
 8004ae2:	69ba      	ldr	r2, [r7, #24]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ae8:	4935      	ldr	r1, [pc, #212]	; (8004bc0 <HAL_GPIO_Init+0x2ec>)
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	089b      	lsrs	r3, r3, #2
 8004aee:	3302      	adds	r3, #2
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004af6:	4b38      	ldr	r3, [pc, #224]	; (8004bd8 <HAL_GPIO_Init+0x304>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	43db      	mvns	r3, r3
 8004b00:	69ba      	ldr	r2, [r7, #24]
 8004b02:	4013      	ands	r3, r2
 8004b04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d003      	beq.n	8004b1a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004b12:	69ba      	ldr	r2, [r7, #24]
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b1a:	4a2f      	ldr	r2, [pc, #188]	; (8004bd8 <HAL_GPIO_Init+0x304>)
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004b20:	4b2d      	ldr	r3, [pc, #180]	; (8004bd8 <HAL_GPIO_Init+0x304>)
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	43db      	mvns	r3, r3
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d003      	beq.n	8004b44 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b44:	4a24      	ldr	r2, [pc, #144]	; (8004bd8 <HAL_GPIO_Init+0x304>)
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b4a:	4b23      	ldr	r3, [pc, #140]	; (8004bd8 <HAL_GPIO_Init+0x304>)
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	43db      	mvns	r3, r3
 8004b54:	69ba      	ldr	r2, [r7, #24]
 8004b56:	4013      	ands	r3, r2
 8004b58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d003      	beq.n	8004b6e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004b66:	69ba      	ldr	r2, [r7, #24]
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b6e:	4a1a      	ldr	r2, [pc, #104]	; (8004bd8 <HAL_GPIO_Init+0x304>)
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b74:	4b18      	ldr	r3, [pc, #96]	; (8004bd8 <HAL_GPIO_Init+0x304>)
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	43db      	mvns	r3, r3
 8004b7e:	69ba      	ldr	r2, [r7, #24]
 8004b80:	4013      	ands	r3, r2
 8004b82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d003      	beq.n	8004b98 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004b90:	69ba      	ldr	r2, [r7, #24]
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b98:	4a0f      	ldr	r2, [pc, #60]	; (8004bd8 <HAL_GPIO_Init+0x304>)
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	61fb      	str	r3, [r7, #28]
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	2b0f      	cmp	r3, #15
 8004ba8:	f67f aea2 	bls.w	80048f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004bac:	bf00      	nop
 8004bae:	bf00      	nop
 8004bb0:	3724      	adds	r7, #36	; 0x24
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	40023800 	.word	0x40023800
 8004bc0:	40013800 	.word	0x40013800
 8004bc4:	40020000 	.word	0x40020000
 8004bc8:	40020400 	.word	0x40020400
 8004bcc:	40020800 	.word	0x40020800
 8004bd0:	40020c00 	.word	0x40020c00
 8004bd4:	40021000 	.word	0x40021000
 8004bd8:	40013c00 	.word	0x40013c00

08004bdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	460b      	mov	r3, r1
 8004be6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	691a      	ldr	r2, [r3, #16]
 8004bec:	887b      	ldrh	r3, [r7, #2]
 8004bee:	4013      	ands	r3, r2
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d002      	beq.n	8004bfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	73fb      	strb	r3, [r7, #15]
 8004bf8:	e001      	b.n	8004bfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3714      	adds	r7, #20
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	460b      	mov	r3, r1
 8004c16:	807b      	strh	r3, [r7, #2]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c1c:	787b      	ldrb	r3, [r7, #1]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d003      	beq.n	8004c2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c22:	887a      	ldrh	r2, [r7, #2]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004c28:	e003      	b.n	8004c32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c2a:	887b      	ldrh	r3, [r7, #2]
 8004c2c:	041a      	lsls	r2, r3, #16
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	619a      	str	r2, [r3, #24]
}
 8004c32:	bf00      	nop
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr

08004c3e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004c3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c40:	b08f      	sub	sp, #60	; 0x3c
 8004c42:	af0a      	add	r7, sp, #40	; 0x28
 8004c44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d101      	bne.n	8004c50 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e054      	b.n	8004cfa <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d106      	bne.n	8004c70 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f007 fa22 	bl	800c0b4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2203      	movs	r2, #3
 8004c74:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d102      	bne.n	8004c8a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f004 fbc4 	bl	800941c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	603b      	str	r3, [r7, #0]
 8004c9a:	687e      	ldr	r6, [r7, #4]
 8004c9c:	466d      	mov	r5, sp
 8004c9e:	f106 0410 	add.w	r4, r6, #16
 8004ca2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ca4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ca6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ca8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004caa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004cae:	e885 0003 	stmia.w	r5, {r0, r1}
 8004cb2:	1d33      	adds	r3, r6, #4
 8004cb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004cb6:	6838      	ldr	r0, [r7, #0]
 8004cb8:	f004 fb3e 	bl	8009338 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f004 fbbb 	bl	800943e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	603b      	str	r3, [r7, #0]
 8004cce:	687e      	ldr	r6, [r7, #4]
 8004cd0:	466d      	mov	r5, sp
 8004cd2:	f106 0410 	add.w	r4, r6, #16
 8004cd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cde:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ce2:	e885 0003 	stmia.w	r5, {r0, r1}
 8004ce6:	1d33      	adds	r3, r6, #4
 8004ce8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004cea:	6838      	ldr	r0, [r7, #0]
 8004cec:	f004 fcce 	bl	800968c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3714      	adds	r7, #20
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d02 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004d02:	b590      	push	{r4, r7, lr}
 8004d04:	b089      	sub	sp, #36	; 0x24
 8004d06:	af04      	add	r7, sp, #16
 8004d08:	6078      	str	r0, [r7, #4]
 8004d0a:	4608      	mov	r0, r1
 8004d0c:	4611      	mov	r1, r2
 8004d0e:	461a      	mov	r2, r3
 8004d10:	4603      	mov	r3, r0
 8004d12:	70fb      	strb	r3, [r7, #3]
 8004d14:	460b      	mov	r3, r1
 8004d16:	70bb      	strb	r3, [r7, #2]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d101      	bne.n	8004d2a <HAL_HCD_HC_Init+0x28>
 8004d26:	2302      	movs	r3, #2
 8004d28:	e076      	b.n	8004e18 <HAL_HCD_HC_Init+0x116>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8004d32:	78fb      	ldrb	r3, [r7, #3]
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	212c      	movs	r1, #44	; 0x2c
 8004d38:	fb01 f303 	mul.w	r3, r1, r3
 8004d3c:	4413      	add	r3, r2
 8004d3e:	333d      	adds	r3, #61	; 0x3d
 8004d40:	2200      	movs	r2, #0
 8004d42:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004d44:	78fb      	ldrb	r3, [r7, #3]
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	212c      	movs	r1, #44	; 0x2c
 8004d4a:	fb01 f303 	mul.w	r3, r1, r3
 8004d4e:	4413      	add	r3, r2
 8004d50:	3338      	adds	r3, #56	; 0x38
 8004d52:	787a      	ldrb	r2, [r7, #1]
 8004d54:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004d56:	78fb      	ldrb	r3, [r7, #3]
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	212c      	movs	r1, #44	; 0x2c
 8004d5c:	fb01 f303 	mul.w	r3, r1, r3
 8004d60:	4413      	add	r3, r2
 8004d62:	3340      	adds	r3, #64	; 0x40
 8004d64:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004d66:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004d68:	78fb      	ldrb	r3, [r7, #3]
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	212c      	movs	r1, #44	; 0x2c
 8004d6e:	fb01 f303 	mul.w	r3, r1, r3
 8004d72:	4413      	add	r3, r2
 8004d74:	3339      	adds	r3, #57	; 0x39
 8004d76:	78fa      	ldrb	r2, [r7, #3]
 8004d78:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004d7a:	78fb      	ldrb	r3, [r7, #3]
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	212c      	movs	r1, #44	; 0x2c
 8004d80:	fb01 f303 	mul.w	r3, r1, r3
 8004d84:	4413      	add	r3, r2
 8004d86:	333f      	adds	r3, #63	; 0x3f
 8004d88:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004d8c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004d8e:	78fb      	ldrb	r3, [r7, #3]
 8004d90:	78ba      	ldrb	r2, [r7, #2]
 8004d92:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d96:	b2d0      	uxtb	r0, r2
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	212c      	movs	r1, #44	; 0x2c
 8004d9c:	fb01 f303 	mul.w	r3, r1, r3
 8004da0:	4413      	add	r3, r2
 8004da2:	333a      	adds	r3, #58	; 0x3a
 8004da4:	4602      	mov	r2, r0
 8004da6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004da8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	da09      	bge.n	8004dc4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004db0:	78fb      	ldrb	r3, [r7, #3]
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	212c      	movs	r1, #44	; 0x2c
 8004db6:	fb01 f303 	mul.w	r3, r1, r3
 8004dba:	4413      	add	r3, r2
 8004dbc:	333b      	adds	r3, #59	; 0x3b
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	701a      	strb	r2, [r3, #0]
 8004dc2:	e008      	b.n	8004dd6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004dc4:	78fb      	ldrb	r3, [r7, #3]
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	212c      	movs	r1, #44	; 0x2c
 8004dca:	fb01 f303 	mul.w	r3, r1, r3
 8004dce:	4413      	add	r3, r2
 8004dd0:	333b      	adds	r3, #59	; 0x3b
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004dd6:	78fb      	ldrb	r3, [r7, #3]
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	212c      	movs	r1, #44	; 0x2c
 8004ddc:	fb01 f303 	mul.w	r3, r1, r3
 8004de0:	4413      	add	r3, r2
 8004de2:	333c      	adds	r3, #60	; 0x3c
 8004de4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004de8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6818      	ldr	r0, [r3, #0]
 8004dee:	787c      	ldrb	r4, [r7, #1]
 8004df0:	78ba      	ldrb	r2, [r7, #2]
 8004df2:	78f9      	ldrb	r1, [r7, #3]
 8004df4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004df6:	9302      	str	r3, [sp, #8]
 8004df8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004dfc:	9301      	str	r3, [sp, #4]
 8004dfe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004e02:	9300      	str	r3, [sp, #0]
 8004e04:	4623      	mov	r3, r4
 8004e06:	f004 fdc3 	bl	8009990 <USB_HC_Init>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd90      	pop	{r4, r7, pc}

08004e20 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	460b      	mov	r3, r1
 8004e2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d101      	bne.n	8004e3e <HAL_HCD_HC_Halt+0x1e>
 8004e3a:	2302      	movs	r3, #2
 8004e3c:	e00f      	b.n	8004e5e <HAL_HCD_HC_Halt+0x3e>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	78fa      	ldrb	r2, [r7, #3]
 8004e4c:	4611      	mov	r1, r2
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f004 ffff 	bl	8009e52 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
	...

08004e68 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	4608      	mov	r0, r1
 8004e72:	4611      	mov	r1, r2
 8004e74:	461a      	mov	r2, r3
 8004e76:	4603      	mov	r3, r0
 8004e78:	70fb      	strb	r3, [r7, #3]
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	70bb      	strb	r3, [r7, #2]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004e82:	78fb      	ldrb	r3, [r7, #3]
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	212c      	movs	r1, #44	; 0x2c
 8004e88:	fb01 f303 	mul.w	r3, r1, r3
 8004e8c:	4413      	add	r3, r2
 8004e8e:	333b      	adds	r3, #59	; 0x3b
 8004e90:	78ba      	ldrb	r2, [r7, #2]
 8004e92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004e94:	78fb      	ldrb	r3, [r7, #3]
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	212c      	movs	r1, #44	; 0x2c
 8004e9a:	fb01 f303 	mul.w	r3, r1, r3
 8004e9e:	4413      	add	r3, r2
 8004ea0:	333f      	adds	r3, #63	; 0x3f
 8004ea2:	787a      	ldrb	r2, [r7, #1]
 8004ea4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004ea6:	7c3b      	ldrb	r3, [r7, #16]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d112      	bne.n	8004ed2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004eac:	78fb      	ldrb	r3, [r7, #3]
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	212c      	movs	r1, #44	; 0x2c
 8004eb2:	fb01 f303 	mul.w	r3, r1, r3
 8004eb6:	4413      	add	r3, r2
 8004eb8:	3342      	adds	r3, #66	; 0x42
 8004eba:	2203      	movs	r2, #3
 8004ebc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004ebe:	78fb      	ldrb	r3, [r7, #3]
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	212c      	movs	r1, #44	; 0x2c
 8004ec4:	fb01 f303 	mul.w	r3, r1, r3
 8004ec8:	4413      	add	r3, r2
 8004eca:	333d      	adds	r3, #61	; 0x3d
 8004ecc:	7f3a      	ldrb	r2, [r7, #28]
 8004ece:	701a      	strb	r2, [r3, #0]
 8004ed0:	e008      	b.n	8004ee4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004ed2:	78fb      	ldrb	r3, [r7, #3]
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	212c      	movs	r1, #44	; 0x2c
 8004ed8:	fb01 f303 	mul.w	r3, r1, r3
 8004edc:	4413      	add	r3, r2
 8004ede:	3342      	adds	r3, #66	; 0x42
 8004ee0:	2202      	movs	r2, #2
 8004ee2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004ee4:	787b      	ldrb	r3, [r7, #1]
 8004ee6:	2b03      	cmp	r3, #3
 8004ee8:	f200 80c6 	bhi.w	8005078 <HAL_HCD_HC_SubmitRequest+0x210>
 8004eec:	a201      	add	r2, pc, #4	; (adr r2, 8004ef4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8004eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef2:	bf00      	nop
 8004ef4:	08004f05 	.word	0x08004f05
 8004ef8:	08005065 	.word	0x08005065
 8004efc:	08004f69 	.word	0x08004f69
 8004f00:	08004fe7 	.word	0x08004fe7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004f04:	7c3b      	ldrb	r3, [r7, #16]
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	f040 80b8 	bne.w	800507c <HAL_HCD_HC_SubmitRequest+0x214>
 8004f0c:	78bb      	ldrb	r3, [r7, #2]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f040 80b4 	bne.w	800507c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8004f14:	8b3b      	ldrh	r3, [r7, #24]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d108      	bne.n	8004f2c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004f1a:	78fb      	ldrb	r3, [r7, #3]
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	212c      	movs	r1, #44	; 0x2c
 8004f20:	fb01 f303 	mul.w	r3, r1, r3
 8004f24:	4413      	add	r3, r2
 8004f26:	3355      	adds	r3, #85	; 0x55
 8004f28:	2201      	movs	r2, #1
 8004f2a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004f2c:	78fb      	ldrb	r3, [r7, #3]
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	212c      	movs	r1, #44	; 0x2c
 8004f32:	fb01 f303 	mul.w	r3, r1, r3
 8004f36:	4413      	add	r3, r2
 8004f38:	3355      	adds	r3, #85	; 0x55
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d109      	bne.n	8004f54 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004f40:	78fb      	ldrb	r3, [r7, #3]
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	212c      	movs	r1, #44	; 0x2c
 8004f46:	fb01 f303 	mul.w	r3, r1, r3
 8004f4a:	4413      	add	r3, r2
 8004f4c:	3342      	adds	r3, #66	; 0x42
 8004f4e:	2200      	movs	r2, #0
 8004f50:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004f52:	e093      	b.n	800507c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004f54:	78fb      	ldrb	r3, [r7, #3]
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	212c      	movs	r1, #44	; 0x2c
 8004f5a:	fb01 f303 	mul.w	r3, r1, r3
 8004f5e:	4413      	add	r3, r2
 8004f60:	3342      	adds	r3, #66	; 0x42
 8004f62:	2202      	movs	r2, #2
 8004f64:	701a      	strb	r2, [r3, #0]
      break;
 8004f66:	e089      	b.n	800507c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004f68:	78bb      	ldrb	r3, [r7, #2]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d11d      	bne.n	8004faa <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004f6e:	78fb      	ldrb	r3, [r7, #3]
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	212c      	movs	r1, #44	; 0x2c
 8004f74:	fb01 f303 	mul.w	r3, r1, r3
 8004f78:	4413      	add	r3, r2
 8004f7a:	3355      	adds	r3, #85	; 0x55
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d109      	bne.n	8004f96 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004f82:	78fb      	ldrb	r3, [r7, #3]
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	212c      	movs	r1, #44	; 0x2c
 8004f88:	fb01 f303 	mul.w	r3, r1, r3
 8004f8c:	4413      	add	r3, r2
 8004f8e:	3342      	adds	r3, #66	; 0x42
 8004f90:	2200      	movs	r2, #0
 8004f92:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004f94:	e073      	b.n	800507e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004f96:	78fb      	ldrb	r3, [r7, #3]
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	212c      	movs	r1, #44	; 0x2c
 8004f9c:	fb01 f303 	mul.w	r3, r1, r3
 8004fa0:	4413      	add	r3, r2
 8004fa2:	3342      	adds	r3, #66	; 0x42
 8004fa4:	2202      	movs	r2, #2
 8004fa6:	701a      	strb	r2, [r3, #0]
      break;
 8004fa8:	e069      	b.n	800507e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004faa:	78fb      	ldrb	r3, [r7, #3]
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	212c      	movs	r1, #44	; 0x2c
 8004fb0:	fb01 f303 	mul.w	r3, r1, r3
 8004fb4:	4413      	add	r3, r2
 8004fb6:	3354      	adds	r3, #84	; 0x54
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d109      	bne.n	8004fd2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004fbe:	78fb      	ldrb	r3, [r7, #3]
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	212c      	movs	r1, #44	; 0x2c
 8004fc4:	fb01 f303 	mul.w	r3, r1, r3
 8004fc8:	4413      	add	r3, r2
 8004fca:	3342      	adds	r3, #66	; 0x42
 8004fcc:	2200      	movs	r2, #0
 8004fce:	701a      	strb	r2, [r3, #0]
      break;
 8004fd0:	e055      	b.n	800507e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004fd2:	78fb      	ldrb	r3, [r7, #3]
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	212c      	movs	r1, #44	; 0x2c
 8004fd8:	fb01 f303 	mul.w	r3, r1, r3
 8004fdc:	4413      	add	r3, r2
 8004fde:	3342      	adds	r3, #66	; 0x42
 8004fe0:	2202      	movs	r2, #2
 8004fe2:	701a      	strb	r2, [r3, #0]
      break;
 8004fe4:	e04b      	b.n	800507e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004fe6:	78bb      	ldrb	r3, [r7, #2]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d11d      	bne.n	8005028 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004fec:	78fb      	ldrb	r3, [r7, #3]
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	212c      	movs	r1, #44	; 0x2c
 8004ff2:	fb01 f303 	mul.w	r3, r1, r3
 8004ff6:	4413      	add	r3, r2
 8004ff8:	3355      	adds	r3, #85	; 0x55
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d109      	bne.n	8005014 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005000:	78fb      	ldrb	r3, [r7, #3]
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	212c      	movs	r1, #44	; 0x2c
 8005006:	fb01 f303 	mul.w	r3, r1, r3
 800500a:	4413      	add	r3, r2
 800500c:	3342      	adds	r3, #66	; 0x42
 800500e:	2200      	movs	r2, #0
 8005010:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005012:	e034      	b.n	800507e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005014:	78fb      	ldrb	r3, [r7, #3]
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	212c      	movs	r1, #44	; 0x2c
 800501a:	fb01 f303 	mul.w	r3, r1, r3
 800501e:	4413      	add	r3, r2
 8005020:	3342      	adds	r3, #66	; 0x42
 8005022:	2202      	movs	r2, #2
 8005024:	701a      	strb	r2, [r3, #0]
      break;
 8005026:	e02a      	b.n	800507e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005028:	78fb      	ldrb	r3, [r7, #3]
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	212c      	movs	r1, #44	; 0x2c
 800502e:	fb01 f303 	mul.w	r3, r1, r3
 8005032:	4413      	add	r3, r2
 8005034:	3354      	adds	r3, #84	; 0x54
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d109      	bne.n	8005050 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800503c:	78fb      	ldrb	r3, [r7, #3]
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	212c      	movs	r1, #44	; 0x2c
 8005042:	fb01 f303 	mul.w	r3, r1, r3
 8005046:	4413      	add	r3, r2
 8005048:	3342      	adds	r3, #66	; 0x42
 800504a:	2200      	movs	r2, #0
 800504c:	701a      	strb	r2, [r3, #0]
      break;
 800504e:	e016      	b.n	800507e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005050:	78fb      	ldrb	r3, [r7, #3]
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	212c      	movs	r1, #44	; 0x2c
 8005056:	fb01 f303 	mul.w	r3, r1, r3
 800505a:	4413      	add	r3, r2
 800505c:	3342      	adds	r3, #66	; 0x42
 800505e:	2202      	movs	r2, #2
 8005060:	701a      	strb	r2, [r3, #0]
      break;
 8005062:	e00c      	b.n	800507e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005064:	78fb      	ldrb	r3, [r7, #3]
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	212c      	movs	r1, #44	; 0x2c
 800506a:	fb01 f303 	mul.w	r3, r1, r3
 800506e:	4413      	add	r3, r2
 8005070:	3342      	adds	r3, #66	; 0x42
 8005072:	2200      	movs	r2, #0
 8005074:	701a      	strb	r2, [r3, #0]
      break;
 8005076:	e002      	b.n	800507e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8005078:	bf00      	nop
 800507a:	e000      	b.n	800507e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800507c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800507e:	78fb      	ldrb	r3, [r7, #3]
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	212c      	movs	r1, #44	; 0x2c
 8005084:	fb01 f303 	mul.w	r3, r1, r3
 8005088:	4413      	add	r3, r2
 800508a:	3344      	adds	r3, #68	; 0x44
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005090:	78fb      	ldrb	r3, [r7, #3]
 8005092:	8b3a      	ldrh	r2, [r7, #24]
 8005094:	6879      	ldr	r1, [r7, #4]
 8005096:	202c      	movs	r0, #44	; 0x2c
 8005098:	fb00 f303 	mul.w	r3, r0, r3
 800509c:	440b      	add	r3, r1
 800509e:	334c      	adds	r3, #76	; 0x4c
 80050a0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80050a2:	78fb      	ldrb	r3, [r7, #3]
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	212c      	movs	r1, #44	; 0x2c
 80050a8:	fb01 f303 	mul.w	r3, r1, r3
 80050ac:	4413      	add	r3, r2
 80050ae:	3360      	adds	r3, #96	; 0x60
 80050b0:	2200      	movs	r2, #0
 80050b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80050b4:	78fb      	ldrb	r3, [r7, #3]
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	212c      	movs	r1, #44	; 0x2c
 80050ba:	fb01 f303 	mul.w	r3, r1, r3
 80050be:	4413      	add	r3, r2
 80050c0:	3350      	adds	r3, #80	; 0x50
 80050c2:	2200      	movs	r2, #0
 80050c4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80050c6:	78fb      	ldrb	r3, [r7, #3]
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	212c      	movs	r1, #44	; 0x2c
 80050cc:	fb01 f303 	mul.w	r3, r1, r3
 80050d0:	4413      	add	r3, r2
 80050d2:	3339      	adds	r3, #57	; 0x39
 80050d4:	78fa      	ldrb	r2, [r7, #3]
 80050d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80050d8:	78fb      	ldrb	r3, [r7, #3]
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	212c      	movs	r1, #44	; 0x2c
 80050de:	fb01 f303 	mul.w	r3, r1, r3
 80050e2:	4413      	add	r3, r2
 80050e4:	3361      	adds	r3, #97	; 0x61
 80050e6:	2200      	movs	r2, #0
 80050e8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6818      	ldr	r0, [r3, #0]
 80050ee:	78fb      	ldrb	r3, [r7, #3]
 80050f0:	222c      	movs	r2, #44	; 0x2c
 80050f2:	fb02 f303 	mul.w	r3, r2, r3
 80050f6:	3338      	adds	r3, #56	; 0x38
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	18d1      	adds	r1, r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	b2db      	uxtb	r3, r3
 8005102:	461a      	mov	r2, r3
 8005104:	f004 fd52 	bl	8009bac <USB_HC_StartXfer>
 8005108:	4603      	mov	r3, r0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3708      	adds	r7, #8
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop

08005114 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4618      	mov	r0, r3
 800512c:	f004 fa6b 	bl	8009606 <USB_GetMode>
 8005130:	4603      	mov	r3, r0
 8005132:	2b01      	cmp	r3, #1
 8005134:	f040 80ef 	bne.w	8005316 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4618      	mov	r0, r3
 800513e:	f004 fa4f 	bl	80095e0 <USB_ReadInterrupts>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	f000 80e5 	beq.w	8005314 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4618      	mov	r0, r3
 8005150:	f004 fa46 	bl	80095e0 <USB_ReadInterrupts>
 8005154:	4603      	mov	r3, r0
 8005156:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800515a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800515e:	d104      	bne.n	800516a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005168:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4618      	mov	r0, r3
 8005170:	f004 fa36 	bl	80095e0 <USB_ReadInterrupts>
 8005174:	4603      	mov	r3, r0
 8005176:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800517a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800517e:	d104      	bne.n	800518a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005188:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4618      	mov	r0, r3
 8005190:	f004 fa26 	bl	80095e0 <USB_ReadInterrupts>
 8005194:	4603      	mov	r3, r0
 8005196:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800519a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800519e:	d104      	bne.n	80051aa <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80051a8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f004 fa16 	bl	80095e0 <USB_ReadInterrupts>
 80051b4:	4603      	mov	r3, r0
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d103      	bne.n	80051c6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2202      	movs	r2, #2
 80051c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4618      	mov	r0, r3
 80051cc:	f004 fa08 	bl	80095e0 <USB_ReadInterrupts>
 80051d0:	4603      	mov	r3, r0
 80051d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051da:	d115      	bne.n	8005208 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80051e4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d108      	bne.n	8005208 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f006 ffda 	bl	800c1b0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2101      	movs	r1, #1
 8005202:	4618      	mov	r0, r3
 8005204:	f004 fafe 	bl	8009804 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4618      	mov	r0, r3
 800520e:	f004 f9e7 	bl	80095e0 <USB_ReadInterrupts>
 8005212:	4603      	mov	r3, r0
 8005214:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005218:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800521c:	d102      	bne.n	8005224 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f001 f9ff 	bl	8006622 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4618      	mov	r0, r3
 800522a:	f004 f9d9 	bl	80095e0 <USB_ReadInterrupts>
 800522e:	4603      	mov	r3, r0
 8005230:	f003 0308 	and.w	r3, r3, #8
 8005234:	2b08      	cmp	r3, #8
 8005236:	d106      	bne.n	8005246 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f006 ff9d 	bl	800c178 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2208      	movs	r2, #8
 8005244:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4618      	mov	r0, r3
 800524c:	f004 f9c8 	bl	80095e0 <USB_ReadInterrupts>
 8005250:	4603      	mov	r3, r0
 8005252:	f003 0310 	and.w	r3, r3, #16
 8005256:	2b10      	cmp	r3, #16
 8005258:	d101      	bne.n	800525e <HAL_HCD_IRQHandler+0x14a>
 800525a:	2301      	movs	r3, #1
 800525c:	e000      	b.n	8005260 <HAL_HCD_IRQHandler+0x14c>
 800525e:	2300      	movs	r3, #0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d012      	beq.n	800528a <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	699a      	ldr	r2, [r3, #24]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f022 0210 	bic.w	r2, r2, #16
 8005272:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f001 f902 	bl	800647e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	699a      	ldr	r2, [r3, #24]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f042 0210 	orr.w	r2, r2, #16
 8005288:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4618      	mov	r0, r3
 8005290:	f004 f9a6 	bl	80095e0 <USB_ReadInterrupts>
 8005294:	4603      	mov	r3, r0
 8005296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800529a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800529e:	d13a      	bne.n	8005316 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4618      	mov	r0, r3
 80052a6:	f004 fdc3 	bl	8009e30 <USB_HC_ReadInterrupt>
 80052aa:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80052ac:	2300      	movs	r3, #0
 80052ae:	617b      	str	r3, [r7, #20]
 80052b0:	e025      	b.n	80052fe <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	f003 030f 	and.w	r3, r3, #15
 80052b8:	68ba      	ldr	r2, [r7, #8]
 80052ba:	fa22 f303 	lsr.w	r3, r2, r3
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d018      	beq.n	80052f8 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	015a      	lsls	r2, r3, #5
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	4413      	add	r3, r2
 80052ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052dc:	d106      	bne.n	80052ec <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	4619      	mov	r1, r3
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 f8ab 	bl	8005440 <HCD_HC_IN_IRQHandler>
 80052ea:	e005      	b.n	80052f8 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	4619      	mov	r1, r3
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 fcc6 	bl	8005c84 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	3301      	adds	r3, #1
 80052fc:	617b      	str	r3, [r7, #20]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	429a      	cmp	r2, r3
 8005306:	d3d4      	bcc.n	80052b2 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005310:	615a      	str	r2, [r3, #20]
 8005312:	e000      	b.n	8005316 <HAL_HCD_IRQHandler+0x202>
      return;
 8005314:	bf00      	nop
    }
  }
}
 8005316:	3718      	adds	r7, #24
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800532a:	2b01      	cmp	r3, #1
 800532c:	d101      	bne.n	8005332 <HAL_HCD_Start+0x16>
 800532e:	2302      	movs	r3, #2
 8005330:	e013      	b.n	800535a <HAL_HCD_Start+0x3e>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4618      	mov	r0, r3
 8005340:	f004 f85b 	bl	80093fa <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2101      	movs	r1, #1
 800534a:	4618      	mov	r0, r3
 800534c:	f004 fabe 	bl	80098cc <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3708      	adds	r7, #8
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b082      	sub	sp, #8
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005370:	2b01      	cmp	r3, #1
 8005372:	d101      	bne.n	8005378 <HAL_HCD_Stop+0x16>
 8005374:	2302      	movs	r3, #2
 8005376:	e00d      	b.n	8005394 <HAL_HCD_Stop+0x32>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4618      	mov	r0, r3
 8005386:	f004 febd 	bl	800a104 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3708      	adds	r7, #8
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4618      	mov	r0, r3
 80053aa:	f004 fa65 	bl	8009878 <USB_ResetPort>
 80053ae:	4603      	mov	r3, r0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3708      	adds	r7, #8
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	460b      	mov	r3, r1
 80053c2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80053c4:	78fb      	ldrb	r3, [r7, #3]
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	212c      	movs	r1, #44	; 0x2c
 80053ca:	fb01 f303 	mul.w	r3, r1, r3
 80053ce:	4413      	add	r3, r2
 80053d0:	3360      	adds	r3, #96	; 0x60
 80053d2:	781b      	ldrb	r3, [r3, #0]
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	460b      	mov	r3, r1
 80053ea:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80053ec:	78fb      	ldrb	r3, [r7, #3]
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	212c      	movs	r1, #44	; 0x2c
 80053f2:	fb01 f303 	mul.w	r3, r1, r3
 80053f6:	4413      	add	r3, r2
 80053f8:	3350      	adds	r3, #80	; 0x50
 80053fa:	681b      	ldr	r3, [r3, #0]
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4618      	mov	r0, r3
 8005416:	f004 faa9 	bl	800996c <USB_GetCurrentFrame>
 800541a:	4603      	mov	r3, r0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3708      	adds	r7, #8
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4618      	mov	r0, r3
 8005432:	f004 fa84 	bl	800993e <USB_GetHostSpeed>
 8005436:	4603      	mov	r3, r0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3708      	adds	r7, #8
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b086      	sub	sp, #24
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	460b      	mov	r3, r1
 800544a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005456:	78fb      	ldrb	r3, [r7, #3]
 8005458:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	015a      	lsls	r2, r3, #5
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	4413      	add	r3, r2
 8005462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f003 0304 	and.w	r3, r3, #4
 800546c:	2b04      	cmp	r3, #4
 800546e:	d119      	bne.n	80054a4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	015a      	lsls	r2, r3, #5
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	4413      	add	r3, r2
 8005478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800547c:	461a      	mov	r2, r3
 800547e:	2304      	movs	r3, #4
 8005480:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	015a      	lsls	r2, r3, #5
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	4413      	add	r3, r2
 800548a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	0151      	lsls	r1, r2, #5
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	440a      	add	r2, r1
 8005498:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800549c:	f043 0302 	orr.w	r3, r3, #2
 80054a0:	60d3      	str	r3, [r2, #12]
 80054a2:	e101      	b.n	80056a8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	015a      	lsls	r2, r3, #5
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054ba:	d12b      	bne.n	8005514 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	015a      	lsls	r2, r3, #5
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	4413      	add	r3, r2
 80054c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c8:	461a      	mov	r2, r3
 80054ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	212c      	movs	r1, #44	; 0x2c
 80054d6:	fb01 f303 	mul.w	r3, r1, r3
 80054da:	4413      	add	r3, r2
 80054dc:	3361      	adds	r3, #97	; 0x61
 80054de:	2207      	movs	r2, #7
 80054e0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	015a      	lsls	r2, r3, #5
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	4413      	add	r3, r2
 80054ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	0151      	lsls	r1, r2, #5
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	440a      	add	r2, r1
 80054f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054fc:	f043 0302 	orr.w	r3, r3, #2
 8005500:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	b2d2      	uxtb	r2, r2
 800550a:	4611      	mov	r1, r2
 800550c:	4618      	mov	r0, r3
 800550e:	f004 fca0 	bl	8009e52 <USB_HC_Halt>
 8005512:	e0c9      	b.n	80056a8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	4413      	add	r3, r2
 800551c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f003 0320 	and.w	r3, r3, #32
 8005526:	2b20      	cmp	r3, #32
 8005528:	d109      	bne.n	800553e <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	015a      	lsls	r2, r3, #5
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	4413      	add	r3, r2
 8005532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005536:	461a      	mov	r2, r3
 8005538:	2320      	movs	r3, #32
 800553a:	6093      	str	r3, [r2, #8]
 800553c:	e0b4      	b.n	80056a8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	015a      	lsls	r2, r3, #5
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	4413      	add	r3, r2
 8005546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	f003 0308 	and.w	r3, r3, #8
 8005550:	2b08      	cmp	r3, #8
 8005552:	d133      	bne.n	80055bc <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	015a      	lsls	r2, r3, #5
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	4413      	add	r3, r2
 800555c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	0151      	lsls	r1, r2, #5
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	440a      	add	r2, r1
 800556a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800556e:	f043 0302 	orr.w	r3, r3, #2
 8005572:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	212c      	movs	r1, #44	; 0x2c
 800557a:	fb01 f303 	mul.w	r3, r1, r3
 800557e:	4413      	add	r3, r2
 8005580:	3361      	adds	r3, #97	; 0x61
 8005582:	2205      	movs	r2, #5
 8005584:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	015a      	lsls	r2, r3, #5
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	4413      	add	r3, r2
 800558e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005592:	461a      	mov	r2, r3
 8005594:	2310      	movs	r3, #16
 8005596:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	015a      	lsls	r2, r3, #5
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	4413      	add	r3, r2
 80055a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055a4:	461a      	mov	r2, r3
 80055a6:	2308      	movs	r3, #8
 80055a8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	b2d2      	uxtb	r2, r2
 80055b2:	4611      	mov	r1, r2
 80055b4:	4618      	mov	r0, r3
 80055b6:	f004 fc4c 	bl	8009e52 <USB_HC_Halt>
 80055ba:	e075      	b.n	80056a8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	015a      	lsls	r2, r3, #5
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	4413      	add	r3, r2
 80055c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055d2:	d134      	bne.n	800563e <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	0151      	lsls	r1, r2, #5
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	440a      	add	r2, r1
 80055ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055ee:	f043 0302 	orr.w	r3, r3, #2
 80055f2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	212c      	movs	r1, #44	; 0x2c
 80055fa:	fb01 f303 	mul.w	r3, r1, r3
 80055fe:	4413      	add	r3, r2
 8005600:	3361      	adds	r3, #97	; 0x61
 8005602:	2208      	movs	r2, #8
 8005604:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	015a      	lsls	r2, r3, #5
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	4413      	add	r3, r2
 800560e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005612:	461a      	mov	r2, r3
 8005614:	2310      	movs	r3, #16
 8005616:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	4413      	add	r3, r2
 8005620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005624:	461a      	mov	r2, r3
 8005626:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800562a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	b2d2      	uxtb	r2, r2
 8005634:	4611      	mov	r1, r2
 8005636:	4618      	mov	r0, r3
 8005638:	f004 fc0b 	bl	8009e52 <USB_HC_Halt>
 800563c:	e034      	b.n	80056a8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	015a      	lsls	r2, r3, #5
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	4413      	add	r3, r2
 8005646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005650:	2b80      	cmp	r3, #128	; 0x80
 8005652:	d129      	bne.n	80056a8 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	015a      	lsls	r2, r3, #5
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	4413      	add	r3, r2
 800565c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	0151      	lsls	r1, r2, #5
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	440a      	add	r2, r1
 800566a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800566e:	f043 0302 	orr.w	r3, r3, #2
 8005672:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	212c      	movs	r1, #44	; 0x2c
 800567a:	fb01 f303 	mul.w	r3, r1, r3
 800567e:	4413      	add	r3, r2
 8005680:	3361      	adds	r3, #97	; 0x61
 8005682:	2206      	movs	r2, #6
 8005684:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	b2d2      	uxtb	r2, r2
 800568e:	4611      	mov	r1, r2
 8005690:	4618      	mov	r0, r3
 8005692:	f004 fbde 	bl	8009e52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	015a      	lsls	r2, r3, #5
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	4413      	add	r3, r2
 800569e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056a2:	461a      	mov	r2, r3
 80056a4:	2380      	movs	r3, #128	; 0x80
 80056a6:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	015a      	lsls	r2, r3, #5
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	4413      	add	r3, r2
 80056b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056be:	d122      	bne.n	8005706 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	015a      	lsls	r2, r3, #5
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	4413      	add	r3, r2
 80056c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	0151      	lsls	r1, r2, #5
 80056d2:	693a      	ldr	r2, [r7, #16]
 80056d4:	440a      	add	r2, r1
 80056d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056da:	f043 0302 	orr.w	r3, r3, #2
 80056de:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	b2d2      	uxtb	r2, r2
 80056e8:	4611      	mov	r1, r2
 80056ea:	4618      	mov	r0, r3
 80056ec:	f004 fbb1 	bl	8009e52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	015a      	lsls	r2, r3, #5
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	4413      	add	r3, r2
 80056f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056fc:	461a      	mov	r2, r3
 80056fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005702:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005704:	e2ba      	b.n	8005c7c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	015a      	lsls	r2, r3, #5
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	4413      	add	r3, r2
 800570e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f003 0301 	and.w	r3, r3, #1
 8005718:	2b01      	cmp	r3, #1
 800571a:	f040 811b 	bne.w	8005954 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d019      	beq.n	800575a <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	212c      	movs	r1, #44	; 0x2c
 800572c:	fb01 f303 	mul.w	r3, r1, r3
 8005730:	4413      	add	r3, r2
 8005732:	3348      	adds	r3, #72	; 0x48
 8005734:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	0159      	lsls	r1, r3, #5
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	440b      	add	r3, r1
 800573e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005748:	1ad2      	subs	r2, r2, r3
 800574a:	6879      	ldr	r1, [r7, #4]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	202c      	movs	r0, #44	; 0x2c
 8005750:	fb00 f303 	mul.w	r3, r0, r3
 8005754:	440b      	add	r3, r1
 8005756:	3350      	adds	r3, #80	; 0x50
 8005758:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	212c      	movs	r1, #44	; 0x2c
 8005760:	fb01 f303 	mul.w	r3, r1, r3
 8005764:	4413      	add	r3, r2
 8005766:	3361      	adds	r3, #97	; 0x61
 8005768:	2201      	movs	r2, #1
 800576a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	212c      	movs	r1, #44	; 0x2c
 8005772:	fb01 f303 	mul.w	r3, r1, r3
 8005776:	4413      	add	r3, r2
 8005778:	335c      	adds	r3, #92	; 0x5c
 800577a:	2200      	movs	r2, #0
 800577c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	015a      	lsls	r2, r3, #5
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	4413      	add	r3, r2
 8005786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800578a:	461a      	mov	r2, r3
 800578c:	2301      	movs	r3, #1
 800578e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	212c      	movs	r1, #44	; 0x2c
 8005796:	fb01 f303 	mul.w	r3, r1, r3
 800579a:	4413      	add	r3, r2
 800579c:	333f      	adds	r3, #63	; 0x3f
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d009      	beq.n	80057b8 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	212c      	movs	r1, #44	; 0x2c
 80057aa:	fb01 f303 	mul.w	r3, r1, r3
 80057ae:	4413      	add	r3, r2
 80057b0:	333f      	adds	r3, #63	; 0x3f
 80057b2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d121      	bne.n	80057fc <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	015a      	lsls	r2, r3, #5
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	4413      	add	r3, r2
 80057c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	0151      	lsls	r1, r2, #5
 80057ca:	693a      	ldr	r2, [r7, #16]
 80057cc:	440a      	add	r2, r1
 80057ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057d2:	f043 0302 	orr.w	r3, r3, #2
 80057d6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	b2d2      	uxtb	r2, r2
 80057e0:	4611      	mov	r1, r2
 80057e2:	4618      	mov	r0, r3
 80057e4:	f004 fb35 	bl	8009e52 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	015a      	lsls	r2, r3, #5
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057f4:	461a      	mov	r2, r3
 80057f6:	2310      	movs	r3, #16
 80057f8:	6093      	str	r3, [r2, #8]
 80057fa:	e066      	b.n	80058ca <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	212c      	movs	r1, #44	; 0x2c
 8005802:	fb01 f303 	mul.w	r3, r1, r3
 8005806:	4413      	add	r3, r2
 8005808:	333f      	adds	r3, #63	; 0x3f
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	2b03      	cmp	r3, #3
 800580e:	d127      	bne.n	8005860 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	015a      	lsls	r2, r3, #5
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	4413      	add	r3, r2
 8005818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	0151      	lsls	r1, r2, #5
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	440a      	add	r2, r1
 8005826:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800582a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800582e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	212c      	movs	r1, #44	; 0x2c
 8005836:	fb01 f303 	mul.w	r3, r1, r3
 800583a:	4413      	add	r3, r2
 800583c:	3360      	adds	r3, #96	; 0x60
 800583e:	2201      	movs	r2, #1
 8005840:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	b2d9      	uxtb	r1, r3
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	202c      	movs	r0, #44	; 0x2c
 800584c:	fb00 f303 	mul.w	r3, r0, r3
 8005850:	4413      	add	r3, r2
 8005852:	3360      	adds	r3, #96	; 0x60
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	461a      	mov	r2, r3
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f006 fcb7 	bl	800c1cc <HAL_HCD_HC_NotifyURBChange_Callback>
 800585e:	e034      	b.n	80058ca <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	212c      	movs	r1, #44	; 0x2c
 8005866:	fb01 f303 	mul.w	r3, r1, r3
 800586a:	4413      	add	r3, r2
 800586c:	333f      	adds	r3, #63	; 0x3f
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	2b01      	cmp	r3, #1
 8005872:	d12a      	bne.n	80058ca <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	212c      	movs	r1, #44	; 0x2c
 800587a:	fb01 f303 	mul.w	r3, r1, r3
 800587e:	4413      	add	r3, r2
 8005880:	3360      	adds	r3, #96	; 0x60
 8005882:	2201      	movs	r2, #1
 8005884:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	212c      	movs	r1, #44	; 0x2c
 800588c:	fb01 f303 	mul.w	r3, r1, r3
 8005890:	4413      	add	r3, r2
 8005892:	3354      	adds	r3, #84	; 0x54
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	f083 0301 	eor.w	r3, r3, #1
 800589a:	b2d8      	uxtb	r0, r3
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	212c      	movs	r1, #44	; 0x2c
 80058a2:	fb01 f303 	mul.w	r3, r1, r3
 80058a6:	4413      	add	r3, r2
 80058a8:	3354      	adds	r3, #84	; 0x54
 80058aa:	4602      	mov	r2, r0
 80058ac:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	b2d9      	uxtb	r1, r3
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	202c      	movs	r0, #44	; 0x2c
 80058b8:	fb00 f303 	mul.w	r3, r0, r3
 80058bc:	4413      	add	r3, r2
 80058be:	3360      	adds	r3, #96	; 0x60
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	461a      	mov	r2, r3
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f006 fc81 	bl	800c1cc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d12b      	bne.n	800592a <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	212c      	movs	r1, #44	; 0x2c
 80058d8:	fb01 f303 	mul.w	r3, r1, r3
 80058dc:	4413      	add	r3, r2
 80058de:	3348      	adds	r3, #72	; 0x48
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	6879      	ldr	r1, [r7, #4]
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	202c      	movs	r0, #44	; 0x2c
 80058e8:	fb00 f202 	mul.w	r2, r0, r2
 80058ec:	440a      	add	r2, r1
 80058ee:	3240      	adds	r2, #64	; 0x40
 80058f0:	8812      	ldrh	r2, [r2, #0]
 80058f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80058f6:	f003 0301 	and.w	r3, r3, #1
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	f000 81be 	beq.w	8005c7c <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	212c      	movs	r1, #44	; 0x2c
 8005906:	fb01 f303 	mul.w	r3, r1, r3
 800590a:	4413      	add	r3, r2
 800590c:	3354      	adds	r3, #84	; 0x54
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	f083 0301 	eor.w	r3, r3, #1
 8005914:	b2d8      	uxtb	r0, r3
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	212c      	movs	r1, #44	; 0x2c
 800591c:	fb01 f303 	mul.w	r3, r1, r3
 8005920:	4413      	add	r3, r2
 8005922:	3354      	adds	r3, #84	; 0x54
 8005924:	4602      	mov	r2, r0
 8005926:	701a      	strb	r2, [r3, #0]
}
 8005928:	e1a8      	b.n	8005c7c <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	212c      	movs	r1, #44	; 0x2c
 8005930:	fb01 f303 	mul.w	r3, r1, r3
 8005934:	4413      	add	r3, r2
 8005936:	3354      	adds	r3, #84	; 0x54
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	f083 0301 	eor.w	r3, r3, #1
 800593e:	b2d8      	uxtb	r0, r3
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	212c      	movs	r1, #44	; 0x2c
 8005946:	fb01 f303 	mul.w	r3, r1, r3
 800594a:	4413      	add	r3, r2
 800594c:	3354      	adds	r3, #84	; 0x54
 800594e:	4602      	mov	r2, r0
 8005950:	701a      	strb	r2, [r3, #0]
}
 8005952:	e193      	b.n	8005c7c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	015a      	lsls	r2, r3, #5
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	4413      	add	r3, r2
 800595c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f003 0302 	and.w	r3, r3, #2
 8005966:	2b02      	cmp	r3, #2
 8005968:	f040 8106 	bne.w	8005b78 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	015a      	lsls	r2, r3, #5
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	4413      	add	r3, r2
 8005974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	0151      	lsls	r1, r2, #5
 800597e:	693a      	ldr	r2, [r7, #16]
 8005980:	440a      	add	r2, r1
 8005982:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005986:	f023 0302 	bic.w	r3, r3, #2
 800598a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	212c      	movs	r1, #44	; 0x2c
 8005992:	fb01 f303 	mul.w	r3, r1, r3
 8005996:	4413      	add	r3, r2
 8005998:	3361      	adds	r3, #97	; 0x61
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d109      	bne.n	80059b4 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	212c      	movs	r1, #44	; 0x2c
 80059a6:	fb01 f303 	mul.w	r3, r1, r3
 80059aa:	4413      	add	r3, r2
 80059ac:	3360      	adds	r3, #96	; 0x60
 80059ae:	2201      	movs	r2, #1
 80059b0:	701a      	strb	r2, [r3, #0]
 80059b2:	e0c9      	b.n	8005b48 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	212c      	movs	r1, #44	; 0x2c
 80059ba:	fb01 f303 	mul.w	r3, r1, r3
 80059be:	4413      	add	r3, r2
 80059c0:	3361      	adds	r3, #97	; 0x61
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	2b05      	cmp	r3, #5
 80059c6:	d109      	bne.n	80059dc <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	212c      	movs	r1, #44	; 0x2c
 80059ce:	fb01 f303 	mul.w	r3, r1, r3
 80059d2:	4413      	add	r3, r2
 80059d4:	3360      	adds	r3, #96	; 0x60
 80059d6:	2205      	movs	r2, #5
 80059d8:	701a      	strb	r2, [r3, #0]
 80059da:	e0b5      	b.n	8005b48 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	212c      	movs	r1, #44	; 0x2c
 80059e2:	fb01 f303 	mul.w	r3, r1, r3
 80059e6:	4413      	add	r3, r2
 80059e8:	3361      	adds	r3, #97	; 0x61
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	2b06      	cmp	r3, #6
 80059ee:	d009      	beq.n	8005a04 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	212c      	movs	r1, #44	; 0x2c
 80059f6:	fb01 f303 	mul.w	r3, r1, r3
 80059fa:	4413      	add	r3, r2
 80059fc:	3361      	adds	r3, #97	; 0x61
 80059fe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005a00:	2b08      	cmp	r3, #8
 8005a02:	d150      	bne.n	8005aa6 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	212c      	movs	r1, #44	; 0x2c
 8005a0a:	fb01 f303 	mul.w	r3, r1, r3
 8005a0e:	4413      	add	r3, r2
 8005a10:	335c      	adds	r3, #92	; 0x5c
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	1c5a      	adds	r2, r3, #1
 8005a16:	6879      	ldr	r1, [r7, #4]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	202c      	movs	r0, #44	; 0x2c
 8005a1c:	fb00 f303 	mul.w	r3, r0, r3
 8005a20:	440b      	add	r3, r1
 8005a22:	335c      	adds	r3, #92	; 0x5c
 8005a24:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	212c      	movs	r1, #44	; 0x2c
 8005a2c:	fb01 f303 	mul.w	r3, r1, r3
 8005a30:	4413      	add	r3, r2
 8005a32:	335c      	adds	r3, #92	; 0x5c
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d912      	bls.n	8005a60 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	212c      	movs	r1, #44	; 0x2c
 8005a40:	fb01 f303 	mul.w	r3, r1, r3
 8005a44:	4413      	add	r3, r2
 8005a46:	335c      	adds	r3, #92	; 0x5c
 8005a48:	2200      	movs	r2, #0
 8005a4a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	212c      	movs	r1, #44	; 0x2c
 8005a52:	fb01 f303 	mul.w	r3, r1, r3
 8005a56:	4413      	add	r3, r2
 8005a58:	3360      	adds	r3, #96	; 0x60
 8005a5a:	2204      	movs	r2, #4
 8005a5c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005a5e:	e073      	b.n	8005b48 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	212c      	movs	r1, #44	; 0x2c
 8005a66:	fb01 f303 	mul.w	r3, r1, r3
 8005a6a:	4413      	add	r3, r2
 8005a6c:	3360      	adds	r3, #96	; 0x60
 8005a6e:	2202      	movs	r2, #2
 8005a70:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a88:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a90:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005aa4:	e050      	b.n	8005b48 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	212c      	movs	r1, #44	; 0x2c
 8005aac:	fb01 f303 	mul.w	r3, r1, r3
 8005ab0:	4413      	add	r3, r2
 8005ab2:	3361      	adds	r3, #97	; 0x61
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	2b03      	cmp	r3, #3
 8005ab8:	d122      	bne.n	8005b00 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	212c      	movs	r1, #44	; 0x2c
 8005ac0:	fb01 f303 	mul.w	r3, r1, r3
 8005ac4:	4413      	add	r3, r2
 8005ac6:	3360      	adds	r3, #96	; 0x60
 8005ac8:	2202      	movs	r2, #2
 8005aca:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ae2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005aea:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	015a      	lsls	r2, r3, #5
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	4413      	add	r3, r2
 8005af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005af8:	461a      	mov	r2, r3
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	6013      	str	r3, [r2, #0]
 8005afe:	e023      	b.n	8005b48 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	212c      	movs	r1, #44	; 0x2c
 8005b06:	fb01 f303 	mul.w	r3, r1, r3
 8005b0a:	4413      	add	r3, r2
 8005b0c:	3361      	adds	r3, #97	; 0x61
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	2b07      	cmp	r3, #7
 8005b12:	d119      	bne.n	8005b48 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	212c      	movs	r1, #44	; 0x2c
 8005b1a:	fb01 f303 	mul.w	r3, r1, r3
 8005b1e:	4413      	add	r3, r2
 8005b20:	335c      	adds	r3, #92	; 0x5c
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	1c5a      	adds	r2, r3, #1
 8005b26:	6879      	ldr	r1, [r7, #4]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	202c      	movs	r0, #44	; 0x2c
 8005b2c:	fb00 f303 	mul.w	r3, r0, r3
 8005b30:	440b      	add	r3, r1
 8005b32:	335c      	adds	r3, #92	; 0x5c
 8005b34:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	212c      	movs	r1, #44	; 0x2c
 8005b3c:	fb01 f303 	mul.w	r3, r1, r3
 8005b40:	4413      	add	r3, r2
 8005b42:	3360      	adds	r3, #96	; 0x60
 8005b44:	2204      	movs	r2, #4
 8005b46:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	015a      	lsls	r2, r3, #5
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	4413      	add	r3, r2
 8005b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b54:	461a      	mov	r2, r3
 8005b56:	2302      	movs	r3, #2
 8005b58:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	b2d9      	uxtb	r1, r3
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	202c      	movs	r0, #44	; 0x2c
 8005b64:	fb00 f303 	mul.w	r3, r0, r3
 8005b68:	4413      	add	r3, r2
 8005b6a:	3360      	adds	r3, #96	; 0x60
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	461a      	mov	r2, r3
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f006 fb2b 	bl	800c1cc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005b76:	e081      	b.n	8005c7c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	015a      	lsls	r2, r3, #5
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	4413      	add	r3, r2
 8005b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f003 0310 	and.w	r3, r3, #16
 8005b8a:	2b10      	cmp	r3, #16
 8005b8c:	d176      	bne.n	8005c7c <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	212c      	movs	r1, #44	; 0x2c
 8005b94:	fb01 f303 	mul.w	r3, r1, r3
 8005b98:	4413      	add	r3, r2
 8005b9a:	333f      	adds	r3, #63	; 0x3f
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	2b03      	cmp	r3, #3
 8005ba0:	d121      	bne.n	8005be6 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	212c      	movs	r1, #44	; 0x2c
 8005ba8:	fb01 f303 	mul.w	r3, r1, r3
 8005bac:	4413      	add	r3, r2
 8005bae:	335c      	adds	r3, #92	; 0x5c
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	015a      	lsls	r2, r3, #5
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	4413      	add	r3, r2
 8005bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	0151      	lsls	r1, r2, #5
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	440a      	add	r2, r1
 8005bca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bce:	f043 0302 	orr.w	r3, r3, #2
 8005bd2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	b2d2      	uxtb	r2, r2
 8005bdc:	4611      	mov	r1, r2
 8005bde:	4618      	mov	r0, r3
 8005be0:	f004 f937 	bl	8009e52 <USB_HC_Halt>
 8005be4:	e041      	b.n	8005c6a <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	212c      	movs	r1, #44	; 0x2c
 8005bec:	fb01 f303 	mul.w	r3, r1, r3
 8005bf0:	4413      	add	r3, r2
 8005bf2:	333f      	adds	r3, #63	; 0x3f
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d009      	beq.n	8005c0e <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	212c      	movs	r1, #44	; 0x2c
 8005c00:	fb01 f303 	mul.w	r3, r1, r3
 8005c04:	4413      	add	r3, r2
 8005c06:	333f      	adds	r3, #63	; 0x3f
 8005c08:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d12d      	bne.n	8005c6a <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	212c      	movs	r1, #44	; 0x2c
 8005c14:	fb01 f303 	mul.w	r3, r1, r3
 8005c18:	4413      	add	r3, r2
 8005c1a:	335c      	adds	r3, #92	; 0x5c
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d120      	bne.n	8005c6a <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	212c      	movs	r1, #44	; 0x2c
 8005c2e:	fb01 f303 	mul.w	r3, r1, r3
 8005c32:	4413      	add	r3, r2
 8005c34:	3361      	adds	r3, #97	; 0x61
 8005c36:	2203      	movs	r2, #3
 8005c38:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	015a      	lsls	r2, r3, #5
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	4413      	add	r3, r2
 8005c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	0151      	lsls	r1, r2, #5
 8005c4c:	693a      	ldr	r2, [r7, #16]
 8005c4e:	440a      	add	r2, r1
 8005c50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c54:	f043 0302 	orr.w	r3, r3, #2
 8005c58:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	b2d2      	uxtb	r2, r2
 8005c62:	4611      	mov	r1, r2
 8005c64:	4618      	mov	r0, r3
 8005c66:	f004 f8f4 	bl	8009e52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	015a      	lsls	r2, r3, #5
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	4413      	add	r3, r2
 8005c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c76:	461a      	mov	r2, r3
 8005c78:	2310      	movs	r3, #16
 8005c7a:	6093      	str	r3, [r2, #8]
}
 8005c7c:	bf00      	nop
 8005c7e:	3718      	adds	r7, #24
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b088      	sub	sp, #32
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8005c9a:	78fb      	ldrb	r3, [r7, #3]
 8005c9c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	015a      	lsls	r2, r3, #5
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	f003 0304 	and.w	r3, r3, #4
 8005cb0:	2b04      	cmp	r3, #4
 8005cb2:	d119      	bne.n	8005ce8 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	015a      	lsls	r2, r3, #5
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	4413      	add	r3, r2
 8005cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	2304      	movs	r3, #4
 8005cc4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	697a      	ldr	r2, [r7, #20]
 8005cd6:	0151      	lsls	r1, r2, #5
 8005cd8:	69ba      	ldr	r2, [r7, #24]
 8005cda:	440a      	add	r2, r1
 8005cdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ce0:	f043 0302 	orr.w	r3, r3, #2
 8005ce4:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8005ce6:	e3c6      	b.n	8006476 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	015a      	lsls	r2, r3, #5
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	4413      	add	r3, r2
 8005cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f003 0320 	and.w	r3, r3, #32
 8005cfa:	2b20      	cmp	r3, #32
 8005cfc:	d13e      	bne.n	8005d7c <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	015a      	lsls	r2, r3, #5
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	2320      	movs	r3, #32
 8005d0e:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	212c      	movs	r1, #44	; 0x2c
 8005d16:	fb01 f303 	mul.w	r3, r1, r3
 8005d1a:	4413      	add	r3, r2
 8005d1c:	333d      	adds	r3, #61	; 0x3d
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	f040 83a8 	bne.w	8006476 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	212c      	movs	r1, #44	; 0x2c
 8005d2c:	fb01 f303 	mul.w	r3, r1, r3
 8005d30:	4413      	add	r3, r2
 8005d32:	333d      	adds	r3, #61	; 0x3d
 8005d34:	2200      	movs	r2, #0
 8005d36:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	212c      	movs	r1, #44	; 0x2c
 8005d3e:	fb01 f303 	mul.w	r3, r1, r3
 8005d42:	4413      	add	r3, r2
 8005d44:	3360      	adds	r3, #96	; 0x60
 8005d46:	2202      	movs	r2, #2
 8005d48:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	015a      	lsls	r2, r3, #5
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	4413      	add	r3, r2
 8005d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	697a      	ldr	r2, [r7, #20]
 8005d5a:	0151      	lsls	r1, r2, #5
 8005d5c:	69ba      	ldr	r2, [r7, #24]
 8005d5e:	440a      	add	r2, r1
 8005d60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d64:	f043 0302 	orr.w	r3, r3, #2
 8005d68:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	b2d2      	uxtb	r2, r2
 8005d72:	4611      	mov	r1, r2
 8005d74:	4618      	mov	r0, r3
 8005d76:	f004 f86c 	bl	8009e52 <USB_HC_Halt>
}
 8005d7a:	e37c      	b.n	8006476 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	015a      	lsls	r2, r3, #5
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	4413      	add	r3, r2
 8005d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d92:	d122      	bne.n	8005dda <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	015a      	lsls	r2, r3, #5
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	0151      	lsls	r1, r2, #5
 8005da6:	69ba      	ldr	r2, [r7, #24]
 8005da8:	440a      	add	r2, r1
 8005daa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dae:	f043 0302 	orr.w	r3, r3, #2
 8005db2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	b2d2      	uxtb	r2, r2
 8005dbc:	4611      	mov	r1, r2
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f004 f847 	bl	8009e52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dd6:	6093      	str	r3, [r2, #8]
}
 8005dd8:	e34d      	b.n	8006476 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	015a      	lsls	r2, r3, #5
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f003 0301 	and.w	r3, r3, #1
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d150      	bne.n	8005e92 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	212c      	movs	r1, #44	; 0x2c
 8005df6:	fb01 f303 	mul.w	r3, r1, r3
 8005dfa:	4413      	add	r3, r2
 8005dfc:	335c      	adds	r3, #92	; 0x5c
 8005dfe:	2200      	movs	r2, #0
 8005e00:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	015a      	lsls	r2, r3, #5
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e14:	2b40      	cmp	r3, #64	; 0x40
 8005e16:	d111      	bne.n	8005e3c <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	212c      	movs	r1, #44	; 0x2c
 8005e1e:	fb01 f303 	mul.w	r3, r1, r3
 8005e22:	4413      	add	r3, r2
 8005e24:	333d      	adds	r3, #61	; 0x3d
 8005e26:	2201      	movs	r2, #1
 8005e28:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	015a      	lsls	r2, r3, #5
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	4413      	add	r3, r2
 8005e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e36:	461a      	mov	r2, r3
 8005e38:	2340      	movs	r3, #64	; 0x40
 8005e3a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	015a      	lsls	r2, r3, #5
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	4413      	add	r3, r2
 8005e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	697a      	ldr	r2, [r7, #20]
 8005e4c:	0151      	lsls	r1, r2, #5
 8005e4e:	69ba      	ldr	r2, [r7, #24]
 8005e50:	440a      	add	r2, r1
 8005e52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e56:	f043 0302 	orr.w	r3, r3, #2
 8005e5a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	b2d2      	uxtb	r2, r2
 8005e64:	4611      	mov	r1, r2
 8005e66:	4618      	mov	r0, r3
 8005e68:	f003 fff3 	bl	8009e52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	015a      	lsls	r2, r3, #5
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	4413      	add	r3, r2
 8005e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e78:	461a      	mov	r2, r3
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	212c      	movs	r1, #44	; 0x2c
 8005e84:	fb01 f303 	mul.w	r3, r1, r3
 8005e88:	4413      	add	r3, r2
 8005e8a:	3361      	adds	r3, #97	; 0x61
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	701a      	strb	r2, [r3, #0]
}
 8005e90:	e2f1      	b.n	8006476 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	015a      	lsls	r2, r3, #5
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	4413      	add	r3, r2
 8005e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea4:	2b40      	cmp	r3, #64	; 0x40
 8005ea6:	d13c      	bne.n	8005f22 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	212c      	movs	r1, #44	; 0x2c
 8005eae:	fb01 f303 	mul.w	r3, r1, r3
 8005eb2:	4413      	add	r3, r2
 8005eb4:	3361      	adds	r3, #97	; 0x61
 8005eb6:	2204      	movs	r2, #4
 8005eb8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	212c      	movs	r1, #44	; 0x2c
 8005ec0:	fb01 f303 	mul.w	r3, r1, r3
 8005ec4:	4413      	add	r3, r2
 8005ec6:	333d      	adds	r3, #61	; 0x3d
 8005ec8:	2201      	movs	r2, #1
 8005eca:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	212c      	movs	r1, #44	; 0x2c
 8005ed2:	fb01 f303 	mul.w	r3, r1, r3
 8005ed6:	4413      	add	r3, r2
 8005ed8:	335c      	adds	r3, #92	; 0x5c
 8005eda:	2200      	movs	r2, #0
 8005edc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	015a      	lsls	r2, r3, #5
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	697a      	ldr	r2, [r7, #20]
 8005eee:	0151      	lsls	r1, r2, #5
 8005ef0:	69ba      	ldr	r2, [r7, #24]
 8005ef2:	440a      	add	r2, r1
 8005ef4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ef8:	f043 0302 	orr.w	r3, r3, #2
 8005efc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	b2d2      	uxtb	r2, r2
 8005f06:	4611      	mov	r1, r2
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f003 ffa2 	bl	8009e52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	015a      	lsls	r2, r3, #5
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	4413      	add	r3, r2
 8005f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	2340      	movs	r3, #64	; 0x40
 8005f1e:	6093      	str	r3, [r2, #8]
}
 8005f20:	e2a9      	b.n	8006476 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	015a      	lsls	r2, r3, #5
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	4413      	add	r3, r2
 8005f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	f003 0308 	and.w	r3, r3, #8
 8005f34:	2b08      	cmp	r3, #8
 8005f36:	d12a      	bne.n	8005f8e <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	015a      	lsls	r2, r3, #5
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f44:	461a      	mov	r2, r3
 8005f46:	2308      	movs	r3, #8
 8005f48:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	015a      	lsls	r2, r3, #5
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	4413      	add	r3, r2
 8005f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	697a      	ldr	r2, [r7, #20]
 8005f5a:	0151      	lsls	r1, r2, #5
 8005f5c:	69ba      	ldr	r2, [r7, #24]
 8005f5e:	440a      	add	r2, r1
 8005f60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f64:	f043 0302 	orr.w	r3, r3, #2
 8005f68:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	b2d2      	uxtb	r2, r2
 8005f72:	4611      	mov	r1, r2
 8005f74:	4618      	mov	r0, r3
 8005f76:	f003 ff6c 	bl	8009e52 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	212c      	movs	r1, #44	; 0x2c
 8005f80:	fb01 f303 	mul.w	r3, r1, r3
 8005f84:	4413      	add	r3, r2
 8005f86:	3361      	adds	r3, #97	; 0x61
 8005f88:	2205      	movs	r2, #5
 8005f8a:	701a      	strb	r2, [r3, #0]
}
 8005f8c:	e273      	b.n	8006476 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	015a      	lsls	r2, r3, #5
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	4413      	add	r3, r2
 8005f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f003 0310 	and.w	r3, r3, #16
 8005fa0:	2b10      	cmp	r3, #16
 8005fa2:	d150      	bne.n	8006046 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	212c      	movs	r1, #44	; 0x2c
 8005faa:	fb01 f303 	mul.w	r3, r1, r3
 8005fae:	4413      	add	r3, r2
 8005fb0:	335c      	adds	r3, #92	; 0x5c
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	212c      	movs	r1, #44	; 0x2c
 8005fbc:	fb01 f303 	mul.w	r3, r1, r3
 8005fc0:	4413      	add	r3, r2
 8005fc2:	3361      	adds	r3, #97	; 0x61
 8005fc4:	2203      	movs	r2, #3
 8005fc6:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	212c      	movs	r1, #44	; 0x2c
 8005fce:	fb01 f303 	mul.w	r3, r1, r3
 8005fd2:	4413      	add	r3, r2
 8005fd4:	333d      	adds	r3, #61	; 0x3d
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d112      	bne.n	8006002 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	212c      	movs	r1, #44	; 0x2c
 8005fe2:	fb01 f303 	mul.w	r3, r1, r3
 8005fe6:	4413      	add	r3, r2
 8005fe8:	333c      	adds	r3, #60	; 0x3c
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d108      	bne.n	8006002 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	212c      	movs	r1, #44	; 0x2c
 8005ff6:	fb01 f303 	mul.w	r3, r1, r3
 8005ffa:	4413      	add	r3, r2
 8005ffc:	333d      	adds	r3, #61	; 0x3d
 8005ffe:	2201      	movs	r2, #1
 8006000:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	015a      	lsls	r2, r3, #5
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	4413      	add	r3, r2
 800600a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	697a      	ldr	r2, [r7, #20]
 8006012:	0151      	lsls	r1, r2, #5
 8006014:	69ba      	ldr	r2, [r7, #24]
 8006016:	440a      	add	r2, r1
 8006018:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800601c:	f043 0302 	orr.w	r3, r3, #2
 8006020:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	b2d2      	uxtb	r2, r2
 800602a:	4611      	mov	r1, r2
 800602c:	4618      	mov	r0, r3
 800602e:	f003 ff10 	bl	8009e52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	015a      	lsls	r2, r3, #5
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	4413      	add	r3, r2
 800603a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800603e:	461a      	mov	r2, r3
 8006040:	2310      	movs	r3, #16
 8006042:	6093      	str	r3, [r2, #8]
}
 8006044:	e217      	b.n	8006476 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	015a      	lsls	r2, r3, #5
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	4413      	add	r3, r2
 800604e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006058:	2b80      	cmp	r3, #128	; 0x80
 800605a:	d174      	bne.n	8006146 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d121      	bne.n	80060a8 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	212c      	movs	r1, #44	; 0x2c
 800606a:	fb01 f303 	mul.w	r3, r1, r3
 800606e:	4413      	add	r3, r2
 8006070:	3361      	adds	r3, #97	; 0x61
 8006072:	2206      	movs	r2, #6
 8006074:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	015a      	lsls	r2, r3, #5
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	4413      	add	r3, r2
 800607e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	697a      	ldr	r2, [r7, #20]
 8006086:	0151      	lsls	r1, r2, #5
 8006088:	69ba      	ldr	r2, [r7, #24]
 800608a:	440a      	add	r2, r1
 800608c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006090:	f043 0302 	orr.w	r3, r3, #2
 8006094:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	b2d2      	uxtb	r2, r2
 800609e:	4611      	mov	r1, r2
 80060a0:	4618      	mov	r0, r3
 80060a2:	f003 fed6 	bl	8009e52 <USB_HC_Halt>
 80060a6:	e044      	b.n	8006132 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	212c      	movs	r1, #44	; 0x2c
 80060ae:	fb01 f303 	mul.w	r3, r1, r3
 80060b2:	4413      	add	r3, r2
 80060b4:	335c      	adds	r3, #92	; 0x5c
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	1c5a      	adds	r2, r3, #1
 80060ba:	6879      	ldr	r1, [r7, #4]
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	202c      	movs	r0, #44	; 0x2c
 80060c0:	fb00 f303 	mul.w	r3, r0, r3
 80060c4:	440b      	add	r3, r1
 80060c6:	335c      	adds	r3, #92	; 0x5c
 80060c8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	212c      	movs	r1, #44	; 0x2c
 80060d0:	fb01 f303 	mul.w	r3, r1, r3
 80060d4:	4413      	add	r3, r2
 80060d6:	335c      	adds	r3, #92	; 0x5c
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d920      	bls.n	8006120 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	212c      	movs	r1, #44	; 0x2c
 80060e4:	fb01 f303 	mul.w	r3, r1, r3
 80060e8:	4413      	add	r3, r2
 80060ea:	335c      	adds	r3, #92	; 0x5c
 80060ec:	2200      	movs	r2, #0
 80060ee:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	212c      	movs	r1, #44	; 0x2c
 80060f6:	fb01 f303 	mul.w	r3, r1, r3
 80060fa:	4413      	add	r3, r2
 80060fc:	3360      	adds	r3, #96	; 0x60
 80060fe:	2204      	movs	r2, #4
 8006100:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	b2d9      	uxtb	r1, r3
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	202c      	movs	r0, #44	; 0x2c
 800610c:	fb00 f303 	mul.w	r3, r0, r3
 8006110:	4413      	add	r3, r2
 8006112:	3360      	adds	r3, #96	; 0x60
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	461a      	mov	r2, r3
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f006 f857 	bl	800c1cc <HAL_HCD_HC_NotifyURBChange_Callback>
 800611e:	e008      	b.n	8006132 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	212c      	movs	r1, #44	; 0x2c
 8006126:	fb01 f303 	mul.w	r3, r1, r3
 800612a:	4413      	add	r3, r2
 800612c:	3360      	adds	r3, #96	; 0x60
 800612e:	2202      	movs	r2, #2
 8006130:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	015a      	lsls	r2, r3, #5
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	4413      	add	r3, r2
 800613a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800613e:	461a      	mov	r2, r3
 8006140:	2380      	movs	r3, #128	; 0x80
 8006142:	6093      	str	r3, [r2, #8]
}
 8006144:	e197      	b.n	8006476 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	015a      	lsls	r2, r3, #5
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	4413      	add	r3, r2
 800614e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800615c:	d134      	bne.n	80061c8 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	015a      	lsls	r2, r3, #5
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	4413      	add	r3, r2
 8006166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	0151      	lsls	r1, r2, #5
 8006170:	69ba      	ldr	r2, [r7, #24]
 8006172:	440a      	add	r2, r1
 8006174:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006178:	f043 0302 	orr.w	r3, r3, #2
 800617c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	b2d2      	uxtb	r2, r2
 8006186:	4611      	mov	r1, r2
 8006188:	4618      	mov	r0, r3
 800618a:	f003 fe62 	bl	8009e52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	015a      	lsls	r2, r3, #5
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	4413      	add	r3, r2
 8006196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800619a:	461a      	mov	r2, r3
 800619c:	2310      	movs	r3, #16
 800619e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	015a      	lsls	r2, r3, #5
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	4413      	add	r3, r2
 80061a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ac:	461a      	mov	r2, r3
 80061ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	212c      	movs	r1, #44	; 0x2c
 80061ba:	fb01 f303 	mul.w	r3, r1, r3
 80061be:	4413      	add	r3, r2
 80061c0:	3361      	adds	r3, #97	; 0x61
 80061c2:	2208      	movs	r2, #8
 80061c4:	701a      	strb	r2, [r3, #0]
}
 80061c6:	e156      	b.n	8006476 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	015a      	lsls	r2, r3, #5
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	4413      	add	r3, r2
 80061d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	f003 0302 	and.w	r3, r3, #2
 80061da:	2b02      	cmp	r3, #2
 80061dc:	f040 814b 	bne.w	8006476 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	015a      	lsls	r2, r3, #5
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	0151      	lsls	r1, r2, #5
 80061f2:	69ba      	ldr	r2, [r7, #24]
 80061f4:	440a      	add	r2, r1
 80061f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061fa:	f023 0302 	bic.w	r3, r3, #2
 80061fe:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	212c      	movs	r1, #44	; 0x2c
 8006206:	fb01 f303 	mul.w	r3, r1, r3
 800620a:	4413      	add	r3, r2
 800620c:	3361      	adds	r3, #97	; 0x61
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d179      	bne.n	8006308 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	212c      	movs	r1, #44	; 0x2c
 800621a:	fb01 f303 	mul.w	r3, r1, r3
 800621e:	4413      	add	r3, r2
 8006220:	3360      	adds	r3, #96	; 0x60
 8006222:	2201      	movs	r2, #1
 8006224:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	212c      	movs	r1, #44	; 0x2c
 800622c:	fb01 f303 	mul.w	r3, r1, r3
 8006230:	4413      	add	r3, r2
 8006232:	333f      	adds	r3, #63	; 0x3f
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	2b02      	cmp	r3, #2
 8006238:	d00a      	beq.n	8006250 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	212c      	movs	r1, #44	; 0x2c
 8006240:	fb01 f303 	mul.w	r3, r1, r3
 8006244:	4413      	add	r3, r2
 8006246:	333f      	adds	r3, #63	; 0x3f
 8006248:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800624a:	2b03      	cmp	r3, #3
 800624c:	f040 80fc 	bne.w	8006448 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d142      	bne.n	80062de <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	212c      	movs	r1, #44	; 0x2c
 800625e:	fb01 f303 	mul.w	r3, r1, r3
 8006262:	4413      	add	r3, r2
 8006264:	334c      	adds	r3, #76	; 0x4c
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	f000 80ed 	beq.w	8006448 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	212c      	movs	r1, #44	; 0x2c
 8006274:	fb01 f303 	mul.w	r3, r1, r3
 8006278:	4413      	add	r3, r2
 800627a:	334c      	adds	r3, #76	; 0x4c
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	6879      	ldr	r1, [r7, #4]
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	202c      	movs	r0, #44	; 0x2c
 8006284:	fb00 f202 	mul.w	r2, r0, r2
 8006288:	440a      	add	r2, r1
 800628a:	3240      	adds	r2, #64	; 0x40
 800628c:	8812      	ldrh	r2, [r2, #0]
 800628e:	4413      	add	r3, r2
 8006290:	3b01      	subs	r3, #1
 8006292:	6879      	ldr	r1, [r7, #4]
 8006294:	697a      	ldr	r2, [r7, #20]
 8006296:	202c      	movs	r0, #44	; 0x2c
 8006298:	fb00 f202 	mul.w	r2, r0, r2
 800629c:	440a      	add	r2, r1
 800629e:	3240      	adds	r2, #64	; 0x40
 80062a0:	8812      	ldrh	r2, [r2, #0]
 80062a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80062a6:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f003 0301 	and.w	r3, r3, #1
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	f000 80ca 	beq.w	8006448 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	212c      	movs	r1, #44	; 0x2c
 80062ba:	fb01 f303 	mul.w	r3, r1, r3
 80062be:	4413      	add	r3, r2
 80062c0:	3355      	adds	r3, #85	; 0x55
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	f083 0301 	eor.w	r3, r3, #1
 80062c8:	b2d8      	uxtb	r0, r3
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	212c      	movs	r1, #44	; 0x2c
 80062d0:	fb01 f303 	mul.w	r3, r1, r3
 80062d4:	4413      	add	r3, r2
 80062d6:	3355      	adds	r3, #85	; 0x55
 80062d8:	4602      	mov	r2, r0
 80062da:	701a      	strb	r2, [r3, #0]
 80062dc:	e0b4      	b.n	8006448 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	212c      	movs	r1, #44	; 0x2c
 80062e4:	fb01 f303 	mul.w	r3, r1, r3
 80062e8:	4413      	add	r3, r2
 80062ea:	3355      	adds	r3, #85	; 0x55
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	f083 0301 	eor.w	r3, r3, #1
 80062f2:	b2d8      	uxtb	r0, r3
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	212c      	movs	r1, #44	; 0x2c
 80062fa:	fb01 f303 	mul.w	r3, r1, r3
 80062fe:	4413      	add	r3, r2
 8006300:	3355      	adds	r3, #85	; 0x55
 8006302:	4602      	mov	r2, r0
 8006304:	701a      	strb	r2, [r3, #0]
 8006306:	e09f      	b.n	8006448 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	212c      	movs	r1, #44	; 0x2c
 800630e:	fb01 f303 	mul.w	r3, r1, r3
 8006312:	4413      	add	r3, r2
 8006314:	3361      	adds	r3, #97	; 0x61
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	2b03      	cmp	r3, #3
 800631a:	d109      	bne.n	8006330 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	212c      	movs	r1, #44	; 0x2c
 8006322:	fb01 f303 	mul.w	r3, r1, r3
 8006326:	4413      	add	r3, r2
 8006328:	3360      	adds	r3, #96	; 0x60
 800632a:	2202      	movs	r2, #2
 800632c:	701a      	strb	r2, [r3, #0]
 800632e:	e08b      	b.n	8006448 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	212c      	movs	r1, #44	; 0x2c
 8006336:	fb01 f303 	mul.w	r3, r1, r3
 800633a:	4413      	add	r3, r2
 800633c:	3361      	adds	r3, #97	; 0x61
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	2b04      	cmp	r3, #4
 8006342:	d109      	bne.n	8006358 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	212c      	movs	r1, #44	; 0x2c
 800634a:	fb01 f303 	mul.w	r3, r1, r3
 800634e:	4413      	add	r3, r2
 8006350:	3360      	adds	r3, #96	; 0x60
 8006352:	2202      	movs	r2, #2
 8006354:	701a      	strb	r2, [r3, #0]
 8006356:	e077      	b.n	8006448 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	212c      	movs	r1, #44	; 0x2c
 800635e:	fb01 f303 	mul.w	r3, r1, r3
 8006362:	4413      	add	r3, r2
 8006364:	3361      	adds	r3, #97	; 0x61
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	2b05      	cmp	r3, #5
 800636a:	d109      	bne.n	8006380 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	212c      	movs	r1, #44	; 0x2c
 8006372:	fb01 f303 	mul.w	r3, r1, r3
 8006376:	4413      	add	r3, r2
 8006378:	3360      	adds	r3, #96	; 0x60
 800637a:	2205      	movs	r2, #5
 800637c:	701a      	strb	r2, [r3, #0]
 800637e:	e063      	b.n	8006448 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	212c      	movs	r1, #44	; 0x2c
 8006386:	fb01 f303 	mul.w	r3, r1, r3
 800638a:	4413      	add	r3, r2
 800638c:	3361      	adds	r3, #97	; 0x61
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	2b06      	cmp	r3, #6
 8006392:	d009      	beq.n	80063a8 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	212c      	movs	r1, #44	; 0x2c
 800639a:	fb01 f303 	mul.w	r3, r1, r3
 800639e:	4413      	add	r3, r2
 80063a0:	3361      	adds	r3, #97	; 0x61
 80063a2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80063a4:	2b08      	cmp	r3, #8
 80063a6:	d14f      	bne.n	8006448 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	212c      	movs	r1, #44	; 0x2c
 80063ae:	fb01 f303 	mul.w	r3, r1, r3
 80063b2:	4413      	add	r3, r2
 80063b4:	335c      	adds	r3, #92	; 0x5c
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	1c5a      	adds	r2, r3, #1
 80063ba:	6879      	ldr	r1, [r7, #4]
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	202c      	movs	r0, #44	; 0x2c
 80063c0:	fb00 f303 	mul.w	r3, r0, r3
 80063c4:	440b      	add	r3, r1
 80063c6:	335c      	adds	r3, #92	; 0x5c
 80063c8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	212c      	movs	r1, #44	; 0x2c
 80063d0:	fb01 f303 	mul.w	r3, r1, r3
 80063d4:	4413      	add	r3, r2
 80063d6:	335c      	adds	r3, #92	; 0x5c
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2b02      	cmp	r3, #2
 80063dc:	d912      	bls.n	8006404 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	212c      	movs	r1, #44	; 0x2c
 80063e4:	fb01 f303 	mul.w	r3, r1, r3
 80063e8:	4413      	add	r3, r2
 80063ea:	335c      	adds	r3, #92	; 0x5c
 80063ec:	2200      	movs	r2, #0
 80063ee:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	212c      	movs	r1, #44	; 0x2c
 80063f6:	fb01 f303 	mul.w	r3, r1, r3
 80063fa:	4413      	add	r3, r2
 80063fc:	3360      	adds	r3, #96	; 0x60
 80063fe:	2204      	movs	r2, #4
 8006400:	701a      	strb	r2, [r3, #0]
 8006402:	e021      	b.n	8006448 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	212c      	movs	r1, #44	; 0x2c
 800640a:	fb01 f303 	mul.w	r3, r1, r3
 800640e:	4413      	add	r3, r2
 8006410:	3360      	adds	r3, #96	; 0x60
 8006412:	2202      	movs	r2, #2
 8006414:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	015a      	lsls	r2, r3, #5
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	4413      	add	r3, r2
 800641e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800642c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006434:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	015a      	lsls	r2, r3, #5
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	4413      	add	r3, r2
 800643e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006442:	461a      	mov	r2, r3
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	015a      	lsls	r2, r3, #5
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	4413      	add	r3, r2
 8006450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006454:	461a      	mov	r2, r3
 8006456:	2302      	movs	r3, #2
 8006458:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	b2d9      	uxtb	r1, r3
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	202c      	movs	r0, #44	; 0x2c
 8006464:	fb00 f303 	mul.w	r3, r0, r3
 8006468:	4413      	add	r3, r2
 800646a:	3360      	adds	r3, #96	; 0x60
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	461a      	mov	r2, r3
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f005 feab 	bl	800c1cc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006476:	bf00      	nop
 8006478:	3720      	adds	r7, #32
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800647e:	b580      	push	{r7, lr}
 8006480:	b08a      	sub	sp, #40	; 0x28
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800648c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	f003 030f 	and.w	r3, r3, #15
 800649e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	0c5b      	lsrs	r3, r3, #17
 80064a4:	f003 030f 	and.w	r3, r3, #15
 80064a8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	091b      	lsrs	r3, r3, #4
 80064ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80064b2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	d004      	beq.n	80064c4 <HCD_RXQLVL_IRQHandler+0x46>
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	2b05      	cmp	r3, #5
 80064be:	f000 80a9 	beq.w	8006614 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80064c2:	e0aa      	b.n	800661a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f000 80a6 	beq.w	8006618 <HCD_RXQLVL_IRQHandler+0x19a>
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	212c      	movs	r1, #44	; 0x2c
 80064d2:	fb01 f303 	mul.w	r3, r1, r3
 80064d6:	4413      	add	r3, r2
 80064d8:	3344      	adds	r3, #68	; 0x44
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f000 809b 	beq.w	8006618 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	212c      	movs	r1, #44	; 0x2c
 80064e8:	fb01 f303 	mul.w	r3, r1, r3
 80064ec:	4413      	add	r3, r2
 80064ee:	3350      	adds	r3, #80	; 0x50
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	441a      	add	r2, r3
 80064f6:	6879      	ldr	r1, [r7, #4]
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	202c      	movs	r0, #44	; 0x2c
 80064fc:	fb00 f303 	mul.w	r3, r0, r3
 8006500:	440b      	add	r3, r1
 8006502:	334c      	adds	r3, #76	; 0x4c
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	429a      	cmp	r2, r3
 8006508:	d87a      	bhi.n	8006600 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6818      	ldr	r0, [r3, #0]
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	212c      	movs	r1, #44	; 0x2c
 8006514:	fb01 f303 	mul.w	r3, r1, r3
 8006518:	4413      	add	r3, r2
 800651a:	3344      	adds	r3, #68	; 0x44
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	b292      	uxth	r2, r2
 8006522:	4619      	mov	r1, r3
 8006524:	f003 f833 	bl	800958e <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	212c      	movs	r1, #44	; 0x2c
 800652e:	fb01 f303 	mul.w	r3, r1, r3
 8006532:	4413      	add	r3, r2
 8006534:	3344      	adds	r3, #68	; 0x44
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	441a      	add	r2, r3
 800653c:	6879      	ldr	r1, [r7, #4]
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	202c      	movs	r0, #44	; 0x2c
 8006542:	fb00 f303 	mul.w	r3, r0, r3
 8006546:	440b      	add	r3, r1
 8006548:	3344      	adds	r3, #68	; 0x44
 800654a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	212c      	movs	r1, #44	; 0x2c
 8006552:	fb01 f303 	mul.w	r3, r1, r3
 8006556:	4413      	add	r3, r2
 8006558:	3350      	adds	r3, #80	; 0x50
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	441a      	add	r2, r3
 8006560:	6879      	ldr	r1, [r7, #4]
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	202c      	movs	r0, #44	; 0x2c
 8006566:	fb00 f303 	mul.w	r3, r0, r3
 800656a:	440b      	add	r3, r1
 800656c:	3350      	adds	r3, #80	; 0x50
 800656e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	015a      	lsls	r2, r3, #5
 8006574:	6a3b      	ldr	r3, [r7, #32]
 8006576:	4413      	add	r3, r2
 8006578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	0cdb      	lsrs	r3, r3, #19
 8006580:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006584:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	212c      	movs	r1, #44	; 0x2c
 800658c:	fb01 f303 	mul.w	r3, r1, r3
 8006590:	4413      	add	r3, r2
 8006592:	3340      	adds	r3, #64	; 0x40
 8006594:	881b      	ldrh	r3, [r3, #0]
 8006596:	461a      	mov	r2, r3
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	4293      	cmp	r3, r2
 800659c:	d13c      	bne.n	8006618 <HCD_RXQLVL_IRQHandler+0x19a>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d039      	beq.n	8006618 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	015a      	lsls	r2, r3, #5
 80065a8:	6a3b      	ldr	r3, [r7, #32]
 80065aa:	4413      	add	r3, r2
 80065ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065ba:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065c2:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	015a      	lsls	r2, r3, #5
 80065c8:	6a3b      	ldr	r3, [r7, #32]
 80065ca:	4413      	add	r3, r2
 80065cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065d0:	461a      	mov	r2, r3
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	212c      	movs	r1, #44	; 0x2c
 80065dc:	fb01 f303 	mul.w	r3, r1, r3
 80065e0:	4413      	add	r3, r2
 80065e2:	3354      	adds	r3, #84	; 0x54
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	f083 0301 	eor.w	r3, r3, #1
 80065ea:	b2d8      	uxtb	r0, r3
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	212c      	movs	r1, #44	; 0x2c
 80065f2:	fb01 f303 	mul.w	r3, r1, r3
 80065f6:	4413      	add	r3, r2
 80065f8:	3354      	adds	r3, #84	; 0x54
 80065fa:	4602      	mov	r2, r0
 80065fc:	701a      	strb	r2, [r3, #0]
      break;
 80065fe:	e00b      	b.n	8006618 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	212c      	movs	r1, #44	; 0x2c
 8006606:	fb01 f303 	mul.w	r3, r1, r3
 800660a:	4413      	add	r3, r2
 800660c:	3360      	adds	r3, #96	; 0x60
 800660e:	2204      	movs	r2, #4
 8006610:	701a      	strb	r2, [r3, #0]
      break;
 8006612:	e001      	b.n	8006618 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8006614:	bf00      	nop
 8006616:	e000      	b.n	800661a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8006618:	bf00      	nop
  }
}
 800661a:	bf00      	nop
 800661c:	3728      	adds	r7, #40	; 0x28
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b086      	sub	sp, #24
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800664e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f003 0302 	and.w	r3, r3, #2
 8006656:	2b02      	cmp	r3, #2
 8006658:	d10b      	bne.n	8006672 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f003 0301 	and.w	r3, r3, #1
 8006660:	2b01      	cmp	r3, #1
 8006662:	d102      	bne.n	800666a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f005 fd95 	bl	800c194 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	f043 0302 	orr.w	r3, r3, #2
 8006670:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f003 0308 	and.w	r3, r3, #8
 8006678:	2b08      	cmp	r3, #8
 800667a:	d132      	bne.n	80066e2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	f043 0308 	orr.w	r3, r3, #8
 8006682:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f003 0304 	and.w	r3, r3, #4
 800668a:	2b04      	cmp	r3, #4
 800668c:	d126      	bne.n	80066dc <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	2b02      	cmp	r3, #2
 8006694:	d113      	bne.n	80066be <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800669c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80066a0:	d106      	bne.n	80066b0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2102      	movs	r1, #2
 80066a8:	4618      	mov	r0, r3
 80066aa:	f003 f8ab 	bl	8009804 <USB_InitFSLSPClkSel>
 80066ae:	e011      	b.n	80066d4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2101      	movs	r1, #1
 80066b6:	4618      	mov	r0, r3
 80066b8:	f003 f8a4 	bl	8009804 <USB_InitFSLSPClkSel>
 80066bc:	e00a      	b.n	80066d4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d106      	bne.n	80066d4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066cc:	461a      	mov	r2, r3
 80066ce:	f64e 2360 	movw	r3, #60000	; 0xea60
 80066d2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f005 fd87 	bl	800c1e8 <HAL_HCD_PortEnabled_Callback>
 80066da:	e002      	b.n	80066e2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f005 fd91 	bl	800c204 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f003 0320 	and.w	r3, r3, #32
 80066e8:	2b20      	cmp	r3, #32
 80066ea:	d103      	bne.n	80066f4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	f043 0320 	orr.w	r3, r3, #32
 80066f2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80066fa:	461a      	mov	r2, r3
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	6013      	str	r3, [r2, #0]
}
 8006700:	bf00      	nop
 8006702:	3718      	adds	r7, #24
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d101      	bne.n	800671a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e12b      	b.n	8006972 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006720:	b2db      	uxtb	r3, r3
 8006722:	2b00      	cmp	r3, #0
 8006724:	d106      	bne.n	8006734 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f7fd fc5e 	bl	8003ff0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2224      	movs	r2, #36	; 0x24
 8006738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f022 0201 	bic.w	r2, r2, #1
 800674a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800675a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800676a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800676c:	f002 f84e 	bl	800880c <HAL_RCC_GetPCLK1Freq>
 8006770:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	4a81      	ldr	r2, [pc, #516]	; (800697c <HAL_I2C_Init+0x274>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d807      	bhi.n	800678c <HAL_I2C_Init+0x84>
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	4a80      	ldr	r2, [pc, #512]	; (8006980 <HAL_I2C_Init+0x278>)
 8006780:	4293      	cmp	r3, r2
 8006782:	bf94      	ite	ls
 8006784:	2301      	movls	r3, #1
 8006786:	2300      	movhi	r3, #0
 8006788:	b2db      	uxtb	r3, r3
 800678a:	e006      	b.n	800679a <HAL_I2C_Init+0x92>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4a7d      	ldr	r2, [pc, #500]	; (8006984 <HAL_I2C_Init+0x27c>)
 8006790:	4293      	cmp	r3, r2
 8006792:	bf94      	ite	ls
 8006794:	2301      	movls	r3, #1
 8006796:	2300      	movhi	r3, #0
 8006798:	b2db      	uxtb	r3, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	d001      	beq.n	80067a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e0e7      	b.n	8006972 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	4a78      	ldr	r2, [pc, #480]	; (8006988 <HAL_I2C_Init+0x280>)
 80067a6:	fba2 2303 	umull	r2, r3, r2, r3
 80067aa:	0c9b      	lsrs	r3, r3, #18
 80067ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68ba      	ldr	r2, [r7, #8]
 80067be:	430a      	orrs	r2, r1
 80067c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	6a1b      	ldr	r3, [r3, #32]
 80067c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	4a6a      	ldr	r2, [pc, #424]	; (800697c <HAL_I2C_Init+0x274>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d802      	bhi.n	80067dc <HAL_I2C_Init+0xd4>
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	3301      	adds	r3, #1
 80067da:	e009      	b.n	80067f0 <HAL_I2C_Init+0xe8>
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80067e2:	fb02 f303 	mul.w	r3, r2, r3
 80067e6:	4a69      	ldr	r2, [pc, #420]	; (800698c <HAL_I2C_Init+0x284>)
 80067e8:	fba2 2303 	umull	r2, r3, r2, r3
 80067ec:	099b      	lsrs	r3, r3, #6
 80067ee:	3301      	adds	r3, #1
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	6812      	ldr	r2, [r2, #0]
 80067f4:	430b      	orrs	r3, r1
 80067f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	69db      	ldr	r3, [r3, #28]
 80067fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006802:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	495c      	ldr	r1, [pc, #368]	; (800697c <HAL_I2C_Init+0x274>)
 800680c:	428b      	cmp	r3, r1
 800680e:	d819      	bhi.n	8006844 <HAL_I2C_Init+0x13c>
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	1e59      	subs	r1, r3, #1
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	005b      	lsls	r3, r3, #1
 800681a:	fbb1 f3f3 	udiv	r3, r1, r3
 800681e:	1c59      	adds	r1, r3, #1
 8006820:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006824:	400b      	ands	r3, r1
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00a      	beq.n	8006840 <HAL_I2C_Init+0x138>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	1e59      	subs	r1, r3, #1
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	005b      	lsls	r3, r3, #1
 8006834:	fbb1 f3f3 	udiv	r3, r1, r3
 8006838:	3301      	adds	r3, #1
 800683a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800683e:	e051      	b.n	80068e4 <HAL_I2C_Init+0x1dc>
 8006840:	2304      	movs	r3, #4
 8006842:	e04f      	b.n	80068e4 <HAL_I2C_Init+0x1dc>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d111      	bne.n	8006870 <HAL_I2C_Init+0x168>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	1e58      	subs	r0, r3, #1
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6859      	ldr	r1, [r3, #4]
 8006854:	460b      	mov	r3, r1
 8006856:	005b      	lsls	r3, r3, #1
 8006858:	440b      	add	r3, r1
 800685a:	fbb0 f3f3 	udiv	r3, r0, r3
 800685e:	3301      	adds	r3, #1
 8006860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006864:	2b00      	cmp	r3, #0
 8006866:	bf0c      	ite	eq
 8006868:	2301      	moveq	r3, #1
 800686a:	2300      	movne	r3, #0
 800686c:	b2db      	uxtb	r3, r3
 800686e:	e012      	b.n	8006896 <HAL_I2C_Init+0x18e>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	1e58      	subs	r0, r3, #1
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6859      	ldr	r1, [r3, #4]
 8006878:	460b      	mov	r3, r1
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	440b      	add	r3, r1
 800687e:	0099      	lsls	r1, r3, #2
 8006880:	440b      	add	r3, r1
 8006882:	fbb0 f3f3 	udiv	r3, r0, r3
 8006886:	3301      	adds	r3, #1
 8006888:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800688c:	2b00      	cmp	r3, #0
 800688e:	bf0c      	ite	eq
 8006890:	2301      	moveq	r3, #1
 8006892:	2300      	movne	r3, #0
 8006894:	b2db      	uxtb	r3, r3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d001      	beq.n	800689e <HAL_I2C_Init+0x196>
 800689a:	2301      	movs	r3, #1
 800689c:	e022      	b.n	80068e4 <HAL_I2C_Init+0x1dc>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d10e      	bne.n	80068c4 <HAL_I2C_Init+0x1bc>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	1e58      	subs	r0, r3, #1
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6859      	ldr	r1, [r3, #4]
 80068ae:	460b      	mov	r3, r1
 80068b0:	005b      	lsls	r3, r3, #1
 80068b2:	440b      	add	r3, r1
 80068b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80068b8:	3301      	adds	r3, #1
 80068ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068c2:	e00f      	b.n	80068e4 <HAL_I2C_Init+0x1dc>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	1e58      	subs	r0, r3, #1
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6859      	ldr	r1, [r3, #4]
 80068cc:	460b      	mov	r3, r1
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	440b      	add	r3, r1
 80068d2:	0099      	lsls	r1, r3, #2
 80068d4:	440b      	add	r3, r1
 80068d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80068da:	3301      	adds	r3, #1
 80068dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068e4:	6879      	ldr	r1, [r7, #4]
 80068e6:	6809      	ldr	r1, [r1, #0]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	69da      	ldr	r2, [r3, #28]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a1b      	ldr	r3, [r3, #32]
 80068fe:	431a      	orrs	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	430a      	orrs	r2, r1
 8006906:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006912:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	6911      	ldr	r1, [r2, #16]
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	68d2      	ldr	r2, [r2, #12]
 800691e:	4311      	orrs	r1, r2
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	6812      	ldr	r2, [r2, #0]
 8006924:	430b      	orrs	r3, r1
 8006926:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	695a      	ldr	r2, [r3, #20]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	431a      	orrs	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	430a      	orrs	r2, r1
 8006942:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f042 0201 	orr.w	r2, r2, #1
 8006952:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2220      	movs	r2, #32
 800695e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	000186a0 	.word	0x000186a0
 8006980:	001e847f 	.word	0x001e847f
 8006984:	003d08ff 	.word	0x003d08ff
 8006988:	431bde83 	.word	0x431bde83
 800698c:	10624dd3 	.word	0x10624dd3

08006990 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b088      	sub	sp, #32
 8006994:	af02      	add	r7, sp, #8
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	607a      	str	r2, [r7, #4]
 800699a:	461a      	mov	r2, r3
 800699c:	460b      	mov	r3, r1
 800699e:	817b      	strh	r3, [r7, #10]
 80069a0:	4613      	mov	r3, r2
 80069a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80069a4:	f7fd fe54 	bl	8004650 <HAL_GetTick>
 80069a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b20      	cmp	r3, #32
 80069b4:	f040 80e0 	bne.w	8006b78 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	9300      	str	r3, [sp, #0]
 80069bc:	2319      	movs	r3, #25
 80069be:	2201      	movs	r2, #1
 80069c0:	4970      	ldr	r1, [pc, #448]	; (8006b84 <HAL_I2C_Master_Transmit+0x1f4>)
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	f000 fc58 	bl	8007278 <I2C_WaitOnFlagUntilTimeout>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d001      	beq.n	80069d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80069ce:	2302      	movs	r3, #2
 80069d0:	e0d3      	b.n	8006b7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d101      	bne.n	80069e0 <HAL_I2C_Master_Transmit+0x50>
 80069dc:	2302      	movs	r3, #2
 80069de:	e0cc      	b.n	8006b7a <HAL_I2C_Master_Transmit+0x1ea>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0301 	and.w	r3, r3, #1
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d007      	beq.n	8006a06 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f042 0201 	orr.w	r2, r2, #1
 8006a04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a14:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2221      	movs	r2, #33	; 0x21
 8006a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2210      	movs	r2, #16
 8006a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	893a      	ldrh	r2, [r7, #8]
 8006a36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a3c:	b29a      	uxth	r2, r3
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	4a50      	ldr	r2, [pc, #320]	; (8006b88 <HAL_I2C_Master_Transmit+0x1f8>)
 8006a46:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006a48:	8979      	ldrh	r1, [r7, #10]
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	6a3a      	ldr	r2, [r7, #32]
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f000 fac2 	bl	8006fd8 <I2C_MasterRequestWrite>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d001      	beq.n	8006a5e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e08d      	b.n	8006b7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a5e:	2300      	movs	r3, #0
 8006a60:	613b      	str	r3, [r7, #16]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	695b      	ldr	r3, [r3, #20]
 8006a68:	613b      	str	r3, [r7, #16]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	699b      	ldr	r3, [r3, #24]
 8006a70:	613b      	str	r3, [r7, #16]
 8006a72:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006a74:	e066      	b.n	8006b44 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	6a39      	ldr	r1, [r7, #32]
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f000 fcd2 	bl	8007424 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00d      	beq.n	8006aa2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8a:	2b04      	cmp	r3, #4
 8006a8c:	d107      	bne.n	8006a9e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e06b      	b.n	8006b7a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa6:	781a      	ldrb	r2, [r3, #0]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab2:	1c5a      	adds	r2, r3, #1
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aca:	3b01      	subs	r3, #1
 8006acc:	b29a      	uxth	r2, r3
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	695b      	ldr	r3, [r3, #20]
 8006ad8:	f003 0304 	and.w	r3, r3, #4
 8006adc:	2b04      	cmp	r3, #4
 8006ade:	d11b      	bne.n	8006b18 <HAL_I2C_Master_Transmit+0x188>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d017      	beq.n	8006b18 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aec:	781a      	ldrb	r2, [r3, #0]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af8:	1c5a      	adds	r2, r3, #1
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	3b01      	subs	r3, #1
 8006b06:	b29a      	uxth	r2, r3
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b10:	3b01      	subs	r3, #1
 8006b12:	b29a      	uxth	r2, r3
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b18:	697a      	ldr	r2, [r7, #20]
 8006b1a:	6a39      	ldr	r1, [r7, #32]
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	f000 fcc2 	bl	80074a6 <I2C_WaitOnBTFFlagUntilTimeout>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00d      	beq.n	8006b44 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2c:	2b04      	cmp	r3, #4
 8006b2e:	d107      	bne.n	8006b40 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b3e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e01a      	b.n	8006b7a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d194      	bne.n	8006a76 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2220      	movs	r2, #32
 8006b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006b74:	2300      	movs	r3, #0
 8006b76:	e000      	b.n	8006b7a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006b78:	2302      	movs	r3, #2
  }
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3718      	adds	r7, #24
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	00100002 	.word	0x00100002
 8006b88:	ffff0000 	.word	0xffff0000

08006b8c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b08c      	sub	sp, #48	; 0x30
 8006b90:	af02      	add	r7, sp, #8
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	607a      	str	r2, [r7, #4]
 8006b96:	461a      	mov	r2, r3
 8006b98:	460b      	mov	r3, r1
 8006b9a:	817b      	strh	r3, [r7, #10]
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006ba0:	f7fd fd56 	bl	8004650 <HAL_GetTick>
 8006ba4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	2b20      	cmp	r3, #32
 8006bb0:	f040 820b 	bne.w	8006fca <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb6:	9300      	str	r3, [sp, #0]
 8006bb8:	2319      	movs	r3, #25
 8006bba:	2201      	movs	r2, #1
 8006bbc:	497c      	ldr	r1, [pc, #496]	; (8006db0 <HAL_I2C_Master_Receive+0x224>)
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f000 fb5a 	bl	8007278 <I2C_WaitOnFlagUntilTimeout>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d001      	beq.n	8006bce <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006bca:	2302      	movs	r3, #2
 8006bcc:	e1fe      	b.n	8006fcc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d101      	bne.n	8006bdc <HAL_I2C_Master_Receive+0x50>
 8006bd8:	2302      	movs	r3, #2
 8006bda:	e1f7      	b.n	8006fcc <HAL_I2C_Master_Receive+0x440>
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d007      	beq.n	8006c02 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f042 0201 	orr.w	r2, r2, #1
 8006c00:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c10:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2222      	movs	r2, #34	; 0x22
 8006c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2210      	movs	r2, #16
 8006c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2200      	movs	r2, #0
 8006c26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	893a      	ldrh	r2, [r7, #8]
 8006c32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	4a5c      	ldr	r2, [pc, #368]	; (8006db4 <HAL_I2C_Master_Receive+0x228>)
 8006c42:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006c44:	8979      	ldrh	r1, [r7, #10]
 8006c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f000 fa46 	bl	80070dc <I2C_MasterRequestRead>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d001      	beq.n	8006c5a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e1b8      	b.n	8006fcc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d113      	bne.n	8006c8a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c62:	2300      	movs	r3, #0
 8006c64:	623b      	str	r3, [r7, #32]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	695b      	ldr	r3, [r3, #20]
 8006c6c:	623b      	str	r3, [r7, #32]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	623b      	str	r3, [r7, #32]
 8006c76:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c86:	601a      	str	r2, [r3, #0]
 8006c88:	e18c      	b.n	8006fa4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d11b      	bne.n	8006cca <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ca0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	61fb      	str	r3, [r7, #28]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	695b      	ldr	r3, [r3, #20]
 8006cac:	61fb      	str	r3, [r7, #28]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	699b      	ldr	r3, [r3, #24]
 8006cb4:	61fb      	str	r3, [r7, #28]
 8006cb6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cc6:	601a      	str	r2, [r3, #0]
 8006cc8:	e16c      	b.n	8006fa4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d11b      	bne.n	8006d0a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ce0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cf0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	61bb      	str	r3, [r7, #24]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	695b      	ldr	r3, [r3, #20]
 8006cfc:	61bb      	str	r3, [r7, #24]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	699b      	ldr	r3, [r3, #24]
 8006d04:	61bb      	str	r3, [r7, #24]
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	e14c      	b.n	8006fa4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	617b      	str	r3, [r7, #20]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	695b      	ldr	r3, [r3, #20]
 8006d24:	617b      	str	r3, [r7, #20]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	699b      	ldr	r3, [r3, #24]
 8006d2c:	617b      	str	r3, [r7, #20]
 8006d2e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006d30:	e138      	b.n	8006fa4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d36:	2b03      	cmp	r3, #3
 8006d38:	f200 80f1 	bhi.w	8006f1e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d123      	bne.n	8006d8c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	f000 fbed 	bl	8007528 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d001      	beq.n	8006d58 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	e139      	b.n	8006fcc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	691a      	ldr	r2, [r3, #16]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d62:	b2d2      	uxtb	r2, r2
 8006d64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6a:	1c5a      	adds	r2, r3, #1
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d74:	3b01      	subs	r3, #1
 8006d76:	b29a      	uxth	r2, r3
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	3b01      	subs	r3, #1
 8006d84:	b29a      	uxth	r2, r3
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d8a:	e10b      	b.n	8006fa4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	d14e      	bne.n	8006e32 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d96:	9300      	str	r3, [sp, #0]
 8006d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	4906      	ldr	r1, [pc, #24]	; (8006db8 <HAL_I2C_Master_Receive+0x22c>)
 8006d9e:	68f8      	ldr	r0, [r7, #12]
 8006da0:	f000 fa6a 	bl	8007278 <I2C_WaitOnFlagUntilTimeout>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d008      	beq.n	8006dbc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e10e      	b.n	8006fcc <HAL_I2C_Master_Receive+0x440>
 8006dae:	bf00      	nop
 8006db0:	00100002 	.word	0x00100002
 8006db4:	ffff0000 	.word	0xffff0000
 8006db8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	691a      	ldr	r2, [r3, #16]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd6:	b2d2      	uxtb	r2, r2
 8006dd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dde:	1c5a      	adds	r2, r3, #1
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006de8:	3b01      	subs	r3, #1
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	3b01      	subs	r3, #1
 8006df8:	b29a      	uxth	r2, r3
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	691a      	ldr	r2, [r3, #16]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e08:	b2d2      	uxtb	r2, r2
 8006e0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e10:	1c5a      	adds	r2, r3, #1
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e1a:	3b01      	subs	r3, #1
 8006e1c:	b29a      	uxth	r2, r3
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	b29a      	uxth	r2, r3
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006e30:	e0b8      	b.n	8006fa4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e34:	9300      	str	r3, [sp, #0]
 8006e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e38:	2200      	movs	r2, #0
 8006e3a:	4966      	ldr	r1, [pc, #408]	; (8006fd4 <HAL_I2C_Master_Receive+0x448>)
 8006e3c:	68f8      	ldr	r0, [r7, #12]
 8006e3e:	f000 fa1b 	bl	8007278 <I2C_WaitOnFlagUntilTimeout>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d001      	beq.n	8006e4c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e0bf      	b.n	8006fcc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	691a      	ldr	r2, [r3, #16]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e66:	b2d2      	uxtb	r2, r2
 8006e68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6e:	1c5a      	adds	r2, r3, #1
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e78:	3b01      	subs	r3, #1
 8006e7a:	b29a      	uxth	r2, r3
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	3b01      	subs	r3, #1
 8006e88:	b29a      	uxth	r2, r3
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e90:	9300      	str	r3, [sp, #0]
 8006e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e94:	2200      	movs	r2, #0
 8006e96:	494f      	ldr	r1, [pc, #316]	; (8006fd4 <HAL_I2C_Master_Receive+0x448>)
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f000 f9ed 	bl	8007278 <I2C_WaitOnFlagUntilTimeout>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d001      	beq.n	8006ea8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e091      	b.n	8006fcc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006eb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	691a      	ldr	r2, [r3, #16]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec2:	b2d2      	uxtb	r2, r2
 8006ec4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eca:	1c5a      	adds	r2, r3, #1
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	b29a      	uxth	r2, r3
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	691a      	ldr	r2, [r3, #16]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef4:	b2d2      	uxtb	r2, r2
 8006ef6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efc:	1c5a      	adds	r2, r3, #1
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f06:	3b01      	subs	r3, #1
 8006f08:	b29a      	uxth	r2, r3
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	3b01      	subs	r3, #1
 8006f16:	b29a      	uxth	r2, r3
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f1c:	e042      	b.n	8006fa4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f22:	68f8      	ldr	r0, [r7, #12]
 8006f24:	f000 fb00 	bl	8007528 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d001      	beq.n	8006f32 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e04c      	b.n	8006fcc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	691a      	ldr	r2, [r3, #16]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3c:	b2d2      	uxtb	r2, r2
 8006f3e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f44:	1c5a      	adds	r2, r3, #1
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	b29a      	uxth	r2, r3
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	b29a      	uxth	r2, r3
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	695b      	ldr	r3, [r3, #20]
 8006f6a:	f003 0304 	and.w	r3, r3, #4
 8006f6e:	2b04      	cmp	r3, #4
 8006f70:	d118      	bne.n	8006fa4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	691a      	ldr	r2, [r3, #16]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7c:	b2d2      	uxtb	r2, r2
 8006f7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f84:	1c5a      	adds	r2, r3, #1
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f8e:	3b01      	subs	r3, #1
 8006f90:	b29a      	uxth	r2, r3
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	3b01      	subs	r3, #1
 8006f9e:	b29a      	uxth	r2, r3
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f47f aec2 	bne.w	8006d32 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2220      	movs	r2, #32
 8006fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	e000      	b.n	8006fcc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006fca:	2302      	movs	r3, #2
  }
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3728      	adds	r7, #40	; 0x28
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	00010004 	.word	0x00010004

08006fd8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b088      	sub	sp, #32
 8006fdc:	af02      	add	r7, sp, #8
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	607a      	str	r2, [r7, #4]
 8006fe2:	603b      	str	r3, [r7, #0]
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	2b08      	cmp	r3, #8
 8006ff2:	d006      	beq.n	8007002 <I2C_MasterRequestWrite+0x2a>
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d003      	beq.n	8007002 <I2C_MasterRequestWrite+0x2a>
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007000:	d108      	bne.n	8007014 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007010:	601a      	str	r2, [r3, #0]
 8007012:	e00b      	b.n	800702c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007018:	2b12      	cmp	r3, #18
 800701a:	d107      	bne.n	800702c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800702a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	9300      	str	r3, [sp, #0]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	f000 f91d 	bl	8007278 <I2C_WaitOnFlagUntilTimeout>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d00d      	beq.n	8007060 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800704e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007052:	d103      	bne.n	800705c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f44f 7200 	mov.w	r2, #512	; 0x200
 800705a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800705c:	2303      	movs	r3, #3
 800705e:	e035      	b.n	80070cc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007068:	d108      	bne.n	800707c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800706a:	897b      	ldrh	r3, [r7, #10]
 800706c:	b2db      	uxtb	r3, r3
 800706e:	461a      	mov	r2, r3
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007078:	611a      	str	r2, [r3, #16]
 800707a:	e01b      	b.n	80070b4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800707c:	897b      	ldrh	r3, [r7, #10]
 800707e:	11db      	asrs	r3, r3, #7
 8007080:	b2db      	uxtb	r3, r3
 8007082:	f003 0306 	and.w	r3, r3, #6
 8007086:	b2db      	uxtb	r3, r3
 8007088:	f063 030f 	orn	r3, r3, #15
 800708c:	b2da      	uxtb	r2, r3
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	490e      	ldr	r1, [pc, #56]	; (80070d4 <I2C_MasterRequestWrite+0xfc>)
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f000 f943 	bl	8007326 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d001      	beq.n	80070aa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e010      	b.n	80070cc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80070aa:	897b      	ldrh	r3, [r7, #10]
 80070ac:	b2da      	uxtb	r2, r3
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	4907      	ldr	r1, [pc, #28]	; (80070d8 <I2C_MasterRequestWrite+0x100>)
 80070ba:	68f8      	ldr	r0, [r7, #12]
 80070bc:	f000 f933 	bl	8007326 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070c0:	4603      	mov	r3, r0
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d001      	beq.n	80070ca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e000      	b.n	80070cc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3718      	adds	r7, #24
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	00010008 	.word	0x00010008
 80070d8:	00010002 	.word	0x00010002

080070dc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b088      	sub	sp, #32
 80070e0:	af02      	add	r7, sp, #8
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	607a      	str	r2, [r7, #4]
 80070e6:	603b      	str	r3, [r7, #0]
 80070e8:	460b      	mov	r3, r1
 80070ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007100:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	2b08      	cmp	r3, #8
 8007106:	d006      	beq.n	8007116 <I2C_MasterRequestRead+0x3a>
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	2b01      	cmp	r3, #1
 800710c:	d003      	beq.n	8007116 <I2C_MasterRequestRead+0x3a>
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007114:	d108      	bne.n	8007128 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007124:	601a      	str	r2, [r3, #0]
 8007126:	e00b      	b.n	8007140 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800712c:	2b11      	cmp	r3, #17
 800712e:	d107      	bne.n	8007140 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800713e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	9300      	str	r3, [sp, #0]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f000 f893 	bl	8007278 <I2C_WaitOnFlagUntilTimeout>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d00d      	beq.n	8007174 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007166:	d103      	bne.n	8007170 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800716e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007170:	2303      	movs	r3, #3
 8007172:	e079      	b.n	8007268 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800717c:	d108      	bne.n	8007190 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800717e:	897b      	ldrh	r3, [r7, #10]
 8007180:	b2db      	uxtb	r3, r3
 8007182:	f043 0301 	orr.w	r3, r3, #1
 8007186:	b2da      	uxtb	r2, r3
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	611a      	str	r2, [r3, #16]
 800718e:	e05f      	b.n	8007250 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007190:	897b      	ldrh	r3, [r7, #10]
 8007192:	11db      	asrs	r3, r3, #7
 8007194:	b2db      	uxtb	r3, r3
 8007196:	f003 0306 	and.w	r3, r3, #6
 800719a:	b2db      	uxtb	r3, r3
 800719c:	f063 030f 	orn	r3, r3, #15
 80071a0:	b2da      	uxtb	r2, r3
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	4930      	ldr	r1, [pc, #192]	; (8007270 <I2C_MasterRequestRead+0x194>)
 80071ae:	68f8      	ldr	r0, [r7, #12]
 80071b0:	f000 f8b9 	bl	8007326 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80071b4:	4603      	mov	r3, r0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d001      	beq.n	80071be <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e054      	b.n	8007268 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80071be:	897b      	ldrh	r3, [r7, #10]
 80071c0:	b2da      	uxtb	r2, r3
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	4929      	ldr	r1, [pc, #164]	; (8007274 <I2C_MasterRequestRead+0x198>)
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f000 f8a9 	bl	8007326 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d001      	beq.n	80071de <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	e044      	b.n	8007268 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071de:	2300      	movs	r3, #0
 80071e0:	613b      	str	r3, [r7, #16]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	695b      	ldr	r3, [r3, #20]
 80071e8:	613b      	str	r3, [r7, #16]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	699b      	ldr	r3, [r3, #24]
 80071f0:	613b      	str	r3, [r7, #16]
 80071f2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007202:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	9300      	str	r3, [sp, #0]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007210:	68f8      	ldr	r0, [r7, #12]
 8007212:	f000 f831 	bl	8007278 <I2C_WaitOnFlagUntilTimeout>
 8007216:	4603      	mov	r3, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00d      	beq.n	8007238 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800722a:	d103      	bne.n	8007234 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007232:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007234:	2303      	movs	r3, #3
 8007236:	e017      	b.n	8007268 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007238:	897b      	ldrh	r3, [r7, #10]
 800723a:	11db      	asrs	r3, r3, #7
 800723c:	b2db      	uxtb	r3, r3
 800723e:	f003 0306 	and.w	r3, r3, #6
 8007242:	b2db      	uxtb	r3, r3
 8007244:	f063 030e 	orn	r3, r3, #14
 8007248:	b2da      	uxtb	r2, r3
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	4907      	ldr	r1, [pc, #28]	; (8007274 <I2C_MasterRequestRead+0x198>)
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	f000 f865 	bl	8007326 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d001      	beq.n	8007266 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e000      	b.n	8007268 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	3718      	adds	r7, #24
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}
 8007270:	00010008 	.word	0x00010008
 8007274:	00010002 	.word	0x00010002

08007278 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	603b      	str	r3, [r7, #0]
 8007284:	4613      	mov	r3, r2
 8007286:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007288:	e025      	b.n	80072d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007290:	d021      	beq.n	80072d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007292:	f7fd f9dd 	bl	8004650 <HAL_GetTick>
 8007296:	4602      	mov	r2, r0
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	1ad3      	subs	r3, r2, r3
 800729c:	683a      	ldr	r2, [r7, #0]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d302      	bcc.n	80072a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d116      	bne.n	80072d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2200      	movs	r2, #0
 80072ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2220      	movs	r2, #32
 80072b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c2:	f043 0220 	orr.w	r2, r3, #32
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e023      	b.n	800731e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	0c1b      	lsrs	r3, r3, #16
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d10d      	bne.n	80072fc <I2C_WaitOnFlagUntilTimeout+0x84>
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	695b      	ldr	r3, [r3, #20]
 80072e6:	43da      	mvns	r2, r3
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	4013      	ands	r3, r2
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	bf0c      	ite	eq
 80072f2:	2301      	moveq	r3, #1
 80072f4:	2300      	movne	r3, #0
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	461a      	mov	r2, r3
 80072fa:	e00c      	b.n	8007316 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	699b      	ldr	r3, [r3, #24]
 8007302:	43da      	mvns	r2, r3
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	4013      	ands	r3, r2
 8007308:	b29b      	uxth	r3, r3
 800730a:	2b00      	cmp	r3, #0
 800730c:	bf0c      	ite	eq
 800730e:	2301      	moveq	r3, #1
 8007310:	2300      	movne	r3, #0
 8007312:	b2db      	uxtb	r3, r3
 8007314:	461a      	mov	r2, r3
 8007316:	79fb      	ldrb	r3, [r7, #7]
 8007318:	429a      	cmp	r2, r3
 800731a:	d0b6      	beq.n	800728a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3710      	adds	r7, #16
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b084      	sub	sp, #16
 800732a:	af00      	add	r7, sp, #0
 800732c:	60f8      	str	r0, [r7, #12]
 800732e:	60b9      	str	r1, [r7, #8]
 8007330:	607a      	str	r2, [r7, #4]
 8007332:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007334:	e051      	b.n	80073da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	695b      	ldr	r3, [r3, #20]
 800733c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007344:	d123      	bne.n	800738e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007354:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800735e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2200      	movs	r2, #0
 8007364:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2220      	movs	r2, #32
 800736a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2200      	movs	r2, #0
 8007372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737a:	f043 0204 	orr.w	r2, r3, #4
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2200      	movs	r2, #0
 8007386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	e046      	b.n	800741c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007394:	d021      	beq.n	80073da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007396:	f7fd f95b 	bl	8004650 <HAL_GetTick>
 800739a:	4602      	mov	r2, r0
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	1ad3      	subs	r3, r2, r3
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d302      	bcc.n	80073ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d116      	bne.n	80073da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2200      	movs	r2, #0
 80073b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2220      	movs	r2, #32
 80073b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2200      	movs	r2, #0
 80073be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c6:	f043 0220 	orr.w	r2, r3, #32
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	e020      	b.n	800741c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	0c1b      	lsrs	r3, r3, #16
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d10c      	bne.n	80073fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	695b      	ldr	r3, [r3, #20]
 80073ea:	43da      	mvns	r2, r3
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	4013      	ands	r3, r2
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	bf14      	ite	ne
 80073f6:	2301      	movne	r3, #1
 80073f8:	2300      	moveq	r3, #0
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	e00b      	b.n	8007416 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	699b      	ldr	r3, [r3, #24]
 8007404:	43da      	mvns	r2, r3
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	4013      	ands	r3, r2
 800740a:	b29b      	uxth	r3, r3
 800740c:	2b00      	cmp	r3, #0
 800740e:	bf14      	ite	ne
 8007410:	2301      	movne	r3, #1
 8007412:	2300      	moveq	r3, #0
 8007414:	b2db      	uxtb	r3, r3
 8007416:	2b00      	cmp	r3, #0
 8007418:	d18d      	bne.n	8007336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007430:	e02d      	b.n	800748e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007432:	68f8      	ldr	r0, [r7, #12]
 8007434:	f000 f8ce 	bl	80075d4 <I2C_IsAcknowledgeFailed>
 8007438:	4603      	mov	r3, r0
 800743a:	2b00      	cmp	r3, #0
 800743c:	d001      	beq.n	8007442 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	e02d      	b.n	800749e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007448:	d021      	beq.n	800748e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800744a:	f7fd f901 	bl	8004650 <HAL_GetTick>
 800744e:	4602      	mov	r2, r0
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	1ad3      	subs	r3, r2, r3
 8007454:	68ba      	ldr	r2, [r7, #8]
 8007456:	429a      	cmp	r2, r3
 8007458:	d302      	bcc.n	8007460 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d116      	bne.n	800748e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2200      	movs	r2, #0
 8007464:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2220      	movs	r2, #32
 800746a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2200      	movs	r2, #0
 8007472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747a:	f043 0220 	orr.w	r2, r3, #32
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2200      	movs	r2, #0
 8007486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e007      	b.n	800749e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	695b      	ldr	r3, [r3, #20]
 8007494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007498:	2b80      	cmp	r3, #128	; 0x80
 800749a:	d1ca      	bne.n	8007432 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3710      	adds	r7, #16
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b084      	sub	sp, #16
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	60f8      	str	r0, [r7, #12]
 80074ae:	60b9      	str	r1, [r7, #8]
 80074b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80074b2:	e02d      	b.n	8007510 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f000 f88d 	bl	80075d4 <I2C_IsAcknowledgeFailed>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d001      	beq.n	80074c4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e02d      	b.n	8007520 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ca:	d021      	beq.n	8007510 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074cc:	f7fd f8c0 	bl	8004650 <HAL_GetTick>
 80074d0:	4602      	mov	r2, r0
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	1ad3      	subs	r3, r2, r3
 80074d6:	68ba      	ldr	r2, [r7, #8]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d302      	bcc.n	80074e2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d116      	bne.n	8007510 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2200      	movs	r2, #0
 80074e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2220      	movs	r2, #32
 80074ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fc:	f043 0220 	orr.w	r2, r3, #32
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2200      	movs	r2, #0
 8007508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	e007      	b.n	8007520 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	695b      	ldr	r3, [r3, #20]
 8007516:	f003 0304 	and.w	r3, r3, #4
 800751a:	2b04      	cmp	r3, #4
 800751c:	d1ca      	bne.n	80074b4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3710      	adds	r7, #16
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007534:	e042      	b.n	80075bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	695b      	ldr	r3, [r3, #20]
 800753c:	f003 0310 	and.w	r3, r3, #16
 8007540:	2b10      	cmp	r3, #16
 8007542:	d119      	bne.n	8007578 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f06f 0210 	mvn.w	r2, #16
 800754c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2200      	movs	r2, #0
 8007552:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2220      	movs	r2, #32
 8007558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2200      	movs	r2, #0
 8007560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	e029      	b.n	80075cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007578:	f7fd f86a 	bl	8004650 <HAL_GetTick>
 800757c:	4602      	mov	r2, r0
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	68ba      	ldr	r2, [r7, #8]
 8007584:	429a      	cmp	r2, r3
 8007586:	d302      	bcc.n	800758e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d116      	bne.n	80075bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2200      	movs	r2, #0
 8007592:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2220      	movs	r2, #32
 8007598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a8:	f043 0220 	orr.w	r2, r3, #32
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	e007      	b.n	80075cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	695b      	ldr	r3, [r3, #20]
 80075c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c6:	2b40      	cmp	r3, #64	; 0x40
 80075c8:	d1b5      	bne.n	8007536 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80075ca:	2300      	movs	r3, #0
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3710      	adds	r7, #16
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	695b      	ldr	r3, [r3, #20]
 80075e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075ea:	d11b      	bne.n	8007624 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80075f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2220      	movs	r2, #32
 8007600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007610:	f043 0204 	orr.w	r2, r3, #4
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	e000      	b.n	8007626 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	370c      	adds	r7, #12
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr
	...

08007634 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b088      	sub	sp, #32
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d101      	bne.n	8007646 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	e128      	b.n	8007898 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800764c:	b2db      	uxtb	r3, r3
 800764e:	2b00      	cmp	r3, #0
 8007650:	d109      	bne.n	8007666 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a90      	ldr	r2, [pc, #576]	; (80078a0 <HAL_I2S_Init+0x26c>)
 800765e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f7fc fd2f 	bl	80040c4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2202      	movs	r2, #2
 800766a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	69db      	ldr	r3, [r3, #28]
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	6812      	ldr	r2, [r2, #0]
 8007678:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800767c:	f023 030f 	bic.w	r3, r3, #15
 8007680:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	2202      	movs	r2, #2
 8007688:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	695b      	ldr	r3, [r3, #20]
 800768e:	2b02      	cmp	r3, #2
 8007690:	d060      	beq.n	8007754 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d102      	bne.n	80076a0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800769a:	2310      	movs	r3, #16
 800769c:	617b      	str	r3, [r7, #20]
 800769e:	e001      	b.n	80076a4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80076a0:	2320      	movs	r3, #32
 80076a2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	2b20      	cmp	r3, #32
 80076aa:	d802      	bhi.n	80076b2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	005b      	lsls	r3, r3, #1
 80076b0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80076b2:	2001      	movs	r0, #1
 80076b4:	f001 f9ae 	bl	8008a14 <HAL_RCCEx_GetPeriphCLKFreq>
 80076b8:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	691b      	ldr	r3, [r3, #16]
 80076be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076c2:	d125      	bne.n	8007710 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d010      	beq.n	80076ee <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	68fa      	ldr	r2, [r7, #12]
 80076d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80076d6:	4613      	mov	r3, r2
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	4413      	add	r3, r2
 80076dc:	005b      	lsls	r3, r3, #1
 80076de:	461a      	mov	r2, r3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	695b      	ldr	r3, [r3, #20]
 80076e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80076e8:	3305      	adds	r3, #5
 80076ea:	613b      	str	r3, [r7, #16]
 80076ec:	e01f      	b.n	800772e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	00db      	lsls	r3, r3, #3
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80076f8:	4613      	mov	r3, r2
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	4413      	add	r3, r2
 80076fe:	005b      	lsls	r3, r3, #1
 8007700:	461a      	mov	r2, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	695b      	ldr	r3, [r3, #20]
 8007706:	fbb2 f3f3 	udiv	r3, r2, r3
 800770a:	3305      	adds	r3, #5
 800770c:	613b      	str	r3, [r7, #16]
 800770e:	e00e      	b.n	800772e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007710:	68fa      	ldr	r2, [r7, #12]
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	fbb2 f2f3 	udiv	r2, r2, r3
 8007718:	4613      	mov	r3, r2
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	4413      	add	r3, r2
 800771e:	005b      	lsls	r3, r3, #1
 8007720:	461a      	mov	r2, r3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	695b      	ldr	r3, [r3, #20]
 8007726:	fbb2 f3f3 	udiv	r3, r2, r3
 800772a:	3305      	adds	r3, #5
 800772c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	4a5c      	ldr	r2, [pc, #368]	; (80078a4 <HAL_I2S_Init+0x270>)
 8007732:	fba2 2303 	umull	r2, r3, r2, r3
 8007736:	08db      	lsrs	r3, r3, #3
 8007738:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	f003 0301 	and.w	r3, r3, #1
 8007740:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8007742:	693a      	ldr	r2, [r7, #16]
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	1ad3      	subs	r3, r2, r3
 8007748:	085b      	lsrs	r3, r3, #1
 800774a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800774c:	69bb      	ldr	r3, [r7, #24]
 800774e:	021b      	lsls	r3, r3, #8
 8007750:	61bb      	str	r3, [r7, #24]
 8007752:	e003      	b.n	800775c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8007754:	2302      	movs	r3, #2
 8007756:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8007758:	2300      	movs	r3, #0
 800775a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	2b01      	cmp	r3, #1
 8007760:	d902      	bls.n	8007768 <HAL_I2S_Init+0x134>
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	2bff      	cmp	r3, #255	; 0xff
 8007766:	d907      	bls.n	8007778 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800776c:	f043 0210 	orr.w	r2, r3, #16
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	e08f      	b.n	8007898 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	691a      	ldr	r2, [r3, #16]
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	ea42 0103 	orr.w	r1, r2, r3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	69fa      	ldr	r2, [r7, #28]
 8007788:	430a      	orrs	r2, r1
 800778a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	69db      	ldr	r3, [r3, #28]
 8007792:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8007796:	f023 030f 	bic.w	r3, r3, #15
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	6851      	ldr	r1, [r2, #4]
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	6892      	ldr	r2, [r2, #8]
 80077a2:	4311      	orrs	r1, r2
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	68d2      	ldr	r2, [r2, #12]
 80077a8:	4311      	orrs	r1, r2
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	6992      	ldr	r2, [r2, #24]
 80077ae:	430a      	orrs	r2, r1
 80077b0:	431a      	orrs	r2, r3
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077ba:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6a1b      	ldr	r3, [r3, #32]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d161      	bne.n	8007888 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a38      	ldr	r2, [pc, #224]	; (80078a8 <HAL_I2S_Init+0x274>)
 80077c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a37      	ldr	r2, [pc, #220]	; (80078ac <HAL_I2S_Init+0x278>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d101      	bne.n	80077d8 <HAL_I2S_Init+0x1a4>
 80077d4:	4b36      	ldr	r3, [pc, #216]	; (80078b0 <HAL_I2S_Init+0x27c>)
 80077d6:	e001      	b.n	80077dc <HAL_I2S_Init+0x1a8>
 80077d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80077dc:	69db      	ldr	r3, [r3, #28]
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	6812      	ldr	r2, [r2, #0]
 80077e2:	4932      	ldr	r1, [pc, #200]	; (80078ac <HAL_I2S_Init+0x278>)
 80077e4:	428a      	cmp	r2, r1
 80077e6:	d101      	bne.n	80077ec <HAL_I2S_Init+0x1b8>
 80077e8:	4a31      	ldr	r2, [pc, #196]	; (80078b0 <HAL_I2S_Init+0x27c>)
 80077ea:	e001      	b.n	80077f0 <HAL_I2S_Init+0x1bc>
 80077ec:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80077f0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80077f4:	f023 030f 	bic.w	r3, r3, #15
 80077f8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a2b      	ldr	r2, [pc, #172]	; (80078ac <HAL_I2S_Init+0x278>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d101      	bne.n	8007808 <HAL_I2S_Init+0x1d4>
 8007804:	4b2a      	ldr	r3, [pc, #168]	; (80078b0 <HAL_I2S_Init+0x27c>)
 8007806:	e001      	b.n	800780c <HAL_I2S_Init+0x1d8>
 8007808:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800780c:	2202      	movs	r2, #2
 800780e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a25      	ldr	r2, [pc, #148]	; (80078ac <HAL_I2S_Init+0x278>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d101      	bne.n	800781e <HAL_I2S_Init+0x1ea>
 800781a:	4b25      	ldr	r3, [pc, #148]	; (80078b0 <HAL_I2S_Init+0x27c>)
 800781c:	e001      	b.n	8007822 <HAL_I2S_Init+0x1ee>
 800781e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007822:	69db      	ldr	r3, [r3, #28]
 8007824:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800782e:	d003      	beq.n	8007838 <HAL_I2S_Init+0x204>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d103      	bne.n	8007840 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8007838:	f44f 7380 	mov.w	r3, #256	; 0x100
 800783c:	613b      	str	r3, [r7, #16]
 800783e:	e001      	b.n	8007844 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8007840:	2300      	movs	r3, #0
 8007842:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800784e:	4313      	orrs	r3, r2
 8007850:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8007858:	4313      	orrs	r3, r2
 800785a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	699b      	ldr	r3, [r3, #24]
 8007860:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8007862:	4313      	orrs	r3, r2
 8007864:	b29a      	uxth	r2, r3
 8007866:	897b      	ldrh	r3, [r7, #10]
 8007868:	4313      	orrs	r3, r2
 800786a:	b29b      	uxth	r3, r3
 800786c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007870:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a0d      	ldr	r2, [pc, #52]	; (80078ac <HAL_I2S_Init+0x278>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d101      	bne.n	8007880 <HAL_I2S_Init+0x24c>
 800787c:	4b0c      	ldr	r3, [pc, #48]	; (80078b0 <HAL_I2S_Init+0x27c>)
 800787e:	e001      	b.n	8007884 <HAL_I2S_Init+0x250>
 8007880:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007884:	897a      	ldrh	r2, [r7, #10]
 8007886:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2201      	movs	r2, #1
 8007892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	3720      	adds	r7, #32
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	080079ab 	.word	0x080079ab
 80078a4:	cccccccd 	.word	0xcccccccd
 80078a8:	08007ac1 	.word	0x08007ac1
 80078ac:	40003800 	.word	0x40003800
 80078b0:	40003400 	.word	0x40003400

080078b4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80078bc:	bf00      	nop
 80078be:	370c      	adds	r7, #12
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80078d0:	bf00      	nop
 80078d2:	370c      	adds	r7, #12
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr

080078dc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80078e4:	bf00      	nop
 80078e6:	370c      	adds	r7, #12
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fc:	881a      	ldrh	r2, [r3, #0]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007908:	1c9a      	adds	r2, r3, #2
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007912:	b29b      	uxth	r3, r3
 8007914:	3b01      	subs	r3, #1
 8007916:	b29a      	uxth	r2, r3
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007920:	b29b      	uxth	r3, r3
 8007922:	2b00      	cmp	r3, #0
 8007924:	d10e      	bne.n	8007944 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	685a      	ldr	r2, [r3, #4]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007934:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2201      	movs	r2, #1
 800793a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f7ff ffb8 	bl	80078b4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007944:	bf00      	nop
 8007946:	3708      	adds	r7, #8
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	68da      	ldr	r2, [r3, #12]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795e:	b292      	uxth	r2, r2
 8007960:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007966:	1c9a      	adds	r2, r3, #2
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007970:	b29b      	uxth	r3, r3
 8007972:	3b01      	subs	r3, #1
 8007974:	b29a      	uxth	r2, r3
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800797e:	b29b      	uxth	r3, r3
 8007980:	2b00      	cmp	r3, #0
 8007982:	d10e      	bne.n	80079a2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	685a      	ldr	r2, [r3, #4]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007992:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f7ff ff93 	bl	80078c8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80079a2:	bf00      	nop
 80079a4:	3708      	adds	r7, #8
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b086      	sub	sp, #24
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	2b04      	cmp	r3, #4
 80079c4:	d13a      	bne.n	8007a3c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	f003 0301 	and.w	r3, r3, #1
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d109      	bne.n	80079e4 <I2S_IRQHandler+0x3a>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079da:	2b40      	cmp	r3, #64	; 0x40
 80079dc:	d102      	bne.n	80079e4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f7ff ffb4 	bl	800794c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ea:	2b40      	cmp	r3, #64	; 0x40
 80079ec:	d126      	bne.n	8007a3c <I2S_IRQHandler+0x92>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	f003 0320 	and.w	r3, r3, #32
 80079f8:	2b20      	cmp	r3, #32
 80079fa:	d11f      	bne.n	8007a3c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	685a      	ldr	r2, [r3, #4]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007a0a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	613b      	str	r3, [r7, #16]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	613b      	str	r3, [r7, #16]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	613b      	str	r3, [r7, #16]
 8007a20:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2201      	movs	r2, #1
 8007a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a2e:	f043 0202 	orr.w	r2, r3, #2
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f7ff ff50 	bl	80078dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	2b03      	cmp	r3, #3
 8007a46:	d136      	bne.n	8007ab6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	f003 0302 	and.w	r3, r3, #2
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	d109      	bne.n	8007a66 <I2S_IRQHandler+0xbc>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a5c:	2b80      	cmp	r3, #128	; 0x80
 8007a5e:	d102      	bne.n	8007a66 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f7ff ff45 	bl	80078f0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	f003 0308 	and.w	r3, r3, #8
 8007a6c:	2b08      	cmp	r3, #8
 8007a6e:	d122      	bne.n	8007ab6 <I2S_IRQHandler+0x10c>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	f003 0320 	and.w	r3, r3, #32
 8007a7a:	2b20      	cmp	r3, #32
 8007a7c:	d11b      	bne.n	8007ab6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	685a      	ldr	r2, [r3, #4]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007a8c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007a8e:	2300      	movs	r3, #0
 8007a90:	60fb      	str	r3, [r7, #12]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	60fb      	str	r3, [r7, #12]
 8007a9a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aa8:	f043 0204 	orr.w	r2, r3, #4
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f7ff ff13 	bl	80078dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007ab6:	bf00      	nop
 8007ab8:	3718      	adds	r7, #24
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
	...

08007ac0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b088      	sub	sp, #32
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4aa2      	ldr	r2, [pc, #648]	; (8007d60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d101      	bne.n	8007ade <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8007ada:	4ba2      	ldr	r3, [pc, #648]	; (8007d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007adc:	e001      	b.n	8007ae2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8007ade:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a9b      	ldr	r2, [pc, #620]	; (8007d60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d101      	bne.n	8007afc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8007af8:	4b9a      	ldr	r3, [pc, #616]	; (8007d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007afa:	e001      	b.n	8007b00 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8007afc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b0c:	d004      	beq.n	8007b18 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	f040 8099 	bne.w	8007c4a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	f003 0302 	and.w	r3, r3, #2
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	d107      	bne.n	8007b32 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d002      	beq.n	8007b32 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 f925 	bl	8007d7c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8007b32:	69bb      	ldr	r3, [r7, #24]
 8007b34:	f003 0301 	and.w	r3, r3, #1
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d107      	bne.n	8007b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d002      	beq.n	8007b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 f9c8 	bl	8007edc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007b4c:	69bb      	ldr	r3, [r7, #24]
 8007b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b52:	2b40      	cmp	r3, #64	; 0x40
 8007b54:	d13a      	bne.n	8007bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	f003 0320 	and.w	r3, r3, #32
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d035      	beq.n	8007bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a7e      	ldr	r2, [pc, #504]	; (8007d60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d101      	bne.n	8007b6e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8007b6a:	4b7e      	ldr	r3, [pc, #504]	; (8007d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007b6c:	e001      	b.n	8007b72 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8007b6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007b72:	685a      	ldr	r2, [r3, #4]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4979      	ldr	r1, [pc, #484]	; (8007d60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007b7a:	428b      	cmp	r3, r1
 8007b7c:	d101      	bne.n	8007b82 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8007b7e:	4b79      	ldr	r3, [pc, #484]	; (8007d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007b80:	e001      	b.n	8007b86 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8007b82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007b86:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007b8a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	685a      	ldr	r2, [r3, #4]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007b9a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	60fb      	str	r3, [r7, #12]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	60fb      	str	r3, [r7, #12]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	60fb      	str	r3, [r7, #12]
 8007bb0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bbe:	f043 0202 	orr.w	r2, r3, #2
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f7ff fe88 	bl	80078dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	f003 0308 	and.w	r3, r3, #8
 8007bd2:	2b08      	cmp	r3, #8
 8007bd4:	f040 80be 	bne.w	8007d54 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	f003 0320 	and.w	r3, r3, #32
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	f000 80b8 	beq.w	8007d54 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	685a      	ldr	r2, [r3, #4]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007bf2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a59      	ldr	r2, [pc, #356]	; (8007d60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d101      	bne.n	8007c02 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8007bfe:	4b59      	ldr	r3, [pc, #356]	; (8007d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007c00:	e001      	b.n	8007c06 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8007c02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007c06:	685a      	ldr	r2, [r3, #4]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4954      	ldr	r1, [pc, #336]	; (8007d60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007c0e:	428b      	cmp	r3, r1
 8007c10:	d101      	bne.n	8007c16 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8007c12:	4b54      	ldr	r3, [pc, #336]	; (8007d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007c14:	e001      	b.n	8007c1a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8007c16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007c1a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007c1e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007c20:	2300      	movs	r3, #0
 8007c22:	60bb      	str	r3, [r7, #8]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	60bb      	str	r3, [r7, #8]
 8007c2c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2201      	movs	r2, #1
 8007c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c3a:	f043 0204 	orr.w	r2, r3, #4
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f7ff fe4a 	bl	80078dc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007c48:	e084      	b.n	8007d54 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	f003 0302 	and.w	r3, r3, #2
 8007c50:	2b02      	cmp	r3, #2
 8007c52:	d107      	bne.n	8007c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d002      	beq.n	8007c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 f8be 	bl	8007de0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	f003 0301 	and.w	r3, r3, #1
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d107      	bne.n	8007c7e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d002      	beq.n	8007c7e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 f8fd 	bl	8007e78 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007c7e:	69fb      	ldr	r3, [r7, #28]
 8007c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c84:	2b40      	cmp	r3, #64	; 0x40
 8007c86:	d12f      	bne.n	8007ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	f003 0320 	and.w	r3, r3, #32
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d02a      	beq.n	8007ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	685a      	ldr	r2, [r3, #4]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007ca0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a2e      	ldr	r2, [pc, #184]	; (8007d60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d101      	bne.n	8007cb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8007cac:	4b2d      	ldr	r3, [pc, #180]	; (8007d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007cae:	e001      	b.n	8007cb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8007cb0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007cb4:	685a      	ldr	r2, [r3, #4]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4929      	ldr	r1, [pc, #164]	; (8007d60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007cbc:	428b      	cmp	r3, r1
 8007cbe:	d101      	bne.n	8007cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8007cc0:	4b28      	ldr	r3, [pc, #160]	; (8007d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007cc2:	e001      	b.n	8007cc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8007cc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007cc8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007ccc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cda:	f043 0202 	orr.w	r2, r3, #2
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f7ff fdfa 	bl	80078dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007ce8:	69bb      	ldr	r3, [r7, #24]
 8007cea:	f003 0308 	and.w	r3, r3, #8
 8007cee:	2b08      	cmp	r3, #8
 8007cf0:	d131      	bne.n	8007d56 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	f003 0320 	and.w	r3, r3, #32
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d02c      	beq.n	8007d56 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a17      	ldr	r2, [pc, #92]	; (8007d60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d101      	bne.n	8007d0a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8007d06:	4b17      	ldr	r3, [pc, #92]	; (8007d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007d08:	e001      	b.n	8007d0e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8007d0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007d0e:	685a      	ldr	r2, [r3, #4]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4912      	ldr	r1, [pc, #72]	; (8007d60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007d16:	428b      	cmp	r3, r1
 8007d18:	d101      	bne.n	8007d1e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8007d1a:	4b12      	ldr	r3, [pc, #72]	; (8007d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007d1c:	e001      	b.n	8007d22 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8007d1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007d22:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007d26:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	685a      	ldr	r2, [r3, #4]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007d36:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d44:	f043 0204 	orr.w	r2, r3, #4
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f7ff fdc5 	bl	80078dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007d52:	e000      	b.n	8007d56 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007d54:	bf00      	nop
}
 8007d56:	bf00      	nop
 8007d58:	3720      	adds	r7, #32
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	40003800 	.word	0x40003800
 8007d64:	40003400 	.word	0x40003400

08007d68 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8007d70:	bf00      	nop
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d88:	1c99      	adds	r1, r3, #2
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	6251      	str	r1, [r2, #36]	; 0x24
 8007d8e:	881a      	ldrh	r2, [r3, #0]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	3b01      	subs	r3, #1
 8007d9e:	b29a      	uxth	r2, r3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d113      	bne.n	8007dd6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	685a      	ldr	r2, [r3, #4]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007dbc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d106      	bne.n	8007dd6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f7ff ffc9 	bl	8007d68 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007dd6:	bf00      	nop
 8007dd8:	3708      	adds	r7, #8
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
	...

08007de0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dec:	1c99      	adds	r1, r3, #2
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	6251      	str	r1, [r2, #36]	; 0x24
 8007df2:	8819      	ldrh	r1, [r3, #0]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a1d      	ldr	r2, [pc, #116]	; (8007e70 <I2SEx_TxISR_I2SExt+0x90>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d101      	bne.n	8007e02 <I2SEx_TxISR_I2SExt+0x22>
 8007dfe:	4b1d      	ldr	r3, [pc, #116]	; (8007e74 <I2SEx_TxISR_I2SExt+0x94>)
 8007e00:	e001      	b.n	8007e06 <I2SEx_TxISR_I2SExt+0x26>
 8007e02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007e06:	460a      	mov	r2, r1
 8007e08:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	3b01      	subs	r3, #1
 8007e12:	b29a      	uxth	r2, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d121      	bne.n	8007e66 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a12      	ldr	r2, [pc, #72]	; (8007e70 <I2SEx_TxISR_I2SExt+0x90>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d101      	bne.n	8007e30 <I2SEx_TxISR_I2SExt+0x50>
 8007e2c:	4b11      	ldr	r3, [pc, #68]	; (8007e74 <I2SEx_TxISR_I2SExt+0x94>)
 8007e2e:	e001      	b.n	8007e34 <I2SEx_TxISR_I2SExt+0x54>
 8007e30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007e34:	685a      	ldr	r2, [r3, #4]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	490d      	ldr	r1, [pc, #52]	; (8007e70 <I2SEx_TxISR_I2SExt+0x90>)
 8007e3c:	428b      	cmp	r3, r1
 8007e3e:	d101      	bne.n	8007e44 <I2SEx_TxISR_I2SExt+0x64>
 8007e40:	4b0c      	ldr	r3, [pc, #48]	; (8007e74 <I2SEx_TxISR_I2SExt+0x94>)
 8007e42:	e001      	b.n	8007e48 <I2SEx_TxISR_I2SExt+0x68>
 8007e44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007e48:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007e4c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d106      	bne.n	8007e66 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f7ff ff81 	bl	8007d68 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007e66:	bf00      	nop
 8007e68:	3708      	adds	r7, #8
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	40003800 	.word	0x40003800
 8007e74:	40003400 	.word	0x40003400

08007e78 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	68d8      	ldr	r0, [r3, #12]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e8a:	1c99      	adds	r1, r3, #2
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007e90:	b282      	uxth	r2, r0
 8007e92:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	3b01      	subs	r3, #1
 8007e9c:	b29a      	uxth	r2, r3
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d113      	bne.n	8007ed4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	685a      	ldr	r2, [r3, #4]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007eba:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d106      	bne.n	8007ed4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2201      	movs	r2, #1
 8007eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f7ff ff4a 	bl	8007d68 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007ed4:	bf00      	nop
 8007ed6:	3708      	adds	r7, #8
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a20      	ldr	r2, [pc, #128]	; (8007f6c <I2SEx_RxISR_I2SExt+0x90>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d101      	bne.n	8007ef2 <I2SEx_RxISR_I2SExt+0x16>
 8007eee:	4b20      	ldr	r3, [pc, #128]	; (8007f70 <I2SEx_RxISR_I2SExt+0x94>)
 8007ef0:	e001      	b.n	8007ef6 <I2SEx_RxISR_I2SExt+0x1a>
 8007ef2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007ef6:	68d8      	ldr	r0, [r3, #12]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007efc:	1c99      	adds	r1, r3, #2
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007f02:	b282      	uxth	r2, r0
 8007f04:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	3b01      	subs	r3, #1
 8007f0e:	b29a      	uxth	r2, r3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d121      	bne.n	8007f62 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a12      	ldr	r2, [pc, #72]	; (8007f6c <I2SEx_RxISR_I2SExt+0x90>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d101      	bne.n	8007f2c <I2SEx_RxISR_I2SExt+0x50>
 8007f28:	4b11      	ldr	r3, [pc, #68]	; (8007f70 <I2SEx_RxISR_I2SExt+0x94>)
 8007f2a:	e001      	b.n	8007f30 <I2SEx_RxISR_I2SExt+0x54>
 8007f2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007f30:	685a      	ldr	r2, [r3, #4]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	490d      	ldr	r1, [pc, #52]	; (8007f6c <I2SEx_RxISR_I2SExt+0x90>)
 8007f38:	428b      	cmp	r3, r1
 8007f3a:	d101      	bne.n	8007f40 <I2SEx_RxISR_I2SExt+0x64>
 8007f3c:	4b0c      	ldr	r3, [pc, #48]	; (8007f70 <I2SEx_RxISR_I2SExt+0x94>)
 8007f3e:	e001      	b.n	8007f44 <I2SEx_RxISR_I2SExt+0x68>
 8007f40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007f44:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007f48:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d106      	bne.n	8007f62 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f7ff ff03 	bl	8007d68 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007f62:	bf00      	nop
 8007f64:	3708      	adds	r7, #8
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	40003800 	.word	0x40003800
 8007f70:	40003400 	.word	0x40003400

08007f74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b086      	sub	sp, #24
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d101      	bne.n	8007f86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	e264      	b.n	8008450 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 0301 	and.w	r3, r3, #1
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d075      	beq.n	800807e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007f92:	4ba3      	ldr	r3, [pc, #652]	; (8008220 <HAL_RCC_OscConfig+0x2ac>)
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	f003 030c 	and.w	r3, r3, #12
 8007f9a:	2b04      	cmp	r3, #4
 8007f9c:	d00c      	beq.n	8007fb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f9e:	4ba0      	ldr	r3, [pc, #640]	; (8008220 <HAL_RCC_OscConfig+0x2ac>)
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007fa6:	2b08      	cmp	r3, #8
 8007fa8:	d112      	bne.n	8007fd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007faa:	4b9d      	ldr	r3, [pc, #628]	; (8008220 <HAL_RCC_OscConfig+0x2ac>)
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007fb6:	d10b      	bne.n	8007fd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fb8:	4b99      	ldr	r3, [pc, #612]	; (8008220 <HAL_RCC_OscConfig+0x2ac>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d05b      	beq.n	800807c <HAL_RCC_OscConfig+0x108>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d157      	bne.n	800807c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e23f      	b.n	8008450 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fd8:	d106      	bne.n	8007fe8 <HAL_RCC_OscConfig+0x74>
 8007fda:	4b91      	ldr	r3, [pc, #580]	; (8008220 <HAL_RCC_OscConfig+0x2ac>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a90      	ldr	r2, [pc, #576]	; (8008220 <HAL_RCC_OscConfig+0x2ac>)
 8007fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fe4:	6013      	str	r3, [r2, #0]
 8007fe6:	e01d      	b.n	8008024 <HAL_RCC_OscConfig+0xb0>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ff0:	d10c      	bne.n	800800c <HAL_RCC_OscConfig+0x98>
 8007ff2:	4b8b      	ldr	r3, [pc, #556]	; (8008220 <HAL_RCC_OscConfig+0x2ac>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a8a      	ldr	r2, [pc, #552]	; (8008220 <HAL_RCC_OscConfig+0x2ac>)
 8007ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ffc:	6013      	str	r3, [r2, #0]
 8007ffe:	4b88      	ldr	r3, [pc, #544]	; (8008220 <HAL_RCC_OscConfig+0x2ac>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a87      	ldr	r2, [pc, #540]	; (8008220 <HAL_RCC_OscConfig+0x2ac>)
 8008004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008008:	6013      	str	r3, [r2, #0]
 800800a:	e00b      	b.n	8008024 <HAL_RCC_OscConfig+0xb0>
 800800c:	4b84      	ldr	r3, [pc, #528]	; (8008220 <HAL_RCC_OscConfig+0x2ac>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a83      	ldr	r2, [pc, #524]	; (8008220 <HAL_RCC_OscConfig+0x2ac>)
 8008012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008016:	6013      	str	r3, [r2, #0]
 8008018:	4b81      	ldr	r3, [pc, #516]	; (8008220 <HAL_RCC_OscConfig+0x2ac>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a80      	ldr	r2, [pc, #512]	; (8008220 <HAL_RCC_OscConfig+0x2ac>)
 800801e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008022:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d013      	beq.n	8008054 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800802c:	f7fc fb10 	bl	8004650 <HAL_GetTick>
 8008030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008032:	e008      	b.n	8008046 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008034:	f7fc fb0c 	bl	8004650 <HAL_GetTick>
 8008038:	4602      	mov	r2, r0
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	1ad3      	subs	r3, r2, r3
 800803e:	2b64      	cmp	r3, #100	; 0x64
 8008040:	d901      	bls.n	8008046 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008042:	2303      	movs	r3, #3
 8008044:	e204      	b.n	8008450 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008046:	4b76      	ldr	r3, [pc, #472]	; (8008220 <HAL_RCC_OscConfig+0x2ac>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800804e:	2b00      	cmp	r3, #0
 8008050:	d0f0      	beq.n	8008034 <HAL_RCC_OscConfig+0xc0>
 8008052:	e014      	b.n	800807e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008054:	f7fc fafc 	bl	8004650 <HAL_GetTick>
 8008058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800805a:	e008      	b.n	800806e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800805c:	f7fc faf8 	bl	8004650 <HAL_GetTick>
 8008060:	4602      	mov	r2, r0
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	1ad3      	subs	r3, r2, r3
 8008066:	2b64      	cmp	r3, #100	; 0x64
 8008068:	d901      	bls.n	800806e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800806a:	2303      	movs	r3, #3
 800806c:	e1f0      	b.n	8008450 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800806e:	4b6c      	ldr	r3, [pc, #432]	; (8008220 <HAL_RCC_OscConfig+0x2ac>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008076:	2b00      	cmp	r3, #0
 8008078:	d1f0      	bne.n	800805c <HAL_RCC_OscConfig+0xe8>
 800807a:	e000      	b.n	800807e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800807c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f003 0302 	and.w	r3, r3, #2
 8008086:	2b00      	cmp	r3, #0
 8008088:	d063      	beq.n	8008152 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800808a:	4b65      	ldr	r3, [pc, #404]	; (8008220 <HAL_RCC_OscConfig+0x2ac>)
 800808c:	689b      	ldr	r3, [r3, #8]
 800808e:	f003 030c 	and.w	r3, r3, #12
 8008092:	2b00      	cmp	r3, #0
 8008094:	d00b      	beq.n	80080ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008096:	4b62      	ldr	r3, [pc, #392]	; (8008220 <HAL_RCC_OscConfig+0x2ac>)
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800809e:	2b08      	cmp	r3, #8
 80080a0:	d11c      	bne.n	80080dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80080a2:	4b5f      	ldr	r3, [pc, #380]	; (8008220 <HAL_RCC_OscConfig+0x2ac>)
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d116      	bne.n	80080dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80080ae:	4b5c      	ldr	r3, [pc, #368]	; (8008220 <HAL_RCC_OscConfig+0x2ac>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f003 0302 	and.w	r3, r3, #2
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d005      	beq.n	80080c6 <HAL_RCC_OscConfig+0x152>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d001      	beq.n	80080c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	e1c4      	b.n	8008450 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080c6:	4b56      	ldr	r3, [pc, #344]	; (8008220 <HAL_RCC_OscConfig+0x2ac>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	00db      	lsls	r3, r3, #3
 80080d4:	4952      	ldr	r1, [pc, #328]	; (8008220 <HAL_RCC_OscConfig+0x2ac>)
 80080d6:	4313      	orrs	r3, r2
 80080d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80080da:	e03a      	b.n	8008152 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d020      	beq.n	8008126 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80080e4:	4b4f      	ldr	r3, [pc, #316]	; (8008224 <HAL_RCC_OscConfig+0x2b0>)
 80080e6:	2201      	movs	r2, #1
 80080e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080ea:	f7fc fab1 	bl	8004650 <HAL_GetTick>
 80080ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080f0:	e008      	b.n	8008104 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80080f2:	f7fc faad 	bl	8004650 <HAL_GetTick>
 80080f6:	4602      	mov	r2, r0
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	1ad3      	subs	r3, r2, r3
 80080fc:	2b02      	cmp	r3, #2
 80080fe:	d901      	bls.n	8008104 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008100:	2303      	movs	r3, #3
 8008102:	e1a5      	b.n	8008450 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008104:	4b46      	ldr	r3, [pc, #280]	; (8008220 <HAL_RCC_OscConfig+0x2ac>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f003 0302 	and.w	r3, r3, #2
 800810c:	2b00      	cmp	r3, #0
 800810e:	d0f0      	beq.n	80080f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008110:	4b43      	ldr	r3, [pc, #268]	; (8008220 <HAL_RCC_OscConfig+0x2ac>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	691b      	ldr	r3, [r3, #16]
 800811c:	00db      	lsls	r3, r3, #3
 800811e:	4940      	ldr	r1, [pc, #256]	; (8008220 <HAL_RCC_OscConfig+0x2ac>)
 8008120:	4313      	orrs	r3, r2
 8008122:	600b      	str	r3, [r1, #0]
 8008124:	e015      	b.n	8008152 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008126:	4b3f      	ldr	r3, [pc, #252]	; (8008224 <HAL_RCC_OscConfig+0x2b0>)
 8008128:	2200      	movs	r2, #0
 800812a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800812c:	f7fc fa90 	bl	8004650 <HAL_GetTick>
 8008130:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008132:	e008      	b.n	8008146 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008134:	f7fc fa8c 	bl	8004650 <HAL_GetTick>
 8008138:	4602      	mov	r2, r0
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	1ad3      	subs	r3, r2, r3
 800813e:	2b02      	cmp	r3, #2
 8008140:	d901      	bls.n	8008146 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008142:	2303      	movs	r3, #3
 8008144:	e184      	b.n	8008450 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008146:	4b36      	ldr	r3, [pc, #216]	; (8008220 <HAL_RCC_OscConfig+0x2ac>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f003 0302 	and.w	r3, r3, #2
 800814e:	2b00      	cmp	r3, #0
 8008150:	d1f0      	bne.n	8008134 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f003 0308 	and.w	r3, r3, #8
 800815a:	2b00      	cmp	r3, #0
 800815c:	d030      	beq.n	80081c0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	695b      	ldr	r3, [r3, #20]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d016      	beq.n	8008194 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008166:	4b30      	ldr	r3, [pc, #192]	; (8008228 <HAL_RCC_OscConfig+0x2b4>)
 8008168:	2201      	movs	r2, #1
 800816a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800816c:	f7fc fa70 	bl	8004650 <HAL_GetTick>
 8008170:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008172:	e008      	b.n	8008186 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008174:	f7fc fa6c 	bl	8004650 <HAL_GetTick>
 8008178:	4602      	mov	r2, r0
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	1ad3      	subs	r3, r2, r3
 800817e:	2b02      	cmp	r3, #2
 8008180:	d901      	bls.n	8008186 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008182:	2303      	movs	r3, #3
 8008184:	e164      	b.n	8008450 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008186:	4b26      	ldr	r3, [pc, #152]	; (8008220 <HAL_RCC_OscConfig+0x2ac>)
 8008188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800818a:	f003 0302 	and.w	r3, r3, #2
 800818e:	2b00      	cmp	r3, #0
 8008190:	d0f0      	beq.n	8008174 <HAL_RCC_OscConfig+0x200>
 8008192:	e015      	b.n	80081c0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008194:	4b24      	ldr	r3, [pc, #144]	; (8008228 <HAL_RCC_OscConfig+0x2b4>)
 8008196:	2200      	movs	r2, #0
 8008198:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800819a:	f7fc fa59 	bl	8004650 <HAL_GetTick>
 800819e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80081a0:	e008      	b.n	80081b4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80081a2:	f7fc fa55 	bl	8004650 <HAL_GetTick>
 80081a6:	4602      	mov	r2, r0
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	1ad3      	subs	r3, r2, r3
 80081ac:	2b02      	cmp	r3, #2
 80081ae:	d901      	bls.n	80081b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80081b0:	2303      	movs	r3, #3
 80081b2:	e14d      	b.n	8008450 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80081b4:	4b1a      	ldr	r3, [pc, #104]	; (8008220 <HAL_RCC_OscConfig+0x2ac>)
 80081b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081b8:	f003 0302 	and.w	r3, r3, #2
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d1f0      	bne.n	80081a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f003 0304 	and.w	r3, r3, #4
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	f000 80a0 	beq.w	800830e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80081ce:	2300      	movs	r3, #0
 80081d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80081d2:	4b13      	ldr	r3, [pc, #76]	; (8008220 <HAL_RCC_OscConfig+0x2ac>)
 80081d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d10f      	bne.n	80081fe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80081de:	2300      	movs	r3, #0
 80081e0:	60bb      	str	r3, [r7, #8]
 80081e2:	4b0f      	ldr	r3, [pc, #60]	; (8008220 <HAL_RCC_OscConfig+0x2ac>)
 80081e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e6:	4a0e      	ldr	r2, [pc, #56]	; (8008220 <HAL_RCC_OscConfig+0x2ac>)
 80081e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081ec:	6413      	str	r3, [r2, #64]	; 0x40
 80081ee:	4b0c      	ldr	r3, [pc, #48]	; (8008220 <HAL_RCC_OscConfig+0x2ac>)
 80081f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081f6:	60bb      	str	r3, [r7, #8]
 80081f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80081fa:	2301      	movs	r3, #1
 80081fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081fe:	4b0b      	ldr	r3, [pc, #44]	; (800822c <HAL_RCC_OscConfig+0x2b8>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008206:	2b00      	cmp	r3, #0
 8008208:	d121      	bne.n	800824e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800820a:	4b08      	ldr	r3, [pc, #32]	; (800822c <HAL_RCC_OscConfig+0x2b8>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a07      	ldr	r2, [pc, #28]	; (800822c <HAL_RCC_OscConfig+0x2b8>)
 8008210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008214:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008216:	f7fc fa1b 	bl	8004650 <HAL_GetTick>
 800821a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800821c:	e011      	b.n	8008242 <HAL_RCC_OscConfig+0x2ce>
 800821e:	bf00      	nop
 8008220:	40023800 	.word	0x40023800
 8008224:	42470000 	.word	0x42470000
 8008228:	42470e80 	.word	0x42470e80
 800822c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008230:	f7fc fa0e 	bl	8004650 <HAL_GetTick>
 8008234:	4602      	mov	r2, r0
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	1ad3      	subs	r3, r2, r3
 800823a:	2b02      	cmp	r3, #2
 800823c:	d901      	bls.n	8008242 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800823e:	2303      	movs	r3, #3
 8008240:	e106      	b.n	8008450 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008242:	4b85      	ldr	r3, [pc, #532]	; (8008458 <HAL_RCC_OscConfig+0x4e4>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800824a:	2b00      	cmp	r3, #0
 800824c:	d0f0      	beq.n	8008230 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	2b01      	cmp	r3, #1
 8008254:	d106      	bne.n	8008264 <HAL_RCC_OscConfig+0x2f0>
 8008256:	4b81      	ldr	r3, [pc, #516]	; (800845c <HAL_RCC_OscConfig+0x4e8>)
 8008258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800825a:	4a80      	ldr	r2, [pc, #512]	; (800845c <HAL_RCC_OscConfig+0x4e8>)
 800825c:	f043 0301 	orr.w	r3, r3, #1
 8008260:	6713      	str	r3, [r2, #112]	; 0x70
 8008262:	e01c      	b.n	800829e <HAL_RCC_OscConfig+0x32a>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	2b05      	cmp	r3, #5
 800826a:	d10c      	bne.n	8008286 <HAL_RCC_OscConfig+0x312>
 800826c:	4b7b      	ldr	r3, [pc, #492]	; (800845c <HAL_RCC_OscConfig+0x4e8>)
 800826e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008270:	4a7a      	ldr	r2, [pc, #488]	; (800845c <HAL_RCC_OscConfig+0x4e8>)
 8008272:	f043 0304 	orr.w	r3, r3, #4
 8008276:	6713      	str	r3, [r2, #112]	; 0x70
 8008278:	4b78      	ldr	r3, [pc, #480]	; (800845c <HAL_RCC_OscConfig+0x4e8>)
 800827a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800827c:	4a77      	ldr	r2, [pc, #476]	; (800845c <HAL_RCC_OscConfig+0x4e8>)
 800827e:	f043 0301 	orr.w	r3, r3, #1
 8008282:	6713      	str	r3, [r2, #112]	; 0x70
 8008284:	e00b      	b.n	800829e <HAL_RCC_OscConfig+0x32a>
 8008286:	4b75      	ldr	r3, [pc, #468]	; (800845c <HAL_RCC_OscConfig+0x4e8>)
 8008288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800828a:	4a74      	ldr	r2, [pc, #464]	; (800845c <HAL_RCC_OscConfig+0x4e8>)
 800828c:	f023 0301 	bic.w	r3, r3, #1
 8008290:	6713      	str	r3, [r2, #112]	; 0x70
 8008292:	4b72      	ldr	r3, [pc, #456]	; (800845c <HAL_RCC_OscConfig+0x4e8>)
 8008294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008296:	4a71      	ldr	r2, [pc, #452]	; (800845c <HAL_RCC_OscConfig+0x4e8>)
 8008298:	f023 0304 	bic.w	r3, r3, #4
 800829c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d015      	beq.n	80082d2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082a6:	f7fc f9d3 	bl	8004650 <HAL_GetTick>
 80082aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082ac:	e00a      	b.n	80082c4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082ae:	f7fc f9cf 	bl	8004650 <HAL_GetTick>
 80082b2:	4602      	mov	r2, r0
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	1ad3      	subs	r3, r2, r3
 80082b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80082bc:	4293      	cmp	r3, r2
 80082be:	d901      	bls.n	80082c4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80082c0:	2303      	movs	r3, #3
 80082c2:	e0c5      	b.n	8008450 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082c4:	4b65      	ldr	r3, [pc, #404]	; (800845c <HAL_RCC_OscConfig+0x4e8>)
 80082c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082c8:	f003 0302 	and.w	r3, r3, #2
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d0ee      	beq.n	80082ae <HAL_RCC_OscConfig+0x33a>
 80082d0:	e014      	b.n	80082fc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80082d2:	f7fc f9bd 	bl	8004650 <HAL_GetTick>
 80082d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082d8:	e00a      	b.n	80082f0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082da:	f7fc f9b9 	bl	8004650 <HAL_GetTick>
 80082de:	4602      	mov	r2, r0
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	1ad3      	subs	r3, r2, r3
 80082e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d901      	bls.n	80082f0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80082ec:	2303      	movs	r3, #3
 80082ee:	e0af      	b.n	8008450 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082f0:	4b5a      	ldr	r3, [pc, #360]	; (800845c <HAL_RCC_OscConfig+0x4e8>)
 80082f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082f4:	f003 0302 	and.w	r3, r3, #2
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1ee      	bne.n	80082da <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80082fc:	7dfb      	ldrb	r3, [r7, #23]
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d105      	bne.n	800830e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008302:	4b56      	ldr	r3, [pc, #344]	; (800845c <HAL_RCC_OscConfig+0x4e8>)
 8008304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008306:	4a55      	ldr	r2, [pc, #340]	; (800845c <HAL_RCC_OscConfig+0x4e8>)
 8008308:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800830c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	699b      	ldr	r3, [r3, #24]
 8008312:	2b00      	cmp	r3, #0
 8008314:	f000 809b 	beq.w	800844e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008318:	4b50      	ldr	r3, [pc, #320]	; (800845c <HAL_RCC_OscConfig+0x4e8>)
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	f003 030c 	and.w	r3, r3, #12
 8008320:	2b08      	cmp	r3, #8
 8008322:	d05c      	beq.n	80083de <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	699b      	ldr	r3, [r3, #24]
 8008328:	2b02      	cmp	r3, #2
 800832a:	d141      	bne.n	80083b0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800832c:	4b4c      	ldr	r3, [pc, #304]	; (8008460 <HAL_RCC_OscConfig+0x4ec>)
 800832e:	2200      	movs	r2, #0
 8008330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008332:	f7fc f98d 	bl	8004650 <HAL_GetTick>
 8008336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008338:	e008      	b.n	800834c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800833a:	f7fc f989 	bl	8004650 <HAL_GetTick>
 800833e:	4602      	mov	r2, r0
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	1ad3      	subs	r3, r2, r3
 8008344:	2b02      	cmp	r3, #2
 8008346:	d901      	bls.n	800834c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008348:	2303      	movs	r3, #3
 800834a:	e081      	b.n	8008450 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800834c:	4b43      	ldr	r3, [pc, #268]	; (800845c <HAL_RCC_OscConfig+0x4e8>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008354:	2b00      	cmp	r3, #0
 8008356:	d1f0      	bne.n	800833a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	69da      	ldr	r2, [r3, #28]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6a1b      	ldr	r3, [r3, #32]
 8008360:	431a      	orrs	r2, r3
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008366:	019b      	lsls	r3, r3, #6
 8008368:	431a      	orrs	r2, r3
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800836e:	085b      	lsrs	r3, r3, #1
 8008370:	3b01      	subs	r3, #1
 8008372:	041b      	lsls	r3, r3, #16
 8008374:	431a      	orrs	r2, r3
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800837a:	061b      	lsls	r3, r3, #24
 800837c:	4937      	ldr	r1, [pc, #220]	; (800845c <HAL_RCC_OscConfig+0x4e8>)
 800837e:	4313      	orrs	r3, r2
 8008380:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008382:	4b37      	ldr	r3, [pc, #220]	; (8008460 <HAL_RCC_OscConfig+0x4ec>)
 8008384:	2201      	movs	r2, #1
 8008386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008388:	f7fc f962 	bl	8004650 <HAL_GetTick>
 800838c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800838e:	e008      	b.n	80083a2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008390:	f7fc f95e 	bl	8004650 <HAL_GetTick>
 8008394:	4602      	mov	r2, r0
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	1ad3      	subs	r3, r2, r3
 800839a:	2b02      	cmp	r3, #2
 800839c:	d901      	bls.n	80083a2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800839e:	2303      	movs	r3, #3
 80083a0:	e056      	b.n	8008450 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083a2:	4b2e      	ldr	r3, [pc, #184]	; (800845c <HAL_RCC_OscConfig+0x4e8>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d0f0      	beq.n	8008390 <HAL_RCC_OscConfig+0x41c>
 80083ae:	e04e      	b.n	800844e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083b0:	4b2b      	ldr	r3, [pc, #172]	; (8008460 <HAL_RCC_OscConfig+0x4ec>)
 80083b2:	2200      	movs	r2, #0
 80083b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083b6:	f7fc f94b 	bl	8004650 <HAL_GetTick>
 80083ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083bc:	e008      	b.n	80083d0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083be:	f7fc f947 	bl	8004650 <HAL_GetTick>
 80083c2:	4602      	mov	r2, r0
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	1ad3      	subs	r3, r2, r3
 80083c8:	2b02      	cmp	r3, #2
 80083ca:	d901      	bls.n	80083d0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80083cc:	2303      	movs	r3, #3
 80083ce:	e03f      	b.n	8008450 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083d0:	4b22      	ldr	r3, [pc, #136]	; (800845c <HAL_RCC_OscConfig+0x4e8>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d1f0      	bne.n	80083be <HAL_RCC_OscConfig+0x44a>
 80083dc:	e037      	b.n	800844e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	699b      	ldr	r3, [r3, #24]
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d101      	bne.n	80083ea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	e032      	b.n	8008450 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80083ea:	4b1c      	ldr	r3, [pc, #112]	; (800845c <HAL_RCC_OscConfig+0x4e8>)
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	699b      	ldr	r3, [r3, #24]
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d028      	beq.n	800844a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008402:	429a      	cmp	r2, r3
 8008404:	d121      	bne.n	800844a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008410:	429a      	cmp	r2, r3
 8008412:	d11a      	bne.n	800844a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008414:	68fa      	ldr	r2, [r7, #12]
 8008416:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800841a:	4013      	ands	r3, r2
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008420:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008422:	4293      	cmp	r3, r2
 8008424:	d111      	bne.n	800844a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008430:	085b      	lsrs	r3, r3, #1
 8008432:	3b01      	subs	r3, #1
 8008434:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008436:	429a      	cmp	r2, r3
 8008438:	d107      	bne.n	800844a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008444:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008446:	429a      	cmp	r2, r3
 8008448:	d001      	beq.n	800844e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	e000      	b.n	8008450 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800844e:	2300      	movs	r3, #0
}
 8008450:	4618      	mov	r0, r3
 8008452:	3718      	adds	r7, #24
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}
 8008458:	40007000 	.word	0x40007000
 800845c:	40023800 	.word	0x40023800
 8008460:	42470060 	.word	0x42470060

08008464 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d101      	bne.n	8008478 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008474:	2301      	movs	r3, #1
 8008476:	e0cc      	b.n	8008612 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008478:	4b68      	ldr	r3, [pc, #416]	; (800861c <HAL_RCC_ClockConfig+0x1b8>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f003 0307 	and.w	r3, r3, #7
 8008480:	683a      	ldr	r2, [r7, #0]
 8008482:	429a      	cmp	r2, r3
 8008484:	d90c      	bls.n	80084a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008486:	4b65      	ldr	r3, [pc, #404]	; (800861c <HAL_RCC_ClockConfig+0x1b8>)
 8008488:	683a      	ldr	r2, [r7, #0]
 800848a:	b2d2      	uxtb	r2, r2
 800848c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800848e:	4b63      	ldr	r3, [pc, #396]	; (800861c <HAL_RCC_ClockConfig+0x1b8>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f003 0307 	and.w	r3, r3, #7
 8008496:	683a      	ldr	r2, [r7, #0]
 8008498:	429a      	cmp	r2, r3
 800849a:	d001      	beq.n	80084a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	e0b8      	b.n	8008612 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f003 0302 	and.w	r3, r3, #2
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d020      	beq.n	80084ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f003 0304 	and.w	r3, r3, #4
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d005      	beq.n	80084c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80084b8:	4b59      	ldr	r3, [pc, #356]	; (8008620 <HAL_RCC_ClockConfig+0x1bc>)
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	4a58      	ldr	r2, [pc, #352]	; (8008620 <HAL_RCC_ClockConfig+0x1bc>)
 80084be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80084c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f003 0308 	and.w	r3, r3, #8
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d005      	beq.n	80084dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80084d0:	4b53      	ldr	r3, [pc, #332]	; (8008620 <HAL_RCC_ClockConfig+0x1bc>)
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	4a52      	ldr	r2, [pc, #328]	; (8008620 <HAL_RCC_ClockConfig+0x1bc>)
 80084d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80084da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80084dc:	4b50      	ldr	r3, [pc, #320]	; (8008620 <HAL_RCC_ClockConfig+0x1bc>)
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	494d      	ldr	r1, [pc, #308]	; (8008620 <HAL_RCC_ClockConfig+0x1bc>)
 80084ea:	4313      	orrs	r3, r2
 80084ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f003 0301 	and.w	r3, r3, #1
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d044      	beq.n	8008584 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d107      	bne.n	8008512 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008502:	4b47      	ldr	r3, [pc, #284]	; (8008620 <HAL_RCC_ClockConfig+0x1bc>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800850a:	2b00      	cmp	r3, #0
 800850c:	d119      	bne.n	8008542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800850e:	2301      	movs	r3, #1
 8008510:	e07f      	b.n	8008612 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	2b02      	cmp	r3, #2
 8008518:	d003      	beq.n	8008522 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800851e:	2b03      	cmp	r3, #3
 8008520:	d107      	bne.n	8008532 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008522:	4b3f      	ldr	r3, [pc, #252]	; (8008620 <HAL_RCC_ClockConfig+0x1bc>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800852a:	2b00      	cmp	r3, #0
 800852c:	d109      	bne.n	8008542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800852e:	2301      	movs	r3, #1
 8008530:	e06f      	b.n	8008612 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008532:	4b3b      	ldr	r3, [pc, #236]	; (8008620 <HAL_RCC_ClockConfig+0x1bc>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f003 0302 	and.w	r3, r3, #2
 800853a:	2b00      	cmp	r3, #0
 800853c:	d101      	bne.n	8008542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800853e:	2301      	movs	r3, #1
 8008540:	e067      	b.n	8008612 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008542:	4b37      	ldr	r3, [pc, #220]	; (8008620 <HAL_RCC_ClockConfig+0x1bc>)
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	f023 0203 	bic.w	r2, r3, #3
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	4934      	ldr	r1, [pc, #208]	; (8008620 <HAL_RCC_ClockConfig+0x1bc>)
 8008550:	4313      	orrs	r3, r2
 8008552:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008554:	f7fc f87c 	bl	8004650 <HAL_GetTick>
 8008558:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800855a:	e00a      	b.n	8008572 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800855c:	f7fc f878 	bl	8004650 <HAL_GetTick>
 8008560:	4602      	mov	r2, r0
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	1ad3      	subs	r3, r2, r3
 8008566:	f241 3288 	movw	r2, #5000	; 0x1388
 800856a:	4293      	cmp	r3, r2
 800856c:	d901      	bls.n	8008572 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800856e:	2303      	movs	r3, #3
 8008570:	e04f      	b.n	8008612 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008572:	4b2b      	ldr	r3, [pc, #172]	; (8008620 <HAL_RCC_ClockConfig+0x1bc>)
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	f003 020c 	and.w	r2, r3, #12
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	429a      	cmp	r2, r3
 8008582:	d1eb      	bne.n	800855c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008584:	4b25      	ldr	r3, [pc, #148]	; (800861c <HAL_RCC_ClockConfig+0x1b8>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f003 0307 	and.w	r3, r3, #7
 800858c:	683a      	ldr	r2, [r7, #0]
 800858e:	429a      	cmp	r2, r3
 8008590:	d20c      	bcs.n	80085ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008592:	4b22      	ldr	r3, [pc, #136]	; (800861c <HAL_RCC_ClockConfig+0x1b8>)
 8008594:	683a      	ldr	r2, [r7, #0]
 8008596:	b2d2      	uxtb	r2, r2
 8008598:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800859a:	4b20      	ldr	r3, [pc, #128]	; (800861c <HAL_RCC_ClockConfig+0x1b8>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f003 0307 	and.w	r3, r3, #7
 80085a2:	683a      	ldr	r2, [r7, #0]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d001      	beq.n	80085ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80085a8:	2301      	movs	r3, #1
 80085aa:	e032      	b.n	8008612 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f003 0304 	and.w	r3, r3, #4
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d008      	beq.n	80085ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80085b8:	4b19      	ldr	r3, [pc, #100]	; (8008620 <HAL_RCC_ClockConfig+0x1bc>)
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	68db      	ldr	r3, [r3, #12]
 80085c4:	4916      	ldr	r1, [pc, #88]	; (8008620 <HAL_RCC_ClockConfig+0x1bc>)
 80085c6:	4313      	orrs	r3, r2
 80085c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f003 0308 	and.w	r3, r3, #8
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d009      	beq.n	80085ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80085d6:	4b12      	ldr	r3, [pc, #72]	; (8008620 <HAL_RCC_ClockConfig+0x1bc>)
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	691b      	ldr	r3, [r3, #16]
 80085e2:	00db      	lsls	r3, r3, #3
 80085e4:	490e      	ldr	r1, [pc, #56]	; (8008620 <HAL_RCC_ClockConfig+0x1bc>)
 80085e6:	4313      	orrs	r3, r2
 80085e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80085ea:	f000 f821 	bl	8008630 <HAL_RCC_GetSysClockFreq>
 80085ee:	4602      	mov	r2, r0
 80085f0:	4b0b      	ldr	r3, [pc, #44]	; (8008620 <HAL_RCC_ClockConfig+0x1bc>)
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	091b      	lsrs	r3, r3, #4
 80085f6:	f003 030f 	and.w	r3, r3, #15
 80085fa:	490a      	ldr	r1, [pc, #40]	; (8008624 <HAL_RCC_ClockConfig+0x1c0>)
 80085fc:	5ccb      	ldrb	r3, [r1, r3]
 80085fe:	fa22 f303 	lsr.w	r3, r2, r3
 8008602:	4a09      	ldr	r2, [pc, #36]	; (8008628 <HAL_RCC_ClockConfig+0x1c4>)
 8008604:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008606:	4b09      	ldr	r3, [pc, #36]	; (800862c <HAL_RCC_ClockConfig+0x1c8>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4618      	mov	r0, r3
 800860c:	f7fb ffdc 	bl	80045c8 <HAL_InitTick>

  return HAL_OK;
 8008610:	2300      	movs	r3, #0
}
 8008612:	4618      	mov	r0, r3
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	40023c00 	.word	0x40023c00
 8008620:	40023800 	.word	0x40023800
 8008624:	08012540 	.word	0x08012540
 8008628:	2000002c 	.word	0x2000002c
 800862c:	20000030 	.word	0x20000030

08008630 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008630:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008634:	b084      	sub	sp, #16
 8008636:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008638:	2300      	movs	r3, #0
 800863a:	607b      	str	r3, [r7, #4]
 800863c:	2300      	movs	r3, #0
 800863e:	60fb      	str	r3, [r7, #12]
 8008640:	2300      	movs	r3, #0
 8008642:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008644:	2300      	movs	r3, #0
 8008646:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008648:	4b67      	ldr	r3, [pc, #412]	; (80087e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	f003 030c 	and.w	r3, r3, #12
 8008650:	2b08      	cmp	r3, #8
 8008652:	d00d      	beq.n	8008670 <HAL_RCC_GetSysClockFreq+0x40>
 8008654:	2b08      	cmp	r3, #8
 8008656:	f200 80bd 	bhi.w	80087d4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800865a:	2b00      	cmp	r3, #0
 800865c:	d002      	beq.n	8008664 <HAL_RCC_GetSysClockFreq+0x34>
 800865e:	2b04      	cmp	r3, #4
 8008660:	d003      	beq.n	800866a <HAL_RCC_GetSysClockFreq+0x3a>
 8008662:	e0b7      	b.n	80087d4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008664:	4b61      	ldr	r3, [pc, #388]	; (80087ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008666:	60bb      	str	r3, [r7, #8]
       break;
 8008668:	e0b7      	b.n	80087da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800866a:	4b61      	ldr	r3, [pc, #388]	; (80087f0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800866c:	60bb      	str	r3, [r7, #8]
      break;
 800866e:	e0b4      	b.n	80087da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008670:	4b5d      	ldr	r3, [pc, #372]	; (80087e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008678:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800867a:	4b5b      	ldr	r3, [pc, #364]	; (80087e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008682:	2b00      	cmp	r3, #0
 8008684:	d04d      	beq.n	8008722 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008686:	4b58      	ldr	r3, [pc, #352]	; (80087e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	099b      	lsrs	r3, r3, #6
 800868c:	461a      	mov	r2, r3
 800868e:	f04f 0300 	mov.w	r3, #0
 8008692:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008696:	f04f 0100 	mov.w	r1, #0
 800869a:	ea02 0800 	and.w	r8, r2, r0
 800869e:	ea03 0901 	and.w	r9, r3, r1
 80086a2:	4640      	mov	r0, r8
 80086a4:	4649      	mov	r1, r9
 80086a6:	f04f 0200 	mov.w	r2, #0
 80086aa:	f04f 0300 	mov.w	r3, #0
 80086ae:	014b      	lsls	r3, r1, #5
 80086b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80086b4:	0142      	lsls	r2, r0, #5
 80086b6:	4610      	mov	r0, r2
 80086b8:	4619      	mov	r1, r3
 80086ba:	ebb0 0008 	subs.w	r0, r0, r8
 80086be:	eb61 0109 	sbc.w	r1, r1, r9
 80086c2:	f04f 0200 	mov.w	r2, #0
 80086c6:	f04f 0300 	mov.w	r3, #0
 80086ca:	018b      	lsls	r3, r1, #6
 80086cc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80086d0:	0182      	lsls	r2, r0, #6
 80086d2:	1a12      	subs	r2, r2, r0
 80086d4:	eb63 0301 	sbc.w	r3, r3, r1
 80086d8:	f04f 0000 	mov.w	r0, #0
 80086dc:	f04f 0100 	mov.w	r1, #0
 80086e0:	00d9      	lsls	r1, r3, #3
 80086e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80086e6:	00d0      	lsls	r0, r2, #3
 80086e8:	4602      	mov	r2, r0
 80086ea:	460b      	mov	r3, r1
 80086ec:	eb12 0208 	adds.w	r2, r2, r8
 80086f0:	eb43 0309 	adc.w	r3, r3, r9
 80086f4:	f04f 0000 	mov.w	r0, #0
 80086f8:	f04f 0100 	mov.w	r1, #0
 80086fc:	0259      	lsls	r1, r3, #9
 80086fe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8008702:	0250      	lsls	r0, r2, #9
 8008704:	4602      	mov	r2, r0
 8008706:	460b      	mov	r3, r1
 8008708:	4610      	mov	r0, r2
 800870a:	4619      	mov	r1, r3
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	461a      	mov	r2, r3
 8008710:	f04f 0300 	mov.w	r3, #0
 8008714:	f7f7 ffc0 	bl	8000698 <__aeabi_uldivmod>
 8008718:	4602      	mov	r2, r0
 800871a:	460b      	mov	r3, r1
 800871c:	4613      	mov	r3, r2
 800871e:	60fb      	str	r3, [r7, #12]
 8008720:	e04a      	b.n	80087b8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008722:	4b31      	ldr	r3, [pc, #196]	; (80087e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	099b      	lsrs	r3, r3, #6
 8008728:	461a      	mov	r2, r3
 800872a:	f04f 0300 	mov.w	r3, #0
 800872e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008732:	f04f 0100 	mov.w	r1, #0
 8008736:	ea02 0400 	and.w	r4, r2, r0
 800873a:	ea03 0501 	and.w	r5, r3, r1
 800873e:	4620      	mov	r0, r4
 8008740:	4629      	mov	r1, r5
 8008742:	f04f 0200 	mov.w	r2, #0
 8008746:	f04f 0300 	mov.w	r3, #0
 800874a:	014b      	lsls	r3, r1, #5
 800874c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008750:	0142      	lsls	r2, r0, #5
 8008752:	4610      	mov	r0, r2
 8008754:	4619      	mov	r1, r3
 8008756:	1b00      	subs	r0, r0, r4
 8008758:	eb61 0105 	sbc.w	r1, r1, r5
 800875c:	f04f 0200 	mov.w	r2, #0
 8008760:	f04f 0300 	mov.w	r3, #0
 8008764:	018b      	lsls	r3, r1, #6
 8008766:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800876a:	0182      	lsls	r2, r0, #6
 800876c:	1a12      	subs	r2, r2, r0
 800876e:	eb63 0301 	sbc.w	r3, r3, r1
 8008772:	f04f 0000 	mov.w	r0, #0
 8008776:	f04f 0100 	mov.w	r1, #0
 800877a:	00d9      	lsls	r1, r3, #3
 800877c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008780:	00d0      	lsls	r0, r2, #3
 8008782:	4602      	mov	r2, r0
 8008784:	460b      	mov	r3, r1
 8008786:	1912      	adds	r2, r2, r4
 8008788:	eb45 0303 	adc.w	r3, r5, r3
 800878c:	f04f 0000 	mov.w	r0, #0
 8008790:	f04f 0100 	mov.w	r1, #0
 8008794:	0299      	lsls	r1, r3, #10
 8008796:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800879a:	0290      	lsls	r0, r2, #10
 800879c:	4602      	mov	r2, r0
 800879e:	460b      	mov	r3, r1
 80087a0:	4610      	mov	r0, r2
 80087a2:	4619      	mov	r1, r3
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	461a      	mov	r2, r3
 80087a8:	f04f 0300 	mov.w	r3, #0
 80087ac:	f7f7 ff74 	bl	8000698 <__aeabi_uldivmod>
 80087b0:	4602      	mov	r2, r0
 80087b2:	460b      	mov	r3, r1
 80087b4:	4613      	mov	r3, r2
 80087b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80087b8:	4b0b      	ldr	r3, [pc, #44]	; (80087e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	0c1b      	lsrs	r3, r3, #16
 80087be:	f003 0303 	and.w	r3, r3, #3
 80087c2:	3301      	adds	r3, #1
 80087c4:	005b      	lsls	r3, r3, #1
 80087c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80087c8:	68fa      	ldr	r2, [r7, #12]
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80087d0:	60bb      	str	r3, [r7, #8]
      break;
 80087d2:	e002      	b.n	80087da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80087d4:	4b05      	ldr	r3, [pc, #20]	; (80087ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 80087d6:	60bb      	str	r3, [r7, #8]
      break;
 80087d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80087da:	68bb      	ldr	r3, [r7, #8]
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3710      	adds	r7, #16
 80087e0:	46bd      	mov	sp, r7
 80087e2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80087e6:	bf00      	nop
 80087e8:	40023800 	.word	0x40023800
 80087ec:	00f42400 	.word	0x00f42400
 80087f0:	007a1200 	.word	0x007a1200

080087f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80087f4:	b480      	push	{r7}
 80087f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80087f8:	4b03      	ldr	r3, [pc, #12]	; (8008808 <HAL_RCC_GetHCLKFreq+0x14>)
 80087fa:	681b      	ldr	r3, [r3, #0]
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr
 8008806:	bf00      	nop
 8008808:	2000002c 	.word	0x2000002c

0800880c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008810:	f7ff fff0 	bl	80087f4 <HAL_RCC_GetHCLKFreq>
 8008814:	4602      	mov	r2, r0
 8008816:	4b05      	ldr	r3, [pc, #20]	; (800882c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	0a9b      	lsrs	r3, r3, #10
 800881c:	f003 0307 	and.w	r3, r3, #7
 8008820:	4903      	ldr	r1, [pc, #12]	; (8008830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008822:	5ccb      	ldrb	r3, [r1, r3]
 8008824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008828:	4618      	mov	r0, r3
 800882a:	bd80      	pop	{r7, pc}
 800882c:	40023800 	.word	0x40023800
 8008830:	08012550 	.word	0x08012550

08008834 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b086      	sub	sp, #24
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800883c:	2300      	movs	r3, #0
 800883e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008840:	2300      	movs	r3, #0
 8008842:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f003 0301 	and.w	r3, r3, #1
 800884c:	2b00      	cmp	r3, #0
 800884e:	d105      	bne.n	800885c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008858:	2b00      	cmp	r3, #0
 800885a:	d038      	beq.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800885c:	4b68      	ldr	r3, [pc, #416]	; (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800885e:	2200      	movs	r2, #0
 8008860:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008862:	f7fb fef5 	bl	8004650 <HAL_GetTick>
 8008866:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008868:	e008      	b.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800886a:	f7fb fef1 	bl	8004650 <HAL_GetTick>
 800886e:	4602      	mov	r2, r0
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	1ad3      	subs	r3, r2, r3
 8008874:	2b02      	cmp	r3, #2
 8008876:	d901      	bls.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008878:	2303      	movs	r3, #3
 800887a:	e0bd      	b.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800887c:	4b61      	ldr	r3, [pc, #388]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008884:	2b00      	cmp	r3, #0
 8008886:	d1f0      	bne.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	685a      	ldr	r2, [r3, #4]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	019b      	lsls	r3, r3, #6
 8008892:	431a      	orrs	r2, r3
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	071b      	lsls	r3, r3, #28
 800889a:	495a      	ldr	r1, [pc, #360]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800889c:	4313      	orrs	r3, r2
 800889e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80088a2:	4b57      	ldr	r3, [pc, #348]	; (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80088a4:	2201      	movs	r2, #1
 80088a6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80088a8:	f7fb fed2 	bl	8004650 <HAL_GetTick>
 80088ac:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80088ae:	e008      	b.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80088b0:	f7fb fece 	bl	8004650 <HAL_GetTick>
 80088b4:	4602      	mov	r2, r0
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	1ad3      	subs	r3, r2, r3
 80088ba:	2b02      	cmp	r3, #2
 80088bc:	d901      	bls.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80088be:	2303      	movs	r3, #3
 80088c0:	e09a      	b.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80088c2:	4b50      	ldr	r3, [pc, #320]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d0f0      	beq.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f003 0302 	and.w	r3, r3, #2
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	f000 8083 	beq.w	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80088dc:	2300      	movs	r3, #0
 80088de:	60fb      	str	r3, [r7, #12]
 80088e0:	4b48      	ldr	r3, [pc, #288]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80088e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e4:	4a47      	ldr	r2, [pc, #284]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80088e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088ea:	6413      	str	r3, [r2, #64]	; 0x40
 80088ec:	4b45      	ldr	r3, [pc, #276]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80088ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088f4:	60fb      	str	r3, [r7, #12]
 80088f6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80088f8:	4b43      	ldr	r3, [pc, #268]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a42      	ldr	r2, [pc, #264]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80088fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008902:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008904:	f7fb fea4 	bl	8004650 <HAL_GetTick>
 8008908:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800890a:	e008      	b.n	800891e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800890c:	f7fb fea0 	bl	8004650 <HAL_GetTick>
 8008910:	4602      	mov	r2, r0
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	1ad3      	subs	r3, r2, r3
 8008916:	2b02      	cmp	r3, #2
 8008918:	d901      	bls.n	800891e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800891a:	2303      	movs	r3, #3
 800891c:	e06c      	b.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800891e:	4b3a      	ldr	r3, [pc, #232]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008926:	2b00      	cmp	r3, #0
 8008928:	d0f0      	beq.n	800890c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800892a:	4b36      	ldr	r3, [pc, #216]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800892c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800892e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008932:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d02f      	beq.n	800899a <HAL_RCCEx_PeriphCLKConfig+0x166>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	691b      	ldr	r3, [r3, #16]
 800893e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008942:	693a      	ldr	r2, [r7, #16]
 8008944:	429a      	cmp	r2, r3
 8008946:	d028      	beq.n	800899a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008948:	4b2e      	ldr	r3, [pc, #184]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800894a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800894c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008950:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008952:	4b2e      	ldr	r3, [pc, #184]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008954:	2201      	movs	r2, #1
 8008956:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008958:	4b2c      	ldr	r3, [pc, #176]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800895a:	2200      	movs	r2, #0
 800895c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800895e:	4a29      	ldr	r2, [pc, #164]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008964:	4b27      	ldr	r3, [pc, #156]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008968:	f003 0301 	and.w	r3, r3, #1
 800896c:	2b01      	cmp	r3, #1
 800896e:	d114      	bne.n	800899a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008970:	f7fb fe6e 	bl	8004650 <HAL_GetTick>
 8008974:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008976:	e00a      	b.n	800898e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008978:	f7fb fe6a 	bl	8004650 <HAL_GetTick>
 800897c:	4602      	mov	r2, r0
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	1ad3      	subs	r3, r2, r3
 8008982:	f241 3288 	movw	r2, #5000	; 0x1388
 8008986:	4293      	cmp	r3, r2
 8008988:	d901      	bls.n	800898e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800898a:	2303      	movs	r3, #3
 800898c:	e034      	b.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800898e:	4b1d      	ldr	r3, [pc, #116]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008992:	f003 0302 	and.w	r3, r3, #2
 8008996:	2b00      	cmp	r3, #0
 8008998:	d0ee      	beq.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	691b      	ldr	r3, [r3, #16]
 800899e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089a6:	d10d      	bne.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80089a8:	4b16      	ldr	r3, [pc, #88]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	691b      	ldr	r3, [r3, #16]
 80089b4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80089b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089bc:	4911      	ldr	r1, [pc, #68]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80089be:	4313      	orrs	r3, r2
 80089c0:	608b      	str	r3, [r1, #8]
 80089c2:	e005      	b.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80089c4:	4b0f      	ldr	r3, [pc, #60]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	4a0e      	ldr	r2, [pc, #56]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80089ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80089ce:	6093      	str	r3, [r2, #8]
 80089d0:	4b0c      	ldr	r3, [pc, #48]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80089d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	691b      	ldr	r3, [r3, #16]
 80089d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089dc:	4909      	ldr	r1, [pc, #36]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80089de:	4313      	orrs	r3, r2
 80089e0:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f003 0308 	and.w	r3, r3, #8
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d003      	beq.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	7d1a      	ldrb	r2, [r3, #20]
 80089f2:	4b07      	ldr	r3, [pc, #28]	; (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80089f4:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80089f6:	2300      	movs	r3, #0
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3718      	adds	r7, #24
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	42470068 	.word	0x42470068
 8008a04:	40023800 	.word	0x40023800
 8008a08:	40007000 	.word	0x40007000
 8008a0c:	42470e40 	.word	0x42470e40
 8008a10:	424711e0 	.word	0x424711e0

08008a14 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b087      	sub	sp, #28
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8008a20:	2300      	movs	r3, #0
 8008a22:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8008a24:	2300      	movs	r3, #0
 8008a26:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d140      	bne.n	8008ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8008a32:	4b24      	ldr	r3, [pc, #144]	; (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008a34:	689b      	ldr	r3, [r3, #8]
 8008a36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a3a:	60fb      	str	r3, [r7, #12]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d005      	beq.n	8008a4e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d131      	bne.n	8008aac <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8008a48:	4b1f      	ldr	r3, [pc, #124]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008a4a:	617b      	str	r3, [r7, #20]
          break;
 8008a4c:	e031      	b.n	8008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008a4e:	4b1d      	ldr	r3, [pc, #116]	; (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a5a:	d109      	bne.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008a5c:	4b19      	ldr	r3, [pc, #100]	; (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008a5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a66:	4a19      	ldr	r2, [pc, #100]	; (8008acc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8008a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a6c:	613b      	str	r3, [r7, #16]
 8008a6e:	e008      	b.n	8008a82 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008a70:	4b14      	ldr	r3, [pc, #80]	; (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008a72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a7a:	4a15      	ldr	r2, [pc, #84]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8008a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a80:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8008a82:	4b10      	ldr	r3, [pc, #64]	; (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a88:	099b      	lsrs	r3, r3, #6
 8008a8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	fb02 f303 	mul.w	r3, r2, r3
 8008a94:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8008a96:	4b0b      	ldr	r3, [pc, #44]	; (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a9c:	0f1b      	lsrs	r3, r3, #28
 8008a9e:	f003 0307 	and.w	r3, r3, #7
 8008aa2:	68ba      	ldr	r2, [r7, #8]
 8008aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aa8:	617b      	str	r3, [r7, #20]
          break;
 8008aaa:	e002      	b.n	8008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8008aac:	2300      	movs	r3, #0
 8008aae:	617b      	str	r3, [r7, #20]
          break;
 8008ab0:	bf00      	nop
        }
      }
      break;
 8008ab2:	bf00      	nop
    }
  }
  return frequency;
 8008ab4:	697b      	ldr	r3, [r7, #20]
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	371c      	adds	r7, #28
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr
 8008ac2:	bf00      	nop
 8008ac4:	40023800 	.word	0x40023800
 8008ac8:	00bb8000 	.word	0x00bb8000
 8008acc:	007a1200 	.word	0x007a1200
 8008ad0:	00f42400 	.word	0x00f42400

08008ad4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b082      	sub	sp, #8
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d101      	bne.n	8008ae6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	e07b      	b.n	8008bde <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d108      	bne.n	8008b00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008af6:	d009      	beq.n	8008b0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	61da      	str	r2, [r3, #28]
 8008afe:	e005      	b.n	8008b0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2200      	movs	r2, #0
 8008b04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d106      	bne.n	8008b2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2200      	movs	r2, #0
 8008b22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f7fb fb9a 	bl	8004260 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2202      	movs	r2, #2
 8008b30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b42:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008b54:	431a      	orrs	r2, r3
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	68db      	ldr	r3, [r3, #12]
 8008b5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b5e:	431a      	orrs	r2, r3
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	691b      	ldr	r3, [r3, #16]
 8008b64:	f003 0302 	and.w	r3, r3, #2
 8008b68:	431a      	orrs	r2, r3
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	695b      	ldr	r3, [r3, #20]
 8008b6e:	f003 0301 	and.w	r3, r3, #1
 8008b72:	431a      	orrs	r2, r3
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	699b      	ldr	r3, [r3, #24]
 8008b78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b7c:	431a      	orrs	r2, r3
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	69db      	ldr	r3, [r3, #28]
 8008b82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b86:	431a      	orrs	r2, r3
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6a1b      	ldr	r3, [r3, #32]
 8008b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b90:	ea42 0103 	orr.w	r1, r2, r3
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b98:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	430a      	orrs	r2, r1
 8008ba2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	699b      	ldr	r3, [r3, #24]
 8008ba8:	0c1b      	lsrs	r3, r3, #16
 8008baa:	f003 0104 	and.w	r1, r3, #4
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb2:	f003 0210 	and.w	r2, r3, #16
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	430a      	orrs	r2, r1
 8008bbc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	69da      	ldr	r2, [r3, #28]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008bcc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008bdc:	2300      	movs	r3, #0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3708      	adds	r7, #8
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b088      	sub	sp, #32
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	60f8      	str	r0, [r7, #12]
 8008bee:	60b9      	str	r1, [r7, #8]
 8008bf0:	603b      	str	r3, [r7, #0]
 8008bf2:	4613      	mov	r3, r2
 8008bf4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d101      	bne.n	8008c08 <HAL_SPI_Transmit+0x22>
 8008c04:	2302      	movs	r3, #2
 8008c06:	e126      	b.n	8008e56 <HAL_SPI_Transmit+0x270>
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c10:	f7fb fd1e 	bl	8004650 <HAL_GetTick>
 8008c14:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008c16:	88fb      	ldrh	r3, [r7, #6]
 8008c18:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d002      	beq.n	8008c2c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008c26:	2302      	movs	r3, #2
 8008c28:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008c2a:	e10b      	b.n	8008e44 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d002      	beq.n	8008c38 <HAL_SPI_Transmit+0x52>
 8008c32:	88fb      	ldrh	r3, [r7, #6]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d102      	bne.n	8008c3e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008c3c:	e102      	b.n	8008e44 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2203      	movs	r2, #3
 8008c42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	68ba      	ldr	r2, [r7, #8]
 8008c50:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	88fa      	ldrh	r2, [r7, #6]
 8008c56:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	88fa      	ldrh	r2, [r7, #6]
 8008c5c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2200      	movs	r2, #0
 8008c62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2200      	movs	r2, #0
 8008c68:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2200      	movs	r2, #0
 8008c74:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c84:	d10f      	bne.n	8008ca6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	681a      	ldr	r2, [r3, #0]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008ca4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cb0:	2b40      	cmp	r3, #64	; 0x40
 8008cb2:	d007      	beq.n	8008cc4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cc2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	68db      	ldr	r3, [r3, #12]
 8008cc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ccc:	d14b      	bne.n	8008d66 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d002      	beq.n	8008cdc <HAL_SPI_Transmit+0xf6>
 8008cd6:	8afb      	ldrh	r3, [r7, #22]
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d13e      	bne.n	8008d5a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ce0:	881a      	ldrh	r2, [r3, #0]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cec:	1c9a      	adds	r2, r3, #2
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	3b01      	subs	r3, #1
 8008cfa:	b29a      	uxth	r2, r3
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008d00:	e02b      	b.n	8008d5a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	f003 0302 	and.w	r3, r3, #2
 8008d0c:	2b02      	cmp	r3, #2
 8008d0e:	d112      	bne.n	8008d36 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d14:	881a      	ldrh	r2, [r3, #0]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d20:	1c9a      	adds	r2, r3, #2
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	3b01      	subs	r3, #1
 8008d2e:	b29a      	uxth	r2, r3
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	86da      	strh	r2, [r3, #54]	; 0x36
 8008d34:	e011      	b.n	8008d5a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d36:	f7fb fc8b 	bl	8004650 <HAL_GetTick>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	69bb      	ldr	r3, [r7, #24]
 8008d3e:	1ad3      	subs	r3, r2, r3
 8008d40:	683a      	ldr	r2, [r7, #0]
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d803      	bhi.n	8008d4e <HAL_SPI_Transmit+0x168>
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d4c:	d102      	bne.n	8008d54 <HAL_SPI_Transmit+0x16e>
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d102      	bne.n	8008d5a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008d54:	2303      	movs	r3, #3
 8008d56:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008d58:	e074      	b.n	8008e44 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d1ce      	bne.n	8008d02 <HAL_SPI_Transmit+0x11c>
 8008d64:	e04c      	b.n	8008e00 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d002      	beq.n	8008d74 <HAL_SPI_Transmit+0x18e>
 8008d6e:	8afb      	ldrh	r3, [r7, #22]
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d140      	bne.n	8008df6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	330c      	adds	r3, #12
 8008d7e:	7812      	ldrb	r2, [r2, #0]
 8008d80:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d86:	1c5a      	adds	r2, r3, #1
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	3b01      	subs	r3, #1
 8008d94:	b29a      	uxth	r2, r3
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008d9a:	e02c      	b.n	8008df6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	689b      	ldr	r3, [r3, #8]
 8008da2:	f003 0302 	and.w	r3, r3, #2
 8008da6:	2b02      	cmp	r3, #2
 8008da8:	d113      	bne.n	8008dd2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	330c      	adds	r3, #12
 8008db4:	7812      	ldrb	r2, [r2, #0]
 8008db6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dbc:	1c5a      	adds	r2, r3, #1
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	3b01      	subs	r3, #1
 8008dca:	b29a      	uxth	r2, r3
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	86da      	strh	r2, [r3, #54]	; 0x36
 8008dd0:	e011      	b.n	8008df6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008dd2:	f7fb fc3d 	bl	8004650 <HAL_GetTick>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	69bb      	ldr	r3, [r7, #24]
 8008dda:	1ad3      	subs	r3, r2, r3
 8008ddc:	683a      	ldr	r2, [r7, #0]
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d803      	bhi.n	8008dea <HAL_SPI_Transmit+0x204>
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008de8:	d102      	bne.n	8008df0 <HAL_SPI_Transmit+0x20a>
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d102      	bne.n	8008df6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008df0:	2303      	movs	r3, #3
 8008df2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008df4:	e026      	b.n	8008e44 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d1cd      	bne.n	8008d9c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008e00:	69ba      	ldr	r2, [r7, #24]
 8008e02:	6839      	ldr	r1, [r7, #0]
 8008e04:	68f8      	ldr	r0, [r7, #12]
 8008e06:	f000 fa55 	bl	80092b4 <SPI_EndRxTxTransaction>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d002      	beq.n	8008e16 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2220      	movs	r2, #32
 8008e14:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d10a      	bne.n	8008e34 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008e1e:	2300      	movs	r3, #0
 8008e20:	613b      	str	r3, [r7, #16]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	68db      	ldr	r3, [r3, #12]
 8008e28:	613b      	str	r3, [r7, #16]
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	613b      	str	r3, [r7, #16]
 8008e32:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d002      	beq.n	8008e42 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	77fb      	strb	r3, [r7, #31]
 8008e40:	e000      	b.n	8008e44 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008e42:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2201      	movs	r2, #1
 8008e48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008e54:	7ffb      	ldrb	r3, [r7, #31]
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3720      	adds	r7, #32
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}

08008e5e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008e5e:	b580      	push	{r7, lr}
 8008e60:	b08c      	sub	sp, #48	; 0x30
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	60f8      	str	r0, [r7, #12]
 8008e66:	60b9      	str	r1, [r7, #8]
 8008e68:	607a      	str	r2, [r7, #4]
 8008e6a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008e70:	2300      	movs	r3, #0
 8008e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d101      	bne.n	8008e84 <HAL_SPI_TransmitReceive+0x26>
 8008e80:	2302      	movs	r3, #2
 8008e82:	e18a      	b.n	800919a <HAL_SPI_TransmitReceive+0x33c>
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2201      	movs	r2, #1
 8008e88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008e8c:	f7fb fbe0 	bl	8004650 <HAL_GetTick>
 8008e90:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008e98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008ea2:	887b      	ldrh	r3, [r7, #2]
 8008ea4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008ea6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d00f      	beq.n	8008ece <HAL_SPI_TransmitReceive+0x70>
 8008eae:	69fb      	ldr	r3, [r7, #28]
 8008eb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008eb4:	d107      	bne.n	8008ec6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	689b      	ldr	r3, [r3, #8]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d103      	bne.n	8008ec6 <HAL_SPI_TransmitReceive+0x68>
 8008ebe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ec2:	2b04      	cmp	r3, #4
 8008ec4:	d003      	beq.n	8008ece <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008ec6:	2302      	movs	r3, #2
 8008ec8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008ecc:	e15b      	b.n	8009186 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d005      	beq.n	8008ee0 <HAL_SPI_TransmitReceive+0x82>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d002      	beq.n	8008ee0 <HAL_SPI_TransmitReceive+0x82>
 8008eda:	887b      	ldrh	r3, [r7, #2]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d103      	bne.n	8008ee8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008ee6:	e14e      	b.n	8009186 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	2b04      	cmp	r3, #4
 8008ef2:	d003      	beq.n	8008efc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2205      	movs	r2, #5
 8008ef8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2200      	movs	r2, #0
 8008f00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	887a      	ldrh	r2, [r7, #2]
 8008f0c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	887a      	ldrh	r2, [r7, #2]
 8008f12:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	68ba      	ldr	r2, [r7, #8]
 8008f18:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	887a      	ldrh	r2, [r7, #2]
 8008f1e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	887a      	ldrh	r2, [r7, #2]
 8008f24:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f3c:	2b40      	cmp	r3, #64	; 0x40
 8008f3e:	d007      	beq.n	8008f50 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	68db      	ldr	r3, [r3, #12]
 8008f54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f58:	d178      	bne.n	800904c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d002      	beq.n	8008f68 <HAL_SPI_TransmitReceive+0x10a>
 8008f62:	8b7b      	ldrh	r3, [r7, #26]
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d166      	bne.n	8009036 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f6c:	881a      	ldrh	r2, [r3, #0]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f78:	1c9a      	adds	r2, r3, #2
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	3b01      	subs	r3, #1
 8008f86:	b29a      	uxth	r2, r3
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f8c:	e053      	b.n	8009036 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	689b      	ldr	r3, [r3, #8]
 8008f94:	f003 0302 	and.w	r3, r3, #2
 8008f98:	2b02      	cmp	r3, #2
 8008f9a:	d11b      	bne.n	8008fd4 <HAL_SPI_TransmitReceive+0x176>
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d016      	beq.n	8008fd4 <HAL_SPI_TransmitReceive+0x176>
 8008fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d113      	bne.n	8008fd4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fb0:	881a      	ldrh	r2, [r3, #0]
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fbc:	1c9a      	adds	r2, r3, #2
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	3b01      	subs	r3, #1
 8008fca:	b29a      	uxth	r2, r3
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	f003 0301 	and.w	r3, r3, #1
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d119      	bne.n	8009016 <HAL_SPI_TransmitReceive+0x1b8>
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d014      	beq.n	8009016 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	68da      	ldr	r2, [r3, #12]
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ff6:	b292      	uxth	r2, r2
 8008ff8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ffe:	1c9a      	adds	r2, r3, #2
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009008:	b29b      	uxth	r3, r3
 800900a:	3b01      	subs	r3, #1
 800900c:	b29a      	uxth	r2, r3
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009012:	2301      	movs	r3, #1
 8009014:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009016:	f7fb fb1b 	bl	8004650 <HAL_GetTick>
 800901a:	4602      	mov	r2, r0
 800901c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901e:	1ad3      	subs	r3, r2, r3
 8009020:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009022:	429a      	cmp	r2, r3
 8009024:	d807      	bhi.n	8009036 <HAL_SPI_TransmitReceive+0x1d8>
 8009026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800902c:	d003      	beq.n	8009036 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800902e:	2303      	movs	r3, #3
 8009030:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009034:	e0a7      	b.n	8009186 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800903a:	b29b      	uxth	r3, r3
 800903c:	2b00      	cmp	r3, #0
 800903e:	d1a6      	bne.n	8008f8e <HAL_SPI_TransmitReceive+0x130>
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009044:	b29b      	uxth	r3, r3
 8009046:	2b00      	cmp	r3, #0
 8009048:	d1a1      	bne.n	8008f8e <HAL_SPI_TransmitReceive+0x130>
 800904a:	e07c      	b.n	8009146 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d002      	beq.n	800905a <HAL_SPI_TransmitReceive+0x1fc>
 8009054:	8b7b      	ldrh	r3, [r7, #26]
 8009056:	2b01      	cmp	r3, #1
 8009058:	d16b      	bne.n	8009132 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	330c      	adds	r3, #12
 8009064:	7812      	ldrb	r2, [r2, #0]
 8009066:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800906c:	1c5a      	adds	r2, r3, #1
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009076:	b29b      	uxth	r3, r3
 8009078:	3b01      	subs	r3, #1
 800907a:	b29a      	uxth	r2, r3
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009080:	e057      	b.n	8009132 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	f003 0302 	and.w	r3, r3, #2
 800908c:	2b02      	cmp	r3, #2
 800908e:	d11c      	bne.n	80090ca <HAL_SPI_TransmitReceive+0x26c>
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009094:	b29b      	uxth	r3, r3
 8009096:	2b00      	cmp	r3, #0
 8009098:	d017      	beq.n	80090ca <HAL_SPI_TransmitReceive+0x26c>
 800909a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800909c:	2b01      	cmp	r3, #1
 800909e:	d114      	bne.n	80090ca <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	330c      	adds	r3, #12
 80090aa:	7812      	ldrb	r2, [r2, #0]
 80090ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090b2:	1c5a      	adds	r2, r3, #1
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090bc:	b29b      	uxth	r3, r3
 80090be:	3b01      	subs	r3, #1
 80090c0:	b29a      	uxth	r2, r3
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80090c6:	2300      	movs	r3, #0
 80090c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	f003 0301 	and.w	r3, r3, #1
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	d119      	bne.n	800910c <HAL_SPI_TransmitReceive+0x2ae>
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090dc:	b29b      	uxth	r3, r3
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d014      	beq.n	800910c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	68da      	ldr	r2, [r3, #12]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ec:	b2d2      	uxtb	r2, r2
 80090ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f4:	1c5a      	adds	r2, r3, #1
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090fe:	b29b      	uxth	r3, r3
 8009100:	3b01      	subs	r3, #1
 8009102:	b29a      	uxth	r2, r3
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009108:	2301      	movs	r3, #1
 800910a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800910c:	f7fb faa0 	bl	8004650 <HAL_GetTick>
 8009110:	4602      	mov	r2, r0
 8009112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009114:	1ad3      	subs	r3, r2, r3
 8009116:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009118:	429a      	cmp	r2, r3
 800911a:	d803      	bhi.n	8009124 <HAL_SPI_TransmitReceive+0x2c6>
 800911c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800911e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009122:	d102      	bne.n	800912a <HAL_SPI_TransmitReceive+0x2cc>
 8009124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009126:	2b00      	cmp	r3, #0
 8009128:	d103      	bne.n	8009132 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800912a:	2303      	movs	r3, #3
 800912c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009130:	e029      	b.n	8009186 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009136:	b29b      	uxth	r3, r3
 8009138:	2b00      	cmp	r3, #0
 800913a:	d1a2      	bne.n	8009082 <HAL_SPI_TransmitReceive+0x224>
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009140:	b29b      	uxth	r3, r3
 8009142:	2b00      	cmp	r3, #0
 8009144:	d19d      	bne.n	8009082 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009148:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800914a:	68f8      	ldr	r0, [r7, #12]
 800914c:	f000 f8b2 	bl	80092b4 <SPI_EndRxTxTransaction>
 8009150:	4603      	mov	r3, r0
 8009152:	2b00      	cmp	r3, #0
 8009154:	d006      	beq.n	8009164 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009156:	2301      	movs	r3, #1
 8009158:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2220      	movs	r2, #32
 8009160:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009162:	e010      	b.n	8009186 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	689b      	ldr	r3, [r3, #8]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d10b      	bne.n	8009184 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800916c:	2300      	movs	r3, #0
 800916e:	617b      	str	r3, [r7, #20]
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	68db      	ldr	r3, [r3, #12]
 8009176:	617b      	str	r3, [r7, #20]
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	689b      	ldr	r3, [r3, #8]
 800917e:	617b      	str	r3, [r7, #20]
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	e000      	b.n	8009186 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009184:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2201      	movs	r2, #1
 800918a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2200      	movs	r2, #0
 8009192:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009196:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800919a:	4618      	mov	r0, r3
 800919c:	3730      	adds	r7, #48	; 0x30
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
	...

080091a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b088      	sub	sp, #32
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	603b      	str	r3, [r7, #0]
 80091b0:	4613      	mov	r3, r2
 80091b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80091b4:	f7fb fa4c 	bl	8004650 <HAL_GetTick>
 80091b8:	4602      	mov	r2, r0
 80091ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091bc:	1a9b      	subs	r3, r3, r2
 80091be:	683a      	ldr	r2, [r7, #0]
 80091c0:	4413      	add	r3, r2
 80091c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80091c4:	f7fb fa44 	bl	8004650 <HAL_GetTick>
 80091c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80091ca:	4b39      	ldr	r3, [pc, #228]	; (80092b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	015b      	lsls	r3, r3, #5
 80091d0:	0d1b      	lsrs	r3, r3, #20
 80091d2:	69fa      	ldr	r2, [r7, #28]
 80091d4:	fb02 f303 	mul.w	r3, r2, r3
 80091d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80091da:	e054      	b.n	8009286 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091e2:	d050      	beq.n	8009286 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80091e4:	f7fb fa34 	bl	8004650 <HAL_GetTick>
 80091e8:	4602      	mov	r2, r0
 80091ea:	69bb      	ldr	r3, [r7, #24]
 80091ec:	1ad3      	subs	r3, r2, r3
 80091ee:	69fa      	ldr	r2, [r7, #28]
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d902      	bls.n	80091fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80091f4:	69fb      	ldr	r3, [r7, #28]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d13d      	bne.n	8009276 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	685a      	ldr	r2, [r3, #4]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009208:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009212:	d111      	bne.n	8009238 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800921c:	d004      	beq.n	8009228 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	689b      	ldr	r3, [r3, #8]
 8009222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009226:	d107      	bne.n	8009238 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009236:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800923c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009240:	d10f      	bne.n	8009262 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009250:	601a      	str	r2, [r3, #0]
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009260:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2201      	movs	r2, #1
 8009266:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2200      	movs	r2, #0
 800926e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009272:	2303      	movs	r3, #3
 8009274:	e017      	b.n	80092a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d101      	bne.n	8009280 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800927c:	2300      	movs	r3, #0
 800927e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	3b01      	subs	r3, #1
 8009284:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	689a      	ldr	r2, [r3, #8]
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	4013      	ands	r3, r2
 8009290:	68ba      	ldr	r2, [r7, #8]
 8009292:	429a      	cmp	r2, r3
 8009294:	bf0c      	ite	eq
 8009296:	2301      	moveq	r3, #1
 8009298:	2300      	movne	r3, #0
 800929a:	b2db      	uxtb	r3, r3
 800929c:	461a      	mov	r2, r3
 800929e:	79fb      	ldrb	r3, [r7, #7]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d19b      	bne.n	80091dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80092a4:	2300      	movs	r3, #0
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3720      	adds	r7, #32
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop
 80092b0:	2000002c 	.word	0x2000002c

080092b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b088      	sub	sp, #32
 80092b8:	af02      	add	r7, sp, #8
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	60b9      	str	r1, [r7, #8]
 80092be:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80092c0:	4b1b      	ldr	r3, [pc, #108]	; (8009330 <SPI_EndRxTxTransaction+0x7c>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a1b      	ldr	r2, [pc, #108]	; (8009334 <SPI_EndRxTxTransaction+0x80>)
 80092c6:	fba2 2303 	umull	r2, r3, r2, r3
 80092ca:	0d5b      	lsrs	r3, r3, #21
 80092cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80092d0:	fb02 f303 	mul.w	r3, r2, r3
 80092d4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80092de:	d112      	bne.n	8009306 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	9300      	str	r3, [sp, #0]
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	2200      	movs	r2, #0
 80092e8:	2180      	movs	r1, #128	; 0x80
 80092ea:	68f8      	ldr	r0, [r7, #12]
 80092ec:	f7ff ff5a 	bl	80091a4 <SPI_WaitFlagStateUntilTimeout>
 80092f0:	4603      	mov	r3, r0
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d016      	beq.n	8009324 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092fa:	f043 0220 	orr.w	r2, r3, #32
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009302:	2303      	movs	r3, #3
 8009304:	e00f      	b.n	8009326 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00a      	beq.n	8009322 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	3b01      	subs	r3, #1
 8009310:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	689b      	ldr	r3, [r3, #8]
 8009318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800931c:	2b80      	cmp	r3, #128	; 0x80
 800931e:	d0f2      	beq.n	8009306 <SPI_EndRxTxTransaction+0x52>
 8009320:	e000      	b.n	8009324 <SPI_EndRxTxTransaction+0x70>
        break;
 8009322:	bf00      	nop
  }

  return HAL_OK;
 8009324:	2300      	movs	r3, #0
}
 8009326:	4618      	mov	r0, r3
 8009328:	3718      	adds	r7, #24
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	2000002c 	.word	0x2000002c
 8009334:	165e9f81 	.word	0x165e9f81

08009338 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009338:	b084      	sub	sp, #16
 800933a:	b580      	push	{r7, lr}
 800933c:	b084      	sub	sp, #16
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
 8009342:	f107 001c 	add.w	r0, r7, #28
 8009346:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800934a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800934c:	2b01      	cmp	r3, #1
 800934e:	d122      	bne.n	8009396 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009354:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	68db      	ldr	r3, [r3, #12]
 8009360:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009364:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800937a:	2b01      	cmp	r3, #1
 800937c:	d105      	bne.n	800938a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	68db      	ldr	r3, [r3, #12]
 8009382:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 f94a 	bl	8009624 <USB_CoreReset>
 8009390:	4603      	mov	r3, r0
 8009392:	73fb      	strb	r3, [r7, #15]
 8009394:	e01a      	b.n	80093cc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	68db      	ldr	r3, [r3, #12]
 800939a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 f93e 	bl	8009624 <USB_CoreReset>
 80093a8:	4603      	mov	r3, r0
 80093aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80093ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d106      	bne.n	80093c0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	639a      	str	r2, [r3, #56]	; 0x38
 80093be:	e005      	b.n	80093cc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80093cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	d10b      	bne.n	80093ea <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	f043 0206 	orr.w	r2, r3, #6
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	689b      	ldr	r3, [r3, #8]
 80093e2:	f043 0220 	orr.w	r2, r3, #32
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80093ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3710      	adds	r7, #16
 80093f0:	46bd      	mov	sp, r7
 80093f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80093f6:	b004      	add	sp, #16
 80093f8:	4770      	bx	lr

080093fa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80093fa:	b480      	push	{r7}
 80093fc:	b083      	sub	sp, #12
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	689b      	ldr	r3, [r3, #8]
 8009406:	f043 0201 	orr.w	r2, r3, #1
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800940e:	2300      	movs	r3, #0
}
 8009410:	4618      	mov	r0, r3
 8009412:	370c      	adds	r7, #12
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr

0800941c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800941c:	b480      	push	{r7}
 800941e:	b083      	sub	sp, #12
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	f023 0201 	bic.w	r2, r3, #1
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009430:	2300      	movs	r3, #0
}
 8009432:	4618      	mov	r0, r3
 8009434:	370c      	adds	r7, #12
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr

0800943e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800943e:	b580      	push	{r7, lr}
 8009440:	b082      	sub	sp, #8
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
 8009446:	460b      	mov	r3, r1
 8009448:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009456:	78fb      	ldrb	r3, [r7, #3]
 8009458:	2b01      	cmp	r3, #1
 800945a:	d106      	bne.n	800946a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	60da      	str	r2, [r3, #12]
 8009468:	e00b      	b.n	8009482 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800946a:	78fb      	ldrb	r3, [r7, #3]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d106      	bne.n	800947e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	60da      	str	r2, [r3, #12]
 800947c:	e001      	b.n	8009482 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800947e:	2301      	movs	r3, #1
 8009480:	e003      	b.n	800948a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009482:	2032      	movs	r0, #50	; 0x32
 8009484:	f7fb f8f0 	bl	8004668 <HAL_Delay>

  return HAL_OK;
 8009488:	2300      	movs	r3, #0
}
 800948a:	4618      	mov	r0, r3
 800948c:	3708      	adds	r7, #8
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
	...

08009494 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009494:	b480      	push	{r7}
 8009496:	b085      	sub	sp, #20
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800949e:	2300      	movs	r3, #0
 80094a0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	019b      	lsls	r3, r3, #6
 80094a6:	f043 0220 	orr.w	r2, r3, #32
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	3301      	adds	r3, #1
 80094b2:	60fb      	str	r3, [r7, #12]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	4a09      	ldr	r2, [pc, #36]	; (80094dc <USB_FlushTxFifo+0x48>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d901      	bls.n	80094c0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80094bc:	2303      	movs	r3, #3
 80094be:	e006      	b.n	80094ce <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	691b      	ldr	r3, [r3, #16]
 80094c4:	f003 0320 	and.w	r3, r3, #32
 80094c8:	2b20      	cmp	r3, #32
 80094ca:	d0f0      	beq.n	80094ae <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80094cc:	2300      	movs	r3, #0
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3714      	adds	r7, #20
 80094d2:	46bd      	mov	sp, r7
 80094d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d8:	4770      	bx	lr
 80094da:	bf00      	nop
 80094dc:	00030d40 	.word	0x00030d40

080094e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b085      	sub	sp, #20
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80094e8:	2300      	movs	r3, #0
 80094ea:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2210      	movs	r2, #16
 80094f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	3301      	adds	r3, #1
 80094f6:	60fb      	str	r3, [r7, #12]
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	4a09      	ldr	r2, [pc, #36]	; (8009520 <USB_FlushRxFifo+0x40>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d901      	bls.n	8009504 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009500:	2303      	movs	r3, #3
 8009502:	e006      	b.n	8009512 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	691b      	ldr	r3, [r3, #16]
 8009508:	f003 0310 	and.w	r3, r3, #16
 800950c:	2b10      	cmp	r3, #16
 800950e:	d0f0      	beq.n	80094f2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009510:	2300      	movs	r3, #0
}
 8009512:	4618      	mov	r0, r3
 8009514:	3714      	adds	r7, #20
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr
 800951e:	bf00      	nop
 8009520:	00030d40 	.word	0x00030d40

08009524 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009524:	b480      	push	{r7}
 8009526:	b089      	sub	sp, #36	; 0x24
 8009528:	af00      	add	r7, sp, #0
 800952a:	60f8      	str	r0, [r7, #12]
 800952c:	60b9      	str	r1, [r7, #8]
 800952e:	4611      	mov	r1, r2
 8009530:	461a      	mov	r2, r3
 8009532:	460b      	mov	r3, r1
 8009534:	71fb      	strb	r3, [r7, #7]
 8009536:	4613      	mov	r3, r2
 8009538:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8009542:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009546:	2b00      	cmp	r3, #0
 8009548:	d11a      	bne.n	8009580 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800954a:	88bb      	ldrh	r3, [r7, #4]
 800954c:	3303      	adds	r3, #3
 800954e:	089b      	lsrs	r3, r3, #2
 8009550:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009552:	2300      	movs	r3, #0
 8009554:	61bb      	str	r3, [r7, #24]
 8009556:	e00f      	b.n	8009578 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009558:	79fb      	ldrb	r3, [r7, #7]
 800955a:	031a      	lsls	r2, r3, #12
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	4413      	add	r3, r2
 8009560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009564:	461a      	mov	r2, r3
 8009566:	69fb      	ldr	r3, [r7, #28]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800956c:	69fb      	ldr	r3, [r7, #28]
 800956e:	3304      	adds	r3, #4
 8009570:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009572:	69bb      	ldr	r3, [r7, #24]
 8009574:	3301      	adds	r3, #1
 8009576:	61bb      	str	r3, [r7, #24]
 8009578:	69ba      	ldr	r2, [r7, #24]
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	429a      	cmp	r2, r3
 800957e:	d3eb      	bcc.n	8009558 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009580:	2300      	movs	r3, #0
}
 8009582:	4618      	mov	r0, r3
 8009584:	3724      	adds	r7, #36	; 0x24
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr

0800958e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800958e:	b480      	push	{r7}
 8009590:	b089      	sub	sp, #36	; 0x24
 8009592:	af00      	add	r7, sp, #0
 8009594:	60f8      	str	r0, [r7, #12]
 8009596:	60b9      	str	r1, [r7, #8]
 8009598:	4613      	mov	r3, r2
 800959a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80095a4:	88fb      	ldrh	r3, [r7, #6]
 80095a6:	3303      	adds	r3, #3
 80095a8:	089b      	lsrs	r3, r3, #2
 80095aa:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80095ac:	2300      	movs	r3, #0
 80095ae:	61bb      	str	r3, [r7, #24]
 80095b0:	e00b      	b.n	80095ca <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	69fb      	ldr	r3, [r7, #28]
 80095bc:	601a      	str	r2, [r3, #0]
    pDest++;
 80095be:	69fb      	ldr	r3, [r7, #28]
 80095c0:	3304      	adds	r3, #4
 80095c2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80095c4:	69bb      	ldr	r3, [r7, #24]
 80095c6:	3301      	adds	r3, #1
 80095c8:	61bb      	str	r3, [r7, #24]
 80095ca:	69ba      	ldr	r2, [r7, #24]
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d3ef      	bcc.n	80095b2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80095d2:	69fb      	ldr	r3, [r7, #28]
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3724      	adds	r7, #36	; 0x24
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr

080095e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b085      	sub	sp, #20
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	695b      	ldr	r3, [r3, #20]
 80095ec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	699b      	ldr	r3, [r3, #24]
 80095f2:	68fa      	ldr	r2, [r7, #12]
 80095f4:	4013      	ands	r3, r2
 80095f6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80095f8:	68fb      	ldr	r3, [r7, #12]
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3714      	adds	r7, #20
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr

08009606 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009606:	b480      	push	{r7}
 8009608:	b083      	sub	sp, #12
 800960a:	af00      	add	r7, sp, #0
 800960c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	695b      	ldr	r3, [r3, #20]
 8009612:	f003 0301 	and.w	r3, r3, #1
}
 8009616:	4618      	mov	r0, r3
 8009618:	370c      	adds	r7, #12
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr
	...

08009624 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009624:	b480      	push	{r7}
 8009626:	b085      	sub	sp, #20
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800962c:	2300      	movs	r3, #0
 800962e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	3301      	adds	r3, #1
 8009634:	60fb      	str	r3, [r7, #12]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	4a13      	ldr	r2, [pc, #76]	; (8009688 <USB_CoreReset+0x64>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d901      	bls.n	8009642 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800963e:	2303      	movs	r3, #3
 8009640:	e01b      	b.n	800967a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	691b      	ldr	r3, [r3, #16]
 8009646:	2b00      	cmp	r3, #0
 8009648:	daf2      	bge.n	8009630 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800964a:	2300      	movs	r3, #0
 800964c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	691b      	ldr	r3, [r3, #16]
 8009652:	f043 0201 	orr.w	r2, r3, #1
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	3301      	adds	r3, #1
 800965e:	60fb      	str	r3, [r7, #12]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	4a09      	ldr	r2, [pc, #36]	; (8009688 <USB_CoreReset+0x64>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d901      	bls.n	800966c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009668:	2303      	movs	r3, #3
 800966a:	e006      	b.n	800967a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	691b      	ldr	r3, [r3, #16]
 8009670:	f003 0301 	and.w	r3, r3, #1
 8009674:	2b01      	cmp	r3, #1
 8009676:	d0f0      	beq.n	800965a <USB_CoreReset+0x36>

  return HAL_OK;
 8009678:	2300      	movs	r3, #0
}
 800967a:	4618      	mov	r0, r3
 800967c:	3714      	adds	r7, #20
 800967e:	46bd      	mov	sp, r7
 8009680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009684:	4770      	bx	lr
 8009686:	bf00      	nop
 8009688:	00030d40 	.word	0x00030d40

0800968c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800968c:	b084      	sub	sp, #16
 800968e:	b580      	push	{r7, lr}
 8009690:	b084      	sub	sp, #16
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
 8009696:	f107 001c 	add.w	r0, r7, #28
 800969a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80096a8:	461a      	mov	r2, r3
 80096aa:	2300      	movs	r3, #0
 80096ac:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096be:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ca:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d018      	beq.n	8009710 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80096de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d10a      	bne.n	80096fa <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	68ba      	ldr	r2, [r7, #8]
 80096ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80096f2:	f043 0304 	orr.w	r3, r3, #4
 80096f6:	6013      	str	r3, [r2, #0]
 80096f8:	e014      	b.n	8009724 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	68ba      	ldr	r2, [r7, #8]
 8009704:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009708:	f023 0304 	bic.w	r3, r3, #4
 800970c:	6013      	str	r3, [r2, #0]
 800970e:	e009      	b.n	8009724 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	68ba      	ldr	r2, [r7, #8]
 800971a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800971e:	f023 0304 	bic.w	r3, r3, #4
 8009722:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8009724:	2110      	movs	r1, #16
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f7ff feb4 	bl	8009494 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f7ff fed7 	bl	80094e0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009732:	2300      	movs	r3, #0
 8009734:	60fb      	str	r3, [r7, #12]
 8009736:	e015      	b.n	8009764 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	015a      	lsls	r2, r3, #5
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	4413      	add	r3, r2
 8009740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009744:	461a      	mov	r2, r3
 8009746:	f04f 33ff 	mov.w	r3, #4294967295
 800974a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	015a      	lsls	r2, r3, #5
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	4413      	add	r3, r2
 8009754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009758:	461a      	mov	r2, r3
 800975a:	2300      	movs	r3, #0
 800975c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	3301      	adds	r3, #1
 8009762:	60fb      	str	r3, [r7, #12]
 8009764:	6a3b      	ldr	r3, [r7, #32]
 8009766:	68fa      	ldr	r2, [r7, #12]
 8009768:	429a      	cmp	r2, r3
 800976a:	d3e5      	bcc.n	8009738 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800976c:	2101      	movs	r1, #1
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 f8ac 	bl	80098cc <USB_DriveVbus>

  HAL_Delay(200U);
 8009774:	20c8      	movs	r0, #200	; 0xc8
 8009776:	f7fa ff77 	bl	8004668 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2200      	movs	r2, #0
 800977e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f04f 32ff 	mov.w	r2, #4294967295
 8009786:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800978c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009790:	2b00      	cmp	r3, #0
 8009792:	d00b      	beq.n	80097ac <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f44f 7200 	mov.w	r2, #512	; 0x200
 800979a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	4a14      	ldr	r2, [pc, #80]	; (80097f0 <USB_HostInit+0x164>)
 80097a0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	4a13      	ldr	r2, [pc, #76]	; (80097f4 <USB_HostInit+0x168>)
 80097a6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80097aa:	e009      	b.n	80097c0 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2280      	movs	r2, #128	; 0x80
 80097b0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	4a10      	ldr	r2, [pc, #64]	; (80097f8 <USB_HostInit+0x16c>)
 80097b6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	4a10      	ldr	r2, [pc, #64]	; (80097fc <USB_HostInit+0x170>)
 80097bc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80097c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d105      	bne.n	80097d2 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	699b      	ldr	r3, [r3, #24]
 80097ca:	f043 0210 	orr.w	r2, r3, #16
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	699a      	ldr	r2, [r3, #24]
 80097d6:	4b0a      	ldr	r3, [pc, #40]	; (8009800 <USB_HostInit+0x174>)
 80097d8:	4313      	orrs	r3, r2
 80097da:	687a      	ldr	r2, [r7, #4]
 80097dc:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80097de:	2300      	movs	r3, #0
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3710      	adds	r7, #16
 80097e4:	46bd      	mov	sp, r7
 80097e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80097ea:	b004      	add	sp, #16
 80097ec:	4770      	bx	lr
 80097ee:	bf00      	nop
 80097f0:	01000200 	.word	0x01000200
 80097f4:	00e00300 	.word	0x00e00300
 80097f8:	00600080 	.word	0x00600080
 80097fc:	004000e0 	.word	0x004000e0
 8009800:	a3200008 	.word	0xa3200008

08009804 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009804:	b480      	push	{r7}
 8009806:	b085      	sub	sp, #20
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	460b      	mov	r3, r1
 800980e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	68fa      	ldr	r2, [r7, #12]
 800981e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009822:	f023 0303 	bic.w	r3, r3, #3
 8009826:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	78fb      	ldrb	r3, [r7, #3]
 8009832:	f003 0303 	and.w	r3, r3, #3
 8009836:	68f9      	ldr	r1, [r7, #12]
 8009838:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800983c:	4313      	orrs	r3, r2
 800983e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009840:	78fb      	ldrb	r3, [r7, #3]
 8009842:	2b01      	cmp	r3, #1
 8009844:	d107      	bne.n	8009856 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800984c:	461a      	mov	r2, r3
 800984e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009852:	6053      	str	r3, [r2, #4]
 8009854:	e009      	b.n	800986a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8009856:	78fb      	ldrb	r3, [r7, #3]
 8009858:	2b02      	cmp	r3, #2
 800985a:	d106      	bne.n	800986a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009862:	461a      	mov	r2, r3
 8009864:	f241 7370 	movw	r3, #6000	; 0x1770
 8009868:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800986a:	2300      	movs	r3, #0
}
 800986c:	4618      	mov	r0, r3
 800986e:	3714      	adds	r7, #20
 8009870:	46bd      	mov	sp, r7
 8009872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009876:	4770      	bx	lr

08009878 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009884:	2300      	movs	r3, #0
 8009886:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009898:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	68fa      	ldr	r2, [r7, #12]
 800989e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80098a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098a6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80098a8:	2064      	movs	r0, #100	; 0x64
 80098aa:	f7fa fedd 	bl	8004668 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	68fa      	ldr	r2, [r7, #12]
 80098b2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80098b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80098ba:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80098bc:	200a      	movs	r0, #10
 80098be:	f7fa fed3 	bl	8004668 <HAL_Delay>

  return HAL_OK;
 80098c2:	2300      	movs	r3, #0
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3710      	adds	r7, #16
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b085      	sub	sp, #20
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	460b      	mov	r3, r1
 80098d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80098dc:	2300      	movs	r3, #0
 80098de:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80098f0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d109      	bne.n	8009910 <USB_DriveVbus+0x44>
 80098fc:	78fb      	ldrb	r3, [r7, #3]
 80098fe:	2b01      	cmp	r3, #1
 8009900:	d106      	bne.n	8009910 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	68fa      	ldr	r2, [r7, #12]
 8009906:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800990a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800990e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800991a:	d109      	bne.n	8009930 <USB_DriveVbus+0x64>
 800991c:	78fb      	ldrb	r3, [r7, #3]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d106      	bne.n	8009930 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	68fa      	ldr	r2, [r7, #12]
 8009926:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800992a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800992e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009930:	2300      	movs	r3, #0
}
 8009932:	4618      	mov	r0, r3
 8009934:	3714      	adds	r7, #20
 8009936:	46bd      	mov	sp, r7
 8009938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993c:	4770      	bx	lr

0800993e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800993e:	b480      	push	{r7}
 8009940:	b085      	sub	sp, #20
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800994a:	2300      	movs	r3, #0
 800994c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	0c5b      	lsrs	r3, r3, #17
 800995c:	f003 0303 	and.w	r3, r3, #3
}
 8009960:	4618      	mov	r0, r3
 8009962:	3714      	adds	r7, #20
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr

0800996c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800996c:	b480      	push	{r7}
 800996e:	b085      	sub	sp, #20
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800997e:	689b      	ldr	r3, [r3, #8]
 8009980:	b29b      	uxth	r3, r3
}
 8009982:	4618      	mov	r0, r3
 8009984:	3714      	adds	r7, #20
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr
	...

08009990 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b088      	sub	sp, #32
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	4608      	mov	r0, r1
 800999a:	4611      	mov	r1, r2
 800999c:	461a      	mov	r2, r3
 800999e:	4603      	mov	r3, r0
 80099a0:	70fb      	strb	r3, [r7, #3]
 80099a2:	460b      	mov	r3, r1
 80099a4:	70bb      	strb	r3, [r7, #2]
 80099a6:	4613      	mov	r3, r2
 80099a8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80099aa:	2300      	movs	r3, #0
 80099ac:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80099b2:	78fb      	ldrb	r3, [r7, #3]
 80099b4:	015a      	lsls	r2, r3, #5
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	4413      	add	r3, r2
 80099ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099be:	461a      	mov	r2, r3
 80099c0:	f04f 33ff 	mov.w	r3, #4294967295
 80099c4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80099c6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80099ca:	2b03      	cmp	r3, #3
 80099cc:	d87e      	bhi.n	8009acc <USB_HC_Init+0x13c>
 80099ce:	a201      	add	r2, pc, #4	; (adr r2, 80099d4 <USB_HC_Init+0x44>)
 80099d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099d4:	080099e5 	.word	0x080099e5
 80099d8:	08009a8f 	.word	0x08009a8f
 80099dc:	080099e5 	.word	0x080099e5
 80099e0:	08009a51 	.word	0x08009a51
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80099e4:	78fb      	ldrb	r3, [r7, #3]
 80099e6:	015a      	lsls	r2, r3, #5
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	4413      	add	r3, r2
 80099ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099f0:	461a      	mov	r2, r3
 80099f2:	f240 439d 	movw	r3, #1181	; 0x49d
 80099f6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80099f8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	da10      	bge.n	8009a22 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009a00:	78fb      	ldrb	r3, [r7, #3]
 8009a02:	015a      	lsls	r2, r3, #5
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	4413      	add	r3, r2
 8009a08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a0c:	68db      	ldr	r3, [r3, #12]
 8009a0e:	78fa      	ldrb	r2, [r7, #3]
 8009a10:	0151      	lsls	r1, r2, #5
 8009a12:	693a      	ldr	r2, [r7, #16]
 8009a14:	440a      	add	r2, r1
 8009a16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a1e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8009a20:	e057      	b.n	8009ad2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d051      	beq.n	8009ad2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009a2e:	78fb      	ldrb	r3, [r7, #3]
 8009a30:	015a      	lsls	r2, r3, #5
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	4413      	add	r3, r2
 8009a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a3a:	68db      	ldr	r3, [r3, #12]
 8009a3c:	78fa      	ldrb	r2, [r7, #3]
 8009a3e:	0151      	lsls	r1, r2, #5
 8009a40:	693a      	ldr	r2, [r7, #16]
 8009a42:	440a      	add	r2, r1
 8009a44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a48:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009a4c:	60d3      	str	r3, [r2, #12]
      break;
 8009a4e:	e040      	b.n	8009ad2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009a50:	78fb      	ldrb	r3, [r7, #3]
 8009a52:	015a      	lsls	r2, r3, #5
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	4413      	add	r3, r2
 8009a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a5c:	461a      	mov	r2, r3
 8009a5e:	f240 639d 	movw	r3, #1693	; 0x69d
 8009a62:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009a64:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	da34      	bge.n	8009ad6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009a6c:	78fb      	ldrb	r3, [r7, #3]
 8009a6e:	015a      	lsls	r2, r3, #5
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	4413      	add	r3, r2
 8009a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a78:	68db      	ldr	r3, [r3, #12]
 8009a7a:	78fa      	ldrb	r2, [r7, #3]
 8009a7c:	0151      	lsls	r1, r2, #5
 8009a7e:	693a      	ldr	r2, [r7, #16]
 8009a80:	440a      	add	r2, r1
 8009a82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a8a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009a8c:	e023      	b.n	8009ad6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009a8e:	78fb      	ldrb	r3, [r7, #3]
 8009a90:	015a      	lsls	r2, r3, #5
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	4413      	add	r3, r2
 8009a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	f240 2325 	movw	r3, #549	; 0x225
 8009aa0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009aa2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	da17      	bge.n	8009ada <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009aaa:	78fb      	ldrb	r3, [r7, #3]
 8009aac:	015a      	lsls	r2, r3, #5
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	4413      	add	r3, r2
 8009ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	78fa      	ldrb	r2, [r7, #3]
 8009aba:	0151      	lsls	r1, r2, #5
 8009abc:	693a      	ldr	r2, [r7, #16]
 8009abe:	440a      	add	r2, r1
 8009ac0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ac4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009ac8:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009aca:	e006      	b.n	8009ada <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009acc:	2301      	movs	r3, #1
 8009ace:	77fb      	strb	r3, [r7, #31]
      break;
 8009ad0:	e004      	b.n	8009adc <USB_HC_Init+0x14c>
      break;
 8009ad2:	bf00      	nop
 8009ad4:	e002      	b.n	8009adc <USB_HC_Init+0x14c>
      break;
 8009ad6:	bf00      	nop
 8009ad8:	e000      	b.n	8009adc <USB_HC_Init+0x14c>
      break;
 8009ada:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ae2:	699a      	ldr	r2, [r3, #24]
 8009ae4:	78fb      	ldrb	r3, [r7, #3]
 8009ae6:	f003 030f 	and.w	r3, r3, #15
 8009aea:	2101      	movs	r1, #1
 8009aec:	fa01 f303 	lsl.w	r3, r1, r3
 8009af0:	6939      	ldr	r1, [r7, #16]
 8009af2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009af6:	4313      	orrs	r3, r2
 8009af8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	699b      	ldr	r3, [r3, #24]
 8009afe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009b06:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	da03      	bge.n	8009b16 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009b0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b12:	61bb      	str	r3, [r7, #24]
 8009b14:	e001      	b.n	8009b1a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8009b16:	2300      	movs	r3, #0
 8009b18:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f7ff ff0f 	bl	800993e <USB_GetHostSpeed>
 8009b20:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009b22:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009b26:	2b02      	cmp	r3, #2
 8009b28:	d106      	bne.n	8009b38 <USB_HC_Init+0x1a8>
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2b02      	cmp	r3, #2
 8009b2e:	d003      	beq.n	8009b38 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009b30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009b34:	617b      	str	r3, [r7, #20]
 8009b36:	e001      	b.n	8009b3c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009b3c:	787b      	ldrb	r3, [r7, #1]
 8009b3e:	059b      	lsls	r3, r3, #22
 8009b40:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009b44:	78bb      	ldrb	r3, [r7, #2]
 8009b46:	02db      	lsls	r3, r3, #11
 8009b48:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009b4c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009b4e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009b52:	049b      	lsls	r3, r3, #18
 8009b54:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009b58:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009b5a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009b5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009b60:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009b62:	69bb      	ldr	r3, [r7, #24]
 8009b64:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009b66:	78fb      	ldrb	r3, [r7, #3]
 8009b68:	0159      	lsls	r1, r3, #5
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	440b      	add	r3, r1
 8009b6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b72:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009b78:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8009b7a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009b7e:	2b03      	cmp	r3, #3
 8009b80:	d10f      	bne.n	8009ba2 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8009b82:	78fb      	ldrb	r3, [r7, #3]
 8009b84:	015a      	lsls	r2, r3, #5
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	4413      	add	r3, r2
 8009b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	78fa      	ldrb	r2, [r7, #3]
 8009b92:	0151      	lsls	r1, r2, #5
 8009b94:	693a      	ldr	r2, [r7, #16]
 8009b96:	440a      	add	r2, r1
 8009b98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009ba0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009ba2:	7ffb      	ldrb	r3, [r7, #31]
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3720      	adds	r7, #32
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b08c      	sub	sp, #48	; 0x30
 8009bb0:	af02      	add	r7, sp, #8
 8009bb2:	60f8      	str	r0, [r7, #12]
 8009bb4:	60b9      	str	r1, [r7, #8]
 8009bb6:	4613      	mov	r3, r2
 8009bb8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	785b      	ldrb	r3, [r3, #1]
 8009bc2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009bc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009bc8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d02d      	beq.n	8009c32 <USB_HC_StartXfer+0x86>
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	791b      	ldrb	r3, [r3, #4]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d129      	bne.n	8009c32 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8009bde:	79fb      	ldrb	r3, [r7, #7]
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	d117      	bne.n	8009c14 <USB_HC_StartXfer+0x68>
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	79db      	ldrb	r3, [r3, #7]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d003      	beq.n	8009bf4 <USB_HC_StartXfer+0x48>
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	79db      	ldrb	r3, [r3, #7]
 8009bf0:	2b02      	cmp	r3, #2
 8009bf2:	d10f      	bne.n	8009c14 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009bf4:	69fb      	ldr	r3, [r7, #28]
 8009bf6:	015a      	lsls	r2, r3, #5
 8009bf8:	6a3b      	ldr	r3, [r7, #32]
 8009bfa:	4413      	add	r3, r2
 8009bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c00:	68db      	ldr	r3, [r3, #12]
 8009c02:	69fa      	ldr	r2, [r7, #28]
 8009c04:	0151      	lsls	r1, r2, #5
 8009c06:	6a3a      	ldr	r2, [r7, #32]
 8009c08:	440a      	add	r2, r1
 8009c0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c12:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8009c14:	79fb      	ldrb	r3, [r7, #7]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d10b      	bne.n	8009c32 <USB_HC_StartXfer+0x86>
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	795b      	ldrb	r3, [r3, #5]
 8009c1e:	2b01      	cmp	r3, #1
 8009c20:	d107      	bne.n	8009c32 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	785b      	ldrb	r3, [r3, #1]
 8009c26:	4619      	mov	r1, r3
 8009c28:	68f8      	ldr	r0, [r7, #12]
 8009c2a:	f000 fa2f 	bl	800a08c <USB_DoPing>
      return HAL_OK;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	e0f8      	b.n	8009e24 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	695b      	ldr	r3, [r3, #20]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d018      	beq.n	8009c6c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	695b      	ldr	r3, [r3, #20]
 8009c3e:	68ba      	ldr	r2, [r7, #8]
 8009c40:	8912      	ldrh	r2, [r2, #8]
 8009c42:	4413      	add	r3, r2
 8009c44:	3b01      	subs	r3, #1
 8009c46:	68ba      	ldr	r2, [r7, #8]
 8009c48:	8912      	ldrh	r2, [r2, #8]
 8009c4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c4e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8009c50:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009c52:	8b7b      	ldrh	r3, [r7, #26]
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d90b      	bls.n	8009c70 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8009c58:	8b7b      	ldrh	r3, [r7, #26]
 8009c5a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009c5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009c5e:	68ba      	ldr	r2, [r7, #8]
 8009c60:	8912      	ldrh	r2, [r2, #8]
 8009c62:	fb02 f203 	mul.w	r2, r2, r3
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	611a      	str	r2, [r3, #16]
 8009c6a:	e001      	b.n	8009c70 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	78db      	ldrb	r3, [r3, #3]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d007      	beq.n	8009c88 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009c78:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009c7a:	68ba      	ldr	r2, [r7, #8]
 8009c7c:	8912      	ldrh	r2, [r2, #8]
 8009c7e:	fb02 f203 	mul.w	r2, r2, r3
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	611a      	str	r2, [r3, #16]
 8009c86:	e003      	b.n	8009c90 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	695a      	ldr	r2, [r3, #20]
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	691b      	ldr	r3, [r3, #16]
 8009c94:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009c98:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009c9a:	04d9      	lsls	r1, r3, #19
 8009c9c:	4b63      	ldr	r3, [pc, #396]	; (8009e2c <USB_HC_StartXfer+0x280>)
 8009c9e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009ca0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	7a9b      	ldrb	r3, [r3, #10]
 8009ca6:	075b      	lsls	r3, r3, #29
 8009ca8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009cac:	69f9      	ldr	r1, [r7, #28]
 8009cae:	0148      	lsls	r0, r1, #5
 8009cb0:	6a39      	ldr	r1, [r7, #32]
 8009cb2:	4401      	add	r1, r0
 8009cb4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009cb8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009cba:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009cbc:	79fb      	ldrb	r3, [r7, #7]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d009      	beq.n	8009cd6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	68d9      	ldr	r1, [r3, #12]
 8009cc6:	69fb      	ldr	r3, [r7, #28]
 8009cc8:	015a      	lsls	r2, r3, #5
 8009cca:	6a3b      	ldr	r3, [r7, #32]
 8009ccc:	4413      	add	r3, r2
 8009cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cd2:	460a      	mov	r2, r1
 8009cd4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009cd6:	6a3b      	ldr	r3, [r7, #32]
 8009cd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009cdc:	689b      	ldr	r3, [r3, #8]
 8009cde:	f003 0301 	and.w	r3, r3, #1
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	bf0c      	ite	eq
 8009ce6:	2301      	moveq	r3, #1
 8009ce8:	2300      	movne	r3, #0
 8009cea:	b2db      	uxtb	r3, r3
 8009cec:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009cee:	69fb      	ldr	r3, [r7, #28]
 8009cf0:	015a      	lsls	r2, r3, #5
 8009cf2:	6a3b      	ldr	r3, [r7, #32]
 8009cf4:	4413      	add	r3, r2
 8009cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	69fa      	ldr	r2, [r7, #28]
 8009cfe:	0151      	lsls	r1, r2, #5
 8009d00:	6a3a      	ldr	r2, [r7, #32]
 8009d02:	440a      	add	r2, r1
 8009d04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d08:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009d0c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009d0e:	69fb      	ldr	r3, [r7, #28]
 8009d10:	015a      	lsls	r2, r3, #5
 8009d12:	6a3b      	ldr	r3, [r7, #32]
 8009d14:	4413      	add	r3, r2
 8009d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	7e7b      	ldrb	r3, [r7, #25]
 8009d1e:	075b      	lsls	r3, r3, #29
 8009d20:	69f9      	ldr	r1, [r7, #28]
 8009d22:	0148      	lsls	r0, r1, #5
 8009d24:	6a39      	ldr	r1, [r7, #32]
 8009d26:	4401      	add	r1, r0
 8009d28:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009d30:	69fb      	ldr	r3, [r7, #28]
 8009d32:	015a      	lsls	r2, r3, #5
 8009d34:	6a3b      	ldr	r3, [r7, #32]
 8009d36:	4413      	add	r3, r2
 8009d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009d46:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	78db      	ldrb	r3, [r3, #3]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d004      	beq.n	8009d5a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d56:	613b      	str	r3, [r7, #16]
 8009d58:	e003      	b.n	8009d62 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009d60:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009d68:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009d6a:	69fb      	ldr	r3, [r7, #28]
 8009d6c:	015a      	lsls	r2, r3, #5
 8009d6e:	6a3b      	ldr	r3, [r7, #32]
 8009d70:	4413      	add	r3, r2
 8009d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d76:	461a      	mov	r2, r3
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009d7c:	79fb      	ldrb	r3, [r7, #7]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d001      	beq.n	8009d86 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8009d82:	2300      	movs	r3, #0
 8009d84:	e04e      	b.n	8009e24 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	78db      	ldrb	r3, [r3, #3]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d149      	bne.n	8009e22 <USB_HC_StartXfer+0x276>
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	695b      	ldr	r3, [r3, #20]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d045      	beq.n	8009e22 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	79db      	ldrb	r3, [r3, #7]
 8009d9a:	2b03      	cmp	r3, #3
 8009d9c:	d830      	bhi.n	8009e00 <USB_HC_StartXfer+0x254>
 8009d9e:	a201      	add	r2, pc, #4	; (adr r2, 8009da4 <USB_HC_StartXfer+0x1f8>)
 8009da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da4:	08009db5 	.word	0x08009db5
 8009da8:	08009dd9 	.word	0x08009dd9
 8009dac:	08009db5 	.word	0x08009db5
 8009db0:	08009dd9 	.word	0x08009dd9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	695b      	ldr	r3, [r3, #20]
 8009db8:	3303      	adds	r3, #3
 8009dba:	089b      	lsrs	r3, r3, #2
 8009dbc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009dbe:	8afa      	ldrh	r2, [r7, #22]
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc4:	b29b      	uxth	r3, r3
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d91c      	bls.n	8009e04 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	699b      	ldr	r3, [r3, #24]
 8009dce:	f043 0220 	orr.w	r2, r3, #32
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	619a      	str	r2, [r3, #24]
        }
        break;
 8009dd6:	e015      	b.n	8009e04 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	695b      	ldr	r3, [r3, #20]
 8009ddc:	3303      	adds	r3, #3
 8009dde:	089b      	lsrs	r3, r3, #2
 8009de0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009de2:	8afa      	ldrh	r2, [r7, #22]
 8009de4:	6a3b      	ldr	r3, [r7, #32]
 8009de6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009dea:	691b      	ldr	r3, [r3, #16]
 8009dec:	b29b      	uxth	r3, r3
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d90a      	bls.n	8009e08 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	699b      	ldr	r3, [r3, #24]
 8009df6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	619a      	str	r2, [r3, #24]
        }
        break;
 8009dfe:	e003      	b.n	8009e08 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8009e00:	bf00      	nop
 8009e02:	e002      	b.n	8009e0a <USB_HC_StartXfer+0x25e>
        break;
 8009e04:	bf00      	nop
 8009e06:	e000      	b.n	8009e0a <USB_HC_StartXfer+0x25e>
        break;
 8009e08:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	68d9      	ldr	r1, [r3, #12]
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	785a      	ldrb	r2, [r3, #1]
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	695b      	ldr	r3, [r3, #20]
 8009e16:	b29b      	uxth	r3, r3
 8009e18:	2000      	movs	r0, #0
 8009e1a:	9000      	str	r0, [sp, #0]
 8009e1c:	68f8      	ldr	r0, [r7, #12]
 8009e1e:	f7ff fb81 	bl	8009524 <USB_WritePacket>
  }

  return HAL_OK;
 8009e22:	2300      	movs	r3, #0
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3728      	adds	r7, #40	; 0x28
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}
 8009e2c:	1ff80000 	.word	0x1ff80000

08009e30 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b085      	sub	sp, #20
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e42:	695b      	ldr	r3, [r3, #20]
 8009e44:	b29b      	uxth	r3, r3
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3714      	adds	r7, #20
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr

08009e52 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009e52:	b480      	push	{r7}
 8009e54:	b089      	sub	sp, #36	; 0x24
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	6078      	str	r0, [r7, #4]
 8009e5a:	460b      	mov	r3, r1
 8009e5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8009e62:	78fb      	ldrb	r3, [r7, #3]
 8009e64:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8009e66:	2300      	movs	r3, #0
 8009e68:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	015a      	lsls	r2, r3, #5
 8009e6e:	69bb      	ldr	r3, [r7, #24]
 8009e70:	4413      	add	r3, r2
 8009e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	0c9b      	lsrs	r3, r3, #18
 8009e7a:	f003 0303 	and.w	r3, r3, #3
 8009e7e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	015a      	lsls	r2, r3, #5
 8009e84:	69bb      	ldr	r3, [r7, #24]
 8009e86:	4413      	add	r3, r2
 8009e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	0fdb      	lsrs	r3, r3, #31
 8009e90:	f003 0301 	and.w	r3, r3, #1
 8009e94:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	689b      	ldr	r3, [r3, #8]
 8009e9a:	f003 0320 	and.w	r3, r3, #32
 8009e9e:	2b20      	cmp	r3, #32
 8009ea0:	d104      	bne.n	8009eac <USB_HC_Halt+0x5a>
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d101      	bne.n	8009eac <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	e0e8      	b.n	800a07e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d002      	beq.n	8009eb8 <USB_HC_Halt+0x66>
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	2b02      	cmp	r3, #2
 8009eb6:	d173      	bne.n	8009fa0 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	015a      	lsls	r2, r3, #5
 8009ebc:	69bb      	ldr	r3, [r7, #24]
 8009ebe:	4413      	add	r3, r2
 8009ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	697a      	ldr	r2, [r7, #20]
 8009ec8:	0151      	lsls	r1, r2, #5
 8009eca:	69ba      	ldr	r2, [r7, #24]
 8009ecc:	440a      	add	r2, r1
 8009ece:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ed2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ed6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	689b      	ldr	r3, [r3, #8]
 8009edc:	f003 0320 	and.w	r3, r3, #32
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	f040 80cb 	bne.w	800a07c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d143      	bne.n	8009f7a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	015a      	lsls	r2, r3, #5
 8009ef6:	69bb      	ldr	r3, [r7, #24]
 8009ef8:	4413      	add	r3, r2
 8009efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	697a      	ldr	r2, [r7, #20]
 8009f02:	0151      	lsls	r1, r2, #5
 8009f04:	69ba      	ldr	r2, [r7, #24]
 8009f06:	440a      	add	r2, r1
 8009f08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009f10:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	015a      	lsls	r2, r3, #5
 8009f16:	69bb      	ldr	r3, [r7, #24]
 8009f18:	4413      	add	r3, r2
 8009f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	697a      	ldr	r2, [r7, #20]
 8009f22:	0151      	lsls	r1, r2, #5
 8009f24:	69ba      	ldr	r2, [r7, #24]
 8009f26:	440a      	add	r2, r1
 8009f28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009f30:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	015a      	lsls	r2, r3, #5
 8009f36:	69bb      	ldr	r3, [r7, #24]
 8009f38:	4413      	add	r3, r2
 8009f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	697a      	ldr	r2, [r7, #20]
 8009f42:	0151      	lsls	r1, r2, #5
 8009f44:	69ba      	ldr	r2, [r7, #24]
 8009f46:	440a      	add	r2, r1
 8009f48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f4c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009f50:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8009f52:	69fb      	ldr	r3, [r7, #28]
 8009f54:	3301      	adds	r3, #1
 8009f56:	61fb      	str	r3, [r7, #28]
 8009f58:	69fb      	ldr	r3, [r7, #28]
 8009f5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009f5e:	d81d      	bhi.n	8009f9c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	015a      	lsls	r2, r3, #5
 8009f64:	69bb      	ldr	r3, [r7, #24]
 8009f66:	4413      	add	r3, r2
 8009f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f76:	d0ec      	beq.n	8009f52 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009f78:	e080      	b.n	800a07c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	015a      	lsls	r2, r3, #5
 8009f7e:	69bb      	ldr	r3, [r7, #24]
 8009f80:	4413      	add	r3, r2
 8009f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	697a      	ldr	r2, [r7, #20]
 8009f8a:	0151      	lsls	r1, r2, #5
 8009f8c:	69ba      	ldr	r2, [r7, #24]
 8009f8e:	440a      	add	r2, r1
 8009f90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009f98:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009f9a:	e06f      	b.n	800a07c <USB_HC_Halt+0x22a>
            break;
 8009f9c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009f9e:	e06d      	b.n	800a07c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	015a      	lsls	r2, r3, #5
 8009fa4:	69bb      	ldr	r3, [r7, #24]
 8009fa6:	4413      	add	r3, r2
 8009fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	697a      	ldr	r2, [r7, #20]
 8009fb0:	0151      	lsls	r1, r2, #5
 8009fb2:	69ba      	ldr	r2, [r7, #24]
 8009fb4:	440a      	add	r2, r1
 8009fb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009fba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009fbe:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009fc0:	69bb      	ldr	r3, [r7, #24]
 8009fc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009fc6:	691b      	ldr	r3, [r3, #16]
 8009fc8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d143      	bne.n	800a058 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	015a      	lsls	r2, r3, #5
 8009fd4:	69bb      	ldr	r3, [r7, #24]
 8009fd6:	4413      	add	r3, r2
 8009fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	697a      	ldr	r2, [r7, #20]
 8009fe0:	0151      	lsls	r1, r2, #5
 8009fe2:	69ba      	ldr	r2, [r7, #24]
 8009fe4:	440a      	add	r2, r1
 8009fe6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009fea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009fee:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	015a      	lsls	r2, r3, #5
 8009ff4:	69bb      	ldr	r3, [r7, #24]
 8009ff6:	4413      	add	r3, r2
 8009ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	697a      	ldr	r2, [r7, #20]
 800a000:	0151      	lsls	r1, r2, #5
 800a002:	69ba      	ldr	r2, [r7, #24]
 800a004:	440a      	add	r2, r1
 800a006:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a00a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a00e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	015a      	lsls	r2, r3, #5
 800a014:	69bb      	ldr	r3, [r7, #24]
 800a016:	4413      	add	r3, r2
 800a018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	697a      	ldr	r2, [r7, #20]
 800a020:	0151      	lsls	r1, r2, #5
 800a022:	69ba      	ldr	r2, [r7, #24]
 800a024:	440a      	add	r2, r1
 800a026:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a02a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a02e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800a030:	69fb      	ldr	r3, [r7, #28]
 800a032:	3301      	adds	r3, #1
 800a034:	61fb      	str	r3, [r7, #28]
 800a036:	69fb      	ldr	r3, [r7, #28]
 800a038:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a03c:	d81d      	bhi.n	800a07a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	015a      	lsls	r2, r3, #5
 800a042:	69bb      	ldr	r3, [r7, #24]
 800a044:	4413      	add	r3, r2
 800a046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a050:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a054:	d0ec      	beq.n	800a030 <USB_HC_Halt+0x1de>
 800a056:	e011      	b.n	800a07c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	015a      	lsls	r2, r3, #5
 800a05c:	69bb      	ldr	r3, [r7, #24]
 800a05e:	4413      	add	r3, r2
 800a060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	697a      	ldr	r2, [r7, #20]
 800a068:	0151      	lsls	r1, r2, #5
 800a06a:	69ba      	ldr	r2, [r7, #24]
 800a06c:	440a      	add	r2, r1
 800a06e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a072:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a076:	6013      	str	r3, [r2, #0]
 800a078:	e000      	b.n	800a07c <USB_HC_Halt+0x22a>
          break;
 800a07a:	bf00      	nop
    }
  }

  return HAL_OK;
 800a07c:	2300      	movs	r3, #0
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3724      	adds	r7, #36	; 0x24
 800a082:	46bd      	mov	sp, r7
 800a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a088:	4770      	bx	lr
	...

0800a08c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b087      	sub	sp, #28
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	460b      	mov	r3, r1
 800a096:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a09c:	78fb      	ldrb	r3, [r7, #3]
 800a09e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	04da      	lsls	r2, r3, #19
 800a0a8:	4b15      	ldr	r3, [pc, #84]	; (800a100 <USB_DoPing+0x74>)
 800a0aa:	4013      	ands	r3, r2
 800a0ac:	693a      	ldr	r2, [r7, #16]
 800a0ae:	0151      	lsls	r1, r2, #5
 800a0b0:	697a      	ldr	r2, [r7, #20]
 800a0b2:	440a      	add	r2, r1
 800a0b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a0b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a0bc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	015a      	lsls	r2, r3, #5
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	4413      	add	r3, r2
 800a0c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a0d4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a0dc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	015a      	lsls	r2, r3, #5
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	4413      	add	r3, r2
 800a0e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a0f0:	2300      	movs	r3, #0
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	371c      	adds	r7, #28
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fc:	4770      	bx	lr
 800a0fe:	bf00      	nop
 800a100:	1ff80000 	.word	0x1ff80000

0800a104 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b086      	sub	sp, #24
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800a110:	2300      	movs	r3, #0
 800a112:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f7ff f981 	bl	800941c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800a11a:	2110      	movs	r1, #16
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f7ff f9b9 	bl	8009494 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f7ff f9dc 	bl	80094e0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a128:	2300      	movs	r3, #0
 800a12a:	613b      	str	r3, [r7, #16]
 800a12c:	e01f      	b.n	800a16e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	015a      	lsls	r2, r3, #5
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	4413      	add	r3, r2
 800a136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a144:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a14c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a154:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	015a      	lsls	r2, r3, #5
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	4413      	add	r3, r2
 800a15e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a162:	461a      	mov	r2, r3
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	3301      	adds	r3, #1
 800a16c:	613b      	str	r3, [r7, #16]
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	2b0f      	cmp	r3, #15
 800a172:	d9dc      	bls.n	800a12e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a174:	2300      	movs	r3, #0
 800a176:	613b      	str	r3, [r7, #16]
 800a178:	e034      	b.n	800a1e4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	015a      	lsls	r2, r3, #5
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	4413      	add	r3, r2
 800a182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a190:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a198:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a1a0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	015a      	lsls	r2, r3, #5
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	4413      	add	r3, r2
 800a1aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	3301      	adds	r3, #1
 800a1b8:	617b      	str	r3, [r7, #20]
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a1c0:	d80c      	bhi.n	800a1dc <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	015a      	lsls	r2, r3, #5
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	4413      	add	r3, r2
 800a1ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a1d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a1d8:	d0ec      	beq.n	800a1b4 <USB_StopHost+0xb0>
 800a1da:	e000      	b.n	800a1de <USB_StopHost+0xda>
        break;
 800a1dc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	613b      	str	r3, [r7, #16]
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	2b0f      	cmp	r3, #15
 800a1e8:	d9c7      	bls.n	800a17a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a1f0:	461a      	mov	r2, r3
 800a1f2:	f04f 33ff 	mov.w	r3, #4294967295
 800a1f6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f04f 32ff 	mov.w	r2, #4294967295
 800a1fe:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f7ff f8fa 	bl	80093fa <USB_EnableGlobalInt>

  return HAL_OK;
 800a206:	2300      	movs	r3, #0
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3718      	adds	r7, #24
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a210:	b590      	push	{r4, r7, lr}
 800a212:	b089      	sub	sp, #36	; 0x24
 800a214:	af04      	add	r7, sp, #16
 800a216:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800a218:	2301      	movs	r3, #1
 800a21a:	2202      	movs	r2, #2
 800a21c:	2102      	movs	r1, #2
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 fc66 	bl	800aaf0 <USBH_FindInterface>
 800a224:	4603      	mov	r3, r0
 800a226:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a228:	7bfb      	ldrb	r3, [r7, #15]
 800a22a:	2bff      	cmp	r3, #255	; 0xff
 800a22c:	d002      	beq.n	800a234 <USBH_CDC_InterfaceInit+0x24>
 800a22e:	7bfb      	ldrb	r3, [r7, #15]
 800a230:	2b01      	cmp	r3, #1
 800a232:	d901      	bls.n	800a238 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a234:	2302      	movs	r3, #2
 800a236:	e13d      	b.n	800a4b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800a238:	7bfb      	ldrb	r3, [r7, #15]
 800a23a:	4619      	mov	r1, r3
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f000 fc3b 	bl	800aab8 <USBH_SelectInterface>
 800a242:	4603      	mov	r3, r0
 800a244:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a246:	7bbb      	ldrb	r3, [r7, #14]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d001      	beq.n	800a250 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800a24c:	2302      	movs	r3, #2
 800a24e:	e131      	b.n	800a4b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800a256:	2050      	movs	r0, #80	; 0x50
 800a258:	f002 fa00 	bl	800c65c <malloc>
 800a25c:	4603      	mov	r3, r0
 800a25e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a266:	69db      	ldr	r3, [r3, #28]
 800a268:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d101      	bne.n	800a274 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800a270:	2302      	movs	r3, #2
 800a272:	e11f      	b.n	800a4b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800a274:	2250      	movs	r2, #80	; 0x50
 800a276:	2100      	movs	r1, #0
 800a278:	68b8      	ldr	r0, [r7, #8]
 800a27a:	f002 fa0d 	bl	800c698 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800a27e:	7bfb      	ldrb	r3, [r7, #15]
 800a280:	687a      	ldr	r2, [r7, #4]
 800a282:	211a      	movs	r1, #26
 800a284:	fb01 f303 	mul.w	r3, r1, r3
 800a288:	4413      	add	r3, r2
 800a28a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a28e:	781b      	ldrb	r3, [r3, #0]
 800a290:	b25b      	sxtb	r3, r3
 800a292:	2b00      	cmp	r3, #0
 800a294:	da15      	bge.n	800a2c2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a296:	7bfb      	ldrb	r3, [r7, #15]
 800a298:	687a      	ldr	r2, [r7, #4]
 800a29a:	211a      	movs	r1, #26
 800a29c:	fb01 f303 	mul.w	r3, r1, r3
 800a2a0:	4413      	add	r3, r2
 800a2a2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a2a6:	781a      	ldrb	r2, [r3, #0]
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a2ac:	7bfb      	ldrb	r3, [r7, #15]
 800a2ae:	687a      	ldr	r2, [r7, #4]
 800a2b0:	211a      	movs	r1, #26
 800a2b2:	fb01 f303 	mul.w	r3, r1, r3
 800a2b6:	4413      	add	r3, r2
 800a2b8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a2bc:	881a      	ldrh	r2, [r3, #0]
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	785b      	ldrb	r3, [r3, #1]
 800a2c6:	4619      	mov	r1, r3
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f001 fe32 	bl	800bf32 <USBH_AllocPipe>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	461a      	mov	r2, r3
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	7819      	ldrb	r1, [r3, #0]
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	7858      	ldrb	r0, [r3, #1]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a2ea:	68ba      	ldr	r2, [r7, #8]
 800a2ec:	8952      	ldrh	r2, [r2, #10]
 800a2ee:	9202      	str	r2, [sp, #8]
 800a2f0:	2203      	movs	r2, #3
 800a2f2:	9201      	str	r2, [sp, #4]
 800a2f4:	9300      	str	r3, [sp, #0]
 800a2f6:	4623      	mov	r3, r4
 800a2f8:	4602      	mov	r2, r0
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f001 fdea 	bl	800bed4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	781b      	ldrb	r3, [r3, #0]
 800a304:	2200      	movs	r2, #0
 800a306:	4619      	mov	r1, r3
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f002 f8f9 	bl	800c500 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800a30e:	2300      	movs	r3, #0
 800a310:	2200      	movs	r2, #0
 800a312:	210a      	movs	r1, #10
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f000 fbeb 	bl	800aaf0 <USBH_FindInterface>
 800a31a:	4603      	mov	r3, r0
 800a31c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a31e:	7bfb      	ldrb	r3, [r7, #15]
 800a320:	2bff      	cmp	r3, #255	; 0xff
 800a322:	d002      	beq.n	800a32a <USBH_CDC_InterfaceInit+0x11a>
 800a324:	7bfb      	ldrb	r3, [r7, #15]
 800a326:	2b01      	cmp	r3, #1
 800a328:	d901      	bls.n	800a32e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a32a:	2302      	movs	r3, #2
 800a32c:	e0c2      	b.n	800a4b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800a32e:	7bfb      	ldrb	r3, [r7, #15]
 800a330:	687a      	ldr	r2, [r7, #4]
 800a332:	211a      	movs	r1, #26
 800a334:	fb01 f303 	mul.w	r3, r1, r3
 800a338:	4413      	add	r3, r2
 800a33a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a33e:	781b      	ldrb	r3, [r3, #0]
 800a340:	b25b      	sxtb	r3, r3
 800a342:	2b00      	cmp	r3, #0
 800a344:	da16      	bge.n	800a374 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a346:	7bfb      	ldrb	r3, [r7, #15]
 800a348:	687a      	ldr	r2, [r7, #4]
 800a34a:	211a      	movs	r1, #26
 800a34c:	fb01 f303 	mul.w	r3, r1, r3
 800a350:	4413      	add	r3, r2
 800a352:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a356:	781a      	ldrb	r2, [r3, #0]
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a35c:	7bfb      	ldrb	r3, [r7, #15]
 800a35e:	687a      	ldr	r2, [r7, #4]
 800a360:	211a      	movs	r1, #26
 800a362:	fb01 f303 	mul.w	r3, r1, r3
 800a366:	4413      	add	r3, r2
 800a368:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a36c:	881a      	ldrh	r2, [r3, #0]
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	835a      	strh	r2, [r3, #26]
 800a372:	e015      	b.n	800a3a0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a374:	7bfb      	ldrb	r3, [r7, #15]
 800a376:	687a      	ldr	r2, [r7, #4]
 800a378:	211a      	movs	r1, #26
 800a37a:	fb01 f303 	mul.w	r3, r1, r3
 800a37e:	4413      	add	r3, r2
 800a380:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a384:	781a      	ldrb	r2, [r3, #0]
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a38a:	7bfb      	ldrb	r3, [r7, #15]
 800a38c:	687a      	ldr	r2, [r7, #4]
 800a38e:	211a      	movs	r1, #26
 800a390:	fb01 f303 	mul.w	r3, r1, r3
 800a394:	4413      	add	r3, r2
 800a396:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a39a:	881a      	ldrh	r2, [r3, #0]
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800a3a0:	7bfb      	ldrb	r3, [r7, #15]
 800a3a2:	687a      	ldr	r2, [r7, #4]
 800a3a4:	211a      	movs	r1, #26
 800a3a6:	fb01 f303 	mul.w	r3, r1, r3
 800a3aa:	4413      	add	r3, r2
 800a3ac:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a3b0:	781b      	ldrb	r3, [r3, #0]
 800a3b2:	b25b      	sxtb	r3, r3
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	da16      	bge.n	800a3e6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a3b8:	7bfb      	ldrb	r3, [r7, #15]
 800a3ba:	687a      	ldr	r2, [r7, #4]
 800a3bc:	211a      	movs	r1, #26
 800a3be:	fb01 f303 	mul.w	r3, r1, r3
 800a3c2:	4413      	add	r3, r2
 800a3c4:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a3c8:	781a      	ldrb	r2, [r3, #0]
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a3ce:	7bfb      	ldrb	r3, [r7, #15]
 800a3d0:	687a      	ldr	r2, [r7, #4]
 800a3d2:	211a      	movs	r1, #26
 800a3d4:	fb01 f303 	mul.w	r3, r1, r3
 800a3d8:	4413      	add	r3, r2
 800a3da:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a3de:	881a      	ldrh	r2, [r3, #0]
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	835a      	strh	r2, [r3, #26]
 800a3e4:	e015      	b.n	800a412 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a3e6:	7bfb      	ldrb	r3, [r7, #15]
 800a3e8:	687a      	ldr	r2, [r7, #4]
 800a3ea:	211a      	movs	r1, #26
 800a3ec:	fb01 f303 	mul.w	r3, r1, r3
 800a3f0:	4413      	add	r3, r2
 800a3f2:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a3f6:	781a      	ldrb	r2, [r3, #0]
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a3fc:	7bfb      	ldrb	r3, [r7, #15]
 800a3fe:	687a      	ldr	r2, [r7, #4]
 800a400:	211a      	movs	r1, #26
 800a402:	fb01 f303 	mul.w	r3, r1, r3
 800a406:	4413      	add	r3, r2
 800a408:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a40c:	881a      	ldrh	r2, [r3, #0]
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	7b9b      	ldrb	r3, [r3, #14]
 800a416:	4619      	mov	r1, r3
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f001 fd8a 	bl	800bf32 <USBH_AllocPipe>
 800a41e:	4603      	mov	r3, r0
 800a420:	461a      	mov	r2, r3
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	7bdb      	ldrb	r3, [r3, #15]
 800a42a:	4619      	mov	r1, r3
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f001 fd80 	bl	800bf32 <USBH_AllocPipe>
 800a432:	4603      	mov	r3, r0
 800a434:	461a      	mov	r2, r3
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	7b59      	ldrb	r1, [r3, #13]
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	7b98      	ldrb	r0, [r3, #14]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a44e:	68ba      	ldr	r2, [r7, #8]
 800a450:	8b12      	ldrh	r2, [r2, #24]
 800a452:	9202      	str	r2, [sp, #8]
 800a454:	2202      	movs	r2, #2
 800a456:	9201      	str	r2, [sp, #4]
 800a458:	9300      	str	r3, [sp, #0]
 800a45a:	4623      	mov	r3, r4
 800a45c:	4602      	mov	r2, r0
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f001 fd38 	bl	800bed4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	7b19      	ldrb	r1, [r3, #12]
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	7bd8      	ldrb	r0, [r3, #15]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a478:	68ba      	ldr	r2, [r7, #8]
 800a47a:	8b52      	ldrh	r2, [r2, #26]
 800a47c:	9202      	str	r2, [sp, #8]
 800a47e:	2202      	movs	r2, #2
 800a480:	9201      	str	r2, [sp, #4]
 800a482:	9300      	str	r3, [sp, #0]
 800a484:	4623      	mov	r3, r4
 800a486:	4602      	mov	r2, r0
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f001 fd23 	bl	800bed4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	2200      	movs	r2, #0
 800a492:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	7b5b      	ldrb	r3, [r3, #13]
 800a49a:	2200      	movs	r2, #0
 800a49c:	4619      	mov	r1, r3
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f002 f82e 	bl	800c500 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	7b1b      	ldrb	r3, [r3, #12]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	4619      	mov	r1, r3
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f002 f827 	bl	800c500 <USBH_LL_SetToggle>

  return USBH_OK;
 800a4b2:	2300      	movs	r3, #0
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3714      	adds	r7, #20
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd90      	pop	{r4, r7, pc}

0800a4bc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b084      	sub	sp, #16
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4ca:	69db      	ldr	r3, [r3, #28]
 800a4cc:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d00e      	beq.n	800a4f4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	781b      	ldrb	r3, [r3, #0]
 800a4da:	4619      	mov	r1, r3
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f001 fd18 	bl	800bf12 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	4619      	mov	r1, r3
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f001 fd43 	bl	800bf74 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	7b1b      	ldrb	r3, [r3, #12]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d00e      	beq.n	800a51a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	7b1b      	ldrb	r3, [r3, #12]
 800a500:	4619      	mov	r1, r3
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f001 fd05 	bl	800bf12 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	7b1b      	ldrb	r3, [r3, #12]
 800a50c:	4619      	mov	r1, r3
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f001 fd30 	bl	800bf74 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2200      	movs	r2, #0
 800a518:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	7b5b      	ldrb	r3, [r3, #13]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d00e      	beq.n	800a540 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	7b5b      	ldrb	r3, [r3, #13]
 800a526:	4619      	mov	r1, r3
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f001 fcf2 	bl	800bf12 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	7b5b      	ldrb	r3, [r3, #13]
 800a532:	4619      	mov	r1, r3
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f001 fd1d 	bl	800bf74 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2200      	movs	r2, #0
 800a53e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a546:	69db      	ldr	r3, [r3, #28]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d00b      	beq.n	800a564 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a552:	69db      	ldr	r3, [r3, #28]
 800a554:	4618      	mov	r0, r3
 800a556:	f002 f889 	bl	800c66c <free>
    phost->pActiveClass->pData = 0U;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a560:	2200      	movs	r2, #0
 800a562:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a564:	2300      	movs	r3, #0
}
 800a566:	4618      	mov	r0, r3
 800a568:	3710      	adds	r7, #16
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}

0800a56e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a56e:	b580      	push	{r7, lr}
 800a570:	b084      	sub	sp, #16
 800a572:	af00      	add	r7, sp, #0
 800a574:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a57c:	69db      	ldr	r3, [r3, #28]
 800a57e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	3340      	adds	r3, #64	; 0x40
 800a584:	4619      	mov	r1, r3
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f000 f8b1 	bl	800a6ee <GetLineCoding>
 800a58c:	4603      	mov	r3, r0
 800a58e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800a590:	7afb      	ldrb	r3, [r7, #11]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d105      	bne.n	800a5a2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a59c:	2102      	movs	r1, #2
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800a5a2:	7afb      	ldrb	r3, [r7, #11]
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3710      	adds	r7, #16
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}

0800a5ac <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a5c2:	69db      	ldr	r3, [r3, #28]
 800a5c4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a5cc:	2b04      	cmp	r3, #4
 800a5ce:	d877      	bhi.n	800a6c0 <USBH_CDC_Process+0x114>
 800a5d0:	a201      	add	r2, pc, #4	; (adr r2, 800a5d8 <USBH_CDC_Process+0x2c>)
 800a5d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5d6:	bf00      	nop
 800a5d8:	0800a5ed 	.word	0x0800a5ed
 800a5dc:	0800a5f3 	.word	0x0800a5f3
 800a5e0:	0800a623 	.word	0x0800a623
 800a5e4:	0800a697 	.word	0x0800a697
 800a5e8:	0800a6a5 	.word	0x0800a6a5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	73fb      	strb	r3, [r7, #15]
      break;
 800a5f0:	e06d      	b.n	800a6ce <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5f6:	4619      	mov	r1, r3
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f000 f897 	bl	800a72c <SetLineCoding>
 800a5fe:	4603      	mov	r3, r0
 800a600:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a602:	7bbb      	ldrb	r3, [r7, #14]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d104      	bne.n	800a612 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	2202      	movs	r2, #2
 800a60c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a610:	e058      	b.n	800a6c4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800a612:	7bbb      	ldrb	r3, [r7, #14]
 800a614:	2b01      	cmp	r3, #1
 800a616:	d055      	beq.n	800a6c4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	2204      	movs	r2, #4
 800a61c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a620:	e050      	b.n	800a6c4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	3340      	adds	r3, #64	; 0x40
 800a626:	4619      	mov	r1, r3
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f000 f860 	bl	800a6ee <GetLineCoding>
 800a62e:	4603      	mov	r3, r0
 800a630:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a632:	7bbb      	ldrb	r3, [r7, #14]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d126      	bne.n	800a686 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	2200      	movs	r2, #0
 800a63c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a64a:	791b      	ldrb	r3, [r3, #4]
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d13b      	bne.n	800a6c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a65a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d133      	bne.n	800a6c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a66a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d12b      	bne.n	800a6c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a678:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a67a:	429a      	cmp	r2, r3
 800a67c:	d124      	bne.n	800a6c8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f000 f958 	bl	800a934 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a684:	e020      	b.n	800a6c8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800a686:	7bbb      	ldrb	r3, [r7, #14]
 800a688:	2b01      	cmp	r3, #1
 800a68a:	d01d      	beq.n	800a6c8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	2204      	movs	r2, #4
 800a690:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a694:	e018      	b.n	800a6c8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f000 f867 	bl	800a76a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f000 f8da 	bl	800a856 <CDC_ProcessReception>
      break;
 800a6a2:	e014      	b.n	800a6ce <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800a6a4:	2100      	movs	r1, #0
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f000 ffe3 	bl	800b672 <USBH_ClrFeature>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a6b0:	7bbb      	ldrb	r3, [r7, #14]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d10a      	bne.n	800a6cc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800a6be:	e005      	b.n	800a6cc <USBH_CDC_Process+0x120>

    default:
      break;
 800a6c0:	bf00      	nop
 800a6c2:	e004      	b.n	800a6ce <USBH_CDC_Process+0x122>
      break;
 800a6c4:	bf00      	nop
 800a6c6:	e002      	b.n	800a6ce <USBH_CDC_Process+0x122>
      break;
 800a6c8:	bf00      	nop
 800a6ca:	e000      	b.n	800a6ce <USBH_CDC_Process+0x122>
      break;
 800a6cc:	bf00      	nop

  }

  return status;
 800a6ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3710      	adds	r7, #16
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}

0800a6d8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b083      	sub	sp, #12
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a6e0:	2300      	movs	r3, #0
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	370c      	adds	r7, #12
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ec:	4770      	bx	lr

0800a6ee <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800a6ee:	b580      	push	{r7, lr}
 800a6f0:	b082      	sub	sp, #8
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	6078      	str	r0, [r7, #4]
 800a6f6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	22a1      	movs	r2, #161	; 0xa1
 800a6fc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2221      	movs	r2, #33	; 0x21
 800a702:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2200      	movs	r2, #0
 800a708:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2200      	movs	r2, #0
 800a70e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2207      	movs	r2, #7
 800a714:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	2207      	movs	r2, #7
 800a71a:	4619      	mov	r1, r3
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f001 f988 	bl	800ba32 <USBH_CtlReq>
 800a722:	4603      	mov	r3, r0
}
 800a724:	4618      	mov	r0, r3
 800a726:	3708      	adds	r7, #8
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}

0800a72c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b082      	sub	sp, #8
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2221      	movs	r2, #33	; 0x21
 800a73a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2220      	movs	r2, #32
 800a740:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2200      	movs	r2, #0
 800a746:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2200      	movs	r2, #0
 800a74c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2207      	movs	r2, #7
 800a752:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	2207      	movs	r2, #7
 800a758:	4619      	mov	r1, r3
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f001 f969 	bl	800ba32 <USBH_CtlReq>
 800a760:	4603      	mov	r3, r0
}
 800a762:	4618      	mov	r0, r3
 800a764:	3708      	adds	r7, #8
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}

0800a76a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800a76a:	b580      	push	{r7, lr}
 800a76c:	b086      	sub	sp, #24
 800a76e:	af02      	add	r7, sp, #8
 800a770:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a778:	69db      	ldr	r3, [r3, #28]
 800a77a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a77c:	2300      	movs	r3, #0
 800a77e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800a786:	2b01      	cmp	r3, #1
 800a788:	d002      	beq.n	800a790 <CDC_ProcessTransmission+0x26>
 800a78a:	2b02      	cmp	r3, #2
 800a78c:	d023      	beq.n	800a7d6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800a78e:	e05e      	b.n	800a84e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a794:	68fa      	ldr	r2, [r7, #12]
 800a796:	8b12      	ldrh	r2, [r2, #24]
 800a798:	4293      	cmp	r3, r2
 800a79a:	d90b      	bls.n	800a7b4 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	69d9      	ldr	r1, [r3, #28]
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	8b1a      	ldrh	r2, [r3, #24]
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	7b5b      	ldrb	r3, [r3, #13]
 800a7a8:	2001      	movs	r0, #1
 800a7aa:	9000      	str	r0, [sp, #0]
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f001 fb4e 	bl	800be4e <USBH_BulkSendData>
 800a7b2:	e00b      	b.n	800a7cc <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800a7bc:	b29a      	uxth	r2, r3
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	7b5b      	ldrb	r3, [r3, #13]
 800a7c2:	2001      	movs	r0, #1
 800a7c4:	9000      	str	r0, [sp, #0]
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f001 fb41 	bl	800be4e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	2202      	movs	r2, #2
 800a7d0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a7d4:	e03b      	b.n	800a84e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	7b5b      	ldrb	r3, [r3, #13]
 800a7da:	4619      	mov	r1, r3
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f001 fe65 	bl	800c4ac <USBH_LL_GetURBState>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800a7e6:	7afb      	ldrb	r3, [r7, #11]
 800a7e8:	2b01      	cmp	r3, #1
 800a7ea:	d128      	bne.n	800a83e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f0:	68fa      	ldr	r2, [r7, #12]
 800a7f2:	8b12      	ldrh	r2, [r2, #24]
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	d90e      	bls.n	800a816 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7fc:	68fa      	ldr	r2, [r7, #12]
 800a7fe:	8b12      	ldrh	r2, [r2, #24]
 800a800:	1a9a      	subs	r2, r3, r2
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	69db      	ldr	r3, [r3, #28]
 800a80a:	68fa      	ldr	r2, [r7, #12]
 800a80c:	8b12      	ldrh	r2, [r2, #24]
 800a80e:	441a      	add	r2, r3
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	61da      	str	r2, [r3, #28]
 800a814:	e002      	b.n	800a81c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2200      	movs	r2, #0
 800a81a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a820:	2b00      	cmp	r3, #0
 800a822:	d004      	beq.n	800a82e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	2201      	movs	r2, #1
 800a828:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a82c:	e00e      	b.n	800a84c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	2200      	movs	r2, #0
 800a832:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f000 f868 	bl	800a90c <USBH_CDC_TransmitCallback>
      break;
 800a83c:	e006      	b.n	800a84c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800a83e:	7afb      	ldrb	r3, [r7, #11]
 800a840:	2b02      	cmp	r3, #2
 800a842:	d103      	bne.n	800a84c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2201      	movs	r2, #1
 800a848:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a84c:	bf00      	nop
  }
}
 800a84e:	bf00      	nop
 800a850:	3710      	adds	r7, #16
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}

0800a856 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a856:	b580      	push	{r7, lr}
 800a858:	b086      	sub	sp, #24
 800a85a:	af00      	add	r7, sp, #0
 800a85c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a864:	69db      	ldr	r3, [r3, #28]
 800a866:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a868:	2300      	movs	r3, #0
 800a86a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800a872:	2b03      	cmp	r3, #3
 800a874:	d002      	beq.n	800a87c <CDC_ProcessReception+0x26>
 800a876:	2b04      	cmp	r3, #4
 800a878:	d00e      	beq.n	800a898 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800a87a:	e043      	b.n	800a904 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	6a19      	ldr	r1, [r3, #32]
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	8b5a      	ldrh	r2, [r3, #26]
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	7b1b      	ldrb	r3, [r3, #12]
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f001 fb05 	bl	800be98 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	2204      	movs	r2, #4
 800a892:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a896:	e035      	b.n	800a904 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	7b1b      	ldrb	r3, [r3, #12]
 800a89c:	4619      	mov	r1, r3
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f001 fe04 	bl	800c4ac <USBH_LL_GetURBState>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a8a8:	7cfb      	ldrb	r3, [r7, #19]
 800a8aa:	2b01      	cmp	r3, #1
 800a8ac:	d129      	bne.n	800a902 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	7b1b      	ldrb	r3, [r3, #12]
 800a8b2:	4619      	mov	r1, r3
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f001 fd67 	bl	800c388 <USBH_LL_GetLastXferSize>
 800a8ba:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8c0:	68fa      	ldr	r2, [r7, #12]
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d016      	beq.n	800a8f4 <CDC_ProcessReception+0x9e>
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	8b5b      	ldrh	r3, [r3, #26]
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d910      	bls.n	800a8f4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	1ad2      	subs	r2, r2, r3
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	6a1a      	ldr	r2, [r3, #32]
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	441a      	add	r2, r3
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	2203      	movs	r2, #3
 800a8ee:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a8f2:	e006      	b.n	800a902 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f000 f80f 	bl	800a920 <USBH_CDC_ReceiveCallback>
      break;
 800a902:	bf00      	nop
  }
}
 800a904:	bf00      	nop
 800a906:	3718      	adds	r7, #24
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a90c:	b480      	push	{r7}
 800a90e:	b083      	sub	sp, #12
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a914:	bf00      	nop
 800a916:	370c      	adds	r7, #12
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr

0800a920 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a920:	b480      	push	{r7}
 800a922:	b083      	sub	sp, #12
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a928:	bf00      	nop
 800a92a:	370c      	adds	r7, #12
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr

0800a934 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a934:	b480      	push	{r7}
 800a936:	b083      	sub	sp, #12
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a93c:	bf00      	nop
 800a93e:	370c      	adds	r7, #12
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr

0800a948 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b084      	sub	sp, #16
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	60f8      	str	r0, [r7, #12]
 800a950:	60b9      	str	r1, [r7, #8]
 800a952:	4613      	mov	r3, r2
 800a954:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d101      	bne.n	800a960 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a95c:	2302      	movs	r3, #2
 800a95e:	e029      	b.n	800a9b4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	79fa      	ldrb	r2, [r7, #7]
 800a964:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	2200      	movs	r2, #0
 800a96c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2200      	movs	r2, #0
 800a974:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800a978:	68f8      	ldr	r0, [r7, #12]
 800a97a:	f000 f81f 	bl	800a9bc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	2200      	movs	r2, #0
 800a982:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2200      	movs	r2, #0
 800a98a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	2200      	movs	r2, #0
 800a992:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	2200      	movs	r2, #0
 800a99a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d003      	beq.n	800a9ac <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	68ba      	ldr	r2, [r7, #8]
 800a9a8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800a9ac:	68f8      	ldr	r0, [r7, #12]
 800a9ae:	f001 fc37 	bl	800c220 <USBH_LL_Init>

  return USBH_OK;
 800a9b2:	2300      	movs	r3, #0
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3710      	adds	r7, #16
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b085      	sub	sp, #20
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	60fb      	str	r3, [r7, #12]
 800a9cc:	e009      	b.n	800a9e2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	33e0      	adds	r3, #224	; 0xe0
 800a9d4:	009b      	lsls	r3, r3, #2
 800a9d6:	4413      	add	r3, r2
 800a9d8:	2200      	movs	r2, #0
 800a9da:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	3301      	adds	r3, #1
 800a9e0:	60fb      	str	r3, [r7, #12]
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	2b0e      	cmp	r3, #14
 800a9e6:	d9f2      	bls.n	800a9ce <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	60fb      	str	r3, [r7, #12]
 800a9ec:	e009      	b.n	800aa02 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a9ee:	687a      	ldr	r2, [r7, #4]
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	4413      	add	r3, r2
 800a9f4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	3301      	adds	r3, #1
 800aa00:	60fb      	str	r3, [r7, #12]
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa08:	d3f1      	bcc.n	800a9ee <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2200      	movs	r2, #0
 800aa14:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2201      	movs	r2, #1
 800aa1a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2201      	movs	r2, #1
 800aa28:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2240      	movs	r2, #64	; 0x40
 800aa2e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2200      	movs	r2, #0
 800aa34:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2201      	movs	r2, #1
 800aa42:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2200      	movs	r2, #0
 800aa52:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800aa56:	2300      	movs	r3, #0
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3714      	adds	r7, #20
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr

0800aa64 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b085      	sub	sp, #20
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d016      	beq.n	800aaa6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d10e      	bne.n	800aaa0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800aa88:	1c59      	adds	r1, r3, #1
 800aa8a:	687a      	ldr	r2, [r7, #4]
 800aa8c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800aa90:	687a      	ldr	r2, [r7, #4]
 800aa92:	33de      	adds	r3, #222	; 0xde
 800aa94:	6839      	ldr	r1, [r7, #0]
 800aa96:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	73fb      	strb	r3, [r7, #15]
 800aa9e:	e004      	b.n	800aaaa <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800aaa0:	2302      	movs	r3, #2
 800aaa2:	73fb      	strb	r3, [r7, #15]
 800aaa4:	e001      	b.n	800aaaa <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800aaa6:	2302      	movs	r3, #2
 800aaa8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800aaaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3714      	adds	r7, #20
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr

0800aab8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b085      	sub	sp, #20
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	460b      	mov	r3, r1
 800aac2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800aac4:	2300      	movs	r3, #0
 800aac6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800aace:	78fa      	ldrb	r2, [r7, #3]
 800aad0:	429a      	cmp	r2, r3
 800aad2:	d204      	bcs.n	800aade <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	78fa      	ldrb	r2, [r7, #3]
 800aad8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800aadc:	e001      	b.n	800aae2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800aade:	2302      	movs	r3, #2
 800aae0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800aae2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3714      	adds	r7, #20
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr

0800aaf0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b087      	sub	sp, #28
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	4608      	mov	r0, r1
 800aafa:	4611      	mov	r1, r2
 800aafc:	461a      	mov	r2, r3
 800aafe:	4603      	mov	r3, r0
 800ab00:	70fb      	strb	r3, [r7, #3]
 800ab02:	460b      	mov	r3, r1
 800ab04:	70bb      	strb	r3, [r7, #2]
 800ab06:	4613      	mov	r3, r2
 800ab08:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ab18:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ab1a:	e025      	b.n	800ab68 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800ab1c:	7dfb      	ldrb	r3, [r7, #23]
 800ab1e:	221a      	movs	r2, #26
 800ab20:	fb02 f303 	mul.w	r3, r2, r3
 800ab24:	3308      	adds	r3, #8
 800ab26:	68fa      	ldr	r2, [r7, #12]
 800ab28:	4413      	add	r3, r2
 800ab2a:	3302      	adds	r3, #2
 800ab2c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	795b      	ldrb	r3, [r3, #5]
 800ab32:	78fa      	ldrb	r2, [r7, #3]
 800ab34:	429a      	cmp	r2, r3
 800ab36:	d002      	beq.n	800ab3e <USBH_FindInterface+0x4e>
 800ab38:	78fb      	ldrb	r3, [r7, #3]
 800ab3a:	2bff      	cmp	r3, #255	; 0xff
 800ab3c:	d111      	bne.n	800ab62 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ab42:	78ba      	ldrb	r2, [r7, #2]
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d002      	beq.n	800ab4e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ab48:	78bb      	ldrb	r3, [r7, #2]
 800ab4a:	2bff      	cmp	r3, #255	; 0xff
 800ab4c:	d109      	bne.n	800ab62 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ab52:	787a      	ldrb	r2, [r7, #1]
 800ab54:	429a      	cmp	r2, r3
 800ab56:	d002      	beq.n	800ab5e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ab58:	787b      	ldrb	r3, [r7, #1]
 800ab5a:	2bff      	cmp	r3, #255	; 0xff
 800ab5c:	d101      	bne.n	800ab62 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800ab5e:	7dfb      	ldrb	r3, [r7, #23]
 800ab60:	e006      	b.n	800ab70 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800ab62:	7dfb      	ldrb	r3, [r7, #23]
 800ab64:	3301      	adds	r3, #1
 800ab66:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ab68:	7dfb      	ldrb	r3, [r7, #23]
 800ab6a:	2b01      	cmp	r3, #1
 800ab6c:	d9d6      	bls.n	800ab1c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800ab6e:	23ff      	movs	r3, #255	; 0xff
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	371c      	adds	r7, #28
 800ab74:	46bd      	mov	sp, r7
 800ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7a:	4770      	bx	lr

0800ab7c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b082      	sub	sp, #8
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f001 fb87 	bl	800c298 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800ab8a:	2101      	movs	r1, #1
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	f001 fca0 	bl	800c4d2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800ab92:	2300      	movs	r3, #0
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3708      	adds	r7, #8
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}

0800ab9c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b088      	sub	sp, #32
 800aba0:	af04      	add	r7, sp, #16
 800aba2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800aba4:	2302      	movs	r3, #2
 800aba6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800aba8:	2300      	movs	r3, #0
 800abaa:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800abb2:	b2db      	uxtb	r3, r3
 800abb4:	2b01      	cmp	r3, #1
 800abb6:	d102      	bne.n	800abbe <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2203      	movs	r2, #3
 800abbc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	781b      	ldrb	r3, [r3, #0]
 800abc2:	b2db      	uxtb	r3, r3
 800abc4:	2b0b      	cmp	r3, #11
 800abc6:	f200 81b3 	bhi.w	800af30 <USBH_Process+0x394>
 800abca:	a201      	add	r2, pc, #4	; (adr r2, 800abd0 <USBH_Process+0x34>)
 800abcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abd0:	0800ac01 	.word	0x0800ac01
 800abd4:	0800ac33 	.word	0x0800ac33
 800abd8:	0800ac9b 	.word	0x0800ac9b
 800abdc:	0800aecb 	.word	0x0800aecb
 800abe0:	0800af31 	.word	0x0800af31
 800abe4:	0800ad3f 	.word	0x0800ad3f
 800abe8:	0800ae71 	.word	0x0800ae71
 800abec:	0800ad75 	.word	0x0800ad75
 800abf0:	0800ad95 	.word	0x0800ad95
 800abf4:	0800adb5 	.word	0x0800adb5
 800abf8:	0800ade3 	.word	0x0800ade3
 800abfc:	0800aeb3 	.word	0x0800aeb3
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	f000 8193 	beq.w	800af34 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2201      	movs	r2, #1
 800ac12:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800ac14:	20c8      	movs	r0, #200	; 0xc8
 800ac16:	f001 fca3 	bl	800c560 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f001 fb99 	bl	800c352 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2200      	movs	r2, #0
 800ac24:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ac30:	e180      	b.n	800af34 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800ac38:	2b01      	cmp	r3, #1
 800ac3a:	d107      	bne.n	800ac4c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2202      	movs	r2, #2
 800ac48:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ac4a:	e182      	b.n	800af52 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ac52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ac56:	d914      	bls.n	800ac82 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ac5e:	3301      	adds	r3, #1
 800ac60:	b2da      	uxtb	r2, r3
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ac6e:	2b03      	cmp	r3, #3
 800ac70:	d903      	bls.n	800ac7a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	220d      	movs	r2, #13
 800ac76:	701a      	strb	r2, [r3, #0]
      break;
 800ac78:	e16b      	b.n	800af52 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	701a      	strb	r2, [r3, #0]
      break;
 800ac80:	e167      	b.n	800af52 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ac88:	f103 020a 	add.w	r2, r3, #10
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800ac92:	200a      	movs	r0, #10
 800ac94:	f001 fc64 	bl	800c560 <USBH_Delay>
      break;
 800ac98:	e15b      	b.n	800af52 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d005      	beq.n	800acb0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800acaa:	2104      	movs	r1, #4
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800acb0:	2064      	movs	r0, #100	; 0x64
 800acb2:	f001 fc55 	bl	800c560 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f001 fb24 	bl	800c304 <USBH_LL_GetSpeed>
 800acbc:	4603      	mov	r3, r0
 800acbe:	461a      	mov	r2, r3
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2205      	movs	r2, #5
 800acca:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800accc:	2100      	movs	r1, #0
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f001 f92f 	bl	800bf32 <USBH_AllocPipe>
 800acd4:	4603      	mov	r3, r0
 800acd6:	461a      	mov	r2, r3
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800acdc:	2180      	movs	r1, #128	; 0x80
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f001 f927 	bl	800bf32 <USBH_AllocPipe>
 800ace4:	4603      	mov	r3, r0
 800ace6:	461a      	mov	r2, r3
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	7919      	ldrb	r1, [r3, #4]
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800acfc:	687a      	ldr	r2, [r7, #4]
 800acfe:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ad00:	b292      	uxth	r2, r2
 800ad02:	9202      	str	r2, [sp, #8]
 800ad04:	2200      	movs	r2, #0
 800ad06:	9201      	str	r2, [sp, #4]
 800ad08:	9300      	str	r3, [sp, #0]
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	2280      	movs	r2, #128	; 0x80
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f001 f8e0 	bl	800bed4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	7959      	ldrb	r1, [r3, #5]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ad24:	687a      	ldr	r2, [r7, #4]
 800ad26:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ad28:	b292      	uxth	r2, r2
 800ad2a:	9202      	str	r2, [sp, #8]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	9201      	str	r2, [sp, #4]
 800ad30:	9300      	str	r3, [sp, #0]
 800ad32:	4603      	mov	r3, r0
 800ad34:	2200      	movs	r2, #0
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f001 f8cc 	bl	800bed4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ad3c:	e109      	b.n	800af52 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f000 f90c 	bl	800af5c <USBH_HandleEnum>
 800ad44:	4603      	mov	r3, r0
 800ad46:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800ad48:	7bbb      	ldrb	r3, [r7, #14]
 800ad4a:	b2db      	uxtb	r3, r3
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	f040 80f3 	bne.w	800af38 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2200      	movs	r2, #0
 800ad56:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800ad60:	2b01      	cmp	r3, #1
 800ad62:	d103      	bne.n	800ad6c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2208      	movs	r2, #8
 800ad68:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ad6a:	e0e5      	b.n	800af38 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2207      	movs	r2, #7
 800ad70:	701a      	strb	r2, [r3, #0]
      break;
 800ad72:	e0e1      	b.n	800af38 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	f000 80de 	beq.w	800af3c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ad86:	2101      	movs	r1, #1
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2208      	movs	r2, #8
 800ad90:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800ad92:	e0d3      	b.n	800af3c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800ad9a:	b29b      	uxth	r3, r3
 800ad9c:	4619      	mov	r1, r3
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f000 fc20 	bl	800b5e4 <USBH_SetCfg>
 800ada4:	4603      	mov	r3, r0
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	f040 80ca 	bne.w	800af40 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2209      	movs	r2, #9
 800adb0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800adb2:	e0c5      	b.n	800af40 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800adba:	f003 0320 	and.w	r3, r3, #32
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d00b      	beq.n	800adda <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800adc2:	2101      	movs	r1, #1
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f000 fc30 	bl	800b62a <USBH_SetFeature>
 800adca:	4603      	mov	r3, r0
 800adcc:	2b00      	cmp	r3, #0
 800adce:	f040 80b9 	bne.w	800af44 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	220a      	movs	r2, #10
 800add6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800add8:	e0b4      	b.n	800af44 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	220a      	movs	r2, #10
 800adde:	701a      	strb	r2, [r3, #0]
      break;
 800ade0:	e0b0      	b.n	800af44 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ade8:	2b00      	cmp	r3, #0
 800adea:	f000 80ad 	beq.w	800af48 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2200      	movs	r2, #0
 800adf2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800adf6:	2300      	movs	r3, #0
 800adf8:	73fb      	strb	r3, [r7, #15]
 800adfa:	e016      	b.n	800ae2a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800adfc:	7bfa      	ldrb	r2, [r7, #15]
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	32de      	adds	r2, #222	; 0xde
 800ae02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae06:	791a      	ldrb	r2, [r3, #4]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d108      	bne.n	800ae24 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800ae12:	7bfa      	ldrb	r2, [r7, #15]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	32de      	adds	r2, #222	; 0xde
 800ae18:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800ae22:	e005      	b.n	800ae30 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ae24:	7bfb      	ldrb	r3, [r7, #15]
 800ae26:	3301      	adds	r3, #1
 800ae28:	73fb      	strb	r3, [r7, #15]
 800ae2a:	7bfb      	ldrb	r3, [r7, #15]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d0e5      	beq.n	800adfc <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d016      	beq.n	800ae68 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae40:	689b      	ldr	r3, [r3, #8]
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	4798      	blx	r3
 800ae46:	4603      	mov	r3, r0
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d109      	bne.n	800ae60 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2206      	movs	r2, #6
 800ae50:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ae58:	2103      	movs	r1, #3
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ae5e:	e073      	b.n	800af48 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	220d      	movs	r2, #13
 800ae64:	701a      	strb	r2, [r3, #0]
      break;
 800ae66:	e06f      	b.n	800af48 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	220d      	movs	r2, #13
 800ae6c:	701a      	strb	r2, [r3, #0]
      break;
 800ae6e:	e06b      	b.n	800af48 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d017      	beq.n	800aeaa <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae80:	691b      	ldr	r3, [r3, #16]
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	4798      	blx	r3
 800ae86:	4603      	mov	r3, r0
 800ae88:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ae8a:	7bbb      	ldrb	r3, [r7, #14]
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d103      	bne.n	800ae9a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	220b      	movs	r2, #11
 800ae96:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ae98:	e058      	b.n	800af4c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800ae9a:	7bbb      	ldrb	r3, [r7, #14]
 800ae9c:	b2db      	uxtb	r3, r3
 800ae9e:	2b02      	cmp	r3, #2
 800aea0:	d154      	bne.n	800af4c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	220d      	movs	r2, #13
 800aea6:	701a      	strb	r2, [r3, #0]
      break;
 800aea8:	e050      	b.n	800af4c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	220d      	movs	r2, #13
 800aeae:	701a      	strb	r2, [r3, #0]
      break;
 800aeb0:	e04c      	b.n	800af4c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d049      	beq.n	800af50 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aec2:	695b      	ldr	r3, [r3, #20]
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	4798      	blx	r3
      }
      break;
 800aec8:	e042      	b.n	800af50 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2200      	movs	r2, #0
 800aece:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f7ff fd72 	bl	800a9bc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d009      	beq.n	800aef6 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aee8:	68db      	ldr	r3, [r3, #12]
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2200      	movs	r2, #0
 800aef2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d005      	beq.n	800af0c <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800af06:	2105      	movs	r1, #5
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800af12:	b2db      	uxtb	r3, r3
 800af14:	2b01      	cmp	r3, #1
 800af16:	d107      	bne.n	800af28 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2200      	movs	r2, #0
 800af1c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f7ff fe2b 	bl	800ab7c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800af26:	e014      	b.n	800af52 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f001 f9b5 	bl	800c298 <USBH_LL_Start>
      break;
 800af2e:	e010      	b.n	800af52 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800af30:	bf00      	nop
 800af32:	e00e      	b.n	800af52 <USBH_Process+0x3b6>
      break;
 800af34:	bf00      	nop
 800af36:	e00c      	b.n	800af52 <USBH_Process+0x3b6>
      break;
 800af38:	bf00      	nop
 800af3a:	e00a      	b.n	800af52 <USBH_Process+0x3b6>
    break;
 800af3c:	bf00      	nop
 800af3e:	e008      	b.n	800af52 <USBH_Process+0x3b6>
      break;
 800af40:	bf00      	nop
 800af42:	e006      	b.n	800af52 <USBH_Process+0x3b6>
      break;
 800af44:	bf00      	nop
 800af46:	e004      	b.n	800af52 <USBH_Process+0x3b6>
      break;
 800af48:	bf00      	nop
 800af4a:	e002      	b.n	800af52 <USBH_Process+0x3b6>
      break;
 800af4c:	bf00      	nop
 800af4e:	e000      	b.n	800af52 <USBH_Process+0x3b6>
      break;
 800af50:	bf00      	nop
  }
  return USBH_OK;
 800af52:	2300      	movs	r3, #0
}
 800af54:	4618      	mov	r0, r3
 800af56:	3710      	adds	r7, #16
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}

0800af5c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b088      	sub	sp, #32
 800af60:	af04      	add	r7, sp, #16
 800af62:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800af64:	2301      	movs	r3, #1
 800af66:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800af68:	2301      	movs	r3, #1
 800af6a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	785b      	ldrb	r3, [r3, #1]
 800af70:	2b07      	cmp	r3, #7
 800af72:	f200 81c1 	bhi.w	800b2f8 <USBH_HandleEnum+0x39c>
 800af76:	a201      	add	r2, pc, #4	; (adr r2, 800af7c <USBH_HandleEnum+0x20>)
 800af78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af7c:	0800af9d 	.word	0x0800af9d
 800af80:	0800b05b 	.word	0x0800b05b
 800af84:	0800b0c5 	.word	0x0800b0c5
 800af88:	0800b153 	.word	0x0800b153
 800af8c:	0800b1bd 	.word	0x0800b1bd
 800af90:	0800b22d 	.word	0x0800b22d
 800af94:	0800b273 	.word	0x0800b273
 800af98:	0800b2b9 	.word	0x0800b2b9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800af9c:	2108      	movs	r1, #8
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f000 fa50 	bl	800b444 <USBH_Get_DevDesc>
 800afa4:	4603      	mov	r3, r0
 800afa6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800afa8:	7bbb      	ldrb	r3, [r7, #14]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d130      	bne.n	800b010 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2201      	movs	r2, #1
 800afbc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	7919      	ldrb	r1, [r3, #4]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800afce:	687a      	ldr	r2, [r7, #4]
 800afd0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800afd2:	b292      	uxth	r2, r2
 800afd4:	9202      	str	r2, [sp, #8]
 800afd6:	2200      	movs	r2, #0
 800afd8:	9201      	str	r2, [sp, #4]
 800afda:	9300      	str	r3, [sp, #0]
 800afdc:	4603      	mov	r3, r0
 800afde:	2280      	movs	r2, #128	; 0x80
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f000 ff77 	bl	800bed4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	7959      	ldrb	r1, [r3, #5]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800aff6:	687a      	ldr	r2, [r7, #4]
 800aff8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800affa:	b292      	uxth	r2, r2
 800affc:	9202      	str	r2, [sp, #8]
 800affe:	2200      	movs	r2, #0
 800b000:	9201      	str	r2, [sp, #4]
 800b002:	9300      	str	r3, [sp, #0]
 800b004:	4603      	mov	r3, r0
 800b006:	2200      	movs	r2, #0
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f000 ff63 	bl	800bed4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b00e:	e175      	b.n	800b2fc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b010:	7bbb      	ldrb	r3, [r7, #14]
 800b012:	2b03      	cmp	r3, #3
 800b014:	f040 8172 	bne.w	800b2fc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b01e:	3301      	adds	r3, #1
 800b020:	b2da      	uxtb	r2, r3
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b02e:	2b03      	cmp	r3, #3
 800b030:	d903      	bls.n	800b03a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	220d      	movs	r2, #13
 800b036:	701a      	strb	r2, [r3, #0]
      break;
 800b038:	e160      	b.n	800b2fc <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	795b      	ldrb	r3, [r3, #5]
 800b03e:	4619      	mov	r1, r3
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f000 ff97 	bl	800bf74 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	791b      	ldrb	r3, [r3, #4]
 800b04a:	4619      	mov	r1, r3
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f000 ff91 	bl	800bf74 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2200      	movs	r2, #0
 800b056:	701a      	strb	r2, [r3, #0]
      break;
 800b058:	e150      	b.n	800b2fc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b05a:	2112      	movs	r1, #18
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f000 f9f1 	bl	800b444 <USBH_Get_DevDesc>
 800b062:	4603      	mov	r3, r0
 800b064:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b066:	7bbb      	ldrb	r3, [r7, #14]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d103      	bne.n	800b074 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2202      	movs	r2, #2
 800b070:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b072:	e145      	b.n	800b300 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b074:	7bbb      	ldrb	r3, [r7, #14]
 800b076:	2b03      	cmp	r3, #3
 800b078:	f040 8142 	bne.w	800b300 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b082:	3301      	adds	r3, #1
 800b084:	b2da      	uxtb	r2, r3
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b092:	2b03      	cmp	r3, #3
 800b094:	d903      	bls.n	800b09e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	220d      	movs	r2, #13
 800b09a:	701a      	strb	r2, [r3, #0]
      break;
 800b09c:	e130      	b.n	800b300 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	795b      	ldrb	r3, [r3, #5]
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f000 ff65 	bl	800bf74 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	791b      	ldrb	r3, [r3, #4]
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f000 ff5f 	bl	800bf74 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	701a      	strb	r2, [r3, #0]
      break;
 800b0c2:	e11d      	b.n	800b300 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b0c4:	2101      	movs	r1, #1
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f000 fa68 	bl	800b59c <USBH_SetAddress>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b0d0:	7bbb      	ldrb	r3, [r7, #14]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d132      	bne.n	800b13c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800b0d6:	2002      	movs	r0, #2
 800b0d8:	f001 fa42 	bl	800c560 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2201      	movs	r2, #1
 800b0e0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2203      	movs	r2, #3
 800b0e8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	7919      	ldrb	r1, [r3, #4]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b0fa:	687a      	ldr	r2, [r7, #4]
 800b0fc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b0fe:	b292      	uxth	r2, r2
 800b100:	9202      	str	r2, [sp, #8]
 800b102:	2200      	movs	r2, #0
 800b104:	9201      	str	r2, [sp, #4]
 800b106:	9300      	str	r3, [sp, #0]
 800b108:	4603      	mov	r3, r0
 800b10a:	2280      	movs	r2, #128	; 0x80
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f000 fee1 	bl	800bed4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	7959      	ldrb	r1, [r3, #5]
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b122:	687a      	ldr	r2, [r7, #4]
 800b124:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b126:	b292      	uxth	r2, r2
 800b128:	9202      	str	r2, [sp, #8]
 800b12a:	2200      	movs	r2, #0
 800b12c:	9201      	str	r2, [sp, #4]
 800b12e:	9300      	str	r3, [sp, #0]
 800b130:	4603      	mov	r3, r0
 800b132:	2200      	movs	r2, #0
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f000 fecd 	bl	800bed4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b13a:	e0e3      	b.n	800b304 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b13c:	7bbb      	ldrb	r3, [r7, #14]
 800b13e:	2b03      	cmp	r3, #3
 800b140:	f040 80e0 	bne.w	800b304 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	220d      	movs	r2, #13
 800b148:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2200      	movs	r2, #0
 800b14e:	705a      	strb	r2, [r3, #1]
      break;
 800b150:	e0d8      	b.n	800b304 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b152:	2109      	movs	r1, #9
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f000 f99d 	bl	800b494 <USBH_Get_CfgDesc>
 800b15a:	4603      	mov	r3, r0
 800b15c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b15e:	7bbb      	ldrb	r3, [r7, #14]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d103      	bne.n	800b16c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2204      	movs	r2, #4
 800b168:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b16a:	e0cd      	b.n	800b308 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b16c:	7bbb      	ldrb	r3, [r7, #14]
 800b16e:	2b03      	cmp	r3, #3
 800b170:	f040 80ca 	bne.w	800b308 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b17a:	3301      	adds	r3, #1
 800b17c:	b2da      	uxtb	r2, r3
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b18a:	2b03      	cmp	r3, #3
 800b18c:	d903      	bls.n	800b196 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	220d      	movs	r2, #13
 800b192:	701a      	strb	r2, [r3, #0]
      break;
 800b194:	e0b8      	b.n	800b308 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	795b      	ldrb	r3, [r3, #5]
 800b19a:	4619      	mov	r1, r3
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f000 fee9 	bl	800bf74 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	791b      	ldrb	r3, [r3, #4]
 800b1a6:	4619      	mov	r1, r3
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f000 fee3 	bl	800bf74 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	701a      	strb	r2, [r3, #0]
      break;
 800b1ba:	e0a5      	b.n	800b308 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f000 f965 	bl	800b494 <USBH_Get_CfgDesc>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b1ce:	7bbb      	ldrb	r3, [r7, #14]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d103      	bne.n	800b1dc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2205      	movs	r2, #5
 800b1d8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b1da:	e097      	b.n	800b30c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b1dc:	7bbb      	ldrb	r3, [r7, #14]
 800b1de:	2b03      	cmp	r3, #3
 800b1e0:	f040 8094 	bne.w	800b30c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b1ea:	3301      	adds	r3, #1
 800b1ec:	b2da      	uxtb	r2, r3
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b1fa:	2b03      	cmp	r3, #3
 800b1fc:	d903      	bls.n	800b206 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	220d      	movs	r2, #13
 800b202:	701a      	strb	r2, [r3, #0]
      break;
 800b204:	e082      	b.n	800b30c <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	795b      	ldrb	r3, [r3, #5]
 800b20a:	4619      	mov	r1, r3
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f000 feb1 	bl	800bf74 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	791b      	ldrb	r3, [r3, #4]
 800b216:	4619      	mov	r1, r3
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f000 feab 	bl	800bf74 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2200      	movs	r2, #0
 800b222:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2200      	movs	r2, #0
 800b228:	701a      	strb	r2, [r3, #0]
      break;
 800b22a:	e06f      	b.n	800b30c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b232:	2b00      	cmp	r3, #0
 800b234:	d019      	beq.n	800b26a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b242:	23ff      	movs	r3, #255	; 0xff
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f000 f949 	bl	800b4dc <USBH_Get_StringDesc>
 800b24a:	4603      	mov	r3, r0
 800b24c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b24e:	7bbb      	ldrb	r3, [r7, #14]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d103      	bne.n	800b25c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2206      	movs	r2, #6
 800b258:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b25a:	e059      	b.n	800b310 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b25c:	7bbb      	ldrb	r3, [r7, #14]
 800b25e:	2b03      	cmp	r3, #3
 800b260:	d156      	bne.n	800b310 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2206      	movs	r2, #6
 800b266:	705a      	strb	r2, [r3, #1]
      break;
 800b268:	e052      	b.n	800b310 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2206      	movs	r2, #6
 800b26e:	705a      	strb	r2, [r3, #1]
      break;
 800b270:	e04e      	b.n	800b310 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d019      	beq.n	800b2b0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b288:	23ff      	movs	r3, #255	; 0xff
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f000 f926 	bl	800b4dc <USBH_Get_StringDesc>
 800b290:	4603      	mov	r3, r0
 800b292:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b294:	7bbb      	ldrb	r3, [r7, #14]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d103      	bne.n	800b2a2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2207      	movs	r2, #7
 800b29e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b2a0:	e038      	b.n	800b314 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b2a2:	7bbb      	ldrb	r3, [r7, #14]
 800b2a4:	2b03      	cmp	r3, #3
 800b2a6:	d135      	bne.n	800b314 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2207      	movs	r2, #7
 800b2ac:	705a      	strb	r2, [r3, #1]
      break;
 800b2ae:	e031      	b.n	800b314 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2207      	movs	r2, #7
 800b2b4:	705a      	strb	r2, [r3, #1]
      break;
 800b2b6:	e02d      	b.n	800b314 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d017      	beq.n	800b2f2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b2ce:	23ff      	movs	r3, #255	; 0xff
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f000 f903 	bl	800b4dc <USBH_Get_StringDesc>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b2da:	7bbb      	ldrb	r3, [r7, #14]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d102      	bne.n	800b2e6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b2e4:	e018      	b.n	800b318 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b2e6:	7bbb      	ldrb	r3, [r7, #14]
 800b2e8:	2b03      	cmp	r3, #3
 800b2ea:	d115      	bne.n	800b318 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	73fb      	strb	r3, [r7, #15]
      break;
 800b2f0:	e012      	b.n	800b318 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	73fb      	strb	r3, [r7, #15]
      break;
 800b2f6:	e00f      	b.n	800b318 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800b2f8:	bf00      	nop
 800b2fa:	e00e      	b.n	800b31a <USBH_HandleEnum+0x3be>
      break;
 800b2fc:	bf00      	nop
 800b2fe:	e00c      	b.n	800b31a <USBH_HandleEnum+0x3be>
      break;
 800b300:	bf00      	nop
 800b302:	e00a      	b.n	800b31a <USBH_HandleEnum+0x3be>
      break;
 800b304:	bf00      	nop
 800b306:	e008      	b.n	800b31a <USBH_HandleEnum+0x3be>
      break;
 800b308:	bf00      	nop
 800b30a:	e006      	b.n	800b31a <USBH_HandleEnum+0x3be>
      break;
 800b30c:	bf00      	nop
 800b30e:	e004      	b.n	800b31a <USBH_HandleEnum+0x3be>
      break;
 800b310:	bf00      	nop
 800b312:	e002      	b.n	800b31a <USBH_HandleEnum+0x3be>
      break;
 800b314:	bf00      	nop
 800b316:	e000      	b.n	800b31a <USBH_HandleEnum+0x3be>
      break;
 800b318:	bf00      	nop
  }
  return Status;
 800b31a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3710      	adds	r7, #16
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}

0800b324 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b324:	b480      	push	{r7}
 800b326:	b083      	sub	sp, #12
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
 800b32c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	683a      	ldr	r2, [r7, #0]
 800b332:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800b336:	bf00      	nop
 800b338:	370c      	adds	r7, #12
 800b33a:	46bd      	mov	sp, r7
 800b33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b340:	4770      	bx	lr

0800b342 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b342:	b580      	push	{r7, lr}
 800b344:	b082      	sub	sp, #8
 800b346:	af00      	add	r7, sp, #0
 800b348:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b350:	1c5a      	adds	r2, r3, #1
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f000 f804 	bl	800b366 <USBH_HandleSof>
}
 800b35e:	bf00      	nop
 800b360:	3708      	adds	r7, #8
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}

0800b366 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b366:	b580      	push	{r7, lr}
 800b368:	b082      	sub	sp, #8
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	781b      	ldrb	r3, [r3, #0]
 800b372:	b2db      	uxtb	r3, r3
 800b374:	2b0b      	cmp	r3, #11
 800b376:	d10a      	bne.n	800b38e <USBH_HandleSof+0x28>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d005      	beq.n	800b38e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b388:	699b      	ldr	r3, [r3, #24]
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	4798      	blx	r3
  }
}
 800b38e:	bf00      	nop
 800b390:	3708      	adds	r7, #8
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}

0800b396 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b396:	b480      	push	{r7}
 800b398:	b083      	sub	sp, #12
 800b39a:	af00      	add	r7, sp, #0
 800b39c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800b3a6:	bf00      	nop
}
 800b3a8:	370c      	adds	r7, #12
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b0:	4770      	bx	lr

0800b3b2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b3b2:	b480      	push	{r7}
 800b3b4:	b083      	sub	sp, #12
 800b3b6:	af00      	add	r7, sp, #0
 800b3b8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b3c2:	bf00      	nop
}
 800b3c4:	370c      	adds	r7, #12
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3cc:	4770      	bx	lr

0800b3ce <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b3ce:	b480      	push	{r7}
 800b3d0:	b083      	sub	sp, #12
 800b3d2:	af00      	add	r7, sp, #0
 800b3d4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2201      	movs	r2, #1
 800b3da:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b3ee:	2300      	movs	r3, #0
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	370c      	adds	r7, #12
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr

0800b3fc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b082      	sub	sp, #8
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2201      	movs	r2, #1
 800b408:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2200      	movs	r2, #0
 800b410:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2200      	movs	r2, #0
 800b418:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f000 ff56 	bl	800c2ce <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	791b      	ldrb	r3, [r3, #4]
 800b426:	4619      	mov	r1, r3
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f000 fda3 	bl	800bf74 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	795b      	ldrb	r3, [r3, #5]
 800b432:	4619      	mov	r1, r3
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f000 fd9d 	bl	800bf74 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b43a:	2300      	movs	r3, #0
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	3708      	adds	r7, #8
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}

0800b444 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b086      	sub	sp, #24
 800b448:	af02      	add	r7, sp, #8
 800b44a:	6078      	str	r0, [r7, #4]
 800b44c:	460b      	mov	r3, r1
 800b44e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b456:	78fb      	ldrb	r3, [r7, #3]
 800b458:	b29b      	uxth	r3, r3
 800b45a:	9300      	str	r3, [sp, #0]
 800b45c:	4613      	mov	r3, r2
 800b45e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b462:	2100      	movs	r1, #0
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f000 f864 	bl	800b532 <USBH_GetDescriptor>
 800b46a:	4603      	mov	r3, r0
 800b46c:	73fb      	strb	r3, [r7, #15]
 800b46e:	7bfb      	ldrb	r3, [r7, #15]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d10a      	bne.n	800b48a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f203 3026 	addw	r0, r3, #806	; 0x326
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b480:	78fa      	ldrb	r2, [r7, #3]
 800b482:	b292      	uxth	r2, r2
 800b484:	4619      	mov	r1, r3
 800b486:	f000 f918 	bl	800b6ba <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b48a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3710      	adds	r7, #16
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}

0800b494 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b494:	b580      	push	{r7, lr}
 800b496:	b086      	sub	sp, #24
 800b498:	af02      	add	r7, sp, #8
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	460b      	mov	r3, r1
 800b49e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	331c      	adds	r3, #28
 800b4a4:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b4a6:	887b      	ldrh	r3, [r7, #2]
 800b4a8:	9300      	str	r3, [sp, #0]
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b4b0:	2100      	movs	r1, #0
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f000 f83d 	bl	800b532 <USBH_GetDescriptor>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	72fb      	strb	r3, [r7, #11]
 800b4bc:	7afb      	ldrb	r3, [r7, #11]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d107      	bne.n	800b4d2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b4c8:	887a      	ldrh	r2, [r7, #2]
 800b4ca:	68f9      	ldr	r1, [r7, #12]
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f000 f964 	bl	800b79a <USBH_ParseCfgDesc>
  }

  return status;
 800b4d2:	7afb      	ldrb	r3, [r7, #11]
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3710      	adds	r7, #16
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}

0800b4dc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b088      	sub	sp, #32
 800b4e0:	af02      	add	r7, sp, #8
 800b4e2:	60f8      	str	r0, [r7, #12]
 800b4e4:	607a      	str	r2, [r7, #4]
 800b4e6:	461a      	mov	r2, r3
 800b4e8:	460b      	mov	r3, r1
 800b4ea:	72fb      	strb	r3, [r7, #11]
 800b4ec:	4613      	mov	r3, r2
 800b4ee:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800b4f0:	7afb      	ldrb	r3, [r7, #11]
 800b4f2:	b29b      	uxth	r3, r3
 800b4f4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b4f8:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b500:	893b      	ldrh	r3, [r7, #8]
 800b502:	9300      	str	r3, [sp, #0]
 800b504:	460b      	mov	r3, r1
 800b506:	2100      	movs	r1, #0
 800b508:	68f8      	ldr	r0, [r7, #12]
 800b50a:	f000 f812 	bl	800b532 <USBH_GetDescriptor>
 800b50e:	4603      	mov	r3, r0
 800b510:	75fb      	strb	r3, [r7, #23]
 800b512:	7dfb      	ldrb	r3, [r7, #23]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d107      	bne.n	800b528 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b51e:	893a      	ldrh	r2, [r7, #8]
 800b520:	6879      	ldr	r1, [r7, #4]
 800b522:	4618      	mov	r0, r3
 800b524:	f000 fa37 	bl	800b996 <USBH_ParseStringDesc>
  }

  return status;
 800b528:	7dfb      	ldrb	r3, [r7, #23]
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3718      	adds	r7, #24
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}

0800b532 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b532:	b580      	push	{r7, lr}
 800b534:	b084      	sub	sp, #16
 800b536:	af00      	add	r7, sp, #0
 800b538:	60f8      	str	r0, [r7, #12]
 800b53a:	607b      	str	r3, [r7, #4]
 800b53c:	460b      	mov	r3, r1
 800b53e:	72fb      	strb	r3, [r7, #11]
 800b540:	4613      	mov	r3, r2
 800b542:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	789b      	ldrb	r3, [r3, #2]
 800b548:	2b01      	cmp	r3, #1
 800b54a:	d11c      	bne.n	800b586 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b54c:	7afb      	ldrb	r3, [r7, #11]
 800b54e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b552:	b2da      	uxtb	r2, r3
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	2206      	movs	r2, #6
 800b55c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	893a      	ldrh	r2, [r7, #8]
 800b562:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b564:	893b      	ldrh	r3, [r7, #8]
 800b566:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b56a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b56e:	d104      	bne.n	800b57a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	f240 4209 	movw	r2, #1033	; 0x409
 800b576:	829a      	strh	r2, [r3, #20]
 800b578:	e002      	b.n	800b580 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	2200      	movs	r2, #0
 800b57e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	8b3a      	ldrh	r2, [r7, #24]
 800b584:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b586:	8b3b      	ldrh	r3, [r7, #24]
 800b588:	461a      	mov	r2, r3
 800b58a:	6879      	ldr	r1, [r7, #4]
 800b58c:	68f8      	ldr	r0, [r7, #12]
 800b58e:	f000 fa50 	bl	800ba32 <USBH_CtlReq>
 800b592:	4603      	mov	r3, r0
}
 800b594:	4618      	mov	r0, r3
 800b596:	3710      	adds	r7, #16
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}

0800b59c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b082      	sub	sp, #8
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	460b      	mov	r3, r1
 800b5a6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	789b      	ldrb	r3, [r3, #2]
 800b5ac:	2b01      	cmp	r3, #1
 800b5ae:	d10f      	bne.n	800b5d0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2205      	movs	r2, #5
 800b5ba:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b5bc:	78fb      	ldrb	r3, [r7, #3]
 800b5be:	b29a      	uxth	r2, r3
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	2100      	movs	r1, #0
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f000 fa2c 	bl	800ba32 <USBH_CtlReq>
 800b5da:	4603      	mov	r3, r0
}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	3708      	adds	r7, #8
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}

0800b5e4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b082      	sub	sp, #8
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
 800b5ec:	460b      	mov	r3, r1
 800b5ee:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	789b      	ldrb	r3, [r3, #2]
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	d10e      	bne.n	800b616 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2209      	movs	r2, #9
 800b602:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	887a      	ldrh	r2, [r7, #2]
 800b608:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2200      	movs	r2, #0
 800b60e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2200      	movs	r2, #0
 800b614:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b616:	2200      	movs	r2, #0
 800b618:	2100      	movs	r1, #0
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f000 fa09 	bl	800ba32 <USBH_CtlReq>
 800b620:	4603      	mov	r3, r0
}
 800b622:	4618      	mov	r0, r3
 800b624:	3708      	adds	r7, #8
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}

0800b62a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b62a:	b580      	push	{r7, lr}
 800b62c:	b082      	sub	sp, #8
 800b62e:	af00      	add	r7, sp, #0
 800b630:	6078      	str	r0, [r7, #4]
 800b632:	460b      	mov	r3, r1
 800b634:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	789b      	ldrb	r3, [r3, #2]
 800b63a:	2b01      	cmp	r3, #1
 800b63c:	d10f      	bne.n	800b65e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2200      	movs	r2, #0
 800b642:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2203      	movs	r2, #3
 800b648:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b64a:	78fb      	ldrb	r3, [r7, #3]
 800b64c:	b29a      	uxth	r2, r3
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2200      	movs	r2, #0
 800b656:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2200      	movs	r2, #0
 800b65c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b65e:	2200      	movs	r2, #0
 800b660:	2100      	movs	r1, #0
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f000 f9e5 	bl	800ba32 <USBH_CtlReq>
 800b668:	4603      	mov	r3, r0
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3708      	adds	r7, #8
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}

0800b672 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b672:	b580      	push	{r7, lr}
 800b674:	b082      	sub	sp, #8
 800b676:	af00      	add	r7, sp, #0
 800b678:	6078      	str	r0, [r7, #4]
 800b67a:	460b      	mov	r3, r1
 800b67c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	789b      	ldrb	r3, [r3, #2]
 800b682:	2b01      	cmp	r3, #1
 800b684:	d10f      	bne.n	800b6a6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2202      	movs	r2, #2
 800b68a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2201      	movs	r2, #1
 800b690:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2200      	movs	r2, #0
 800b696:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b698:	78fb      	ldrb	r3, [r7, #3]
 800b69a:	b29a      	uxth	r2, r3
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	2100      	movs	r1, #0
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f000 f9c1 	bl	800ba32 <USBH_CtlReq>
 800b6b0:	4603      	mov	r3, r0
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3708      	adds	r7, #8
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}

0800b6ba <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b6ba:	b480      	push	{r7}
 800b6bc:	b085      	sub	sp, #20
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	60f8      	str	r0, [r7, #12]
 800b6c2:	60b9      	str	r1, [r7, #8]
 800b6c4:	4613      	mov	r3, r2
 800b6c6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	781a      	ldrb	r2, [r3, #0]
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	785a      	ldrb	r2, [r3, #1]
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	3302      	adds	r3, #2
 800b6dc:	781b      	ldrb	r3, [r3, #0]
 800b6de:	b29a      	uxth	r2, r3
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	3303      	adds	r3, #3
 800b6e4:	781b      	ldrb	r3, [r3, #0]
 800b6e6:	b29b      	uxth	r3, r3
 800b6e8:	021b      	lsls	r3, r3, #8
 800b6ea:	b29b      	uxth	r3, r3
 800b6ec:	4313      	orrs	r3, r2
 800b6ee:	b29a      	uxth	r2, r3
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	791a      	ldrb	r2, [r3, #4]
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	795a      	ldrb	r2, [r3, #5]
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	799a      	ldrb	r2, [r3, #6]
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	79da      	ldrb	r2, [r3, #7]
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800b714:	88fb      	ldrh	r3, [r7, #6]
 800b716:	2b08      	cmp	r3, #8
 800b718:	d939      	bls.n	800b78e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	3308      	adds	r3, #8
 800b71e:	781b      	ldrb	r3, [r3, #0]
 800b720:	b29a      	uxth	r2, r3
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	3309      	adds	r3, #9
 800b726:	781b      	ldrb	r3, [r3, #0]
 800b728:	b29b      	uxth	r3, r3
 800b72a:	021b      	lsls	r3, r3, #8
 800b72c:	b29b      	uxth	r3, r3
 800b72e:	4313      	orrs	r3, r2
 800b730:	b29a      	uxth	r2, r3
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	330a      	adds	r3, #10
 800b73a:	781b      	ldrb	r3, [r3, #0]
 800b73c:	b29a      	uxth	r2, r3
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	330b      	adds	r3, #11
 800b742:	781b      	ldrb	r3, [r3, #0]
 800b744:	b29b      	uxth	r3, r3
 800b746:	021b      	lsls	r3, r3, #8
 800b748:	b29b      	uxth	r3, r3
 800b74a:	4313      	orrs	r3, r2
 800b74c:	b29a      	uxth	r2, r3
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	330c      	adds	r3, #12
 800b756:	781b      	ldrb	r3, [r3, #0]
 800b758:	b29a      	uxth	r2, r3
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	330d      	adds	r3, #13
 800b75e:	781b      	ldrb	r3, [r3, #0]
 800b760:	b29b      	uxth	r3, r3
 800b762:	021b      	lsls	r3, r3, #8
 800b764:	b29b      	uxth	r3, r3
 800b766:	4313      	orrs	r3, r2
 800b768:	b29a      	uxth	r2, r3
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	7b9a      	ldrb	r2, [r3, #14]
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	7bda      	ldrb	r2, [r3, #15]
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	7c1a      	ldrb	r2, [r3, #16]
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	7c5a      	ldrb	r2, [r3, #17]
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	745a      	strb	r2, [r3, #17]
  }
}
 800b78e:	bf00      	nop
 800b790:	3714      	adds	r7, #20
 800b792:	46bd      	mov	sp, r7
 800b794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b798:	4770      	bx	lr

0800b79a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800b79a:	b580      	push	{r7, lr}
 800b79c:	b08a      	sub	sp, #40	; 0x28
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	60f8      	str	r0, [r7, #12]
 800b7a2:	60b9      	str	r1, [r7, #8]
 800b7a4:	4613      	mov	r3, r2
 800b7a6:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	781a      	ldrb	r2, [r3, #0]
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	785a      	ldrb	r2, [r3, #1]
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	3302      	adds	r3, #2
 800b7d0:	781b      	ldrb	r3, [r3, #0]
 800b7d2:	b29a      	uxth	r2, r3
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	3303      	adds	r3, #3
 800b7d8:	781b      	ldrb	r3, [r3, #0]
 800b7da:	b29b      	uxth	r3, r3
 800b7dc:	021b      	lsls	r3, r3, #8
 800b7de:	b29b      	uxth	r3, r3
 800b7e0:	4313      	orrs	r3, r2
 800b7e2:	b29a      	uxth	r2, r3
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	791a      	ldrb	r2, [r3, #4]
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	795a      	ldrb	r2, [r3, #5]
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	799a      	ldrb	r2, [r3, #6]
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	79da      	ldrb	r2, [r3, #7]
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	7a1a      	ldrb	r2, [r3, #8]
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b810:	88fb      	ldrh	r3, [r7, #6]
 800b812:	2b09      	cmp	r3, #9
 800b814:	d95f      	bls.n	800b8d6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800b816:	2309      	movs	r3, #9
 800b818:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800b81a:	2300      	movs	r3, #0
 800b81c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b81e:	e051      	b.n	800b8c4 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b820:	f107 0316 	add.w	r3, r7, #22
 800b824:	4619      	mov	r1, r3
 800b826:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b828:	f000 f8e8 	bl	800b9fc <USBH_GetNextDesc>
 800b82c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800b82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b830:	785b      	ldrb	r3, [r3, #1]
 800b832:	2b04      	cmp	r3, #4
 800b834:	d146      	bne.n	800b8c4 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800b836:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b83a:	221a      	movs	r2, #26
 800b83c:	fb02 f303 	mul.w	r3, r2, r3
 800b840:	3308      	adds	r3, #8
 800b842:	68fa      	ldr	r2, [r7, #12]
 800b844:	4413      	add	r3, r2
 800b846:	3302      	adds	r3, #2
 800b848:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b84a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b84c:	69f8      	ldr	r0, [r7, #28]
 800b84e:	f000 f846 	bl	800b8de <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b852:	2300      	movs	r3, #0
 800b854:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800b858:	2300      	movs	r3, #0
 800b85a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b85c:	e022      	b.n	800b8a4 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b85e:	f107 0316 	add.w	r3, r7, #22
 800b862:	4619      	mov	r1, r3
 800b864:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b866:	f000 f8c9 	bl	800b9fc <USBH_GetNextDesc>
 800b86a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800b86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b86e:	785b      	ldrb	r3, [r3, #1]
 800b870:	2b05      	cmp	r3, #5
 800b872:	d117      	bne.n	800b8a4 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b874:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b878:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b87c:	3201      	adds	r2, #1
 800b87e:	00d2      	lsls	r2, r2, #3
 800b880:	211a      	movs	r1, #26
 800b882:	fb01 f303 	mul.w	r3, r1, r3
 800b886:	4413      	add	r3, r2
 800b888:	3308      	adds	r3, #8
 800b88a:	68fa      	ldr	r2, [r7, #12]
 800b88c:	4413      	add	r3, r2
 800b88e:	3304      	adds	r3, #4
 800b890:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800b892:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b894:	69b8      	ldr	r0, [r7, #24]
 800b896:	f000 f851 	bl	800b93c <USBH_ParseEPDesc>
            ep_ix++;
 800b89a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b89e:	3301      	adds	r3, #1
 800b8a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b8a4:	69fb      	ldr	r3, [r7, #28]
 800b8a6:	791b      	ldrb	r3, [r3, #4]
 800b8a8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b8ac:	429a      	cmp	r2, r3
 800b8ae:	d204      	bcs.n	800b8ba <USBH_ParseCfgDesc+0x120>
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	885a      	ldrh	r2, [r3, #2]
 800b8b4:	8afb      	ldrh	r3, [r7, #22]
 800b8b6:	429a      	cmp	r2, r3
 800b8b8:	d8d1      	bhi.n	800b85e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800b8ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b8be:	3301      	adds	r3, #1
 800b8c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b8c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b8c8:	2b01      	cmp	r3, #1
 800b8ca:	d804      	bhi.n	800b8d6 <USBH_ParseCfgDesc+0x13c>
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	885a      	ldrh	r2, [r3, #2]
 800b8d0:	8afb      	ldrh	r3, [r7, #22]
 800b8d2:	429a      	cmp	r2, r3
 800b8d4:	d8a4      	bhi.n	800b820 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800b8d6:	bf00      	nop
 800b8d8:	3728      	adds	r7, #40	; 0x28
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd80      	pop	{r7, pc}

0800b8de <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b8de:	b480      	push	{r7}
 800b8e0:	b083      	sub	sp, #12
 800b8e2:	af00      	add	r7, sp, #0
 800b8e4:	6078      	str	r0, [r7, #4]
 800b8e6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	781a      	ldrb	r2, [r3, #0]
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	785a      	ldrb	r2, [r3, #1]
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	789a      	ldrb	r2, [r3, #2]
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	78da      	ldrb	r2, [r3, #3]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	791a      	ldrb	r2, [r3, #4]
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	795a      	ldrb	r2, [r3, #5]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	799a      	ldrb	r2, [r3, #6]
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	79da      	ldrb	r2, [r3, #7]
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	7a1a      	ldrb	r2, [r3, #8]
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	721a      	strb	r2, [r3, #8]
}
 800b930:	bf00      	nop
 800b932:	370c      	adds	r7, #12
 800b934:	46bd      	mov	sp, r7
 800b936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93a:	4770      	bx	lr

0800b93c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800b93c:	b480      	push	{r7}
 800b93e:	b083      	sub	sp, #12
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
 800b944:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	781a      	ldrb	r2, [r3, #0]
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	785a      	ldrb	r2, [r3, #1]
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	789a      	ldrb	r2, [r3, #2]
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	78da      	ldrb	r2, [r3, #3]
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	3304      	adds	r3, #4
 800b96a:	781b      	ldrb	r3, [r3, #0]
 800b96c:	b29a      	uxth	r2, r3
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	3305      	adds	r3, #5
 800b972:	781b      	ldrb	r3, [r3, #0]
 800b974:	b29b      	uxth	r3, r3
 800b976:	021b      	lsls	r3, r3, #8
 800b978:	b29b      	uxth	r3, r3
 800b97a:	4313      	orrs	r3, r2
 800b97c:	b29a      	uxth	r2, r3
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	799a      	ldrb	r2, [r3, #6]
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	719a      	strb	r2, [r3, #6]
}
 800b98a:	bf00      	nop
 800b98c:	370c      	adds	r7, #12
 800b98e:	46bd      	mov	sp, r7
 800b990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b994:	4770      	bx	lr

0800b996 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b996:	b480      	push	{r7}
 800b998:	b087      	sub	sp, #28
 800b99a:	af00      	add	r7, sp, #0
 800b99c:	60f8      	str	r0, [r7, #12]
 800b99e:	60b9      	str	r1, [r7, #8]
 800b9a0:	4613      	mov	r3, r2
 800b9a2:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	3301      	adds	r3, #1
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	2b03      	cmp	r3, #3
 800b9ac:	d120      	bne.n	800b9f0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	781b      	ldrb	r3, [r3, #0]
 800b9b2:	1e9a      	subs	r2, r3, #2
 800b9b4:	88fb      	ldrh	r3, [r7, #6]
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	bf28      	it	cs
 800b9ba:	4613      	movcs	r3, r2
 800b9bc:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	3302      	adds	r3, #2
 800b9c2:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	82fb      	strh	r3, [r7, #22]
 800b9c8:	e00b      	b.n	800b9e2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b9ca:	8afb      	ldrh	r3, [r7, #22]
 800b9cc:	68fa      	ldr	r2, [r7, #12]
 800b9ce:	4413      	add	r3, r2
 800b9d0:	781a      	ldrb	r2, [r3, #0]
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	3301      	adds	r3, #1
 800b9da:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b9dc:	8afb      	ldrh	r3, [r7, #22]
 800b9de:	3302      	adds	r3, #2
 800b9e0:	82fb      	strh	r3, [r7, #22]
 800b9e2:	8afa      	ldrh	r2, [r7, #22]
 800b9e4:	8abb      	ldrh	r3, [r7, #20]
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	d3ef      	bcc.n	800b9ca <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	701a      	strb	r2, [r3, #0]
  }
}
 800b9f0:	bf00      	nop
 800b9f2:	371c      	adds	r7, #28
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fa:	4770      	bx	lr

0800b9fc <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b085      	sub	sp, #20
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
 800ba04:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	881a      	ldrh	r2, [r3, #0]
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	781b      	ldrb	r3, [r3, #0]
 800ba0e:	b29b      	uxth	r3, r3
 800ba10:	4413      	add	r3, r2
 800ba12:	b29a      	uxth	r2, r3
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	781b      	ldrb	r3, [r3, #0]
 800ba1c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	4413      	add	r3, r2
 800ba22:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ba24:	68fb      	ldr	r3, [r7, #12]
}
 800ba26:	4618      	mov	r0, r3
 800ba28:	3714      	adds	r7, #20
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba30:	4770      	bx	lr

0800ba32 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ba32:	b580      	push	{r7, lr}
 800ba34:	b086      	sub	sp, #24
 800ba36:	af00      	add	r7, sp, #0
 800ba38:	60f8      	str	r0, [r7, #12]
 800ba3a:	60b9      	str	r1, [r7, #8]
 800ba3c:	4613      	mov	r3, r2
 800ba3e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ba40:	2301      	movs	r3, #1
 800ba42:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	789b      	ldrb	r3, [r3, #2]
 800ba48:	2b01      	cmp	r3, #1
 800ba4a:	d002      	beq.n	800ba52 <USBH_CtlReq+0x20>
 800ba4c:	2b02      	cmp	r3, #2
 800ba4e:	d00f      	beq.n	800ba70 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800ba50:	e027      	b.n	800baa2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	68ba      	ldr	r2, [r7, #8]
 800ba56:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	88fa      	ldrh	r2, [r7, #6]
 800ba5c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	2201      	movs	r2, #1
 800ba62:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	2202      	movs	r2, #2
 800ba68:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	75fb      	strb	r3, [r7, #23]
      break;
 800ba6e:	e018      	b.n	800baa2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800ba70:	68f8      	ldr	r0, [r7, #12]
 800ba72:	f000 f81b 	bl	800baac <USBH_HandleControl>
 800ba76:	4603      	mov	r3, r0
 800ba78:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ba7a:	7dfb      	ldrb	r3, [r7, #23]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d002      	beq.n	800ba86 <USBH_CtlReq+0x54>
 800ba80:	7dfb      	ldrb	r3, [r7, #23]
 800ba82:	2b03      	cmp	r3, #3
 800ba84:	d106      	bne.n	800ba94 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	2201      	movs	r2, #1
 800ba8a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	2200      	movs	r2, #0
 800ba90:	761a      	strb	r2, [r3, #24]
      break;
 800ba92:	e005      	b.n	800baa0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800ba94:	7dfb      	ldrb	r3, [r7, #23]
 800ba96:	2b02      	cmp	r3, #2
 800ba98:	d102      	bne.n	800baa0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	2201      	movs	r2, #1
 800ba9e:	709a      	strb	r2, [r3, #2]
      break;
 800baa0:	bf00      	nop
  }
  return status;
 800baa2:	7dfb      	ldrb	r3, [r7, #23]
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	3718      	adds	r7, #24
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}

0800baac <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b086      	sub	sp, #24
 800bab0:	af02      	add	r7, sp, #8
 800bab2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800bab4:	2301      	movs	r3, #1
 800bab6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bab8:	2300      	movs	r3, #0
 800baba:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	7e1b      	ldrb	r3, [r3, #24]
 800bac0:	3b01      	subs	r3, #1
 800bac2:	2b0a      	cmp	r3, #10
 800bac4:	f200 8156 	bhi.w	800bd74 <USBH_HandleControl+0x2c8>
 800bac8:	a201      	add	r2, pc, #4	; (adr r2, 800bad0 <USBH_HandleControl+0x24>)
 800baca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bace:	bf00      	nop
 800bad0:	0800bafd 	.word	0x0800bafd
 800bad4:	0800bb17 	.word	0x0800bb17
 800bad8:	0800bb81 	.word	0x0800bb81
 800badc:	0800bba7 	.word	0x0800bba7
 800bae0:	0800bbdf 	.word	0x0800bbdf
 800bae4:	0800bc09 	.word	0x0800bc09
 800bae8:	0800bc5b 	.word	0x0800bc5b
 800baec:	0800bc7d 	.word	0x0800bc7d
 800baf0:	0800bcb9 	.word	0x0800bcb9
 800baf4:	0800bcdf 	.word	0x0800bcdf
 800baf8:	0800bd1d 	.word	0x0800bd1d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f103 0110 	add.w	r1, r3, #16
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	795b      	ldrb	r3, [r3, #5]
 800bb06:	461a      	mov	r2, r3
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f000 f943 	bl	800bd94 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2202      	movs	r2, #2
 800bb12:	761a      	strb	r2, [r3, #24]
      break;
 800bb14:	e139      	b.n	800bd8a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	795b      	ldrb	r3, [r3, #5]
 800bb1a:	4619      	mov	r1, r3
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f000 fcc5 	bl	800c4ac <USBH_LL_GetURBState>
 800bb22:	4603      	mov	r3, r0
 800bb24:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800bb26:	7bbb      	ldrb	r3, [r7, #14]
 800bb28:	2b01      	cmp	r3, #1
 800bb2a:	d11e      	bne.n	800bb6a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	7c1b      	ldrb	r3, [r3, #16]
 800bb30:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bb34:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	8adb      	ldrh	r3, [r3, #22]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d00a      	beq.n	800bb54 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800bb3e:	7b7b      	ldrb	r3, [r7, #13]
 800bb40:	2b80      	cmp	r3, #128	; 0x80
 800bb42:	d103      	bne.n	800bb4c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2203      	movs	r2, #3
 800bb48:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bb4a:	e115      	b.n	800bd78 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2205      	movs	r2, #5
 800bb50:	761a      	strb	r2, [r3, #24]
      break;
 800bb52:	e111      	b.n	800bd78 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800bb54:	7b7b      	ldrb	r3, [r7, #13]
 800bb56:	2b80      	cmp	r3, #128	; 0x80
 800bb58:	d103      	bne.n	800bb62 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2209      	movs	r2, #9
 800bb5e:	761a      	strb	r2, [r3, #24]
      break;
 800bb60:	e10a      	b.n	800bd78 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2207      	movs	r2, #7
 800bb66:	761a      	strb	r2, [r3, #24]
      break;
 800bb68:	e106      	b.n	800bd78 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800bb6a:	7bbb      	ldrb	r3, [r7, #14]
 800bb6c:	2b04      	cmp	r3, #4
 800bb6e:	d003      	beq.n	800bb78 <USBH_HandleControl+0xcc>
 800bb70:	7bbb      	ldrb	r3, [r7, #14]
 800bb72:	2b02      	cmp	r3, #2
 800bb74:	f040 8100 	bne.w	800bd78 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	220b      	movs	r2, #11
 800bb7c:	761a      	strb	r2, [r3, #24]
      break;
 800bb7e:	e0fb      	b.n	800bd78 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bb86:	b29a      	uxth	r2, r3
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6899      	ldr	r1, [r3, #8]
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	899a      	ldrh	r2, [r3, #12]
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	791b      	ldrb	r3, [r3, #4]
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	f000 f93a 	bl	800be12 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2204      	movs	r2, #4
 800bba2:	761a      	strb	r2, [r3, #24]
      break;
 800bba4:	e0f1      	b.n	800bd8a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	791b      	ldrb	r3, [r3, #4]
 800bbaa:	4619      	mov	r1, r3
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	f000 fc7d 	bl	800c4ac <USBH_LL_GetURBState>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800bbb6:	7bbb      	ldrb	r3, [r7, #14]
 800bbb8:	2b01      	cmp	r3, #1
 800bbba:	d102      	bne.n	800bbc2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2209      	movs	r2, #9
 800bbc0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800bbc2:	7bbb      	ldrb	r3, [r7, #14]
 800bbc4:	2b05      	cmp	r3, #5
 800bbc6:	d102      	bne.n	800bbce <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800bbc8:	2303      	movs	r3, #3
 800bbca:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bbcc:	e0d6      	b.n	800bd7c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800bbce:	7bbb      	ldrb	r3, [r7, #14]
 800bbd0:	2b04      	cmp	r3, #4
 800bbd2:	f040 80d3 	bne.w	800bd7c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	220b      	movs	r2, #11
 800bbda:	761a      	strb	r2, [r3, #24]
      break;
 800bbdc:	e0ce      	b.n	800bd7c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6899      	ldr	r1, [r3, #8]
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	899a      	ldrh	r2, [r3, #12]
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	795b      	ldrb	r3, [r3, #5]
 800bbea:	2001      	movs	r0, #1
 800bbec:	9000      	str	r0, [sp, #0]
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f000 f8ea 	bl	800bdc8 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bbfa:	b29a      	uxth	r2, r3
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2206      	movs	r2, #6
 800bc04:	761a      	strb	r2, [r3, #24]
      break;
 800bc06:	e0c0      	b.n	800bd8a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	795b      	ldrb	r3, [r3, #5]
 800bc0c:	4619      	mov	r1, r3
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f000 fc4c 	bl	800c4ac <USBH_LL_GetURBState>
 800bc14:	4603      	mov	r3, r0
 800bc16:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bc18:	7bbb      	ldrb	r3, [r7, #14]
 800bc1a:	2b01      	cmp	r3, #1
 800bc1c:	d103      	bne.n	800bc26 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2207      	movs	r2, #7
 800bc22:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bc24:	e0ac      	b.n	800bd80 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800bc26:	7bbb      	ldrb	r3, [r7, #14]
 800bc28:	2b05      	cmp	r3, #5
 800bc2a:	d105      	bne.n	800bc38 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	220c      	movs	r2, #12
 800bc30:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800bc32:	2303      	movs	r3, #3
 800bc34:	73fb      	strb	r3, [r7, #15]
      break;
 800bc36:	e0a3      	b.n	800bd80 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bc38:	7bbb      	ldrb	r3, [r7, #14]
 800bc3a:	2b02      	cmp	r3, #2
 800bc3c:	d103      	bne.n	800bc46 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2205      	movs	r2, #5
 800bc42:	761a      	strb	r2, [r3, #24]
      break;
 800bc44:	e09c      	b.n	800bd80 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800bc46:	7bbb      	ldrb	r3, [r7, #14]
 800bc48:	2b04      	cmp	r3, #4
 800bc4a:	f040 8099 	bne.w	800bd80 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	220b      	movs	r2, #11
 800bc52:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800bc54:	2302      	movs	r3, #2
 800bc56:	73fb      	strb	r3, [r7, #15]
      break;
 800bc58:	e092      	b.n	800bd80 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	791b      	ldrb	r3, [r3, #4]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	2100      	movs	r1, #0
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f000 f8d5 	bl	800be12 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bc6e:	b29a      	uxth	r2, r3
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2208      	movs	r2, #8
 800bc78:	761a      	strb	r2, [r3, #24]

      break;
 800bc7a:	e086      	b.n	800bd8a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	791b      	ldrb	r3, [r3, #4]
 800bc80:	4619      	mov	r1, r3
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	f000 fc12 	bl	800c4ac <USBH_LL_GetURBState>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bc8c:	7bbb      	ldrb	r3, [r7, #14]
 800bc8e:	2b01      	cmp	r3, #1
 800bc90:	d105      	bne.n	800bc9e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	220d      	movs	r2, #13
 800bc96:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bc9c:	e072      	b.n	800bd84 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800bc9e:	7bbb      	ldrb	r3, [r7, #14]
 800bca0:	2b04      	cmp	r3, #4
 800bca2:	d103      	bne.n	800bcac <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	220b      	movs	r2, #11
 800bca8:	761a      	strb	r2, [r3, #24]
      break;
 800bcaa:	e06b      	b.n	800bd84 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800bcac:	7bbb      	ldrb	r3, [r7, #14]
 800bcae:	2b05      	cmp	r3, #5
 800bcb0:	d168      	bne.n	800bd84 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800bcb2:	2303      	movs	r3, #3
 800bcb4:	73fb      	strb	r3, [r7, #15]
      break;
 800bcb6:	e065      	b.n	800bd84 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	795b      	ldrb	r3, [r3, #5]
 800bcbc:	2201      	movs	r2, #1
 800bcbe:	9200      	str	r2, [sp, #0]
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	2100      	movs	r1, #0
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f000 f87f 	bl	800bdc8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bcd0:	b29a      	uxth	r2, r3
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	220a      	movs	r2, #10
 800bcda:	761a      	strb	r2, [r3, #24]
      break;
 800bcdc:	e055      	b.n	800bd8a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	795b      	ldrb	r3, [r3, #5]
 800bce2:	4619      	mov	r1, r3
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f000 fbe1 	bl	800c4ac <USBH_LL_GetURBState>
 800bcea:	4603      	mov	r3, r0
 800bcec:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800bcee:	7bbb      	ldrb	r3, [r7, #14]
 800bcf0:	2b01      	cmp	r3, #1
 800bcf2:	d105      	bne.n	800bd00 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	220d      	movs	r2, #13
 800bcfc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bcfe:	e043      	b.n	800bd88 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bd00:	7bbb      	ldrb	r3, [r7, #14]
 800bd02:	2b02      	cmp	r3, #2
 800bd04:	d103      	bne.n	800bd0e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2209      	movs	r2, #9
 800bd0a:	761a      	strb	r2, [r3, #24]
      break;
 800bd0c:	e03c      	b.n	800bd88 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800bd0e:	7bbb      	ldrb	r3, [r7, #14]
 800bd10:	2b04      	cmp	r3, #4
 800bd12:	d139      	bne.n	800bd88 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	220b      	movs	r2, #11
 800bd18:	761a      	strb	r2, [r3, #24]
      break;
 800bd1a:	e035      	b.n	800bd88 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	7e5b      	ldrb	r3, [r3, #25]
 800bd20:	3301      	adds	r3, #1
 800bd22:	b2da      	uxtb	r2, r3
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	765a      	strb	r2, [r3, #25]
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	7e5b      	ldrb	r3, [r3, #25]
 800bd2c:	2b02      	cmp	r3, #2
 800bd2e:	d806      	bhi.n	800bd3e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2201      	movs	r2, #1
 800bd34:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2201      	movs	r2, #1
 800bd3a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800bd3c:	e025      	b.n	800bd8a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bd44:	2106      	movs	r1, #6
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	795b      	ldrb	r3, [r3, #5]
 800bd54:	4619      	mov	r1, r3
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f000 f90c 	bl	800bf74 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	791b      	ldrb	r3, [r3, #4]
 800bd60:	4619      	mov	r1, r3
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f000 f906 	bl	800bf74 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800bd6e:	2302      	movs	r3, #2
 800bd70:	73fb      	strb	r3, [r7, #15]
      break;
 800bd72:	e00a      	b.n	800bd8a <USBH_HandleControl+0x2de>

    default:
      break;
 800bd74:	bf00      	nop
 800bd76:	e008      	b.n	800bd8a <USBH_HandleControl+0x2de>
      break;
 800bd78:	bf00      	nop
 800bd7a:	e006      	b.n	800bd8a <USBH_HandleControl+0x2de>
      break;
 800bd7c:	bf00      	nop
 800bd7e:	e004      	b.n	800bd8a <USBH_HandleControl+0x2de>
      break;
 800bd80:	bf00      	nop
 800bd82:	e002      	b.n	800bd8a <USBH_HandleControl+0x2de>
      break;
 800bd84:	bf00      	nop
 800bd86:	e000      	b.n	800bd8a <USBH_HandleControl+0x2de>
      break;
 800bd88:	bf00      	nop
  }

  return status;
 800bd8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3710      	adds	r7, #16
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd80      	pop	{r7, pc}

0800bd94 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b088      	sub	sp, #32
 800bd98:	af04      	add	r7, sp, #16
 800bd9a:	60f8      	str	r0, [r7, #12]
 800bd9c:	60b9      	str	r1, [r7, #8]
 800bd9e:	4613      	mov	r3, r2
 800bda0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bda2:	79f9      	ldrb	r1, [r7, #7]
 800bda4:	2300      	movs	r3, #0
 800bda6:	9303      	str	r3, [sp, #12]
 800bda8:	2308      	movs	r3, #8
 800bdaa:	9302      	str	r3, [sp, #8]
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	9301      	str	r3, [sp, #4]
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	9300      	str	r3, [sp, #0]
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	68f8      	ldr	r0, [r7, #12]
 800bdba:	f000 fb46 	bl	800c44a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800bdbe:	2300      	movs	r3, #0
}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	3710      	adds	r7, #16
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}

0800bdc8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b088      	sub	sp, #32
 800bdcc:	af04      	add	r7, sp, #16
 800bdce:	60f8      	str	r0, [r7, #12]
 800bdd0:	60b9      	str	r1, [r7, #8]
 800bdd2:	4611      	mov	r1, r2
 800bdd4:	461a      	mov	r2, r3
 800bdd6:	460b      	mov	r3, r1
 800bdd8:	80fb      	strh	r3, [r7, #6]
 800bdda:	4613      	mov	r3, r2
 800bddc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d001      	beq.n	800bdec <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800bde8:	2300      	movs	r3, #0
 800bdea:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bdec:	7979      	ldrb	r1, [r7, #5]
 800bdee:	7e3b      	ldrb	r3, [r7, #24]
 800bdf0:	9303      	str	r3, [sp, #12]
 800bdf2:	88fb      	ldrh	r3, [r7, #6]
 800bdf4:	9302      	str	r3, [sp, #8]
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	9301      	str	r3, [sp, #4]
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	9300      	str	r3, [sp, #0]
 800bdfe:	2300      	movs	r3, #0
 800be00:	2200      	movs	r2, #0
 800be02:	68f8      	ldr	r0, [r7, #12]
 800be04:	f000 fb21 	bl	800c44a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800be08:	2300      	movs	r3, #0
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3710      	adds	r7, #16
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}

0800be12 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800be12:	b580      	push	{r7, lr}
 800be14:	b088      	sub	sp, #32
 800be16:	af04      	add	r7, sp, #16
 800be18:	60f8      	str	r0, [r7, #12]
 800be1a:	60b9      	str	r1, [r7, #8]
 800be1c:	4611      	mov	r1, r2
 800be1e:	461a      	mov	r2, r3
 800be20:	460b      	mov	r3, r1
 800be22:	80fb      	strh	r3, [r7, #6]
 800be24:	4613      	mov	r3, r2
 800be26:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800be28:	7979      	ldrb	r1, [r7, #5]
 800be2a:	2300      	movs	r3, #0
 800be2c:	9303      	str	r3, [sp, #12]
 800be2e:	88fb      	ldrh	r3, [r7, #6]
 800be30:	9302      	str	r3, [sp, #8]
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	9301      	str	r3, [sp, #4]
 800be36:	2301      	movs	r3, #1
 800be38:	9300      	str	r3, [sp, #0]
 800be3a:	2300      	movs	r3, #0
 800be3c:	2201      	movs	r2, #1
 800be3e:	68f8      	ldr	r0, [r7, #12]
 800be40:	f000 fb03 	bl	800c44a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800be44:	2300      	movs	r3, #0

}
 800be46:	4618      	mov	r0, r3
 800be48:	3710      	adds	r7, #16
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}

0800be4e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800be4e:	b580      	push	{r7, lr}
 800be50:	b088      	sub	sp, #32
 800be52:	af04      	add	r7, sp, #16
 800be54:	60f8      	str	r0, [r7, #12]
 800be56:	60b9      	str	r1, [r7, #8]
 800be58:	4611      	mov	r1, r2
 800be5a:	461a      	mov	r2, r3
 800be5c:	460b      	mov	r3, r1
 800be5e:	80fb      	strh	r3, [r7, #6]
 800be60:	4613      	mov	r3, r2
 800be62:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d001      	beq.n	800be72 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800be6e:	2300      	movs	r3, #0
 800be70:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800be72:	7979      	ldrb	r1, [r7, #5]
 800be74:	7e3b      	ldrb	r3, [r7, #24]
 800be76:	9303      	str	r3, [sp, #12]
 800be78:	88fb      	ldrh	r3, [r7, #6]
 800be7a:	9302      	str	r3, [sp, #8]
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	9301      	str	r3, [sp, #4]
 800be80:	2301      	movs	r3, #1
 800be82:	9300      	str	r3, [sp, #0]
 800be84:	2302      	movs	r3, #2
 800be86:	2200      	movs	r2, #0
 800be88:	68f8      	ldr	r0, [r7, #12]
 800be8a:	f000 fade 	bl	800c44a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800be8e:	2300      	movs	r3, #0
}
 800be90:	4618      	mov	r0, r3
 800be92:	3710      	adds	r7, #16
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}

0800be98 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b088      	sub	sp, #32
 800be9c:	af04      	add	r7, sp, #16
 800be9e:	60f8      	str	r0, [r7, #12]
 800bea0:	60b9      	str	r1, [r7, #8]
 800bea2:	4611      	mov	r1, r2
 800bea4:	461a      	mov	r2, r3
 800bea6:	460b      	mov	r3, r1
 800bea8:	80fb      	strh	r3, [r7, #6]
 800beaa:	4613      	mov	r3, r2
 800beac:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800beae:	7979      	ldrb	r1, [r7, #5]
 800beb0:	2300      	movs	r3, #0
 800beb2:	9303      	str	r3, [sp, #12]
 800beb4:	88fb      	ldrh	r3, [r7, #6]
 800beb6:	9302      	str	r3, [sp, #8]
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	9301      	str	r3, [sp, #4]
 800bebc:	2301      	movs	r3, #1
 800bebe:	9300      	str	r3, [sp, #0]
 800bec0:	2302      	movs	r3, #2
 800bec2:	2201      	movs	r2, #1
 800bec4:	68f8      	ldr	r0, [r7, #12]
 800bec6:	f000 fac0 	bl	800c44a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800beca:	2300      	movs	r3, #0
}
 800becc:	4618      	mov	r0, r3
 800bece:	3710      	adds	r7, #16
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}

0800bed4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b086      	sub	sp, #24
 800bed8:	af04      	add	r7, sp, #16
 800beda:	6078      	str	r0, [r7, #4]
 800bedc:	4608      	mov	r0, r1
 800bede:	4611      	mov	r1, r2
 800bee0:	461a      	mov	r2, r3
 800bee2:	4603      	mov	r3, r0
 800bee4:	70fb      	strb	r3, [r7, #3]
 800bee6:	460b      	mov	r3, r1
 800bee8:	70bb      	strb	r3, [r7, #2]
 800beea:	4613      	mov	r3, r2
 800beec:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800beee:	7878      	ldrb	r0, [r7, #1]
 800bef0:	78ba      	ldrb	r2, [r7, #2]
 800bef2:	78f9      	ldrb	r1, [r7, #3]
 800bef4:	8b3b      	ldrh	r3, [r7, #24]
 800bef6:	9302      	str	r3, [sp, #8]
 800bef8:	7d3b      	ldrb	r3, [r7, #20]
 800befa:	9301      	str	r3, [sp, #4]
 800befc:	7c3b      	ldrb	r3, [r7, #16]
 800befe:	9300      	str	r3, [sp, #0]
 800bf00:	4603      	mov	r3, r0
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f000 fa53 	bl	800c3ae <USBH_LL_OpenPipe>

  return USBH_OK;
 800bf08:	2300      	movs	r3, #0
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3708      	adds	r7, #8
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}

0800bf12 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800bf12:	b580      	push	{r7, lr}
 800bf14:	b082      	sub	sp, #8
 800bf16:	af00      	add	r7, sp, #0
 800bf18:	6078      	str	r0, [r7, #4]
 800bf1a:	460b      	mov	r3, r1
 800bf1c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800bf1e:	78fb      	ldrb	r3, [r7, #3]
 800bf20:	4619      	mov	r1, r3
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f000 fa72 	bl	800c40c <USBH_LL_ClosePipe>

  return USBH_OK;
 800bf28:	2300      	movs	r3, #0
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3708      	adds	r7, #8
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}

0800bf32 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800bf32:	b580      	push	{r7, lr}
 800bf34:	b084      	sub	sp, #16
 800bf36:	af00      	add	r7, sp, #0
 800bf38:	6078      	str	r0, [r7, #4]
 800bf3a:	460b      	mov	r3, r1
 800bf3c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f000 f836 	bl	800bfb0 <USBH_GetFreePipe>
 800bf44:	4603      	mov	r3, r0
 800bf46:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800bf48:	89fb      	ldrh	r3, [r7, #14]
 800bf4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bf4e:	4293      	cmp	r3, r2
 800bf50:	d00a      	beq.n	800bf68 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800bf52:	78fa      	ldrb	r2, [r7, #3]
 800bf54:	89fb      	ldrh	r3, [r7, #14]
 800bf56:	f003 030f 	and.w	r3, r3, #15
 800bf5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bf5e:	6879      	ldr	r1, [r7, #4]
 800bf60:	33e0      	adds	r3, #224	; 0xe0
 800bf62:	009b      	lsls	r3, r3, #2
 800bf64:	440b      	add	r3, r1
 800bf66:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800bf68:	89fb      	ldrh	r3, [r7, #14]
 800bf6a:	b2db      	uxtb	r3, r3
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	3710      	adds	r7, #16
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}

0800bf74 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800bf74:	b480      	push	{r7}
 800bf76:	b083      	sub	sp, #12
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	460b      	mov	r3, r1
 800bf7e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800bf80:	78fb      	ldrb	r3, [r7, #3]
 800bf82:	2b0a      	cmp	r3, #10
 800bf84:	d80d      	bhi.n	800bfa2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800bf86:	78fb      	ldrb	r3, [r7, #3]
 800bf88:	687a      	ldr	r2, [r7, #4]
 800bf8a:	33e0      	adds	r3, #224	; 0xe0
 800bf8c:	009b      	lsls	r3, r3, #2
 800bf8e:	4413      	add	r3, r2
 800bf90:	685a      	ldr	r2, [r3, #4]
 800bf92:	78fb      	ldrb	r3, [r7, #3]
 800bf94:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800bf98:	6879      	ldr	r1, [r7, #4]
 800bf9a:	33e0      	adds	r3, #224	; 0xe0
 800bf9c:	009b      	lsls	r3, r3, #2
 800bf9e:	440b      	add	r3, r1
 800bfa0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800bfa2:	2300      	movs	r3, #0
}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	370c      	adds	r7, #12
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfae:	4770      	bx	lr

0800bfb0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b085      	sub	sp, #20
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800bfb8:	2300      	movs	r3, #0
 800bfba:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	73fb      	strb	r3, [r7, #15]
 800bfc0:	e00f      	b.n	800bfe2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800bfc2:	7bfb      	ldrb	r3, [r7, #15]
 800bfc4:	687a      	ldr	r2, [r7, #4]
 800bfc6:	33e0      	adds	r3, #224	; 0xe0
 800bfc8:	009b      	lsls	r3, r3, #2
 800bfca:	4413      	add	r3, r2
 800bfcc:	685b      	ldr	r3, [r3, #4]
 800bfce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d102      	bne.n	800bfdc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800bfd6:	7bfb      	ldrb	r3, [r7, #15]
 800bfd8:	b29b      	uxth	r3, r3
 800bfda:	e007      	b.n	800bfec <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800bfdc:	7bfb      	ldrb	r3, [r7, #15]
 800bfde:	3301      	adds	r3, #1
 800bfe0:	73fb      	strb	r3, [r7, #15]
 800bfe2:	7bfb      	ldrb	r3, [r7, #15]
 800bfe4:	2b0a      	cmp	r3, #10
 800bfe6:	d9ec      	bls.n	800bfc2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800bfe8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800bfec:	4618      	mov	r0, r3
 800bfee:	3714      	adds	r7, #20
 800bff0:	46bd      	mov	sp, r7
 800bff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff6:	4770      	bx	lr

0800bff8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800bffc:	2201      	movs	r2, #1
 800bffe:	490e      	ldr	r1, [pc, #56]	; (800c038 <MX_USB_HOST_Init+0x40>)
 800c000:	480e      	ldr	r0, [pc, #56]	; (800c03c <MX_USB_HOST_Init+0x44>)
 800c002:	f7fe fca1 	bl	800a948 <USBH_Init>
 800c006:	4603      	mov	r3, r0
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d001      	beq.n	800c010 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c00c:	f7f7 ffc2 	bl	8003f94 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800c010:	490b      	ldr	r1, [pc, #44]	; (800c040 <MX_USB_HOST_Init+0x48>)
 800c012:	480a      	ldr	r0, [pc, #40]	; (800c03c <MX_USB_HOST_Init+0x44>)
 800c014:	f7fe fd26 	bl	800aa64 <USBH_RegisterClass>
 800c018:	4603      	mov	r3, r0
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d001      	beq.n	800c022 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c01e:	f7f7 ffb9 	bl	8003f94 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c022:	4806      	ldr	r0, [pc, #24]	; (800c03c <MX_USB_HOST_Init+0x44>)
 800c024:	f7fe fdaa 	bl	800ab7c <USBH_Start>
 800c028:	4603      	mov	r3, r0
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d001      	beq.n	800c032 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c02e:	f7f7 ffb1 	bl	8003f94 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c032:	bf00      	nop
 800c034:	bd80      	pop	{r7, pc}
 800c036:	bf00      	nop
 800c038:	0800c059 	.word	0x0800c059
 800c03c:	20000908 	.word	0x20000908
 800c040:	20000038 	.word	0x20000038

0800c044 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800c048:	4802      	ldr	r0, [pc, #8]	; (800c054 <MX_USB_HOST_Process+0x10>)
 800c04a:	f7fe fda7 	bl	800ab9c <USBH_Process>
}
 800c04e:	bf00      	nop
 800c050:	bd80      	pop	{r7, pc}
 800c052:	bf00      	nop
 800c054:	20000908 	.word	0x20000908

0800c058 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c058:	b480      	push	{r7}
 800c05a:	b083      	sub	sp, #12
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
 800c060:	460b      	mov	r3, r1
 800c062:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c064:	78fb      	ldrb	r3, [r7, #3]
 800c066:	3b01      	subs	r3, #1
 800c068:	2b04      	cmp	r3, #4
 800c06a:	d819      	bhi.n	800c0a0 <USBH_UserProcess+0x48>
 800c06c:	a201      	add	r2, pc, #4	; (adr r2, 800c074 <USBH_UserProcess+0x1c>)
 800c06e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c072:	bf00      	nop
 800c074:	0800c0a1 	.word	0x0800c0a1
 800c078:	0800c091 	.word	0x0800c091
 800c07c:	0800c0a1 	.word	0x0800c0a1
 800c080:	0800c099 	.word	0x0800c099
 800c084:	0800c089 	.word	0x0800c089
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c088:	4b09      	ldr	r3, [pc, #36]	; (800c0b0 <USBH_UserProcess+0x58>)
 800c08a:	2203      	movs	r2, #3
 800c08c:	701a      	strb	r2, [r3, #0]
  break;
 800c08e:	e008      	b.n	800c0a2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c090:	4b07      	ldr	r3, [pc, #28]	; (800c0b0 <USBH_UserProcess+0x58>)
 800c092:	2202      	movs	r2, #2
 800c094:	701a      	strb	r2, [r3, #0]
  break;
 800c096:	e004      	b.n	800c0a2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c098:	4b05      	ldr	r3, [pc, #20]	; (800c0b0 <USBH_UserProcess+0x58>)
 800c09a:	2201      	movs	r2, #1
 800c09c:	701a      	strb	r2, [r3, #0]
  break;
 800c09e:	e000      	b.n	800c0a2 <USBH_UserProcess+0x4a>

  default:
  break;
 800c0a0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c0a2:	bf00      	nop
 800c0a4:	370c      	adds	r7, #12
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ac:	4770      	bx	lr
 800c0ae:	bf00      	nop
 800c0b0:	200000e0 	.word	0x200000e0

0800c0b4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b08a      	sub	sp, #40	; 0x28
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c0bc:	f107 0314 	add.w	r3, r7, #20
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	601a      	str	r2, [r3, #0]
 800c0c4:	605a      	str	r2, [r3, #4]
 800c0c6:	609a      	str	r2, [r3, #8]
 800c0c8:	60da      	str	r2, [r3, #12]
 800c0ca:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c0d4:	d147      	bne.n	800c166 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	613b      	str	r3, [r7, #16]
 800c0da:	4b25      	ldr	r3, [pc, #148]	; (800c170 <HAL_HCD_MspInit+0xbc>)
 800c0dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0de:	4a24      	ldr	r2, [pc, #144]	; (800c170 <HAL_HCD_MspInit+0xbc>)
 800c0e0:	f043 0301 	orr.w	r3, r3, #1
 800c0e4:	6313      	str	r3, [r2, #48]	; 0x30
 800c0e6:	4b22      	ldr	r3, [pc, #136]	; (800c170 <HAL_HCD_MspInit+0xbc>)
 800c0e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0ea:	f003 0301 	and.w	r3, r3, #1
 800c0ee:	613b      	str	r3, [r7, #16]
 800c0f0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800c0f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c0f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800c100:	f107 0314 	add.w	r3, r7, #20
 800c104:	4619      	mov	r1, r3
 800c106:	481b      	ldr	r0, [pc, #108]	; (800c174 <HAL_HCD_MspInit+0xc0>)
 800c108:	f7f8 fbe4 	bl	80048d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c10c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800c110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c112:	2302      	movs	r3, #2
 800c114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c116:	2300      	movs	r3, #0
 800c118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c11a:	2303      	movs	r3, #3
 800c11c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c11e:	230a      	movs	r3, #10
 800c120:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c122:	f107 0314 	add.w	r3, r7, #20
 800c126:	4619      	mov	r1, r3
 800c128:	4812      	ldr	r0, [pc, #72]	; (800c174 <HAL_HCD_MspInit+0xc0>)
 800c12a:	f7f8 fbd3 	bl	80048d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c12e:	4b10      	ldr	r3, [pc, #64]	; (800c170 <HAL_HCD_MspInit+0xbc>)
 800c130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c132:	4a0f      	ldr	r2, [pc, #60]	; (800c170 <HAL_HCD_MspInit+0xbc>)
 800c134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c138:	6353      	str	r3, [r2, #52]	; 0x34
 800c13a:	2300      	movs	r3, #0
 800c13c:	60fb      	str	r3, [r7, #12]
 800c13e:	4b0c      	ldr	r3, [pc, #48]	; (800c170 <HAL_HCD_MspInit+0xbc>)
 800c140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c142:	4a0b      	ldr	r2, [pc, #44]	; (800c170 <HAL_HCD_MspInit+0xbc>)
 800c144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c148:	6453      	str	r3, [r2, #68]	; 0x44
 800c14a:	4b09      	ldr	r3, [pc, #36]	; (800c170 <HAL_HCD_MspInit+0xbc>)
 800c14c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c14e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c152:	60fb      	str	r3, [r7, #12]
 800c154:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c156:	2200      	movs	r2, #0
 800c158:	2100      	movs	r1, #0
 800c15a:	2043      	movs	r0, #67	; 0x43
 800c15c:	f7f8 fb83 	bl	8004866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c160:	2043      	movs	r0, #67	; 0x43
 800c162:	f7f8 fb9c 	bl	800489e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c166:	bf00      	nop
 800c168:	3728      	adds	r7, #40	; 0x28
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}
 800c16e:	bf00      	nop
 800c170:	40023800 	.word	0x40023800
 800c174:	40020000 	.word	0x40020000

0800c178 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b082      	sub	sp, #8
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c186:	4618      	mov	r0, r3
 800c188:	f7ff f8db 	bl	800b342 <USBH_LL_IncTimer>
}
 800c18c:	bf00      	nop
 800c18e:	3708      	adds	r7, #8
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}

0800c194 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b082      	sub	sp, #8
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f7ff f913 	bl	800b3ce <USBH_LL_Connect>
}
 800c1a8:	bf00      	nop
 800c1aa:	3708      	adds	r7, #8
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}

0800c1b0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b082      	sub	sp, #8
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f7ff f91c 	bl	800b3fc <USBH_LL_Disconnect>
}
 800c1c4:	bf00      	nop
 800c1c6:	3708      	adds	r7, #8
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}

0800c1cc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	b083      	sub	sp, #12
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
 800c1d4:	460b      	mov	r3, r1
 800c1d6:	70fb      	strb	r3, [r7, #3]
 800c1d8:	4613      	mov	r3, r2
 800c1da:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800c1dc:	bf00      	nop
 800c1de:	370c      	adds	r7, #12
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e6:	4770      	bx	lr

0800c1e8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b082      	sub	sp, #8
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f7ff f8cd 	bl	800b396 <USBH_LL_PortEnabled>
}
 800c1fc:	bf00      	nop
 800c1fe:	3708      	adds	r7, #8
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}

0800c204 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b082      	sub	sp, #8
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c212:	4618      	mov	r0, r3
 800c214:	f7ff f8cd 	bl	800b3b2 <USBH_LL_PortDisabled>
}
 800c218:	bf00      	nop
 800c21a:	3708      	adds	r7, #8
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}

0800c220 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b082      	sub	sp, #8
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c22e:	2b01      	cmp	r3, #1
 800c230:	d12a      	bne.n	800c288 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c232:	4a18      	ldr	r2, [pc, #96]	; (800c294 <USBH_LL_Init+0x74>)
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	4a15      	ldr	r2, [pc, #84]	; (800c294 <USBH_LL_Init+0x74>)
 800c23e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c242:	4b14      	ldr	r3, [pc, #80]	; (800c294 <USBH_LL_Init+0x74>)
 800c244:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c248:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c24a:	4b12      	ldr	r3, [pc, #72]	; (800c294 <USBH_LL_Init+0x74>)
 800c24c:	2208      	movs	r2, #8
 800c24e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c250:	4b10      	ldr	r3, [pc, #64]	; (800c294 <USBH_LL_Init+0x74>)
 800c252:	2201      	movs	r2, #1
 800c254:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c256:	4b0f      	ldr	r3, [pc, #60]	; (800c294 <USBH_LL_Init+0x74>)
 800c258:	2200      	movs	r2, #0
 800c25a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c25c:	4b0d      	ldr	r3, [pc, #52]	; (800c294 <USBH_LL_Init+0x74>)
 800c25e:	2202      	movs	r2, #2
 800c260:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c262:	4b0c      	ldr	r3, [pc, #48]	; (800c294 <USBH_LL_Init+0x74>)
 800c264:	2200      	movs	r2, #0
 800c266:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c268:	480a      	ldr	r0, [pc, #40]	; (800c294 <USBH_LL_Init+0x74>)
 800c26a:	f7f8 fce8 	bl	8004c3e <HAL_HCD_Init>
 800c26e:	4603      	mov	r3, r0
 800c270:	2b00      	cmp	r3, #0
 800c272:	d001      	beq.n	800c278 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c274:	f7f7 fe8e 	bl	8003f94 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c278:	4806      	ldr	r0, [pc, #24]	; (800c294 <USBH_LL_Init+0x74>)
 800c27a:	f7f9 f8c5 	bl	8005408 <HAL_HCD_GetCurrentFrame>
 800c27e:	4603      	mov	r3, r0
 800c280:	4619      	mov	r1, r3
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f7ff f84e 	bl	800b324 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c288:	2300      	movs	r3, #0
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	3708      	adds	r7, #8
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}
 800c292:	bf00      	nop
 800c294:	20000ce0 	.word	0x20000ce0

0800c298 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b084      	sub	sp, #16
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f7f9 f834 	bl	800531c <HAL_HCD_Start>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c2b8:	7bfb      	ldrb	r3, [r7, #15]
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f000 f95c 	bl	800c578 <USBH_Get_USB_Status>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	3710      	adds	r7, #16
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}

0800c2ce <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c2ce:	b580      	push	{r7, lr}
 800c2d0:	b084      	sub	sp, #16
 800c2d2:	af00      	add	r7, sp, #0
 800c2d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f7f9 f83c 	bl	8005362 <HAL_HCD_Stop>
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c2ee:	7bfb      	ldrb	r3, [r7, #15]
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f000 f941 	bl	800c578 <USBH_Get_USB_Status>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	3710      	adds	r7, #16
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}

0800c304 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b084      	sub	sp, #16
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c30c:	2301      	movs	r3, #1
 800c30e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c316:	4618      	mov	r0, r3
 800c318:	f7f9 f884 	bl	8005424 <HAL_HCD_GetCurrentSpeed>
 800c31c:	4603      	mov	r3, r0
 800c31e:	2b02      	cmp	r3, #2
 800c320:	d00c      	beq.n	800c33c <USBH_LL_GetSpeed+0x38>
 800c322:	2b02      	cmp	r3, #2
 800c324:	d80d      	bhi.n	800c342 <USBH_LL_GetSpeed+0x3e>
 800c326:	2b00      	cmp	r3, #0
 800c328:	d002      	beq.n	800c330 <USBH_LL_GetSpeed+0x2c>
 800c32a:	2b01      	cmp	r3, #1
 800c32c:	d003      	beq.n	800c336 <USBH_LL_GetSpeed+0x32>
 800c32e:	e008      	b.n	800c342 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c330:	2300      	movs	r3, #0
 800c332:	73fb      	strb	r3, [r7, #15]
    break;
 800c334:	e008      	b.n	800c348 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c336:	2301      	movs	r3, #1
 800c338:	73fb      	strb	r3, [r7, #15]
    break;
 800c33a:	e005      	b.n	800c348 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c33c:	2302      	movs	r3, #2
 800c33e:	73fb      	strb	r3, [r7, #15]
    break;
 800c340:	e002      	b.n	800c348 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c342:	2301      	movs	r3, #1
 800c344:	73fb      	strb	r3, [r7, #15]
    break;
 800c346:	bf00      	nop
  }
  return  speed;
 800c348:	7bfb      	ldrb	r3, [r7, #15]
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	3710      	adds	r7, #16
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}

0800c352 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c352:	b580      	push	{r7, lr}
 800c354:	b084      	sub	sp, #16
 800c356:	af00      	add	r7, sp, #0
 800c358:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c35a:	2300      	movs	r3, #0
 800c35c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c35e:	2300      	movs	r3, #0
 800c360:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c368:	4618      	mov	r0, r3
 800c36a:	f7f9 f817 	bl	800539c <HAL_HCD_ResetPort>
 800c36e:	4603      	mov	r3, r0
 800c370:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c372:	7bfb      	ldrb	r3, [r7, #15]
 800c374:	4618      	mov	r0, r3
 800c376:	f000 f8ff 	bl	800c578 <USBH_Get_USB_Status>
 800c37a:	4603      	mov	r3, r0
 800c37c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c37e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c380:	4618      	mov	r0, r3
 800c382:	3710      	adds	r7, #16
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}

0800c388 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b082      	sub	sp, #8
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
 800c390:	460b      	mov	r3, r1
 800c392:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c39a:	78fa      	ldrb	r2, [r7, #3]
 800c39c:	4611      	mov	r1, r2
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f7f9 f81e 	bl	80053e0 <HAL_HCD_HC_GetXferCount>
 800c3a4:	4603      	mov	r3, r0
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3708      	adds	r7, #8
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}

0800c3ae <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c3ae:	b590      	push	{r4, r7, lr}
 800c3b0:	b089      	sub	sp, #36	; 0x24
 800c3b2:	af04      	add	r7, sp, #16
 800c3b4:	6078      	str	r0, [r7, #4]
 800c3b6:	4608      	mov	r0, r1
 800c3b8:	4611      	mov	r1, r2
 800c3ba:	461a      	mov	r2, r3
 800c3bc:	4603      	mov	r3, r0
 800c3be:	70fb      	strb	r3, [r7, #3]
 800c3c0:	460b      	mov	r3, r1
 800c3c2:	70bb      	strb	r3, [r7, #2]
 800c3c4:	4613      	mov	r3, r2
 800c3c6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c3d6:	787c      	ldrb	r4, [r7, #1]
 800c3d8:	78ba      	ldrb	r2, [r7, #2]
 800c3da:	78f9      	ldrb	r1, [r7, #3]
 800c3dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c3de:	9302      	str	r3, [sp, #8]
 800c3e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c3e4:	9301      	str	r3, [sp, #4]
 800c3e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c3ea:	9300      	str	r3, [sp, #0]
 800c3ec:	4623      	mov	r3, r4
 800c3ee:	f7f8 fc88 	bl	8004d02 <HAL_HCD_HC_Init>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c3f6:	7bfb      	ldrb	r3, [r7, #15]
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	f000 f8bd 	bl	800c578 <USBH_Get_USB_Status>
 800c3fe:	4603      	mov	r3, r0
 800c400:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c402:	7bbb      	ldrb	r3, [r7, #14]
}
 800c404:	4618      	mov	r0, r3
 800c406:	3714      	adds	r7, #20
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd90      	pop	{r4, r7, pc}

0800c40c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b084      	sub	sp, #16
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
 800c414:	460b      	mov	r3, r1
 800c416:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c418:	2300      	movs	r3, #0
 800c41a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c41c:	2300      	movs	r3, #0
 800c41e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c426:	78fa      	ldrb	r2, [r7, #3]
 800c428:	4611      	mov	r1, r2
 800c42a:	4618      	mov	r0, r3
 800c42c:	f7f8 fcf8 	bl	8004e20 <HAL_HCD_HC_Halt>
 800c430:	4603      	mov	r3, r0
 800c432:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c434:	7bfb      	ldrb	r3, [r7, #15]
 800c436:	4618      	mov	r0, r3
 800c438:	f000 f89e 	bl	800c578 <USBH_Get_USB_Status>
 800c43c:	4603      	mov	r3, r0
 800c43e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c440:	7bbb      	ldrb	r3, [r7, #14]
}
 800c442:	4618      	mov	r0, r3
 800c444:	3710      	adds	r7, #16
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}

0800c44a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c44a:	b590      	push	{r4, r7, lr}
 800c44c:	b089      	sub	sp, #36	; 0x24
 800c44e:	af04      	add	r7, sp, #16
 800c450:	6078      	str	r0, [r7, #4]
 800c452:	4608      	mov	r0, r1
 800c454:	4611      	mov	r1, r2
 800c456:	461a      	mov	r2, r3
 800c458:	4603      	mov	r3, r0
 800c45a:	70fb      	strb	r3, [r7, #3]
 800c45c:	460b      	mov	r3, r1
 800c45e:	70bb      	strb	r3, [r7, #2]
 800c460:	4613      	mov	r3, r2
 800c462:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c464:	2300      	movs	r3, #0
 800c466:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c468:	2300      	movs	r3, #0
 800c46a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c472:	787c      	ldrb	r4, [r7, #1]
 800c474:	78ba      	ldrb	r2, [r7, #2]
 800c476:	78f9      	ldrb	r1, [r7, #3]
 800c478:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c47c:	9303      	str	r3, [sp, #12]
 800c47e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c480:	9302      	str	r3, [sp, #8]
 800c482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c484:	9301      	str	r3, [sp, #4]
 800c486:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c48a:	9300      	str	r3, [sp, #0]
 800c48c:	4623      	mov	r3, r4
 800c48e:	f7f8 fceb 	bl	8004e68 <HAL_HCD_HC_SubmitRequest>
 800c492:	4603      	mov	r3, r0
 800c494:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c496:	7bfb      	ldrb	r3, [r7, #15]
 800c498:	4618      	mov	r0, r3
 800c49a:	f000 f86d 	bl	800c578 <USBH_Get_USB_Status>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	3714      	adds	r7, #20
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd90      	pop	{r4, r7, pc}

0800c4ac <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b082      	sub	sp, #8
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
 800c4b4:	460b      	mov	r3, r1
 800c4b6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c4be:	78fa      	ldrb	r2, [r7, #3]
 800c4c0:	4611      	mov	r1, r2
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f7f8 ff78 	bl	80053b8 <HAL_HCD_HC_GetURBState>
 800c4c8:	4603      	mov	r3, r0
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3708      	adds	r7, #8
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}

0800c4d2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c4d2:	b580      	push	{r7, lr}
 800c4d4:	b082      	sub	sp, #8
 800c4d6:	af00      	add	r7, sp, #0
 800c4d8:	6078      	str	r0, [r7, #4]
 800c4da:	460b      	mov	r3, r1
 800c4dc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c4e4:	2b01      	cmp	r3, #1
 800c4e6:	d103      	bne.n	800c4f0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c4e8:	78fb      	ldrb	r3, [r7, #3]
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f000 f870 	bl	800c5d0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c4f0:	20c8      	movs	r0, #200	; 0xc8
 800c4f2:	f7f8 f8b9 	bl	8004668 <HAL_Delay>
  return USBH_OK;
 800c4f6:	2300      	movs	r3, #0
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3708      	adds	r7, #8
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}

0800c500 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c500:	b480      	push	{r7}
 800c502:	b085      	sub	sp, #20
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
 800c508:	460b      	mov	r3, r1
 800c50a:	70fb      	strb	r3, [r7, #3]
 800c50c:	4613      	mov	r3, r2
 800c50e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c516:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c518:	78fb      	ldrb	r3, [r7, #3]
 800c51a:	68fa      	ldr	r2, [r7, #12]
 800c51c:	212c      	movs	r1, #44	; 0x2c
 800c51e:	fb01 f303 	mul.w	r3, r1, r3
 800c522:	4413      	add	r3, r2
 800c524:	333b      	adds	r3, #59	; 0x3b
 800c526:	781b      	ldrb	r3, [r3, #0]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d009      	beq.n	800c540 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c52c:	78fb      	ldrb	r3, [r7, #3]
 800c52e:	68fa      	ldr	r2, [r7, #12]
 800c530:	212c      	movs	r1, #44	; 0x2c
 800c532:	fb01 f303 	mul.w	r3, r1, r3
 800c536:	4413      	add	r3, r2
 800c538:	3354      	adds	r3, #84	; 0x54
 800c53a:	78ba      	ldrb	r2, [r7, #2]
 800c53c:	701a      	strb	r2, [r3, #0]
 800c53e:	e008      	b.n	800c552 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c540:	78fb      	ldrb	r3, [r7, #3]
 800c542:	68fa      	ldr	r2, [r7, #12]
 800c544:	212c      	movs	r1, #44	; 0x2c
 800c546:	fb01 f303 	mul.w	r3, r1, r3
 800c54a:	4413      	add	r3, r2
 800c54c:	3355      	adds	r3, #85	; 0x55
 800c54e:	78ba      	ldrb	r2, [r7, #2]
 800c550:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c552:	2300      	movs	r3, #0
}
 800c554:	4618      	mov	r0, r3
 800c556:	3714      	adds	r7, #20
 800c558:	46bd      	mov	sp, r7
 800c55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55e:	4770      	bx	lr

0800c560 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b082      	sub	sp, #8
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f7f8 f87d 	bl	8004668 <HAL_Delay>
}
 800c56e:	bf00      	nop
 800c570:	3708      	adds	r7, #8
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}
	...

0800c578 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c578:	b480      	push	{r7}
 800c57a:	b085      	sub	sp, #20
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	4603      	mov	r3, r0
 800c580:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c582:	2300      	movs	r3, #0
 800c584:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c586:	79fb      	ldrb	r3, [r7, #7]
 800c588:	2b03      	cmp	r3, #3
 800c58a:	d817      	bhi.n	800c5bc <USBH_Get_USB_Status+0x44>
 800c58c:	a201      	add	r2, pc, #4	; (adr r2, 800c594 <USBH_Get_USB_Status+0x1c>)
 800c58e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c592:	bf00      	nop
 800c594:	0800c5a5 	.word	0x0800c5a5
 800c598:	0800c5ab 	.word	0x0800c5ab
 800c59c:	0800c5b1 	.word	0x0800c5b1
 800c5a0:	0800c5b7 	.word	0x0800c5b7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	73fb      	strb	r3, [r7, #15]
    break;
 800c5a8:	e00b      	b.n	800c5c2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c5aa:	2302      	movs	r3, #2
 800c5ac:	73fb      	strb	r3, [r7, #15]
    break;
 800c5ae:	e008      	b.n	800c5c2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	73fb      	strb	r3, [r7, #15]
    break;
 800c5b4:	e005      	b.n	800c5c2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c5b6:	2302      	movs	r3, #2
 800c5b8:	73fb      	strb	r3, [r7, #15]
    break;
 800c5ba:	e002      	b.n	800c5c2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c5bc:	2302      	movs	r3, #2
 800c5be:	73fb      	strb	r3, [r7, #15]
    break;
 800c5c0:	bf00      	nop
  }
  return usb_status;
 800c5c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	3714      	adds	r7, #20
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ce:	4770      	bx	lr

0800c5d0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b084      	sub	sp, #16
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c5da:	79fb      	ldrb	r3, [r7, #7]
 800c5dc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c5de:	79fb      	ldrb	r3, [r7, #7]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d102      	bne.n	800c5ea <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	73fb      	strb	r3, [r7, #15]
 800c5e8:	e001      	b.n	800c5ee <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800c5ee:	7bfb      	ldrb	r3, [r7, #15]
 800c5f0:	461a      	mov	r2, r3
 800c5f2:	2101      	movs	r1, #1
 800c5f4:	4803      	ldr	r0, [pc, #12]	; (800c604 <MX_DriverVbusFS+0x34>)
 800c5f6:	f7f8 fb09 	bl	8004c0c <HAL_GPIO_WritePin>
}
 800c5fa:	bf00      	nop
 800c5fc:	3710      	adds	r7, #16
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}
 800c602:	bf00      	nop
 800c604:	40020800 	.word	0x40020800

0800c608 <__errno>:
 800c608:	4b01      	ldr	r3, [pc, #4]	; (800c610 <__errno+0x8>)
 800c60a:	6818      	ldr	r0, [r3, #0]
 800c60c:	4770      	bx	lr
 800c60e:	bf00      	nop
 800c610:	20000058 	.word	0x20000058

0800c614 <__libc_init_array>:
 800c614:	b570      	push	{r4, r5, r6, lr}
 800c616:	4d0d      	ldr	r5, [pc, #52]	; (800c64c <__libc_init_array+0x38>)
 800c618:	4c0d      	ldr	r4, [pc, #52]	; (800c650 <__libc_init_array+0x3c>)
 800c61a:	1b64      	subs	r4, r4, r5
 800c61c:	10a4      	asrs	r4, r4, #2
 800c61e:	2600      	movs	r6, #0
 800c620:	42a6      	cmp	r6, r4
 800c622:	d109      	bne.n	800c638 <__libc_init_array+0x24>
 800c624:	4d0b      	ldr	r5, [pc, #44]	; (800c654 <__libc_init_array+0x40>)
 800c626:	4c0c      	ldr	r4, [pc, #48]	; (800c658 <__libc_init_array+0x44>)
 800c628:	f001 f80a 	bl	800d640 <_init>
 800c62c:	1b64      	subs	r4, r4, r5
 800c62e:	10a4      	asrs	r4, r4, #2
 800c630:	2600      	movs	r6, #0
 800c632:	42a6      	cmp	r6, r4
 800c634:	d105      	bne.n	800c642 <__libc_init_array+0x2e>
 800c636:	bd70      	pop	{r4, r5, r6, pc}
 800c638:	f855 3b04 	ldr.w	r3, [r5], #4
 800c63c:	4798      	blx	r3
 800c63e:	3601      	adds	r6, #1
 800c640:	e7ee      	b.n	800c620 <__libc_init_array+0xc>
 800c642:	f855 3b04 	ldr.w	r3, [r5], #4
 800c646:	4798      	blx	r3
 800c648:	3601      	adds	r6, #1
 800c64a:	e7f2      	b.n	800c632 <__libc_init_array+0x1e>
 800c64c:	080125f8 	.word	0x080125f8
 800c650:	080125f8 	.word	0x080125f8
 800c654:	080125f8 	.word	0x080125f8
 800c658:	080125fc 	.word	0x080125fc

0800c65c <malloc>:
 800c65c:	4b02      	ldr	r3, [pc, #8]	; (800c668 <malloc+0xc>)
 800c65e:	4601      	mov	r1, r0
 800c660:	6818      	ldr	r0, [r3, #0]
 800c662:	f000 b871 	b.w	800c748 <_malloc_r>
 800c666:	bf00      	nop
 800c668:	20000058 	.word	0x20000058

0800c66c <free>:
 800c66c:	4b02      	ldr	r3, [pc, #8]	; (800c678 <free+0xc>)
 800c66e:	4601      	mov	r1, r0
 800c670:	6818      	ldr	r0, [r3, #0]
 800c672:	f000 b819 	b.w	800c6a8 <_free_r>
 800c676:	bf00      	nop
 800c678:	20000058 	.word	0x20000058

0800c67c <memcpy>:
 800c67c:	440a      	add	r2, r1
 800c67e:	4291      	cmp	r1, r2
 800c680:	f100 33ff 	add.w	r3, r0, #4294967295
 800c684:	d100      	bne.n	800c688 <memcpy+0xc>
 800c686:	4770      	bx	lr
 800c688:	b510      	push	{r4, lr}
 800c68a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c68e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c692:	4291      	cmp	r1, r2
 800c694:	d1f9      	bne.n	800c68a <memcpy+0xe>
 800c696:	bd10      	pop	{r4, pc}

0800c698 <memset>:
 800c698:	4402      	add	r2, r0
 800c69a:	4603      	mov	r3, r0
 800c69c:	4293      	cmp	r3, r2
 800c69e:	d100      	bne.n	800c6a2 <memset+0xa>
 800c6a0:	4770      	bx	lr
 800c6a2:	f803 1b01 	strb.w	r1, [r3], #1
 800c6a6:	e7f9      	b.n	800c69c <memset+0x4>

0800c6a8 <_free_r>:
 800c6a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c6aa:	2900      	cmp	r1, #0
 800c6ac:	d048      	beq.n	800c740 <_free_r+0x98>
 800c6ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6b2:	9001      	str	r0, [sp, #4]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	f1a1 0404 	sub.w	r4, r1, #4
 800c6ba:	bfb8      	it	lt
 800c6bc:	18e4      	addlt	r4, r4, r3
 800c6be:	f000 fc19 	bl	800cef4 <__malloc_lock>
 800c6c2:	4a20      	ldr	r2, [pc, #128]	; (800c744 <_free_r+0x9c>)
 800c6c4:	9801      	ldr	r0, [sp, #4]
 800c6c6:	6813      	ldr	r3, [r2, #0]
 800c6c8:	4615      	mov	r5, r2
 800c6ca:	b933      	cbnz	r3, 800c6da <_free_r+0x32>
 800c6cc:	6063      	str	r3, [r4, #4]
 800c6ce:	6014      	str	r4, [r2, #0]
 800c6d0:	b003      	add	sp, #12
 800c6d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c6d6:	f000 bc13 	b.w	800cf00 <__malloc_unlock>
 800c6da:	42a3      	cmp	r3, r4
 800c6dc:	d90b      	bls.n	800c6f6 <_free_r+0x4e>
 800c6de:	6821      	ldr	r1, [r4, #0]
 800c6e0:	1862      	adds	r2, r4, r1
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	bf04      	itt	eq
 800c6e6:	681a      	ldreq	r2, [r3, #0]
 800c6e8:	685b      	ldreq	r3, [r3, #4]
 800c6ea:	6063      	str	r3, [r4, #4]
 800c6ec:	bf04      	itt	eq
 800c6ee:	1852      	addeq	r2, r2, r1
 800c6f0:	6022      	streq	r2, [r4, #0]
 800c6f2:	602c      	str	r4, [r5, #0]
 800c6f4:	e7ec      	b.n	800c6d0 <_free_r+0x28>
 800c6f6:	461a      	mov	r2, r3
 800c6f8:	685b      	ldr	r3, [r3, #4]
 800c6fa:	b10b      	cbz	r3, 800c700 <_free_r+0x58>
 800c6fc:	42a3      	cmp	r3, r4
 800c6fe:	d9fa      	bls.n	800c6f6 <_free_r+0x4e>
 800c700:	6811      	ldr	r1, [r2, #0]
 800c702:	1855      	adds	r5, r2, r1
 800c704:	42a5      	cmp	r5, r4
 800c706:	d10b      	bne.n	800c720 <_free_r+0x78>
 800c708:	6824      	ldr	r4, [r4, #0]
 800c70a:	4421      	add	r1, r4
 800c70c:	1854      	adds	r4, r2, r1
 800c70e:	42a3      	cmp	r3, r4
 800c710:	6011      	str	r1, [r2, #0]
 800c712:	d1dd      	bne.n	800c6d0 <_free_r+0x28>
 800c714:	681c      	ldr	r4, [r3, #0]
 800c716:	685b      	ldr	r3, [r3, #4]
 800c718:	6053      	str	r3, [r2, #4]
 800c71a:	4421      	add	r1, r4
 800c71c:	6011      	str	r1, [r2, #0]
 800c71e:	e7d7      	b.n	800c6d0 <_free_r+0x28>
 800c720:	d902      	bls.n	800c728 <_free_r+0x80>
 800c722:	230c      	movs	r3, #12
 800c724:	6003      	str	r3, [r0, #0]
 800c726:	e7d3      	b.n	800c6d0 <_free_r+0x28>
 800c728:	6825      	ldr	r5, [r4, #0]
 800c72a:	1961      	adds	r1, r4, r5
 800c72c:	428b      	cmp	r3, r1
 800c72e:	bf04      	itt	eq
 800c730:	6819      	ldreq	r1, [r3, #0]
 800c732:	685b      	ldreq	r3, [r3, #4]
 800c734:	6063      	str	r3, [r4, #4]
 800c736:	bf04      	itt	eq
 800c738:	1949      	addeq	r1, r1, r5
 800c73a:	6021      	streq	r1, [r4, #0]
 800c73c:	6054      	str	r4, [r2, #4]
 800c73e:	e7c7      	b.n	800c6d0 <_free_r+0x28>
 800c740:	b003      	add	sp, #12
 800c742:	bd30      	pop	{r4, r5, pc}
 800c744:	200000e4 	.word	0x200000e4

0800c748 <_malloc_r>:
 800c748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c74a:	1ccd      	adds	r5, r1, #3
 800c74c:	f025 0503 	bic.w	r5, r5, #3
 800c750:	3508      	adds	r5, #8
 800c752:	2d0c      	cmp	r5, #12
 800c754:	bf38      	it	cc
 800c756:	250c      	movcc	r5, #12
 800c758:	2d00      	cmp	r5, #0
 800c75a:	4606      	mov	r6, r0
 800c75c:	db01      	blt.n	800c762 <_malloc_r+0x1a>
 800c75e:	42a9      	cmp	r1, r5
 800c760:	d903      	bls.n	800c76a <_malloc_r+0x22>
 800c762:	230c      	movs	r3, #12
 800c764:	6033      	str	r3, [r6, #0]
 800c766:	2000      	movs	r0, #0
 800c768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c76a:	f000 fbc3 	bl	800cef4 <__malloc_lock>
 800c76e:	4921      	ldr	r1, [pc, #132]	; (800c7f4 <_malloc_r+0xac>)
 800c770:	680a      	ldr	r2, [r1, #0]
 800c772:	4614      	mov	r4, r2
 800c774:	b99c      	cbnz	r4, 800c79e <_malloc_r+0x56>
 800c776:	4f20      	ldr	r7, [pc, #128]	; (800c7f8 <_malloc_r+0xb0>)
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	b923      	cbnz	r3, 800c786 <_malloc_r+0x3e>
 800c77c:	4621      	mov	r1, r4
 800c77e:	4630      	mov	r0, r6
 800c780:	f000 f8ca 	bl	800c918 <_sbrk_r>
 800c784:	6038      	str	r0, [r7, #0]
 800c786:	4629      	mov	r1, r5
 800c788:	4630      	mov	r0, r6
 800c78a:	f000 f8c5 	bl	800c918 <_sbrk_r>
 800c78e:	1c43      	adds	r3, r0, #1
 800c790:	d123      	bne.n	800c7da <_malloc_r+0x92>
 800c792:	230c      	movs	r3, #12
 800c794:	6033      	str	r3, [r6, #0]
 800c796:	4630      	mov	r0, r6
 800c798:	f000 fbb2 	bl	800cf00 <__malloc_unlock>
 800c79c:	e7e3      	b.n	800c766 <_malloc_r+0x1e>
 800c79e:	6823      	ldr	r3, [r4, #0]
 800c7a0:	1b5b      	subs	r3, r3, r5
 800c7a2:	d417      	bmi.n	800c7d4 <_malloc_r+0x8c>
 800c7a4:	2b0b      	cmp	r3, #11
 800c7a6:	d903      	bls.n	800c7b0 <_malloc_r+0x68>
 800c7a8:	6023      	str	r3, [r4, #0]
 800c7aa:	441c      	add	r4, r3
 800c7ac:	6025      	str	r5, [r4, #0]
 800c7ae:	e004      	b.n	800c7ba <_malloc_r+0x72>
 800c7b0:	6863      	ldr	r3, [r4, #4]
 800c7b2:	42a2      	cmp	r2, r4
 800c7b4:	bf0c      	ite	eq
 800c7b6:	600b      	streq	r3, [r1, #0]
 800c7b8:	6053      	strne	r3, [r2, #4]
 800c7ba:	4630      	mov	r0, r6
 800c7bc:	f000 fba0 	bl	800cf00 <__malloc_unlock>
 800c7c0:	f104 000b 	add.w	r0, r4, #11
 800c7c4:	1d23      	adds	r3, r4, #4
 800c7c6:	f020 0007 	bic.w	r0, r0, #7
 800c7ca:	1ac2      	subs	r2, r0, r3
 800c7cc:	d0cc      	beq.n	800c768 <_malloc_r+0x20>
 800c7ce:	1a1b      	subs	r3, r3, r0
 800c7d0:	50a3      	str	r3, [r4, r2]
 800c7d2:	e7c9      	b.n	800c768 <_malloc_r+0x20>
 800c7d4:	4622      	mov	r2, r4
 800c7d6:	6864      	ldr	r4, [r4, #4]
 800c7d8:	e7cc      	b.n	800c774 <_malloc_r+0x2c>
 800c7da:	1cc4      	adds	r4, r0, #3
 800c7dc:	f024 0403 	bic.w	r4, r4, #3
 800c7e0:	42a0      	cmp	r0, r4
 800c7e2:	d0e3      	beq.n	800c7ac <_malloc_r+0x64>
 800c7e4:	1a21      	subs	r1, r4, r0
 800c7e6:	4630      	mov	r0, r6
 800c7e8:	f000 f896 	bl	800c918 <_sbrk_r>
 800c7ec:	3001      	adds	r0, #1
 800c7ee:	d1dd      	bne.n	800c7ac <_malloc_r+0x64>
 800c7f0:	e7cf      	b.n	800c792 <_malloc_r+0x4a>
 800c7f2:	bf00      	nop
 800c7f4:	200000e4 	.word	0x200000e4
 800c7f8:	200000e8 	.word	0x200000e8

0800c7fc <iprintf>:
 800c7fc:	b40f      	push	{r0, r1, r2, r3}
 800c7fe:	4b0a      	ldr	r3, [pc, #40]	; (800c828 <iprintf+0x2c>)
 800c800:	b513      	push	{r0, r1, r4, lr}
 800c802:	681c      	ldr	r4, [r3, #0]
 800c804:	b124      	cbz	r4, 800c810 <iprintf+0x14>
 800c806:	69a3      	ldr	r3, [r4, #24]
 800c808:	b913      	cbnz	r3, 800c810 <iprintf+0x14>
 800c80a:	4620      	mov	r0, r4
 800c80c:	f000 fa6e 	bl	800ccec <__sinit>
 800c810:	ab05      	add	r3, sp, #20
 800c812:	9a04      	ldr	r2, [sp, #16]
 800c814:	68a1      	ldr	r1, [r4, #8]
 800c816:	9301      	str	r3, [sp, #4]
 800c818:	4620      	mov	r0, r4
 800c81a:	f000 fba1 	bl	800cf60 <_vfiprintf_r>
 800c81e:	b002      	add	sp, #8
 800c820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c824:	b004      	add	sp, #16
 800c826:	4770      	bx	lr
 800c828:	20000058 	.word	0x20000058

0800c82c <_puts_r>:
 800c82c:	b570      	push	{r4, r5, r6, lr}
 800c82e:	460e      	mov	r6, r1
 800c830:	4605      	mov	r5, r0
 800c832:	b118      	cbz	r0, 800c83c <_puts_r+0x10>
 800c834:	6983      	ldr	r3, [r0, #24]
 800c836:	b90b      	cbnz	r3, 800c83c <_puts_r+0x10>
 800c838:	f000 fa58 	bl	800ccec <__sinit>
 800c83c:	69ab      	ldr	r3, [r5, #24]
 800c83e:	68ac      	ldr	r4, [r5, #8]
 800c840:	b913      	cbnz	r3, 800c848 <_puts_r+0x1c>
 800c842:	4628      	mov	r0, r5
 800c844:	f000 fa52 	bl	800ccec <__sinit>
 800c848:	4b2c      	ldr	r3, [pc, #176]	; (800c8fc <_puts_r+0xd0>)
 800c84a:	429c      	cmp	r4, r3
 800c84c:	d120      	bne.n	800c890 <_puts_r+0x64>
 800c84e:	686c      	ldr	r4, [r5, #4]
 800c850:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c852:	07db      	lsls	r3, r3, #31
 800c854:	d405      	bmi.n	800c862 <_puts_r+0x36>
 800c856:	89a3      	ldrh	r3, [r4, #12]
 800c858:	0598      	lsls	r0, r3, #22
 800c85a:	d402      	bmi.n	800c862 <_puts_r+0x36>
 800c85c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c85e:	f000 fae3 	bl	800ce28 <__retarget_lock_acquire_recursive>
 800c862:	89a3      	ldrh	r3, [r4, #12]
 800c864:	0719      	lsls	r1, r3, #28
 800c866:	d51d      	bpl.n	800c8a4 <_puts_r+0x78>
 800c868:	6923      	ldr	r3, [r4, #16]
 800c86a:	b1db      	cbz	r3, 800c8a4 <_puts_r+0x78>
 800c86c:	3e01      	subs	r6, #1
 800c86e:	68a3      	ldr	r3, [r4, #8]
 800c870:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c874:	3b01      	subs	r3, #1
 800c876:	60a3      	str	r3, [r4, #8]
 800c878:	bb39      	cbnz	r1, 800c8ca <_puts_r+0x9e>
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	da38      	bge.n	800c8f0 <_puts_r+0xc4>
 800c87e:	4622      	mov	r2, r4
 800c880:	210a      	movs	r1, #10
 800c882:	4628      	mov	r0, r5
 800c884:	f000 f858 	bl	800c938 <__swbuf_r>
 800c888:	3001      	adds	r0, #1
 800c88a:	d011      	beq.n	800c8b0 <_puts_r+0x84>
 800c88c:	250a      	movs	r5, #10
 800c88e:	e011      	b.n	800c8b4 <_puts_r+0x88>
 800c890:	4b1b      	ldr	r3, [pc, #108]	; (800c900 <_puts_r+0xd4>)
 800c892:	429c      	cmp	r4, r3
 800c894:	d101      	bne.n	800c89a <_puts_r+0x6e>
 800c896:	68ac      	ldr	r4, [r5, #8]
 800c898:	e7da      	b.n	800c850 <_puts_r+0x24>
 800c89a:	4b1a      	ldr	r3, [pc, #104]	; (800c904 <_puts_r+0xd8>)
 800c89c:	429c      	cmp	r4, r3
 800c89e:	bf08      	it	eq
 800c8a0:	68ec      	ldreq	r4, [r5, #12]
 800c8a2:	e7d5      	b.n	800c850 <_puts_r+0x24>
 800c8a4:	4621      	mov	r1, r4
 800c8a6:	4628      	mov	r0, r5
 800c8a8:	f000 f898 	bl	800c9dc <__swsetup_r>
 800c8ac:	2800      	cmp	r0, #0
 800c8ae:	d0dd      	beq.n	800c86c <_puts_r+0x40>
 800c8b0:	f04f 35ff 	mov.w	r5, #4294967295
 800c8b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c8b6:	07da      	lsls	r2, r3, #31
 800c8b8:	d405      	bmi.n	800c8c6 <_puts_r+0x9a>
 800c8ba:	89a3      	ldrh	r3, [r4, #12]
 800c8bc:	059b      	lsls	r3, r3, #22
 800c8be:	d402      	bmi.n	800c8c6 <_puts_r+0x9a>
 800c8c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8c2:	f000 fab2 	bl	800ce2a <__retarget_lock_release_recursive>
 800c8c6:	4628      	mov	r0, r5
 800c8c8:	bd70      	pop	{r4, r5, r6, pc}
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	da04      	bge.n	800c8d8 <_puts_r+0xac>
 800c8ce:	69a2      	ldr	r2, [r4, #24]
 800c8d0:	429a      	cmp	r2, r3
 800c8d2:	dc06      	bgt.n	800c8e2 <_puts_r+0xb6>
 800c8d4:	290a      	cmp	r1, #10
 800c8d6:	d004      	beq.n	800c8e2 <_puts_r+0xb6>
 800c8d8:	6823      	ldr	r3, [r4, #0]
 800c8da:	1c5a      	adds	r2, r3, #1
 800c8dc:	6022      	str	r2, [r4, #0]
 800c8de:	7019      	strb	r1, [r3, #0]
 800c8e0:	e7c5      	b.n	800c86e <_puts_r+0x42>
 800c8e2:	4622      	mov	r2, r4
 800c8e4:	4628      	mov	r0, r5
 800c8e6:	f000 f827 	bl	800c938 <__swbuf_r>
 800c8ea:	3001      	adds	r0, #1
 800c8ec:	d1bf      	bne.n	800c86e <_puts_r+0x42>
 800c8ee:	e7df      	b.n	800c8b0 <_puts_r+0x84>
 800c8f0:	6823      	ldr	r3, [r4, #0]
 800c8f2:	250a      	movs	r5, #10
 800c8f4:	1c5a      	adds	r2, r3, #1
 800c8f6:	6022      	str	r2, [r4, #0]
 800c8f8:	701d      	strb	r5, [r3, #0]
 800c8fa:	e7db      	b.n	800c8b4 <_puts_r+0x88>
 800c8fc:	0801257c 	.word	0x0801257c
 800c900:	0801259c 	.word	0x0801259c
 800c904:	0801255c 	.word	0x0801255c

0800c908 <puts>:
 800c908:	4b02      	ldr	r3, [pc, #8]	; (800c914 <puts+0xc>)
 800c90a:	4601      	mov	r1, r0
 800c90c:	6818      	ldr	r0, [r3, #0]
 800c90e:	f7ff bf8d 	b.w	800c82c <_puts_r>
 800c912:	bf00      	nop
 800c914:	20000058 	.word	0x20000058

0800c918 <_sbrk_r>:
 800c918:	b538      	push	{r3, r4, r5, lr}
 800c91a:	4d06      	ldr	r5, [pc, #24]	; (800c934 <_sbrk_r+0x1c>)
 800c91c:	2300      	movs	r3, #0
 800c91e:	4604      	mov	r4, r0
 800c920:	4608      	mov	r0, r1
 800c922:	602b      	str	r3, [r5, #0]
 800c924:	f7f7 fdbc 	bl	80044a0 <_sbrk>
 800c928:	1c43      	adds	r3, r0, #1
 800c92a:	d102      	bne.n	800c932 <_sbrk_r+0x1a>
 800c92c:	682b      	ldr	r3, [r5, #0]
 800c92e:	b103      	cbz	r3, 800c932 <_sbrk_r+0x1a>
 800c930:	6023      	str	r3, [r4, #0]
 800c932:	bd38      	pop	{r3, r4, r5, pc}
 800c934:	20000ff0 	.word	0x20000ff0

0800c938 <__swbuf_r>:
 800c938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c93a:	460e      	mov	r6, r1
 800c93c:	4614      	mov	r4, r2
 800c93e:	4605      	mov	r5, r0
 800c940:	b118      	cbz	r0, 800c94a <__swbuf_r+0x12>
 800c942:	6983      	ldr	r3, [r0, #24]
 800c944:	b90b      	cbnz	r3, 800c94a <__swbuf_r+0x12>
 800c946:	f000 f9d1 	bl	800ccec <__sinit>
 800c94a:	4b21      	ldr	r3, [pc, #132]	; (800c9d0 <__swbuf_r+0x98>)
 800c94c:	429c      	cmp	r4, r3
 800c94e:	d12b      	bne.n	800c9a8 <__swbuf_r+0x70>
 800c950:	686c      	ldr	r4, [r5, #4]
 800c952:	69a3      	ldr	r3, [r4, #24]
 800c954:	60a3      	str	r3, [r4, #8]
 800c956:	89a3      	ldrh	r3, [r4, #12]
 800c958:	071a      	lsls	r2, r3, #28
 800c95a:	d52f      	bpl.n	800c9bc <__swbuf_r+0x84>
 800c95c:	6923      	ldr	r3, [r4, #16]
 800c95e:	b36b      	cbz	r3, 800c9bc <__swbuf_r+0x84>
 800c960:	6923      	ldr	r3, [r4, #16]
 800c962:	6820      	ldr	r0, [r4, #0]
 800c964:	1ac0      	subs	r0, r0, r3
 800c966:	6963      	ldr	r3, [r4, #20]
 800c968:	b2f6      	uxtb	r6, r6
 800c96a:	4283      	cmp	r3, r0
 800c96c:	4637      	mov	r7, r6
 800c96e:	dc04      	bgt.n	800c97a <__swbuf_r+0x42>
 800c970:	4621      	mov	r1, r4
 800c972:	4628      	mov	r0, r5
 800c974:	f000 f926 	bl	800cbc4 <_fflush_r>
 800c978:	bb30      	cbnz	r0, 800c9c8 <__swbuf_r+0x90>
 800c97a:	68a3      	ldr	r3, [r4, #8]
 800c97c:	3b01      	subs	r3, #1
 800c97e:	60a3      	str	r3, [r4, #8]
 800c980:	6823      	ldr	r3, [r4, #0]
 800c982:	1c5a      	adds	r2, r3, #1
 800c984:	6022      	str	r2, [r4, #0]
 800c986:	701e      	strb	r6, [r3, #0]
 800c988:	6963      	ldr	r3, [r4, #20]
 800c98a:	3001      	adds	r0, #1
 800c98c:	4283      	cmp	r3, r0
 800c98e:	d004      	beq.n	800c99a <__swbuf_r+0x62>
 800c990:	89a3      	ldrh	r3, [r4, #12]
 800c992:	07db      	lsls	r3, r3, #31
 800c994:	d506      	bpl.n	800c9a4 <__swbuf_r+0x6c>
 800c996:	2e0a      	cmp	r6, #10
 800c998:	d104      	bne.n	800c9a4 <__swbuf_r+0x6c>
 800c99a:	4621      	mov	r1, r4
 800c99c:	4628      	mov	r0, r5
 800c99e:	f000 f911 	bl	800cbc4 <_fflush_r>
 800c9a2:	b988      	cbnz	r0, 800c9c8 <__swbuf_r+0x90>
 800c9a4:	4638      	mov	r0, r7
 800c9a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9a8:	4b0a      	ldr	r3, [pc, #40]	; (800c9d4 <__swbuf_r+0x9c>)
 800c9aa:	429c      	cmp	r4, r3
 800c9ac:	d101      	bne.n	800c9b2 <__swbuf_r+0x7a>
 800c9ae:	68ac      	ldr	r4, [r5, #8]
 800c9b0:	e7cf      	b.n	800c952 <__swbuf_r+0x1a>
 800c9b2:	4b09      	ldr	r3, [pc, #36]	; (800c9d8 <__swbuf_r+0xa0>)
 800c9b4:	429c      	cmp	r4, r3
 800c9b6:	bf08      	it	eq
 800c9b8:	68ec      	ldreq	r4, [r5, #12]
 800c9ba:	e7ca      	b.n	800c952 <__swbuf_r+0x1a>
 800c9bc:	4621      	mov	r1, r4
 800c9be:	4628      	mov	r0, r5
 800c9c0:	f000 f80c 	bl	800c9dc <__swsetup_r>
 800c9c4:	2800      	cmp	r0, #0
 800c9c6:	d0cb      	beq.n	800c960 <__swbuf_r+0x28>
 800c9c8:	f04f 37ff 	mov.w	r7, #4294967295
 800c9cc:	e7ea      	b.n	800c9a4 <__swbuf_r+0x6c>
 800c9ce:	bf00      	nop
 800c9d0:	0801257c 	.word	0x0801257c
 800c9d4:	0801259c 	.word	0x0801259c
 800c9d8:	0801255c 	.word	0x0801255c

0800c9dc <__swsetup_r>:
 800c9dc:	4b32      	ldr	r3, [pc, #200]	; (800caa8 <__swsetup_r+0xcc>)
 800c9de:	b570      	push	{r4, r5, r6, lr}
 800c9e0:	681d      	ldr	r5, [r3, #0]
 800c9e2:	4606      	mov	r6, r0
 800c9e4:	460c      	mov	r4, r1
 800c9e6:	b125      	cbz	r5, 800c9f2 <__swsetup_r+0x16>
 800c9e8:	69ab      	ldr	r3, [r5, #24]
 800c9ea:	b913      	cbnz	r3, 800c9f2 <__swsetup_r+0x16>
 800c9ec:	4628      	mov	r0, r5
 800c9ee:	f000 f97d 	bl	800ccec <__sinit>
 800c9f2:	4b2e      	ldr	r3, [pc, #184]	; (800caac <__swsetup_r+0xd0>)
 800c9f4:	429c      	cmp	r4, r3
 800c9f6:	d10f      	bne.n	800ca18 <__swsetup_r+0x3c>
 800c9f8:	686c      	ldr	r4, [r5, #4]
 800c9fa:	89a3      	ldrh	r3, [r4, #12]
 800c9fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca00:	0719      	lsls	r1, r3, #28
 800ca02:	d42c      	bmi.n	800ca5e <__swsetup_r+0x82>
 800ca04:	06dd      	lsls	r5, r3, #27
 800ca06:	d411      	bmi.n	800ca2c <__swsetup_r+0x50>
 800ca08:	2309      	movs	r3, #9
 800ca0a:	6033      	str	r3, [r6, #0]
 800ca0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ca10:	81a3      	strh	r3, [r4, #12]
 800ca12:	f04f 30ff 	mov.w	r0, #4294967295
 800ca16:	e03e      	b.n	800ca96 <__swsetup_r+0xba>
 800ca18:	4b25      	ldr	r3, [pc, #148]	; (800cab0 <__swsetup_r+0xd4>)
 800ca1a:	429c      	cmp	r4, r3
 800ca1c:	d101      	bne.n	800ca22 <__swsetup_r+0x46>
 800ca1e:	68ac      	ldr	r4, [r5, #8]
 800ca20:	e7eb      	b.n	800c9fa <__swsetup_r+0x1e>
 800ca22:	4b24      	ldr	r3, [pc, #144]	; (800cab4 <__swsetup_r+0xd8>)
 800ca24:	429c      	cmp	r4, r3
 800ca26:	bf08      	it	eq
 800ca28:	68ec      	ldreq	r4, [r5, #12]
 800ca2a:	e7e6      	b.n	800c9fa <__swsetup_r+0x1e>
 800ca2c:	0758      	lsls	r0, r3, #29
 800ca2e:	d512      	bpl.n	800ca56 <__swsetup_r+0x7a>
 800ca30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca32:	b141      	cbz	r1, 800ca46 <__swsetup_r+0x6a>
 800ca34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca38:	4299      	cmp	r1, r3
 800ca3a:	d002      	beq.n	800ca42 <__swsetup_r+0x66>
 800ca3c:	4630      	mov	r0, r6
 800ca3e:	f7ff fe33 	bl	800c6a8 <_free_r>
 800ca42:	2300      	movs	r3, #0
 800ca44:	6363      	str	r3, [r4, #52]	; 0x34
 800ca46:	89a3      	ldrh	r3, [r4, #12]
 800ca48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ca4c:	81a3      	strh	r3, [r4, #12]
 800ca4e:	2300      	movs	r3, #0
 800ca50:	6063      	str	r3, [r4, #4]
 800ca52:	6923      	ldr	r3, [r4, #16]
 800ca54:	6023      	str	r3, [r4, #0]
 800ca56:	89a3      	ldrh	r3, [r4, #12]
 800ca58:	f043 0308 	orr.w	r3, r3, #8
 800ca5c:	81a3      	strh	r3, [r4, #12]
 800ca5e:	6923      	ldr	r3, [r4, #16]
 800ca60:	b94b      	cbnz	r3, 800ca76 <__swsetup_r+0x9a>
 800ca62:	89a3      	ldrh	r3, [r4, #12]
 800ca64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ca68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca6c:	d003      	beq.n	800ca76 <__swsetup_r+0x9a>
 800ca6e:	4621      	mov	r1, r4
 800ca70:	4630      	mov	r0, r6
 800ca72:	f000 f9ff 	bl	800ce74 <__smakebuf_r>
 800ca76:	89a0      	ldrh	r0, [r4, #12]
 800ca78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca7c:	f010 0301 	ands.w	r3, r0, #1
 800ca80:	d00a      	beq.n	800ca98 <__swsetup_r+0xbc>
 800ca82:	2300      	movs	r3, #0
 800ca84:	60a3      	str	r3, [r4, #8]
 800ca86:	6963      	ldr	r3, [r4, #20]
 800ca88:	425b      	negs	r3, r3
 800ca8a:	61a3      	str	r3, [r4, #24]
 800ca8c:	6923      	ldr	r3, [r4, #16]
 800ca8e:	b943      	cbnz	r3, 800caa2 <__swsetup_r+0xc6>
 800ca90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ca94:	d1ba      	bne.n	800ca0c <__swsetup_r+0x30>
 800ca96:	bd70      	pop	{r4, r5, r6, pc}
 800ca98:	0781      	lsls	r1, r0, #30
 800ca9a:	bf58      	it	pl
 800ca9c:	6963      	ldrpl	r3, [r4, #20]
 800ca9e:	60a3      	str	r3, [r4, #8]
 800caa0:	e7f4      	b.n	800ca8c <__swsetup_r+0xb0>
 800caa2:	2000      	movs	r0, #0
 800caa4:	e7f7      	b.n	800ca96 <__swsetup_r+0xba>
 800caa6:	bf00      	nop
 800caa8:	20000058 	.word	0x20000058
 800caac:	0801257c 	.word	0x0801257c
 800cab0:	0801259c 	.word	0x0801259c
 800cab4:	0801255c 	.word	0x0801255c

0800cab8 <__sflush_r>:
 800cab8:	898a      	ldrh	r2, [r1, #12]
 800caba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cabe:	4605      	mov	r5, r0
 800cac0:	0710      	lsls	r0, r2, #28
 800cac2:	460c      	mov	r4, r1
 800cac4:	d458      	bmi.n	800cb78 <__sflush_r+0xc0>
 800cac6:	684b      	ldr	r3, [r1, #4]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	dc05      	bgt.n	800cad8 <__sflush_r+0x20>
 800cacc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cace:	2b00      	cmp	r3, #0
 800cad0:	dc02      	bgt.n	800cad8 <__sflush_r+0x20>
 800cad2:	2000      	movs	r0, #0
 800cad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cad8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cada:	2e00      	cmp	r6, #0
 800cadc:	d0f9      	beq.n	800cad2 <__sflush_r+0x1a>
 800cade:	2300      	movs	r3, #0
 800cae0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cae4:	682f      	ldr	r7, [r5, #0]
 800cae6:	602b      	str	r3, [r5, #0]
 800cae8:	d032      	beq.n	800cb50 <__sflush_r+0x98>
 800caea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800caec:	89a3      	ldrh	r3, [r4, #12]
 800caee:	075a      	lsls	r2, r3, #29
 800caf0:	d505      	bpl.n	800cafe <__sflush_r+0x46>
 800caf2:	6863      	ldr	r3, [r4, #4]
 800caf4:	1ac0      	subs	r0, r0, r3
 800caf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800caf8:	b10b      	cbz	r3, 800cafe <__sflush_r+0x46>
 800cafa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cafc:	1ac0      	subs	r0, r0, r3
 800cafe:	2300      	movs	r3, #0
 800cb00:	4602      	mov	r2, r0
 800cb02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb04:	6a21      	ldr	r1, [r4, #32]
 800cb06:	4628      	mov	r0, r5
 800cb08:	47b0      	blx	r6
 800cb0a:	1c43      	adds	r3, r0, #1
 800cb0c:	89a3      	ldrh	r3, [r4, #12]
 800cb0e:	d106      	bne.n	800cb1e <__sflush_r+0x66>
 800cb10:	6829      	ldr	r1, [r5, #0]
 800cb12:	291d      	cmp	r1, #29
 800cb14:	d82c      	bhi.n	800cb70 <__sflush_r+0xb8>
 800cb16:	4a2a      	ldr	r2, [pc, #168]	; (800cbc0 <__sflush_r+0x108>)
 800cb18:	40ca      	lsrs	r2, r1
 800cb1a:	07d6      	lsls	r6, r2, #31
 800cb1c:	d528      	bpl.n	800cb70 <__sflush_r+0xb8>
 800cb1e:	2200      	movs	r2, #0
 800cb20:	6062      	str	r2, [r4, #4]
 800cb22:	04d9      	lsls	r1, r3, #19
 800cb24:	6922      	ldr	r2, [r4, #16]
 800cb26:	6022      	str	r2, [r4, #0]
 800cb28:	d504      	bpl.n	800cb34 <__sflush_r+0x7c>
 800cb2a:	1c42      	adds	r2, r0, #1
 800cb2c:	d101      	bne.n	800cb32 <__sflush_r+0x7a>
 800cb2e:	682b      	ldr	r3, [r5, #0]
 800cb30:	b903      	cbnz	r3, 800cb34 <__sflush_r+0x7c>
 800cb32:	6560      	str	r0, [r4, #84]	; 0x54
 800cb34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb36:	602f      	str	r7, [r5, #0]
 800cb38:	2900      	cmp	r1, #0
 800cb3a:	d0ca      	beq.n	800cad2 <__sflush_r+0x1a>
 800cb3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb40:	4299      	cmp	r1, r3
 800cb42:	d002      	beq.n	800cb4a <__sflush_r+0x92>
 800cb44:	4628      	mov	r0, r5
 800cb46:	f7ff fdaf 	bl	800c6a8 <_free_r>
 800cb4a:	2000      	movs	r0, #0
 800cb4c:	6360      	str	r0, [r4, #52]	; 0x34
 800cb4e:	e7c1      	b.n	800cad4 <__sflush_r+0x1c>
 800cb50:	6a21      	ldr	r1, [r4, #32]
 800cb52:	2301      	movs	r3, #1
 800cb54:	4628      	mov	r0, r5
 800cb56:	47b0      	blx	r6
 800cb58:	1c41      	adds	r1, r0, #1
 800cb5a:	d1c7      	bne.n	800caec <__sflush_r+0x34>
 800cb5c:	682b      	ldr	r3, [r5, #0]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d0c4      	beq.n	800caec <__sflush_r+0x34>
 800cb62:	2b1d      	cmp	r3, #29
 800cb64:	d001      	beq.n	800cb6a <__sflush_r+0xb2>
 800cb66:	2b16      	cmp	r3, #22
 800cb68:	d101      	bne.n	800cb6e <__sflush_r+0xb6>
 800cb6a:	602f      	str	r7, [r5, #0]
 800cb6c:	e7b1      	b.n	800cad2 <__sflush_r+0x1a>
 800cb6e:	89a3      	ldrh	r3, [r4, #12]
 800cb70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb74:	81a3      	strh	r3, [r4, #12]
 800cb76:	e7ad      	b.n	800cad4 <__sflush_r+0x1c>
 800cb78:	690f      	ldr	r7, [r1, #16]
 800cb7a:	2f00      	cmp	r7, #0
 800cb7c:	d0a9      	beq.n	800cad2 <__sflush_r+0x1a>
 800cb7e:	0793      	lsls	r3, r2, #30
 800cb80:	680e      	ldr	r6, [r1, #0]
 800cb82:	bf08      	it	eq
 800cb84:	694b      	ldreq	r3, [r1, #20]
 800cb86:	600f      	str	r7, [r1, #0]
 800cb88:	bf18      	it	ne
 800cb8a:	2300      	movne	r3, #0
 800cb8c:	eba6 0807 	sub.w	r8, r6, r7
 800cb90:	608b      	str	r3, [r1, #8]
 800cb92:	f1b8 0f00 	cmp.w	r8, #0
 800cb96:	dd9c      	ble.n	800cad2 <__sflush_r+0x1a>
 800cb98:	6a21      	ldr	r1, [r4, #32]
 800cb9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cb9c:	4643      	mov	r3, r8
 800cb9e:	463a      	mov	r2, r7
 800cba0:	4628      	mov	r0, r5
 800cba2:	47b0      	blx	r6
 800cba4:	2800      	cmp	r0, #0
 800cba6:	dc06      	bgt.n	800cbb6 <__sflush_r+0xfe>
 800cba8:	89a3      	ldrh	r3, [r4, #12]
 800cbaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbae:	81a3      	strh	r3, [r4, #12]
 800cbb0:	f04f 30ff 	mov.w	r0, #4294967295
 800cbb4:	e78e      	b.n	800cad4 <__sflush_r+0x1c>
 800cbb6:	4407      	add	r7, r0
 800cbb8:	eba8 0800 	sub.w	r8, r8, r0
 800cbbc:	e7e9      	b.n	800cb92 <__sflush_r+0xda>
 800cbbe:	bf00      	nop
 800cbc0:	20400001 	.word	0x20400001

0800cbc4 <_fflush_r>:
 800cbc4:	b538      	push	{r3, r4, r5, lr}
 800cbc6:	690b      	ldr	r3, [r1, #16]
 800cbc8:	4605      	mov	r5, r0
 800cbca:	460c      	mov	r4, r1
 800cbcc:	b913      	cbnz	r3, 800cbd4 <_fflush_r+0x10>
 800cbce:	2500      	movs	r5, #0
 800cbd0:	4628      	mov	r0, r5
 800cbd2:	bd38      	pop	{r3, r4, r5, pc}
 800cbd4:	b118      	cbz	r0, 800cbde <_fflush_r+0x1a>
 800cbd6:	6983      	ldr	r3, [r0, #24]
 800cbd8:	b90b      	cbnz	r3, 800cbde <_fflush_r+0x1a>
 800cbda:	f000 f887 	bl	800ccec <__sinit>
 800cbde:	4b14      	ldr	r3, [pc, #80]	; (800cc30 <_fflush_r+0x6c>)
 800cbe0:	429c      	cmp	r4, r3
 800cbe2:	d11b      	bne.n	800cc1c <_fflush_r+0x58>
 800cbe4:	686c      	ldr	r4, [r5, #4]
 800cbe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d0ef      	beq.n	800cbce <_fflush_r+0xa>
 800cbee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cbf0:	07d0      	lsls	r0, r2, #31
 800cbf2:	d404      	bmi.n	800cbfe <_fflush_r+0x3a>
 800cbf4:	0599      	lsls	r1, r3, #22
 800cbf6:	d402      	bmi.n	800cbfe <_fflush_r+0x3a>
 800cbf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cbfa:	f000 f915 	bl	800ce28 <__retarget_lock_acquire_recursive>
 800cbfe:	4628      	mov	r0, r5
 800cc00:	4621      	mov	r1, r4
 800cc02:	f7ff ff59 	bl	800cab8 <__sflush_r>
 800cc06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc08:	07da      	lsls	r2, r3, #31
 800cc0a:	4605      	mov	r5, r0
 800cc0c:	d4e0      	bmi.n	800cbd0 <_fflush_r+0xc>
 800cc0e:	89a3      	ldrh	r3, [r4, #12]
 800cc10:	059b      	lsls	r3, r3, #22
 800cc12:	d4dd      	bmi.n	800cbd0 <_fflush_r+0xc>
 800cc14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc16:	f000 f908 	bl	800ce2a <__retarget_lock_release_recursive>
 800cc1a:	e7d9      	b.n	800cbd0 <_fflush_r+0xc>
 800cc1c:	4b05      	ldr	r3, [pc, #20]	; (800cc34 <_fflush_r+0x70>)
 800cc1e:	429c      	cmp	r4, r3
 800cc20:	d101      	bne.n	800cc26 <_fflush_r+0x62>
 800cc22:	68ac      	ldr	r4, [r5, #8]
 800cc24:	e7df      	b.n	800cbe6 <_fflush_r+0x22>
 800cc26:	4b04      	ldr	r3, [pc, #16]	; (800cc38 <_fflush_r+0x74>)
 800cc28:	429c      	cmp	r4, r3
 800cc2a:	bf08      	it	eq
 800cc2c:	68ec      	ldreq	r4, [r5, #12]
 800cc2e:	e7da      	b.n	800cbe6 <_fflush_r+0x22>
 800cc30:	0801257c 	.word	0x0801257c
 800cc34:	0801259c 	.word	0x0801259c
 800cc38:	0801255c 	.word	0x0801255c

0800cc3c <std>:
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	b510      	push	{r4, lr}
 800cc40:	4604      	mov	r4, r0
 800cc42:	e9c0 3300 	strd	r3, r3, [r0]
 800cc46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc4a:	6083      	str	r3, [r0, #8]
 800cc4c:	8181      	strh	r1, [r0, #12]
 800cc4e:	6643      	str	r3, [r0, #100]	; 0x64
 800cc50:	81c2      	strh	r2, [r0, #14]
 800cc52:	6183      	str	r3, [r0, #24]
 800cc54:	4619      	mov	r1, r3
 800cc56:	2208      	movs	r2, #8
 800cc58:	305c      	adds	r0, #92	; 0x5c
 800cc5a:	f7ff fd1d 	bl	800c698 <memset>
 800cc5e:	4b05      	ldr	r3, [pc, #20]	; (800cc74 <std+0x38>)
 800cc60:	6263      	str	r3, [r4, #36]	; 0x24
 800cc62:	4b05      	ldr	r3, [pc, #20]	; (800cc78 <std+0x3c>)
 800cc64:	62a3      	str	r3, [r4, #40]	; 0x28
 800cc66:	4b05      	ldr	r3, [pc, #20]	; (800cc7c <std+0x40>)
 800cc68:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cc6a:	4b05      	ldr	r3, [pc, #20]	; (800cc80 <std+0x44>)
 800cc6c:	6224      	str	r4, [r4, #32]
 800cc6e:	6323      	str	r3, [r4, #48]	; 0x30
 800cc70:	bd10      	pop	{r4, pc}
 800cc72:	bf00      	nop
 800cc74:	0800d4e9 	.word	0x0800d4e9
 800cc78:	0800d50b 	.word	0x0800d50b
 800cc7c:	0800d543 	.word	0x0800d543
 800cc80:	0800d567 	.word	0x0800d567

0800cc84 <_cleanup_r>:
 800cc84:	4901      	ldr	r1, [pc, #4]	; (800cc8c <_cleanup_r+0x8>)
 800cc86:	f000 b8af 	b.w	800cde8 <_fwalk_reent>
 800cc8a:	bf00      	nop
 800cc8c:	0800cbc5 	.word	0x0800cbc5

0800cc90 <__sfmoreglue>:
 800cc90:	b570      	push	{r4, r5, r6, lr}
 800cc92:	1e4a      	subs	r2, r1, #1
 800cc94:	2568      	movs	r5, #104	; 0x68
 800cc96:	4355      	muls	r5, r2
 800cc98:	460e      	mov	r6, r1
 800cc9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cc9e:	f7ff fd53 	bl	800c748 <_malloc_r>
 800cca2:	4604      	mov	r4, r0
 800cca4:	b140      	cbz	r0, 800ccb8 <__sfmoreglue+0x28>
 800cca6:	2100      	movs	r1, #0
 800cca8:	e9c0 1600 	strd	r1, r6, [r0]
 800ccac:	300c      	adds	r0, #12
 800ccae:	60a0      	str	r0, [r4, #8]
 800ccb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ccb4:	f7ff fcf0 	bl	800c698 <memset>
 800ccb8:	4620      	mov	r0, r4
 800ccba:	bd70      	pop	{r4, r5, r6, pc}

0800ccbc <__sfp_lock_acquire>:
 800ccbc:	4801      	ldr	r0, [pc, #4]	; (800ccc4 <__sfp_lock_acquire+0x8>)
 800ccbe:	f000 b8b3 	b.w	800ce28 <__retarget_lock_acquire_recursive>
 800ccc2:	bf00      	nop
 800ccc4:	20000fec 	.word	0x20000fec

0800ccc8 <__sfp_lock_release>:
 800ccc8:	4801      	ldr	r0, [pc, #4]	; (800ccd0 <__sfp_lock_release+0x8>)
 800ccca:	f000 b8ae 	b.w	800ce2a <__retarget_lock_release_recursive>
 800ccce:	bf00      	nop
 800ccd0:	20000fec 	.word	0x20000fec

0800ccd4 <__sinit_lock_acquire>:
 800ccd4:	4801      	ldr	r0, [pc, #4]	; (800ccdc <__sinit_lock_acquire+0x8>)
 800ccd6:	f000 b8a7 	b.w	800ce28 <__retarget_lock_acquire_recursive>
 800ccda:	bf00      	nop
 800ccdc:	20000fe7 	.word	0x20000fe7

0800cce0 <__sinit_lock_release>:
 800cce0:	4801      	ldr	r0, [pc, #4]	; (800cce8 <__sinit_lock_release+0x8>)
 800cce2:	f000 b8a2 	b.w	800ce2a <__retarget_lock_release_recursive>
 800cce6:	bf00      	nop
 800cce8:	20000fe7 	.word	0x20000fe7

0800ccec <__sinit>:
 800ccec:	b510      	push	{r4, lr}
 800ccee:	4604      	mov	r4, r0
 800ccf0:	f7ff fff0 	bl	800ccd4 <__sinit_lock_acquire>
 800ccf4:	69a3      	ldr	r3, [r4, #24]
 800ccf6:	b11b      	cbz	r3, 800cd00 <__sinit+0x14>
 800ccf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccfc:	f7ff bff0 	b.w	800cce0 <__sinit_lock_release>
 800cd00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cd04:	6523      	str	r3, [r4, #80]	; 0x50
 800cd06:	4b13      	ldr	r3, [pc, #76]	; (800cd54 <__sinit+0x68>)
 800cd08:	4a13      	ldr	r2, [pc, #76]	; (800cd58 <__sinit+0x6c>)
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	62a2      	str	r2, [r4, #40]	; 0x28
 800cd0e:	42a3      	cmp	r3, r4
 800cd10:	bf04      	itt	eq
 800cd12:	2301      	moveq	r3, #1
 800cd14:	61a3      	streq	r3, [r4, #24]
 800cd16:	4620      	mov	r0, r4
 800cd18:	f000 f820 	bl	800cd5c <__sfp>
 800cd1c:	6060      	str	r0, [r4, #4]
 800cd1e:	4620      	mov	r0, r4
 800cd20:	f000 f81c 	bl	800cd5c <__sfp>
 800cd24:	60a0      	str	r0, [r4, #8]
 800cd26:	4620      	mov	r0, r4
 800cd28:	f000 f818 	bl	800cd5c <__sfp>
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	60e0      	str	r0, [r4, #12]
 800cd30:	2104      	movs	r1, #4
 800cd32:	6860      	ldr	r0, [r4, #4]
 800cd34:	f7ff ff82 	bl	800cc3c <std>
 800cd38:	68a0      	ldr	r0, [r4, #8]
 800cd3a:	2201      	movs	r2, #1
 800cd3c:	2109      	movs	r1, #9
 800cd3e:	f7ff ff7d 	bl	800cc3c <std>
 800cd42:	68e0      	ldr	r0, [r4, #12]
 800cd44:	2202      	movs	r2, #2
 800cd46:	2112      	movs	r1, #18
 800cd48:	f7ff ff78 	bl	800cc3c <std>
 800cd4c:	2301      	movs	r3, #1
 800cd4e:	61a3      	str	r3, [r4, #24]
 800cd50:	e7d2      	b.n	800ccf8 <__sinit+0xc>
 800cd52:	bf00      	nop
 800cd54:	08012558 	.word	0x08012558
 800cd58:	0800cc85 	.word	0x0800cc85

0800cd5c <__sfp>:
 800cd5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd5e:	4607      	mov	r7, r0
 800cd60:	f7ff ffac 	bl	800ccbc <__sfp_lock_acquire>
 800cd64:	4b1e      	ldr	r3, [pc, #120]	; (800cde0 <__sfp+0x84>)
 800cd66:	681e      	ldr	r6, [r3, #0]
 800cd68:	69b3      	ldr	r3, [r6, #24]
 800cd6a:	b913      	cbnz	r3, 800cd72 <__sfp+0x16>
 800cd6c:	4630      	mov	r0, r6
 800cd6e:	f7ff ffbd 	bl	800ccec <__sinit>
 800cd72:	3648      	adds	r6, #72	; 0x48
 800cd74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cd78:	3b01      	subs	r3, #1
 800cd7a:	d503      	bpl.n	800cd84 <__sfp+0x28>
 800cd7c:	6833      	ldr	r3, [r6, #0]
 800cd7e:	b30b      	cbz	r3, 800cdc4 <__sfp+0x68>
 800cd80:	6836      	ldr	r6, [r6, #0]
 800cd82:	e7f7      	b.n	800cd74 <__sfp+0x18>
 800cd84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cd88:	b9d5      	cbnz	r5, 800cdc0 <__sfp+0x64>
 800cd8a:	4b16      	ldr	r3, [pc, #88]	; (800cde4 <__sfp+0x88>)
 800cd8c:	60e3      	str	r3, [r4, #12]
 800cd8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cd92:	6665      	str	r5, [r4, #100]	; 0x64
 800cd94:	f000 f847 	bl	800ce26 <__retarget_lock_init_recursive>
 800cd98:	f7ff ff96 	bl	800ccc8 <__sfp_lock_release>
 800cd9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cda0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cda4:	6025      	str	r5, [r4, #0]
 800cda6:	61a5      	str	r5, [r4, #24]
 800cda8:	2208      	movs	r2, #8
 800cdaa:	4629      	mov	r1, r5
 800cdac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cdb0:	f7ff fc72 	bl	800c698 <memset>
 800cdb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cdb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cdbc:	4620      	mov	r0, r4
 800cdbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdc0:	3468      	adds	r4, #104	; 0x68
 800cdc2:	e7d9      	b.n	800cd78 <__sfp+0x1c>
 800cdc4:	2104      	movs	r1, #4
 800cdc6:	4638      	mov	r0, r7
 800cdc8:	f7ff ff62 	bl	800cc90 <__sfmoreglue>
 800cdcc:	4604      	mov	r4, r0
 800cdce:	6030      	str	r0, [r6, #0]
 800cdd0:	2800      	cmp	r0, #0
 800cdd2:	d1d5      	bne.n	800cd80 <__sfp+0x24>
 800cdd4:	f7ff ff78 	bl	800ccc8 <__sfp_lock_release>
 800cdd8:	230c      	movs	r3, #12
 800cdda:	603b      	str	r3, [r7, #0]
 800cddc:	e7ee      	b.n	800cdbc <__sfp+0x60>
 800cdde:	bf00      	nop
 800cde0:	08012558 	.word	0x08012558
 800cde4:	ffff0001 	.word	0xffff0001

0800cde8 <_fwalk_reent>:
 800cde8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdec:	4606      	mov	r6, r0
 800cdee:	4688      	mov	r8, r1
 800cdf0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cdf4:	2700      	movs	r7, #0
 800cdf6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cdfa:	f1b9 0901 	subs.w	r9, r9, #1
 800cdfe:	d505      	bpl.n	800ce0c <_fwalk_reent+0x24>
 800ce00:	6824      	ldr	r4, [r4, #0]
 800ce02:	2c00      	cmp	r4, #0
 800ce04:	d1f7      	bne.n	800cdf6 <_fwalk_reent+0xe>
 800ce06:	4638      	mov	r0, r7
 800ce08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce0c:	89ab      	ldrh	r3, [r5, #12]
 800ce0e:	2b01      	cmp	r3, #1
 800ce10:	d907      	bls.n	800ce22 <_fwalk_reent+0x3a>
 800ce12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ce16:	3301      	adds	r3, #1
 800ce18:	d003      	beq.n	800ce22 <_fwalk_reent+0x3a>
 800ce1a:	4629      	mov	r1, r5
 800ce1c:	4630      	mov	r0, r6
 800ce1e:	47c0      	blx	r8
 800ce20:	4307      	orrs	r7, r0
 800ce22:	3568      	adds	r5, #104	; 0x68
 800ce24:	e7e9      	b.n	800cdfa <_fwalk_reent+0x12>

0800ce26 <__retarget_lock_init_recursive>:
 800ce26:	4770      	bx	lr

0800ce28 <__retarget_lock_acquire_recursive>:
 800ce28:	4770      	bx	lr

0800ce2a <__retarget_lock_release_recursive>:
 800ce2a:	4770      	bx	lr

0800ce2c <__swhatbuf_r>:
 800ce2c:	b570      	push	{r4, r5, r6, lr}
 800ce2e:	460e      	mov	r6, r1
 800ce30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce34:	2900      	cmp	r1, #0
 800ce36:	b096      	sub	sp, #88	; 0x58
 800ce38:	4614      	mov	r4, r2
 800ce3a:	461d      	mov	r5, r3
 800ce3c:	da07      	bge.n	800ce4e <__swhatbuf_r+0x22>
 800ce3e:	2300      	movs	r3, #0
 800ce40:	602b      	str	r3, [r5, #0]
 800ce42:	89b3      	ldrh	r3, [r6, #12]
 800ce44:	061a      	lsls	r2, r3, #24
 800ce46:	d410      	bmi.n	800ce6a <__swhatbuf_r+0x3e>
 800ce48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce4c:	e00e      	b.n	800ce6c <__swhatbuf_r+0x40>
 800ce4e:	466a      	mov	r2, sp
 800ce50:	f000 fbb0 	bl	800d5b4 <_fstat_r>
 800ce54:	2800      	cmp	r0, #0
 800ce56:	dbf2      	blt.n	800ce3e <__swhatbuf_r+0x12>
 800ce58:	9a01      	ldr	r2, [sp, #4]
 800ce5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ce5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ce62:	425a      	negs	r2, r3
 800ce64:	415a      	adcs	r2, r3
 800ce66:	602a      	str	r2, [r5, #0]
 800ce68:	e7ee      	b.n	800ce48 <__swhatbuf_r+0x1c>
 800ce6a:	2340      	movs	r3, #64	; 0x40
 800ce6c:	2000      	movs	r0, #0
 800ce6e:	6023      	str	r3, [r4, #0]
 800ce70:	b016      	add	sp, #88	; 0x58
 800ce72:	bd70      	pop	{r4, r5, r6, pc}

0800ce74 <__smakebuf_r>:
 800ce74:	898b      	ldrh	r3, [r1, #12]
 800ce76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ce78:	079d      	lsls	r5, r3, #30
 800ce7a:	4606      	mov	r6, r0
 800ce7c:	460c      	mov	r4, r1
 800ce7e:	d507      	bpl.n	800ce90 <__smakebuf_r+0x1c>
 800ce80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ce84:	6023      	str	r3, [r4, #0]
 800ce86:	6123      	str	r3, [r4, #16]
 800ce88:	2301      	movs	r3, #1
 800ce8a:	6163      	str	r3, [r4, #20]
 800ce8c:	b002      	add	sp, #8
 800ce8e:	bd70      	pop	{r4, r5, r6, pc}
 800ce90:	ab01      	add	r3, sp, #4
 800ce92:	466a      	mov	r2, sp
 800ce94:	f7ff ffca 	bl	800ce2c <__swhatbuf_r>
 800ce98:	9900      	ldr	r1, [sp, #0]
 800ce9a:	4605      	mov	r5, r0
 800ce9c:	4630      	mov	r0, r6
 800ce9e:	f7ff fc53 	bl	800c748 <_malloc_r>
 800cea2:	b948      	cbnz	r0, 800ceb8 <__smakebuf_r+0x44>
 800cea4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cea8:	059a      	lsls	r2, r3, #22
 800ceaa:	d4ef      	bmi.n	800ce8c <__smakebuf_r+0x18>
 800ceac:	f023 0303 	bic.w	r3, r3, #3
 800ceb0:	f043 0302 	orr.w	r3, r3, #2
 800ceb4:	81a3      	strh	r3, [r4, #12]
 800ceb6:	e7e3      	b.n	800ce80 <__smakebuf_r+0xc>
 800ceb8:	4b0d      	ldr	r3, [pc, #52]	; (800cef0 <__smakebuf_r+0x7c>)
 800ceba:	62b3      	str	r3, [r6, #40]	; 0x28
 800cebc:	89a3      	ldrh	r3, [r4, #12]
 800cebe:	6020      	str	r0, [r4, #0]
 800cec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cec4:	81a3      	strh	r3, [r4, #12]
 800cec6:	9b00      	ldr	r3, [sp, #0]
 800cec8:	6163      	str	r3, [r4, #20]
 800ceca:	9b01      	ldr	r3, [sp, #4]
 800cecc:	6120      	str	r0, [r4, #16]
 800cece:	b15b      	cbz	r3, 800cee8 <__smakebuf_r+0x74>
 800ced0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ced4:	4630      	mov	r0, r6
 800ced6:	f000 fb7f 	bl	800d5d8 <_isatty_r>
 800ceda:	b128      	cbz	r0, 800cee8 <__smakebuf_r+0x74>
 800cedc:	89a3      	ldrh	r3, [r4, #12]
 800cede:	f023 0303 	bic.w	r3, r3, #3
 800cee2:	f043 0301 	orr.w	r3, r3, #1
 800cee6:	81a3      	strh	r3, [r4, #12]
 800cee8:	89a0      	ldrh	r0, [r4, #12]
 800ceea:	4305      	orrs	r5, r0
 800ceec:	81a5      	strh	r5, [r4, #12]
 800ceee:	e7cd      	b.n	800ce8c <__smakebuf_r+0x18>
 800cef0:	0800cc85 	.word	0x0800cc85

0800cef4 <__malloc_lock>:
 800cef4:	4801      	ldr	r0, [pc, #4]	; (800cefc <__malloc_lock+0x8>)
 800cef6:	f7ff bf97 	b.w	800ce28 <__retarget_lock_acquire_recursive>
 800cefa:	bf00      	nop
 800cefc:	20000fe8 	.word	0x20000fe8

0800cf00 <__malloc_unlock>:
 800cf00:	4801      	ldr	r0, [pc, #4]	; (800cf08 <__malloc_unlock+0x8>)
 800cf02:	f7ff bf92 	b.w	800ce2a <__retarget_lock_release_recursive>
 800cf06:	bf00      	nop
 800cf08:	20000fe8 	.word	0x20000fe8

0800cf0c <__sfputc_r>:
 800cf0c:	6893      	ldr	r3, [r2, #8]
 800cf0e:	3b01      	subs	r3, #1
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	b410      	push	{r4}
 800cf14:	6093      	str	r3, [r2, #8]
 800cf16:	da08      	bge.n	800cf2a <__sfputc_r+0x1e>
 800cf18:	6994      	ldr	r4, [r2, #24]
 800cf1a:	42a3      	cmp	r3, r4
 800cf1c:	db01      	blt.n	800cf22 <__sfputc_r+0x16>
 800cf1e:	290a      	cmp	r1, #10
 800cf20:	d103      	bne.n	800cf2a <__sfputc_r+0x1e>
 800cf22:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf26:	f7ff bd07 	b.w	800c938 <__swbuf_r>
 800cf2a:	6813      	ldr	r3, [r2, #0]
 800cf2c:	1c58      	adds	r0, r3, #1
 800cf2e:	6010      	str	r0, [r2, #0]
 800cf30:	7019      	strb	r1, [r3, #0]
 800cf32:	4608      	mov	r0, r1
 800cf34:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf38:	4770      	bx	lr

0800cf3a <__sfputs_r>:
 800cf3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf3c:	4606      	mov	r6, r0
 800cf3e:	460f      	mov	r7, r1
 800cf40:	4614      	mov	r4, r2
 800cf42:	18d5      	adds	r5, r2, r3
 800cf44:	42ac      	cmp	r4, r5
 800cf46:	d101      	bne.n	800cf4c <__sfputs_r+0x12>
 800cf48:	2000      	movs	r0, #0
 800cf4a:	e007      	b.n	800cf5c <__sfputs_r+0x22>
 800cf4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf50:	463a      	mov	r2, r7
 800cf52:	4630      	mov	r0, r6
 800cf54:	f7ff ffda 	bl	800cf0c <__sfputc_r>
 800cf58:	1c43      	adds	r3, r0, #1
 800cf5a:	d1f3      	bne.n	800cf44 <__sfputs_r+0xa>
 800cf5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cf60 <_vfiprintf_r>:
 800cf60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf64:	460d      	mov	r5, r1
 800cf66:	b09d      	sub	sp, #116	; 0x74
 800cf68:	4614      	mov	r4, r2
 800cf6a:	4698      	mov	r8, r3
 800cf6c:	4606      	mov	r6, r0
 800cf6e:	b118      	cbz	r0, 800cf78 <_vfiprintf_r+0x18>
 800cf70:	6983      	ldr	r3, [r0, #24]
 800cf72:	b90b      	cbnz	r3, 800cf78 <_vfiprintf_r+0x18>
 800cf74:	f7ff feba 	bl	800ccec <__sinit>
 800cf78:	4b89      	ldr	r3, [pc, #548]	; (800d1a0 <_vfiprintf_r+0x240>)
 800cf7a:	429d      	cmp	r5, r3
 800cf7c:	d11b      	bne.n	800cfb6 <_vfiprintf_r+0x56>
 800cf7e:	6875      	ldr	r5, [r6, #4]
 800cf80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf82:	07d9      	lsls	r1, r3, #31
 800cf84:	d405      	bmi.n	800cf92 <_vfiprintf_r+0x32>
 800cf86:	89ab      	ldrh	r3, [r5, #12]
 800cf88:	059a      	lsls	r2, r3, #22
 800cf8a:	d402      	bmi.n	800cf92 <_vfiprintf_r+0x32>
 800cf8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf8e:	f7ff ff4b 	bl	800ce28 <__retarget_lock_acquire_recursive>
 800cf92:	89ab      	ldrh	r3, [r5, #12]
 800cf94:	071b      	lsls	r3, r3, #28
 800cf96:	d501      	bpl.n	800cf9c <_vfiprintf_r+0x3c>
 800cf98:	692b      	ldr	r3, [r5, #16]
 800cf9a:	b9eb      	cbnz	r3, 800cfd8 <_vfiprintf_r+0x78>
 800cf9c:	4629      	mov	r1, r5
 800cf9e:	4630      	mov	r0, r6
 800cfa0:	f7ff fd1c 	bl	800c9dc <__swsetup_r>
 800cfa4:	b1c0      	cbz	r0, 800cfd8 <_vfiprintf_r+0x78>
 800cfa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cfa8:	07dc      	lsls	r4, r3, #31
 800cfaa:	d50e      	bpl.n	800cfca <_vfiprintf_r+0x6a>
 800cfac:	f04f 30ff 	mov.w	r0, #4294967295
 800cfb0:	b01d      	add	sp, #116	; 0x74
 800cfb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfb6:	4b7b      	ldr	r3, [pc, #492]	; (800d1a4 <_vfiprintf_r+0x244>)
 800cfb8:	429d      	cmp	r5, r3
 800cfba:	d101      	bne.n	800cfc0 <_vfiprintf_r+0x60>
 800cfbc:	68b5      	ldr	r5, [r6, #8]
 800cfbe:	e7df      	b.n	800cf80 <_vfiprintf_r+0x20>
 800cfc0:	4b79      	ldr	r3, [pc, #484]	; (800d1a8 <_vfiprintf_r+0x248>)
 800cfc2:	429d      	cmp	r5, r3
 800cfc4:	bf08      	it	eq
 800cfc6:	68f5      	ldreq	r5, [r6, #12]
 800cfc8:	e7da      	b.n	800cf80 <_vfiprintf_r+0x20>
 800cfca:	89ab      	ldrh	r3, [r5, #12]
 800cfcc:	0598      	lsls	r0, r3, #22
 800cfce:	d4ed      	bmi.n	800cfac <_vfiprintf_r+0x4c>
 800cfd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cfd2:	f7ff ff2a 	bl	800ce2a <__retarget_lock_release_recursive>
 800cfd6:	e7e9      	b.n	800cfac <_vfiprintf_r+0x4c>
 800cfd8:	2300      	movs	r3, #0
 800cfda:	9309      	str	r3, [sp, #36]	; 0x24
 800cfdc:	2320      	movs	r3, #32
 800cfde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cfe2:	f8cd 800c 	str.w	r8, [sp, #12]
 800cfe6:	2330      	movs	r3, #48	; 0x30
 800cfe8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d1ac <_vfiprintf_r+0x24c>
 800cfec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cff0:	f04f 0901 	mov.w	r9, #1
 800cff4:	4623      	mov	r3, r4
 800cff6:	469a      	mov	sl, r3
 800cff8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cffc:	b10a      	cbz	r2, 800d002 <_vfiprintf_r+0xa2>
 800cffe:	2a25      	cmp	r2, #37	; 0x25
 800d000:	d1f9      	bne.n	800cff6 <_vfiprintf_r+0x96>
 800d002:	ebba 0b04 	subs.w	fp, sl, r4
 800d006:	d00b      	beq.n	800d020 <_vfiprintf_r+0xc0>
 800d008:	465b      	mov	r3, fp
 800d00a:	4622      	mov	r2, r4
 800d00c:	4629      	mov	r1, r5
 800d00e:	4630      	mov	r0, r6
 800d010:	f7ff ff93 	bl	800cf3a <__sfputs_r>
 800d014:	3001      	adds	r0, #1
 800d016:	f000 80aa 	beq.w	800d16e <_vfiprintf_r+0x20e>
 800d01a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d01c:	445a      	add	r2, fp
 800d01e:	9209      	str	r2, [sp, #36]	; 0x24
 800d020:	f89a 3000 	ldrb.w	r3, [sl]
 800d024:	2b00      	cmp	r3, #0
 800d026:	f000 80a2 	beq.w	800d16e <_vfiprintf_r+0x20e>
 800d02a:	2300      	movs	r3, #0
 800d02c:	f04f 32ff 	mov.w	r2, #4294967295
 800d030:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d034:	f10a 0a01 	add.w	sl, sl, #1
 800d038:	9304      	str	r3, [sp, #16]
 800d03a:	9307      	str	r3, [sp, #28]
 800d03c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d040:	931a      	str	r3, [sp, #104]	; 0x68
 800d042:	4654      	mov	r4, sl
 800d044:	2205      	movs	r2, #5
 800d046:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d04a:	4858      	ldr	r0, [pc, #352]	; (800d1ac <_vfiprintf_r+0x24c>)
 800d04c:	f7f3 f8c8 	bl	80001e0 <memchr>
 800d050:	9a04      	ldr	r2, [sp, #16]
 800d052:	b9d8      	cbnz	r0, 800d08c <_vfiprintf_r+0x12c>
 800d054:	06d1      	lsls	r1, r2, #27
 800d056:	bf44      	itt	mi
 800d058:	2320      	movmi	r3, #32
 800d05a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d05e:	0713      	lsls	r3, r2, #28
 800d060:	bf44      	itt	mi
 800d062:	232b      	movmi	r3, #43	; 0x2b
 800d064:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d068:	f89a 3000 	ldrb.w	r3, [sl]
 800d06c:	2b2a      	cmp	r3, #42	; 0x2a
 800d06e:	d015      	beq.n	800d09c <_vfiprintf_r+0x13c>
 800d070:	9a07      	ldr	r2, [sp, #28]
 800d072:	4654      	mov	r4, sl
 800d074:	2000      	movs	r0, #0
 800d076:	f04f 0c0a 	mov.w	ip, #10
 800d07a:	4621      	mov	r1, r4
 800d07c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d080:	3b30      	subs	r3, #48	; 0x30
 800d082:	2b09      	cmp	r3, #9
 800d084:	d94e      	bls.n	800d124 <_vfiprintf_r+0x1c4>
 800d086:	b1b0      	cbz	r0, 800d0b6 <_vfiprintf_r+0x156>
 800d088:	9207      	str	r2, [sp, #28]
 800d08a:	e014      	b.n	800d0b6 <_vfiprintf_r+0x156>
 800d08c:	eba0 0308 	sub.w	r3, r0, r8
 800d090:	fa09 f303 	lsl.w	r3, r9, r3
 800d094:	4313      	orrs	r3, r2
 800d096:	9304      	str	r3, [sp, #16]
 800d098:	46a2      	mov	sl, r4
 800d09a:	e7d2      	b.n	800d042 <_vfiprintf_r+0xe2>
 800d09c:	9b03      	ldr	r3, [sp, #12]
 800d09e:	1d19      	adds	r1, r3, #4
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	9103      	str	r1, [sp, #12]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	bfbb      	ittet	lt
 800d0a8:	425b      	neglt	r3, r3
 800d0aa:	f042 0202 	orrlt.w	r2, r2, #2
 800d0ae:	9307      	strge	r3, [sp, #28]
 800d0b0:	9307      	strlt	r3, [sp, #28]
 800d0b2:	bfb8      	it	lt
 800d0b4:	9204      	strlt	r2, [sp, #16]
 800d0b6:	7823      	ldrb	r3, [r4, #0]
 800d0b8:	2b2e      	cmp	r3, #46	; 0x2e
 800d0ba:	d10c      	bne.n	800d0d6 <_vfiprintf_r+0x176>
 800d0bc:	7863      	ldrb	r3, [r4, #1]
 800d0be:	2b2a      	cmp	r3, #42	; 0x2a
 800d0c0:	d135      	bne.n	800d12e <_vfiprintf_r+0x1ce>
 800d0c2:	9b03      	ldr	r3, [sp, #12]
 800d0c4:	1d1a      	adds	r2, r3, #4
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	9203      	str	r2, [sp, #12]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	bfb8      	it	lt
 800d0ce:	f04f 33ff 	movlt.w	r3, #4294967295
 800d0d2:	3402      	adds	r4, #2
 800d0d4:	9305      	str	r3, [sp, #20]
 800d0d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d1bc <_vfiprintf_r+0x25c>
 800d0da:	7821      	ldrb	r1, [r4, #0]
 800d0dc:	2203      	movs	r2, #3
 800d0de:	4650      	mov	r0, sl
 800d0e0:	f7f3 f87e 	bl	80001e0 <memchr>
 800d0e4:	b140      	cbz	r0, 800d0f8 <_vfiprintf_r+0x198>
 800d0e6:	2340      	movs	r3, #64	; 0x40
 800d0e8:	eba0 000a 	sub.w	r0, r0, sl
 800d0ec:	fa03 f000 	lsl.w	r0, r3, r0
 800d0f0:	9b04      	ldr	r3, [sp, #16]
 800d0f2:	4303      	orrs	r3, r0
 800d0f4:	3401      	adds	r4, #1
 800d0f6:	9304      	str	r3, [sp, #16]
 800d0f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0fc:	482c      	ldr	r0, [pc, #176]	; (800d1b0 <_vfiprintf_r+0x250>)
 800d0fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d102:	2206      	movs	r2, #6
 800d104:	f7f3 f86c 	bl	80001e0 <memchr>
 800d108:	2800      	cmp	r0, #0
 800d10a:	d03f      	beq.n	800d18c <_vfiprintf_r+0x22c>
 800d10c:	4b29      	ldr	r3, [pc, #164]	; (800d1b4 <_vfiprintf_r+0x254>)
 800d10e:	bb1b      	cbnz	r3, 800d158 <_vfiprintf_r+0x1f8>
 800d110:	9b03      	ldr	r3, [sp, #12]
 800d112:	3307      	adds	r3, #7
 800d114:	f023 0307 	bic.w	r3, r3, #7
 800d118:	3308      	adds	r3, #8
 800d11a:	9303      	str	r3, [sp, #12]
 800d11c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d11e:	443b      	add	r3, r7
 800d120:	9309      	str	r3, [sp, #36]	; 0x24
 800d122:	e767      	b.n	800cff4 <_vfiprintf_r+0x94>
 800d124:	fb0c 3202 	mla	r2, ip, r2, r3
 800d128:	460c      	mov	r4, r1
 800d12a:	2001      	movs	r0, #1
 800d12c:	e7a5      	b.n	800d07a <_vfiprintf_r+0x11a>
 800d12e:	2300      	movs	r3, #0
 800d130:	3401      	adds	r4, #1
 800d132:	9305      	str	r3, [sp, #20]
 800d134:	4619      	mov	r1, r3
 800d136:	f04f 0c0a 	mov.w	ip, #10
 800d13a:	4620      	mov	r0, r4
 800d13c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d140:	3a30      	subs	r2, #48	; 0x30
 800d142:	2a09      	cmp	r2, #9
 800d144:	d903      	bls.n	800d14e <_vfiprintf_r+0x1ee>
 800d146:	2b00      	cmp	r3, #0
 800d148:	d0c5      	beq.n	800d0d6 <_vfiprintf_r+0x176>
 800d14a:	9105      	str	r1, [sp, #20]
 800d14c:	e7c3      	b.n	800d0d6 <_vfiprintf_r+0x176>
 800d14e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d152:	4604      	mov	r4, r0
 800d154:	2301      	movs	r3, #1
 800d156:	e7f0      	b.n	800d13a <_vfiprintf_r+0x1da>
 800d158:	ab03      	add	r3, sp, #12
 800d15a:	9300      	str	r3, [sp, #0]
 800d15c:	462a      	mov	r2, r5
 800d15e:	4b16      	ldr	r3, [pc, #88]	; (800d1b8 <_vfiprintf_r+0x258>)
 800d160:	a904      	add	r1, sp, #16
 800d162:	4630      	mov	r0, r6
 800d164:	f3af 8000 	nop.w
 800d168:	4607      	mov	r7, r0
 800d16a:	1c78      	adds	r0, r7, #1
 800d16c:	d1d6      	bne.n	800d11c <_vfiprintf_r+0x1bc>
 800d16e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d170:	07d9      	lsls	r1, r3, #31
 800d172:	d405      	bmi.n	800d180 <_vfiprintf_r+0x220>
 800d174:	89ab      	ldrh	r3, [r5, #12]
 800d176:	059a      	lsls	r2, r3, #22
 800d178:	d402      	bmi.n	800d180 <_vfiprintf_r+0x220>
 800d17a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d17c:	f7ff fe55 	bl	800ce2a <__retarget_lock_release_recursive>
 800d180:	89ab      	ldrh	r3, [r5, #12]
 800d182:	065b      	lsls	r3, r3, #25
 800d184:	f53f af12 	bmi.w	800cfac <_vfiprintf_r+0x4c>
 800d188:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d18a:	e711      	b.n	800cfb0 <_vfiprintf_r+0x50>
 800d18c:	ab03      	add	r3, sp, #12
 800d18e:	9300      	str	r3, [sp, #0]
 800d190:	462a      	mov	r2, r5
 800d192:	4b09      	ldr	r3, [pc, #36]	; (800d1b8 <_vfiprintf_r+0x258>)
 800d194:	a904      	add	r1, sp, #16
 800d196:	4630      	mov	r0, r6
 800d198:	f000 f880 	bl	800d29c <_printf_i>
 800d19c:	e7e4      	b.n	800d168 <_vfiprintf_r+0x208>
 800d19e:	bf00      	nop
 800d1a0:	0801257c 	.word	0x0801257c
 800d1a4:	0801259c 	.word	0x0801259c
 800d1a8:	0801255c 	.word	0x0801255c
 800d1ac:	080125bc 	.word	0x080125bc
 800d1b0:	080125c6 	.word	0x080125c6
 800d1b4:	00000000 	.word	0x00000000
 800d1b8:	0800cf3b 	.word	0x0800cf3b
 800d1bc:	080125c2 	.word	0x080125c2

0800d1c0 <_printf_common>:
 800d1c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1c4:	4616      	mov	r6, r2
 800d1c6:	4699      	mov	r9, r3
 800d1c8:	688a      	ldr	r2, [r1, #8]
 800d1ca:	690b      	ldr	r3, [r1, #16]
 800d1cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d1d0:	4293      	cmp	r3, r2
 800d1d2:	bfb8      	it	lt
 800d1d4:	4613      	movlt	r3, r2
 800d1d6:	6033      	str	r3, [r6, #0]
 800d1d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d1dc:	4607      	mov	r7, r0
 800d1de:	460c      	mov	r4, r1
 800d1e0:	b10a      	cbz	r2, 800d1e6 <_printf_common+0x26>
 800d1e2:	3301      	adds	r3, #1
 800d1e4:	6033      	str	r3, [r6, #0]
 800d1e6:	6823      	ldr	r3, [r4, #0]
 800d1e8:	0699      	lsls	r1, r3, #26
 800d1ea:	bf42      	ittt	mi
 800d1ec:	6833      	ldrmi	r3, [r6, #0]
 800d1ee:	3302      	addmi	r3, #2
 800d1f0:	6033      	strmi	r3, [r6, #0]
 800d1f2:	6825      	ldr	r5, [r4, #0]
 800d1f4:	f015 0506 	ands.w	r5, r5, #6
 800d1f8:	d106      	bne.n	800d208 <_printf_common+0x48>
 800d1fa:	f104 0a19 	add.w	sl, r4, #25
 800d1fe:	68e3      	ldr	r3, [r4, #12]
 800d200:	6832      	ldr	r2, [r6, #0]
 800d202:	1a9b      	subs	r3, r3, r2
 800d204:	42ab      	cmp	r3, r5
 800d206:	dc26      	bgt.n	800d256 <_printf_common+0x96>
 800d208:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d20c:	1e13      	subs	r3, r2, #0
 800d20e:	6822      	ldr	r2, [r4, #0]
 800d210:	bf18      	it	ne
 800d212:	2301      	movne	r3, #1
 800d214:	0692      	lsls	r2, r2, #26
 800d216:	d42b      	bmi.n	800d270 <_printf_common+0xb0>
 800d218:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d21c:	4649      	mov	r1, r9
 800d21e:	4638      	mov	r0, r7
 800d220:	47c0      	blx	r8
 800d222:	3001      	adds	r0, #1
 800d224:	d01e      	beq.n	800d264 <_printf_common+0xa4>
 800d226:	6823      	ldr	r3, [r4, #0]
 800d228:	68e5      	ldr	r5, [r4, #12]
 800d22a:	6832      	ldr	r2, [r6, #0]
 800d22c:	f003 0306 	and.w	r3, r3, #6
 800d230:	2b04      	cmp	r3, #4
 800d232:	bf08      	it	eq
 800d234:	1aad      	subeq	r5, r5, r2
 800d236:	68a3      	ldr	r3, [r4, #8]
 800d238:	6922      	ldr	r2, [r4, #16]
 800d23a:	bf0c      	ite	eq
 800d23c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d240:	2500      	movne	r5, #0
 800d242:	4293      	cmp	r3, r2
 800d244:	bfc4      	itt	gt
 800d246:	1a9b      	subgt	r3, r3, r2
 800d248:	18ed      	addgt	r5, r5, r3
 800d24a:	2600      	movs	r6, #0
 800d24c:	341a      	adds	r4, #26
 800d24e:	42b5      	cmp	r5, r6
 800d250:	d11a      	bne.n	800d288 <_printf_common+0xc8>
 800d252:	2000      	movs	r0, #0
 800d254:	e008      	b.n	800d268 <_printf_common+0xa8>
 800d256:	2301      	movs	r3, #1
 800d258:	4652      	mov	r2, sl
 800d25a:	4649      	mov	r1, r9
 800d25c:	4638      	mov	r0, r7
 800d25e:	47c0      	blx	r8
 800d260:	3001      	adds	r0, #1
 800d262:	d103      	bne.n	800d26c <_printf_common+0xac>
 800d264:	f04f 30ff 	mov.w	r0, #4294967295
 800d268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d26c:	3501      	adds	r5, #1
 800d26e:	e7c6      	b.n	800d1fe <_printf_common+0x3e>
 800d270:	18e1      	adds	r1, r4, r3
 800d272:	1c5a      	adds	r2, r3, #1
 800d274:	2030      	movs	r0, #48	; 0x30
 800d276:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d27a:	4422      	add	r2, r4
 800d27c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d280:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d284:	3302      	adds	r3, #2
 800d286:	e7c7      	b.n	800d218 <_printf_common+0x58>
 800d288:	2301      	movs	r3, #1
 800d28a:	4622      	mov	r2, r4
 800d28c:	4649      	mov	r1, r9
 800d28e:	4638      	mov	r0, r7
 800d290:	47c0      	blx	r8
 800d292:	3001      	adds	r0, #1
 800d294:	d0e6      	beq.n	800d264 <_printf_common+0xa4>
 800d296:	3601      	adds	r6, #1
 800d298:	e7d9      	b.n	800d24e <_printf_common+0x8e>
	...

0800d29c <_printf_i>:
 800d29c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d2a0:	460c      	mov	r4, r1
 800d2a2:	4691      	mov	r9, r2
 800d2a4:	7e27      	ldrb	r7, [r4, #24]
 800d2a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d2a8:	2f78      	cmp	r7, #120	; 0x78
 800d2aa:	4680      	mov	r8, r0
 800d2ac:	469a      	mov	sl, r3
 800d2ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d2b2:	d807      	bhi.n	800d2c4 <_printf_i+0x28>
 800d2b4:	2f62      	cmp	r7, #98	; 0x62
 800d2b6:	d80a      	bhi.n	800d2ce <_printf_i+0x32>
 800d2b8:	2f00      	cmp	r7, #0
 800d2ba:	f000 80d8 	beq.w	800d46e <_printf_i+0x1d2>
 800d2be:	2f58      	cmp	r7, #88	; 0x58
 800d2c0:	f000 80a3 	beq.w	800d40a <_printf_i+0x16e>
 800d2c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d2c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d2cc:	e03a      	b.n	800d344 <_printf_i+0xa8>
 800d2ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d2d2:	2b15      	cmp	r3, #21
 800d2d4:	d8f6      	bhi.n	800d2c4 <_printf_i+0x28>
 800d2d6:	a001      	add	r0, pc, #4	; (adr r0, 800d2dc <_printf_i+0x40>)
 800d2d8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d2dc:	0800d335 	.word	0x0800d335
 800d2e0:	0800d349 	.word	0x0800d349
 800d2e4:	0800d2c5 	.word	0x0800d2c5
 800d2e8:	0800d2c5 	.word	0x0800d2c5
 800d2ec:	0800d2c5 	.word	0x0800d2c5
 800d2f0:	0800d2c5 	.word	0x0800d2c5
 800d2f4:	0800d349 	.word	0x0800d349
 800d2f8:	0800d2c5 	.word	0x0800d2c5
 800d2fc:	0800d2c5 	.word	0x0800d2c5
 800d300:	0800d2c5 	.word	0x0800d2c5
 800d304:	0800d2c5 	.word	0x0800d2c5
 800d308:	0800d455 	.word	0x0800d455
 800d30c:	0800d379 	.word	0x0800d379
 800d310:	0800d437 	.word	0x0800d437
 800d314:	0800d2c5 	.word	0x0800d2c5
 800d318:	0800d2c5 	.word	0x0800d2c5
 800d31c:	0800d477 	.word	0x0800d477
 800d320:	0800d2c5 	.word	0x0800d2c5
 800d324:	0800d379 	.word	0x0800d379
 800d328:	0800d2c5 	.word	0x0800d2c5
 800d32c:	0800d2c5 	.word	0x0800d2c5
 800d330:	0800d43f 	.word	0x0800d43f
 800d334:	680b      	ldr	r3, [r1, #0]
 800d336:	1d1a      	adds	r2, r3, #4
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	600a      	str	r2, [r1, #0]
 800d33c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d340:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d344:	2301      	movs	r3, #1
 800d346:	e0a3      	b.n	800d490 <_printf_i+0x1f4>
 800d348:	6825      	ldr	r5, [r4, #0]
 800d34a:	6808      	ldr	r0, [r1, #0]
 800d34c:	062e      	lsls	r6, r5, #24
 800d34e:	f100 0304 	add.w	r3, r0, #4
 800d352:	d50a      	bpl.n	800d36a <_printf_i+0xce>
 800d354:	6805      	ldr	r5, [r0, #0]
 800d356:	600b      	str	r3, [r1, #0]
 800d358:	2d00      	cmp	r5, #0
 800d35a:	da03      	bge.n	800d364 <_printf_i+0xc8>
 800d35c:	232d      	movs	r3, #45	; 0x2d
 800d35e:	426d      	negs	r5, r5
 800d360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d364:	485e      	ldr	r0, [pc, #376]	; (800d4e0 <_printf_i+0x244>)
 800d366:	230a      	movs	r3, #10
 800d368:	e019      	b.n	800d39e <_printf_i+0x102>
 800d36a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d36e:	6805      	ldr	r5, [r0, #0]
 800d370:	600b      	str	r3, [r1, #0]
 800d372:	bf18      	it	ne
 800d374:	b22d      	sxthne	r5, r5
 800d376:	e7ef      	b.n	800d358 <_printf_i+0xbc>
 800d378:	680b      	ldr	r3, [r1, #0]
 800d37a:	6825      	ldr	r5, [r4, #0]
 800d37c:	1d18      	adds	r0, r3, #4
 800d37e:	6008      	str	r0, [r1, #0]
 800d380:	0628      	lsls	r0, r5, #24
 800d382:	d501      	bpl.n	800d388 <_printf_i+0xec>
 800d384:	681d      	ldr	r5, [r3, #0]
 800d386:	e002      	b.n	800d38e <_printf_i+0xf2>
 800d388:	0669      	lsls	r1, r5, #25
 800d38a:	d5fb      	bpl.n	800d384 <_printf_i+0xe8>
 800d38c:	881d      	ldrh	r5, [r3, #0]
 800d38e:	4854      	ldr	r0, [pc, #336]	; (800d4e0 <_printf_i+0x244>)
 800d390:	2f6f      	cmp	r7, #111	; 0x6f
 800d392:	bf0c      	ite	eq
 800d394:	2308      	moveq	r3, #8
 800d396:	230a      	movne	r3, #10
 800d398:	2100      	movs	r1, #0
 800d39a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d39e:	6866      	ldr	r6, [r4, #4]
 800d3a0:	60a6      	str	r6, [r4, #8]
 800d3a2:	2e00      	cmp	r6, #0
 800d3a4:	bfa2      	ittt	ge
 800d3a6:	6821      	ldrge	r1, [r4, #0]
 800d3a8:	f021 0104 	bicge.w	r1, r1, #4
 800d3ac:	6021      	strge	r1, [r4, #0]
 800d3ae:	b90d      	cbnz	r5, 800d3b4 <_printf_i+0x118>
 800d3b0:	2e00      	cmp	r6, #0
 800d3b2:	d04d      	beq.n	800d450 <_printf_i+0x1b4>
 800d3b4:	4616      	mov	r6, r2
 800d3b6:	fbb5 f1f3 	udiv	r1, r5, r3
 800d3ba:	fb03 5711 	mls	r7, r3, r1, r5
 800d3be:	5dc7      	ldrb	r7, [r0, r7]
 800d3c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d3c4:	462f      	mov	r7, r5
 800d3c6:	42bb      	cmp	r3, r7
 800d3c8:	460d      	mov	r5, r1
 800d3ca:	d9f4      	bls.n	800d3b6 <_printf_i+0x11a>
 800d3cc:	2b08      	cmp	r3, #8
 800d3ce:	d10b      	bne.n	800d3e8 <_printf_i+0x14c>
 800d3d0:	6823      	ldr	r3, [r4, #0]
 800d3d2:	07df      	lsls	r7, r3, #31
 800d3d4:	d508      	bpl.n	800d3e8 <_printf_i+0x14c>
 800d3d6:	6923      	ldr	r3, [r4, #16]
 800d3d8:	6861      	ldr	r1, [r4, #4]
 800d3da:	4299      	cmp	r1, r3
 800d3dc:	bfde      	ittt	le
 800d3de:	2330      	movle	r3, #48	; 0x30
 800d3e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d3e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d3e8:	1b92      	subs	r2, r2, r6
 800d3ea:	6122      	str	r2, [r4, #16]
 800d3ec:	f8cd a000 	str.w	sl, [sp]
 800d3f0:	464b      	mov	r3, r9
 800d3f2:	aa03      	add	r2, sp, #12
 800d3f4:	4621      	mov	r1, r4
 800d3f6:	4640      	mov	r0, r8
 800d3f8:	f7ff fee2 	bl	800d1c0 <_printf_common>
 800d3fc:	3001      	adds	r0, #1
 800d3fe:	d14c      	bne.n	800d49a <_printf_i+0x1fe>
 800d400:	f04f 30ff 	mov.w	r0, #4294967295
 800d404:	b004      	add	sp, #16
 800d406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d40a:	4835      	ldr	r0, [pc, #212]	; (800d4e0 <_printf_i+0x244>)
 800d40c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d410:	6823      	ldr	r3, [r4, #0]
 800d412:	680e      	ldr	r6, [r1, #0]
 800d414:	061f      	lsls	r7, r3, #24
 800d416:	f856 5b04 	ldr.w	r5, [r6], #4
 800d41a:	600e      	str	r6, [r1, #0]
 800d41c:	d514      	bpl.n	800d448 <_printf_i+0x1ac>
 800d41e:	07d9      	lsls	r1, r3, #31
 800d420:	bf44      	itt	mi
 800d422:	f043 0320 	orrmi.w	r3, r3, #32
 800d426:	6023      	strmi	r3, [r4, #0]
 800d428:	b91d      	cbnz	r5, 800d432 <_printf_i+0x196>
 800d42a:	6823      	ldr	r3, [r4, #0]
 800d42c:	f023 0320 	bic.w	r3, r3, #32
 800d430:	6023      	str	r3, [r4, #0]
 800d432:	2310      	movs	r3, #16
 800d434:	e7b0      	b.n	800d398 <_printf_i+0xfc>
 800d436:	6823      	ldr	r3, [r4, #0]
 800d438:	f043 0320 	orr.w	r3, r3, #32
 800d43c:	6023      	str	r3, [r4, #0]
 800d43e:	2378      	movs	r3, #120	; 0x78
 800d440:	4828      	ldr	r0, [pc, #160]	; (800d4e4 <_printf_i+0x248>)
 800d442:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d446:	e7e3      	b.n	800d410 <_printf_i+0x174>
 800d448:	065e      	lsls	r6, r3, #25
 800d44a:	bf48      	it	mi
 800d44c:	b2ad      	uxthmi	r5, r5
 800d44e:	e7e6      	b.n	800d41e <_printf_i+0x182>
 800d450:	4616      	mov	r6, r2
 800d452:	e7bb      	b.n	800d3cc <_printf_i+0x130>
 800d454:	680b      	ldr	r3, [r1, #0]
 800d456:	6826      	ldr	r6, [r4, #0]
 800d458:	6960      	ldr	r0, [r4, #20]
 800d45a:	1d1d      	adds	r5, r3, #4
 800d45c:	600d      	str	r5, [r1, #0]
 800d45e:	0635      	lsls	r5, r6, #24
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	d501      	bpl.n	800d468 <_printf_i+0x1cc>
 800d464:	6018      	str	r0, [r3, #0]
 800d466:	e002      	b.n	800d46e <_printf_i+0x1d2>
 800d468:	0671      	lsls	r1, r6, #25
 800d46a:	d5fb      	bpl.n	800d464 <_printf_i+0x1c8>
 800d46c:	8018      	strh	r0, [r3, #0]
 800d46e:	2300      	movs	r3, #0
 800d470:	6123      	str	r3, [r4, #16]
 800d472:	4616      	mov	r6, r2
 800d474:	e7ba      	b.n	800d3ec <_printf_i+0x150>
 800d476:	680b      	ldr	r3, [r1, #0]
 800d478:	1d1a      	adds	r2, r3, #4
 800d47a:	600a      	str	r2, [r1, #0]
 800d47c:	681e      	ldr	r6, [r3, #0]
 800d47e:	6862      	ldr	r2, [r4, #4]
 800d480:	2100      	movs	r1, #0
 800d482:	4630      	mov	r0, r6
 800d484:	f7f2 feac 	bl	80001e0 <memchr>
 800d488:	b108      	cbz	r0, 800d48e <_printf_i+0x1f2>
 800d48a:	1b80      	subs	r0, r0, r6
 800d48c:	6060      	str	r0, [r4, #4]
 800d48e:	6863      	ldr	r3, [r4, #4]
 800d490:	6123      	str	r3, [r4, #16]
 800d492:	2300      	movs	r3, #0
 800d494:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d498:	e7a8      	b.n	800d3ec <_printf_i+0x150>
 800d49a:	6923      	ldr	r3, [r4, #16]
 800d49c:	4632      	mov	r2, r6
 800d49e:	4649      	mov	r1, r9
 800d4a0:	4640      	mov	r0, r8
 800d4a2:	47d0      	blx	sl
 800d4a4:	3001      	adds	r0, #1
 800d4a6:	d0ab      	beq.n	800d400 <_printf_i+0x164>
 800d4a8:	6823      	ldr	r3, [r4, #0]
 800d4aa:	079b      	lsls	r3, r3, #30
 800d4ac:	d413      	bmi.n	800d4d6 <_printf_i+0x23a>
 800d4ae:	68e0      	ldr	r0, [r4, #12]
 800d4b0:	9b03      	ldr	r3, [sp, #12]
 800d4b2:	4298      	cmp	r0, r3
 800d4b4:	bfb8      	it	lt
 800d4b6:	4618      	movlt	r0, r3
 800d4b8:	e7a4      	b.n	800d404 <_printf_i+0x168>
 800d4ba:	2301      	movs	r3, #1
 800d4bc:	4632      	mov	r2, r6
 800d4be:	4649      	mov	r1, r9
 800d4c0:	4640      	mov	r0, r8
 800d4c2:	47d0      	blx	sl
 800d4c4:	3001      	adds	r0, #1
 800d4c6:	d09b      	beq.n	800d400 <_printf_i+0x164>
 800d4c8:	3501      	adds	r5, #1
 800d4ca:	68e3      	ldr	r3, [r4, #12]
 800d4cc:	9903      	ldr	r1, [sp, #12]
 800d4ce:	1a5b      	subs	r3, r3, r1
 800d4d0:	42ab      	cmp	r3, r5
 800d4d2:	dcf2      	bgt.n	800d4ba <_printf_i+0x21e>
 800d4d4:	e7eb      	b.n	800d4ae <_printf_i+0x212>
 800d4d6:	2500      	movs	r5, #0
 800d4d8:	f104 0619 	add.w	r6, r4, #25
 800d4dc:	e7f5      	b.n	800d4ca <_printf_i+0x22e>
 800d4de:	bf00      	nop
 800d4e0:	080125cd 	.word	0x080125cd
 800d4e4:	080125de 	.word	0x080125de

0800d4e8 <__sread>:
 800d4e8:	b510      	push	{r4, lr}
 800d4ea:	460c      	mov	r4, r1
 800d4ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4f0:	f000 f894 	bl	800d61c <_read_r>
 800d4f4:	2800      	cmp	r0, #0
 800d4f6:	bfab      	itete	ge
 800d4f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d4fa:	89a3      	ldrhlt	r3, [r4, #12]
 800d4fc:	181b      	addge	r3, r3, r0
 800d4fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d502:	bfac      	ite	ge
 800d504:	6563      	strge	r3, [r4, #84]	; 0x54
 800d506:	81a3      	strhlt	r3, [r4, #12]
 800d508:	bd10      	pop	{r4, pc}

0800d50a <__swrite>:
 800d50a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d50e:	461f      	mov	r7, r3
 800d510:	898b      	ldrh	r3, [r1, #12]
 800d512:	05db      	lsls	r3, r3, #23
 800d514:	4605      	mov	r5, r0
 800d516:	460c      	mov	r4, r1
 800d518:	4616      	mov	r6, r2
 800d51a:	d505      	bpl.n	800d528 <__swrite+0x1e>
 800d51c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d520:	2302      	movs	r3, #2
 800d522:	2200      	movs	r2, #0
 800d524:	f000 f868 	bl	800d5f8 <_lseek_r>
 800d528:	89a3      	ldrh	r3, [r4, #12]
 800d52a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d52e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d532:	81a3      	strh	r3, [r4, #12]
 800d534:	4632      	mov	r2, r6
 800d536:	463b      	mov	r3, r7
 800d538:	4628      	mov	r0, r5
 800d53a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d53e:	f000 b817 	b.w	800d570 <_write_r>

0800d542 <__sseek>:
 800d542:	b510      	push	{r4, lr}
 800d544:	460c      	mov	r4, r1
 800d546:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d54a:	f000 f855 	bl	800d5f8 <_lseek_r>
 800d54e:	1c43      	adds	r3, r0, #1
 800d550:	89a3      	ldrh	r3, [r4, #12]
 800d552:	bf15      	itete	ne
 800d554:	6560      	strne	r0, [r4, #84]	; 0x54
 800d556:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d55a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d55e:	81a3      	strheq	r3, [r4, #12]
 800d560:	bf18      	it	ne
 800d562:	81a3      	strhne	r3, [r4, #12]
 800d564:	bd10      	pop	{r4, pc}

0800d566 <__sclose>:
 800d566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d56a:	f000 b813 	b.w	800d594 <_close_r>
	...

0800d570 <_write_r>:
 800d570:	b538      	push	{r3, r4, r5, lr}
 800d572:	4d07      	ldr	r5, [pc, #28]	; (800d590 <_write_r+0x20>)
 800d574:	4604      	mov	r4, r0
 800d576:	4608      	mov	r0, r1
 800d578:	4611      	mov	r1, r2
 800d57a:	2200      	movs	r2, #0
 800d57c:	602a      	str	r2, [r5, #0]
 800d57e:	461a      	mov	r2, r3
 800d580:	f7f6 ff3d 	bl	80043fe <_write>
 800d584:	1c43      	adds	r3, r0, #1
 800d586:	d102      	bne.n	800d58e <_write_r+0x1e>
 800d588:	682b      	ldr	r3, [r5, #0]
 800d58a:	b103      	cbz	r3, 800d58e <_write_r+0x1e>
 800d58c:	6023      	str	r3, [r4, #0]
 800d58e:	bd38      	pop	{r3, r4, r5, pc}
 800d590:	20000ff0 	.word	0x20000ff0

0800d594 <_close_r>:
 800d594:	b538      	push	{r3, r4, r5, lr}
 800d596:	4d06      	ldr	r5, [pc, #24]	; (800d5b0 <_close_r+0x1c>)
 800d598:	2300      	movs	r3, #0
 800d59a:	4604      	mov	r4, r0
 800d59c:	4608      	mov	r0, r1
 800d59e:	602b      	str	r3, [r5, #0]
 800d5a0:	f7f6 ff49 	bl	8004436 <_close>
 800d5a4:	1c43      	adds	r3, r0, #1
 800d5a6:	d102      	bne.n	800d5ae <_close_r+0x1a>
 800d5a8:	682b      	ldr	r3, [r5, #0]
 800d5aa:	b103      	cbz	r3, 800d5ae <_close_r+0x1a>
 800d5ac:	6023      	str	r3, [r4, #0]
 800d5ae:	bd38      	pop	{r3, r4, r5, pc}
 800d5b0:	20000ff0 	.word	0x20000ff0

0800d5b4 <_fstat_r>:
 800d5b4:	b538      	push	{r3, r4, r5, lr}
 800d5b6:	4d07      	ldr	r5, [pc, #28]	; (800d5d4 <_fstat_r+0x20>)
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	4604      	mov	r4, r0
 800d5bc:	4608      	mov	r0, r1
 800d5be:	4611      	mov	r1, r2
 800d5c0:	602b      	str	r3, [r5, #0]
 800d5c2:	f7f6 ff44 	bl	800444e <_fstat>
 800d5c6:	1c43      	adds	r3, r0, #1
 800d5c8:	d102      	bne.n	800d5d0 <_fstat_r+0x1c>
 800d5ca:	682b      	ldr	r3, [r5, #0]
 800d5cc:	b103      	cbz	r3, 800d5d0 <_fstat_r+0x1c>
 800d5ce:	6023      	str	r3, [r4, #0]
 800d5d0:	bd38      	pop	{r3, r4, r5, pc}
 800d5d2:	bf00      	nop
 800d5d4:	20000ff0 	.word	0x20000ff0

0800d5d8 <_isatty_r>:
 800d5d8:	b538      	push	{r3, r4, r5, lr}
 800d5da:	4d06      	ldr	r5, [pc, #24]	; (800d5f4 <_isatty_r+0x1c>)
 800d5dc:	2300      	movs	r3, #0
 800d5de:	4604      	mov	r4, r0
 800d5e0:	4608      	mov	r0, r1
 800d5e2:	602b      	str	r3, [r5, #0]
 800d5e4:	f7f6 ff43 	bl	800446e <_isatty>
 800d5e8:	1c43      	adds	r3, r0, #1
 800d5ea:	d102      	bne.n	800d5f2 <_isatty_r+0x1a>
 800d5ec:	682b      	ldr	r3, [r5, #0]
 800d5ee:	b103      	cbz	r3, 800d5f2 <_isatty_r+0x1a>
 800d5f0:	6023      	str	r3, [r4, #0]
 800d5f2:	bd38      	pop	{r3, r4, r5, pc}
 800d5f4:	20000ff0 	.word	0x20000ff0

0800d5f8 <_lseek_r>:
 800d5f8:	b538      	push	{r3, r4, r5, lr}
 800d5fa:	4d07      	ldr	r5, [pc, #28]	; (800d618 <_lseek_r+0x20>)
 800d5fc:	4604      	mov	r4, r0
 800d5fe:	4608      	mov	r0, r1
 800d600:	4611      	mov	r1, r2
 800d602:	2200      	movs	r2, #0
 800d604:	602a      	str	r2, [r5, #0]
 800d606:	461a      	mov	r2, r3
 800d608:	f7f6 ff3c 	bl	8004484 <_lseek>
 800d60c:	1c43      	adds	r3, r0, #1
 800d60e:	d102      	bne.n	800d616 <_lseek_r+0x1e>
 800d610:	682b      	ldr	r3, [r5, #0]
 800d612:	b103      	cbz	r3, 800d616 <_lseek_r+0x1e>
 800d614:	6023      	str	r3, [r4, #0]
 800d616:	bd38      	pop	{r3, r4, r5, pc}
 800d618:	20000ff0 	.word	0x20000ff0

0800d61c <_read_r>:
 800d61c:	b538      	push	{r3, r4, r5, lr}
 800d61e:	4d07      	ldr	r5, [pc, #28]	; (800d63c <_read_r+0x20>)
 800d620:	4604      	mov	r4, r0
 800d622:	4608      	mov	r0, r1
 800d624:	4611      	mov	r1, r2
 800d626:	2200      	movs	r2, #0
 800d628:	602a      	str	r2, [r5, #0]
 800d62a:	461a      	mov	r2, r3
 800d62c:	f7f6 feca 	bl	80043c4 <_read>
 800d630:	1c43      	adds	r3, r0, #1
 800d632:	d102      	bne.n	800d63a <_read_r+0x1e>
 800d634:	682b      	ldr	r3, [r5, #0]
 800d636:	b103      	cbz	r3, 800d63a <_read_r+0x1e>
 800d638:	6023      	str	r3, [r4, #0]
 800d63a:	bd38      	pop	{r3, r4, r5, pc}
 800d63c:	20000ff0 	.word	0x20000ff0

0800d640 <_init>:
 800d640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d642:	bf00      	nop
 800d644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d646:	bc08      	pop	{r3}
 800d648:	469e      	mov	lr, r3
 800d64a:	4770      	bx	lr

0800d64c <_fini>:
 800d64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d64e:	bf00      	nop
 800d650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d652:	bc08      	pop	{r3}
 800d654:	469e      	mov	lr, r3
 800d656:	4770      	bx	lr
